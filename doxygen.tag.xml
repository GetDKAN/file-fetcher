<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>README.md</name>
    <path>/home/fmizzell/Workspace/file-fetcher/</path>
    <filename>README_8md</filename>
  </compound>
  <compound kind="file">
    <name>README.md</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/doctrine/instantiator/</path>
    <filename>vendor_2doctrine_2instantiator_2README_8md</filename>
  </compound>
  <compound kind="file">
    <name>README.md</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/getdkan/contracts/</path>
    <filename>vendor_2getdkan_2contracts_2README_8md</filename>
  </compound>
  <compound kind="file">
    <name>README.md</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/getdkan/procrastinator/</path>
    <filename>vendor_2getdkan_2procrastinator_2README_8md</filename>
  </compound>
  <compound kind="file">
    <name>README.md</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/myclabs/deep-copy/</path>
    <filename>vendor_2myclabs_2deep-copy_2README_8md</filename>
  </compound>
  <compound kind="file">
    <name>README.md</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/</path>
    <filename>vendor_2phar-io_2manifest_2README_8md</filename>
  </compound>
  <compound kind="file">
    <name>README.md</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/version/</path>
    <filename>vendor_2phar-io_2version_2README_8md</filename>
  </compound>
  <compound kind="file">
    <name>README.md</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-common/</path>
    <filename>vendor_2phpdocumentor_2reflection-common_2README_8md</filename>
  </compound>
  <compound kind="file">
    <name>README.md</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/</path>
    <filename>vendor_2phpdocumentor_2reflection-docblock_2README_8md</filename>
  </compound>
  <compound kind="file">
    <name>README.md</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/type-resolver/</path>
    <filename>vendor_2phpdocumentor_2type-resolver_2README_8md</filename>
  </compound>
  <compound kind="file">
    <name>README.md</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/</path>
    <filename>vendor_2phpspec_2prophecy_2README_8md</filename>
  </compound>
  <compound kind="file">
    <name>README.md</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/</path>
    <filename>vendor_2phpunit_2php-code-coverage_2README_8md</filename>
  </compound>
  <compound kind="file">
    <name>README.md</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-file-iterator/</path>
    <filename>vendor_2phpunit_2php-file-iterator_2README_8md</filename>
  </compound>
  <compound kind="file">
    <name>README.md</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-text-template/</path>
    <filename>vendor_2phpunit_2php-text-template_2README_8md</filename>
  </compound>
  <compound kind="file">
    <name>README.md</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-timer/</path>
    <filename>vendor_2phpunit_2php-timer_2README_8md</filename>
  </compound>
  <compound kind="file">
    <name>README.md</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-token-stream/</path>
    <filename>vendor_2phpunit_2php-token-stream_2README_8md</filename>
  </compound>
  <compound kind="file">
    <name>README.md</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/</path>
    <filename>vendor_2phpunit_2phpunit_2README_8md</filename>
  </compound>
  <compound kind="file">
    <name>README.md</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/basic/</path>
    <filename>vendor_2phpunit_2phpunit_2tests_2basic_2README_8md</filename>
  </compound>
  <compound kind="file">
    <name>README.md</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/</path>
    <filename>vendor_2phpunit_2phpunit_2tests_2README_8md</filename>
  </compound>
  <compound kind="file">
    <name>README.md</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/code-unit-reverse-lookup/</path>
    <filename>vendor_2sebastian_2code-unit-reverse-lookup_2README_8md</filename>
  </compound>
  <compound kind="file">
    <name>README.md</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/comparator/</path>
    <filename>vendor_2sebastian_2comparator_2README_8md</filename>
  </compound>
  <compound kind="file">
    <name>README.md</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/diff/</path>
    <filename>vendor_2sebastian_2diff_2README_8md</filename>
  </compound>
  <compound kind="file">
    <name>README.md</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/environment/</path>
    <filename>vendor_2sebastian_2environment_2README_8md</filename>
  </compound>
  <compound kind="file">
    <name>README.md</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/exporter/</path>
    <filename>vendor_2sebastian_2exporter_2README_8md</filename>
  </compound>
  <compound kind="file">
    <name>README.md</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/global-state/</path>
    <filename>vendor_2sebastian_2global-state_2README_8md</filename>
  </compound>
  <compound kind="file">
    <name>README.md</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/object-enumerator/</path>
    <filename>vendor_2sebastian_2object-enumerator_2README_8md</filename>
  </compound>
  <compound kind="file">
    <name>README.md</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/object-reflector/</path>
    <filename>vendor_2sebastian_2object-reflector_2README_8md</filename>
  </compound>
  <compound kind="file">
    <name>README.md</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/recursion-context/</path>
    <filename>vendor_2sebastian_2recursion-context_2README_8md</filename>
  </compound>
  <compound kind="file">
    <name>README.md</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/resource-operations/</path>
    <filename>vendor_2sebastian_2resource-operations_2README_8md</filename>
  </compound>
  <compound kind="file">
    <name>README.md</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/type/</path>
    <filename>vendor_2sebastian_2type_2README_8md</filename>
  </compound>
  <compound kind="file">
    <name>README.md</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/version/</path>
    <filename>vendor_2sebastian_2version_2README_8md</filename>
  </compound>
  <compound kind="file">
    <name>README.md</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/symfony/polyfill-ctype/</path>
    <filename>vendor_2symfony_2polyfill-ctype_2README_8md</filename>
  </compound>
  <compound kind="file">
    <name>README.md</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/theseer/tokenizer/</path>
    <filename>vendor_2theseer_2tokenizer_2README_8md</filename>
  </compound>
  <compound kind="file">
    <name>README.md</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/webmozart/assert/</path>
    <filename>vendor_2webmozart_2assert_2README_8md</filename>
  </compound>
  <compound kind="file">
    <name>FileCopyInterruptedException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/src/</path>
    <filename>FileCopyInterruptedException_8php</filename>
    <class kind="class">FileFetcher::FileCopyInterruptedException</class>
    <namespace>FileFetcher</namespace>
  </compound>
  <compound kind="file">
    <name>FileFetcher.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/src/</path>
    <filename>FileFetcher_8php</filename>
    <class kind="class">FileFetcher::FileFetcher</class>
    <namespace>FileFetcher</namespace>
  </compound>
  <compound kind="file">
    <name>LastResortException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/src/</path>
    <filename>LastResortException_8php</filename>
    <class kind="class">FileFetcher::LastResortException</class>
    <namespace>FileFetcher</namespace>
  </compound>
  <compound kind="file">
    <name>LastResort.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/src/Processor/</path>
    <filename>LastResort_8php</filename>
    <class kind="class">FileFetcher::Processor::LastResort</class>
    <namespace>FileFetcher::Processor</namespace>
  </compound>
  <compound kind="file">
    <name>Local.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/src/Processor/</path>
    <filename>Local_8php</filename>
    <class kind="class">FileFetcher::Processor::Local</class>
    <namespace>FileFetcher::Processor</namespace>
  </compound>
  <compound kind="file">
    <name>ProcessorInterface.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/src/Processor/</path>
    <filename>ProcessorInterface_8php</filename>
    <class kind="interface">FileFetcher::Processor::ProcessorInterface</class>
    <namespace>FileFetcher::Processor</namespace>
  </compound>
  <compound kind="file">
    <name>Remote.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/src/Processor/</path>
    <filename>Remote_8php</filename>
    <class kind="class">FileFetcher::Processor::Remote</class>
    <namespace>FileFetcher::Processor</namespace>
  </compound>
  <compound kind="file">
    <name>TemporaryFilePathFromUrl.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/src/</path>
    <filename>TemporaryFilePathFromUrl_8php</filename>
    <namespace>FileFetcher</namespace>
  </compound>
  <compound kind="file">
    <name>FileFetcherTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/test/</path>
    <filename>FileFetcherTest_8php</filename>
    <class kind="class">FileFetcherTest::FileFetcherTest</class>
    <namespace>FileFetcherTest</namespace>
  </compound>
  <compound kind="file">
    <name>autoload.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/</path>
    <filename>autoload_8php</filename>
  </compound>
  <compound kind="file">
    <name>CONTRIBUTING.md</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/doctrine/instantiator/</path>
    <filename>CONTRIBUTING_8md</filename>
  </compound>
  <compound kind="file">
    <name>ExceptionInterface.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/doctrine/instantiator/src/Doctrine/Instantiator/Exception/</path>
    <filename>ExceptionInterface_8php</filename>
    <class kind="interface">Doctrine::Instantiator::Exception::ExceptionInterface</class>
    <namespace>Doctrine::Instantiator::Exception</namespace>
  </compound>
  <compound kind="file">
    <name>InvalidArgumentException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/doctrine/instantiator/src/Doctrine/Instantiator/Exception/</path>
    <filename>doctrine_2instantiator_2src_2Doctrine_2Instantiator_2Exception_2InvalidArgumentException_8php</filename>
    <class kind="class">Doctrine::Instantiator::Exception::InvalidArgumentException</class>
    <namespace>Doctrine::Instantiator::Exception</namespace>
  </compound>
  <compound kind="file">
    <name>InvalidArgumentException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Exception/</path>
    <filename>phpspec_2prophecy_2src_2Prophecy_2Exception_2InvalidArgumentException_8php</filename>
    <class kind="class">Prophecy::Exception::InvalidArgumentException</class>
    <namespace>Prophecy::Exception</namespace>
  </compound>
  <compound kind="file">
    <name>InvalidArgumentException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/src/Exception/</path>
    <filename>phpunit_2php-code-coverage_2src_2Exception_2InvalidArgumentException_8php</filename>
    <class kind="class">SebastianBergmann::CodeCoverage::InvalidArgumentException</class>
    <namespace>SebastianBergmann::CodeCoverage</namespace>
  </compound>
  <compound kind="file">
    <name>InvalidArgumentException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Exception/</path>
    <filename>phpunit_2phpunit_2src_2Framework_2Exception_2InvalidArgumentException_8php</filename>
    <class kind="class">PHPUnit::Framework::InvalidArgumentException</class>
    <namespace>PHPUnit::Framework</namespace>
  </compound>
  <compound kind="file">
    <name>InvalidArgumentException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/diff/src/Exception/</path>
    <filename>sebastian_2diff_2src_2Exception_2InvalidArgumentException_8php</filename>
    <class kind="class">SebastianBergmann::Diff::InvalidArgumentException</class>
    <namespace>SebastianBergmann::Diff</namespace>
  </compound>
  <compound kind="file">
    <name>InvalidArgumentException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/object-enumerator/src/</path>
    <filename>sebastian_2object-enumerator_2src_2InvalidArgumentException_8php</filename>
    <class kind="class">SebastianBergmann::ObjectEnumerator::InvalidArgumentException</class>
    <namespace>SebastianBergmann::ObjectEnumerator</namespace>
  </compound>
  <compound kind="file">
    <name>InvalidArgumentException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/object-reflector/src/</path>
    <filename>sebastian_2object-reflector_2src_2InvalidArgumentException_8php</filename>
    <class kind="class">SebastianBergmann::ObjectReflector::InvalidArgumentException</class>
    <namespace>SebastianBergmann::ObjectReflector</namespace>
  </compound>
  <compound kind="file">
    <name>InvalidArgumentException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/recursion-context/src/</path>
    <filename>sebastian_2recursion-context_2src_2InvalidArgumentException_8php</filename>
    <class kind="class">SebastianBergmann::RecursionContext::InvalidArgumentException</class>
    <namespace>SebastianBergmann::RecursionContext</namespace>
  </compound>
  <compound kind="file">
    <name>UnexpectedValueException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/doctrine/instantiator/src/Doctrine/Instantiator/Exception/</path>
    <filename>UnexpectedValueException_8php</filename>
    <class kind="class">Doctrine::Instantiator::Exception::UnexpectedValueException</class>
    <namespace>Doctrine::Instantiator::Exception</namespace>
  </compound>
  <compound kind="file">
    <name>Instantiator.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/doctrine/instantiator/src/Doctrine/Instantiator/</path>
    <filename>Instantiator_8php</filename>
    <class kind="class">Doctrine::Instantiator::Instantiator</class>
    <namespace>Doctrine::Instantiator</namespace>
  </compound>
  <compound kind="file">
    <name>InstantiatorInterface.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/doctrine/instantiator/src/Doctrine/Instantiator/</path>
    <filename>InstantiatorInterface_8php</filename>
    <class kind="interface">Doctrine::Instantiator::InstantiatorInterface</class>
    <namespace>Doctrine::Instantiator</namespace>
  </compound>
  <compound kind="file">
    <name>InstantiatorPerformanceEvent.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/doctrine/instantiator/tests/DoctrineTest/InstantiatorPerformance/</path>
    <filename>InstantiatorPerformanceEvent_8php</filename>
    <class kind="class">DoctrineTest::InstantiatorPerformance::InstantiatorPerformanceEvent</class>
    <namespace>DoctrineTest::InstantiatorPerformance</namespace>
  </compound>
  <compound kind="file">
    <name>InvalidArgumentExceptionTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/doctrine/instantiator/tests/DoctrineTest/InstantiatorTest/Exception/</path>
    <filename>doctrine_2instantiator_2tests_2DoctrineTest_2InstantiatorTest_2Exception_2InvalidArgumentExceptionTest_8php</filename>
    <class kind="class">DoctrineTest::InstantiatorTest::Exception::InvalidArgumentExceptionTest</class>
    <namespace>DoctrineTest::InstantiatorTest::Exception</namespace>
  </compound>
  <compound kind="file">
    <name>InvalidArgumentExceptionTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/Exception/</path>
    <filename>phpunit_2phpunit_2tests_2unit_2Framework_2Exception_2InvalidArgumentExceptionTest_8php</filename>
    <class kind="class">PHPUnit::Framework::InvalidArgumentExceptionTest</class>
    <namespace>PHPUnit::Framework</namespace>
  </compound>
  <compound kind="file">
    <name>InvalidArgumentExceptionTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/diff/tests/Exception/</path>
    <filename>sebastian_2diff_2tests_2Exception_2InvalidArgumentExceptionTest_8php</filename>
    <class kind="class">SebastianBergmann::Diff::InvalidArgumentExceptionTest</class>
    <namespace>SebastianBergmann::Diff</namespace>
  </compound>
  <compound kind="file">
    <name>UnexpectedValueExceptionTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/doctrine/instantiator/tests/DoctrineTest/InstantiatorTest/Exception/</path>
    <filename>UnexpectedValueExceptionTest_8php</filename>
    <class kind="class">DoctrineTest::InstantiatorTest::Exception::UnexpectedValueExceptionTest</class>
    <namespace>DoctrineTest::InstantiatorTest::Exception</namespace>
  </compound>
  <compound kind="file">
    <name>InstantiatorTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/doctrine/instantiator/tests/DoctrineTest/InstantiatorTest/</path>
    <filename>InstantiatorTest_8php</filename>
    <class kind="class">DoctrineTest::InstantiatorTest::InstantiatorTest</class>
    <namespace>DoctrineTest::InstantiatorTest</namespace>
  </compound>
  <compound kind="file">
    <name>AbstractClassAsset.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/doctrine/instantiator/tests/DoctrineTest/InstantiatorTestAsset/</path>
    <filename>AbstractClassAsset_8php</filename>
    <class kind="class">DoctrineTest::InstantiatorTestAsset::AbstractClassAsset</class>
    <namespace>DoctrineTest::InstantiatorTestAsset</namespace>
  </compound>
  <compound kind="file">
    <name>ArrayObjectAsset.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/doctrine/instantiator/tests/DoctrineTest/InstantiatorTestAsset/</path>
    <filename>ArrayObjectAsset_8php</filename>
    <class kind="class">DoctrineTest::InstantiatorTestAsset::ArrayObjectAsset</class>
    <namespace>DoctrineTest::InstantiatorTestAsset</namespace>
  </compound>
  <compound kind="file">
    <name>ExceptionAsset.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/doctrine/instantiator/tests/DoctrineTest/InstantiatorTestAsset/</path>
    <filename>ExceptionAsset_8php</filename>
    <class kind="class">DoctrineTest::InstantiatorTestAsset::ExceptionAsset</class>
    <namespace>DoctrineTest::InstantiatorTestAsset</namespace>
  </compound>
  <compound kind="file">
    <name>FinalExceptionAsset.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/doctrine/instantiator/tests/DoctrineTest/InstantiatorTestAsset/</path>
    <filename>FinalExceptionAsset_8php</filename>
    <class kind="class">DoctrineTest::InstantiatorTestAsset::FinalExceptionAsset</class>
    <namespace>DoctrineTest::InstantiatorTestAsset</namespace>
  </compound>
  <compound kind="file">
    <name>PharAsset.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/doctrine/instantiator/tests/DoctrineTest/InstantiatorTestAsset/</path>
    <filename>PharAsset_8php</filename>
    <class kind="class">DoctrineTest::InstantiatorTestAsset::PharAsset</class>
    <namespace>DoctrineTest::InstantiatorTestAsset</namespace>
  </compound>
  <compound kind="file">
    <name>PharExceptionAsset.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/doctrine/instantiator/tests/DoctrineTest/InstantiatorTestAsset/</path>
    <filename>PharExceptionAsset_8php</filename>
    <class kind="class">DoctrineTest::InstantiatorTestAsset::PharExceptionAsset</class>
    <namespace>DoctrineTest::InstantiatorTestAsset</namespace>
  </compound>
  <compound kind="file">
    <name>SerializableArrayObjectAsset.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/doctrine/instantiator/tests/DoctrineTest/InstantiatorTestAsset/</path>
    <filename>SerializableArrayObjectAsset_8php</filename>
    <class kind="class">DoctrineTest::InstantiatorTestAsset::SerializableArrayObjectAsset</class>
    <namespace>DoctrineTest::InstantiatorTestAsset</namespace>
  </compound>
  <compound kind="file">
    <name>SerializableFinalInternalChildAsset.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/doctrine/instantiator/tests/DoctrineTest/InstantiatorTestAsset/</path>
    <filename>SerializableFinalInternalChildAsset_8php</filename>
    <class kind="class">DoctrineTest::InstantiatorTestAsset::SerializableFinalInternalChildAsset</class>
    <namespace>DoctrineTest::InstantiatorTestAsset</namespace>
  </compound>
  <compound kind="file">
    <name>SimpleSerializableAsset.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/doctrine/instantiator/tests/DoctrineTest/InstantiatorTestAsset/</path>
    <filename>SimpleSerializableAsset_8php</filename>
    <class kind="class">DoctrineTest::InstantiatorTestAsset::SimpleSerializableAsset</class>
    <namespace>DoctrineTest::InstantiatorTestAsset</namespace>
  </compound>
  <compound kind="file">
    <name>SimpleTraitAsset.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/doctrine/instantiator/tests/DoctrineTest/InstantiatorTestAsset/</path>
    <filename>SimpleTraitAsset_8php</filename>
    <namespace>DoctrineTest::InstantiatorTestAsset</namespace>
  </compound>
  <compound kind="file">
    <name>UnCloneableAsset.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/doctrine/instantiator/tests/DoctrineTest/InstantiatorTestAsset/</path>
    <filename>UnCloneableAsset_8php</filename>
    <class kind="class">DoctrineTest::InstantiatorTestAsset::UnCloneableAsset</class>
    <namespace>DoctrineTest::InstantiatorTestAsset</namespace>
  </compound>
  <compound kind="file">
    <name>UnserializeExceptionArrayObjectAsset.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/doctrine/instantiator/tests/DoctrineTest/InstantiatorTestAsset/</path>
    <filename>UnserializeExceptionArrayObjectAsset_8php</filename>
    <class kind="class">DoctrineTest::InstantiatorTestAsset::UnserializeExceptionArrayObjectAsset</class>
    <namespace>DoctrineTest::InstantiatorTestAsset</namespace>
  </compound>
  <compound kind="file">
    <name>WakeUpNoticesAsset.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/doctrine/instantiator/tests/DoctrineTest/InstantiatorTestAsset/</path>
    <filename>WakeUpNoticesAsset_8php</filename>
    <class kind="class">DoctrineTest::InstantiatorTestAsset::WakeUpNoticesAsset</class>
    <namespace>DoctrineTest::InstantiatorTestAsset</namespace>
  </compound>
  <compound kind="file">
    <name>XMLReaderAsset.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/doctrine/instantiator/tests/DoctrineTest/InstantiatorTestAsset/</path>
    <filename>XMLReaderAsset_8php</filename>
    <class kind="class">DoctrineTest::InstantiatorTestAsset::XMLReaderAsset</class>
    <namespace>DoctrineTest::InstantiatorTestAsset</namespace>
  </compound>
  <compound kind="file">
    <name>BulkRetrieverInterface.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/getdkan/contracts/src/</path>
    <filename>BulkRetrieverInterface_8php</filename>
    <class kind="interface">Contracts::BulkRetrieverInterface</class>
    <namespace>Contracts</namespace>
  </compound>
  <compound kind="file">
    <name>BulkStorerInterface.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/getdkan/contracts/src/</path>
    <filename>BulkStorerInterface_8php</filename>
    <class kind="interface">Contracts::BulkStorerInterface</class>
    <namespace>Contracts</namespace>
  </compound>
  <compound kind="file">
    <name>ConditionerInterface.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/getdkan/contracts/src/</path>
    <filename>ConditionerInterface_8php</filename>
    <class kind="interface">Contracts::ConditionerInterface</class>
    <namespace>Contracts</namespace>
  </compound>
  <compound kind="file">
    <name>CountableInterface.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/getdkan/contracts/src/</path>
    <filename>CountableInterface_8php</filename>
    <class kind="interface">Contracts::CountableInterface</class>
    <namespace>Contracts</namespace>
  </compound>
  <compound kind="file">
    <name>FactoryInterface.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/getdkan/contracts/src/</path>
    <filename>FactoryInterface_8php</filename>
    <class kind="interface">Contracts::FactoryInterface</class>
    <namespace>Contracts</namespace>
  </compound>
  <compound kind="file">
    <name>HydratableInterface.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/getdkan/contracts/src/</path>
    <filename>HydratableInterface_8php</filename>
    <class kind="interface">Contracts::HydratableInterface</class>
    <namespace>Contracts</namespace>
  </compound>
  <compound kind="file">
    <name>IdGeneratorInterface.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/getdkan/contracts/src/</path>
    <filename>IdGeneratorInterface_8php</filename>
    <class kind="interface">Contracts::IdGeneratorInterface</class>
    <namespace>Contracts</namespace>
  </compound>
  <compound kind="file">
    <name>LimiterInterface.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/getdkan/contracts/src/</path>
    <filename>LimiterInterface_8php</filename>
    <class kind="interface">Contracts::LimiterInterface</class>
    <namespace>Contracts</namespace>
  </compound>
  <compound kind="file">
    <name>Sequential.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/getdkan/contracts/src/Mock/IdGenerator/</path>
    <filename>Sequential_8php</filename>
    <class kind="class">Contracts::Mock::IdGenerator::Sequential</class>
    <namespace>Contracts::Mock::IdGenerator</namespace>
  </compound>
  <compound kind="file">
    <name>JsonObjectMemory.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/getdkan/contracts/src/Mock/Storage/</path>
    <filename>JsonObjectMemory_8php</filename>
    <class kind="class">Contracts::Mock::Storage::JsonObjectMemory</class>
    <namespace>Contracts::Mock::Storage</namespace>
  </compound>
  <compound kind="file">
    <name>Memory.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/getdkan/contracts/src/Mock/Storage/</path>
    <filename>Memory_8php</filename>
    <class kind="class">Contracts::Mock::Storage::Memory</class>
    <namespace>Contracts::Mock::Storage</namespace>
  </compound>
  <compound kind="file">
    <name>MemoryFactory.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/getdkan/contracts/src/Mock/Storage/</path>
    <filename>MemoryFactory_8php</filename>
    <class kind="class">Contracts::Mock::Storage::MemoryFactory</class>
    <namespace>Contracts::Mock::Storage</namespace>
  </compound>
  <compound kind="file">
    <name>OffsetterInterface.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/getdkan/contracts/src/</path>
    <filename>OffsetterInterface_8php</filename>
    <class kind="interface">Contracts::OffsetterInterface</class>
    <namespace>Contracts</namespace>
  </compound>
  <compound kind="file">
    <name>ParserInterface.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/getdkan/contracts/src/</path>
    <filename>ParserInterface_8php</filename>
    <class kind="interface">Contracts::ParserInterface</class>
    <namespace>Contracts</namespace>
  </compound>
  <compound kind="file">
    <name>RemoverInterface.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/getdkan/contracts/src/</path>
    <filename>RemoverInterface_8php</filename>
    <class kind="interface">Contracts::RemoverInterface</class>
    <namespace>Contracts</namespace>
  </compound>
  <compound kind="file">
    <name>RetrieverInterface.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/getdkan/contracts/src/</path>
    <filename>RetrieverInterface_8php</filename>
    <class kind="interface">Contracts::RetrieverInterface</class>
    <namespace>Contracts</namespace>
  </compound>
  <compound kind="file">
    <name>SorterInterface.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/getdkan/contracts/src/</path>
    <filename>SorterInterface_8php</filename>
    <class kind="interface">Contracts::SorterInterface</class>
    <namespace>Contracts</namespace>
  </compound>
  <compound kind="file">
    <name>StorerInterface.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/getdkan/contracts/src/</path>
    <filename>StorerInterface_8php</filename>
    <class kind="interface">Contracts::StorerInterface</class>
    <namespace>Contracts</namespace>
  </compound>
  <compound kind="file">
    <name>SequentialTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/getdkan/contracts/test/Mock/IdGenerator/</path>
    <filename>SequentialTest_8php</filename>
    <class kind="class">ContractsTest::Mock::IdGenerator::SequentialTest</class>
    <namespace>ContractsTest::Mock::IdGenerator</namespace>
  </compound>
  <compound kind="file">
    <name>MemoryTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/getdkan/contracts/test/Mock/Storage/</path>
    <filename>MemoryTest_8php</filename>
    <class kind="class">ContractsTest::MemoryTest</class>
    <namespace>ContractsTest</namespace>
  </compound>
  <compound kind="file">
    <name>HydratableTrait.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/getdkan/procrastinator/src/</path>
    <filename>HydratableTrait_8php</filename>
    <namespace>Procrastinator</namespace>
  </compound>
  <compound kind="file">
    <name>AbstractPersistentJob.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/getdkan/procrastinator/src/Job/</path>
    <filename>AbstractPersistentJob_8php</filename>
    <class kind="class">Procrastinator::Job::AbstractPersistentJob</class>
    <namespace>Procrastinator::Job</namespace>
  </compound>
  <compound kind="file">
    <name>Job.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/getdkan/procrastinator/src/Job/</path>
    <filename>Job_8php</filename>
    <namespace>Procrastinator::Job</namespace>
  </compound>
  <compound kind="file">
    <name>Method.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/getdkan/procrastinator/src/Job/</path>
    <filename>getdkan_2procrastinator_2src_2Job_2Method_8php</filename>
    <namespace>Procrastinator::Job</namespace>
  </compound>
  <compound kind="file">
    <name>Method.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/src/DocBlock/Tags/</path>
    <filename>phpdocumentor_2reflection-docblock_2src_2DocBlock_2Tags_2Method_8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::Method</class>
    <namespace>phpDocumentor::Reflection::DocBlock::Tags</namespace>
  </compound>
  <compound kind="file">
    <name>Method.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/src/Report/Xml/</path>
    <filename>phpunit_2php-code-coverage_2src_2Report_2Xml_2Method_8php</filename>
    <class kind="class">SebastianBergmann::CodeCoverage::Report::Xml::Method</class>
    <namespace>SebastianBergmann::CodeCoverage::Report::Xml</namespace>
  </compound>
  <compound kind="file">
    <name>Method.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/MockObject/Api/</path>
    <filename>phpunit_2phpunit_2src_2Framework_2MockObject_2Api_2Method_8php</filename>
    <namespace>PHPUnit::Framework::MockObject</namespace>
  </compound>
  <compound kind="file">
    <name>JsonSerializeTrait.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/getdkan/procrastinator/src/</path>
    <filename>JsonSerializeTrait_8php</filename>
    <namespace>Procrastinator</namespace>
  </compound>
  <compound kind="file">
    <name>Result.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/getdkan/procrastinator/src/</path>
    <filename>Result_8php</filename>
    <namespace>Procrastinator</namespace>
  </compound>
  <compound kind="file">
    <name>A.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/myclabs/deep-copy/fixtures/f001/</path>
    <filename>f001_2A_8php</filename>
    <class kind="class">DeepCopy::f001::A</class>
    <namespace>DeepCopy::f001</namespace>
  </compound>
  <compound kind="file">
    <name>A.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/myclabs/deep-copy/fixtures/f002/</path>
    <filename>f002_2A_8php</filename>
    <class kind="class">DeepCopy::f002::A</class>
    <namespace>DeepCopy::f002</namespace>
  </compound>
  <compound kind="file">
    <name>A.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/myclabs/deep-copy/fixtures/f006/</path>
    <filename>f006_2A_8php</filename>
    <class kind="class">DeepCopy::f006::A</class>
    <namespace>DeepCopy::f006</namespace>
  </compound>
  <compound kind="file">
    <name>A.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/myclabs/deep-copy/fixtures/f008/</path>
    <filename>f008_2A_8php</filename>
    <class kind="class">DeepCopy::f008::A</class>
    <namespace>DeepCopy::f008</namespace>
  </compound>
  <compound kind="file">
    <name>B.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/myclabs/deep-copy/fixtures/f001/</path>
    <filename>f001_2B_8php</filename>
    <class kind="class">DeepCopy::f001::B</class>
    <namespace>DeepCopy::f001</namespace>
  </compound>
  <compound kind="file">
    <name>B.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/myclabs/deep-copy/fixtures/f006/</path>
    <filename>f006_2B_8php</filename>
    <class kind="class">DeepCopy::f006::B</class>
    <namespace>DeepCopy::f006</namespace>
  </compound>
  <compound kind="file">
    <name>B.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/myclabs/deep-copy/fixtures/f008/</path>
    <filename>f008_2B_8php</filename>
    <class kind="class">DeepCopy::f008::B</class>
    <namespace>DeepCopy::f008</namespace>
  </compound>
  <compound kind="file">
    <name>Foo.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/myclabs/deep-copy/fixtures/f003/</path>
    <filename>myclabs_2deep-copy_2fixtures_2f003_2Foo_8php</filename>
    <class kind="class">DeepCopy::f003::Foo</class>
    <namespace>DeepCopy::f003</namespace>
  </compound>
  <compound kind="file">
    <name>Foo.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/myclabs/deep-copy/fixtures/f005/</path>
    <filename>myclabs_2deep-copy_2fixtures_2f005_2Foo_8php</filename>
    <class kind="class">DeepCopy::f005::Foo</class>
    <namespace>DeepCopy::f005</namespace>
  </compound>
  <compound kind="file">
    <name>Foo.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>phpunit_2phpunit_2tests_2__files_2Foo_8php</filename>
    <class kind="class">Foo</class>
  </compound>
  <compound kind="file">
    <name>UnclonableItem.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/myclabs/deep-copy/fixtures/f004/</path>
    <filename>UnclonableItem_8php</filename>
    <class kind="class">DeepCopy::f004::UnclonableItem</class>
    <namespace>DeepCopy::f004</namespace>
  </compound>
  <compound kind="file">
    <name>FooDateInterval.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/myclabs/deep-copy/fixtures/f007/</path>
    <filename>FooDateInterval_8php</filename>
    <class kind="class">DeepCopy::f007::FooDateInterval</class>
    <namespace>DeepCopy::f007</namespace>
  </compound>
  <compound kind="file">
    <name>FooDateTimeZone.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/myclabs/deep-copy/fixtures/f007/</path>
    <filename>FooDateTimeZone_8php</filename>
    <class kind="class">DeepCopy::f007::FooDateTimeZone</class>
    <namespace>DeepCopy::f007</namespace>
  </compound>
  <compound kind="file">
    <name>TypedProperty.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/myclabs/deep-copy/fixtures/f009/</path>
    <filename>TypedProperty_8php</filename>
    <class kind="class">DeepCopy::f009::TypedProperty</class>
    <namespace>DeepCopy::f009</namespace>
  </compound>
  <compound kind="file">
    <name>ArrayObjectExtended.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/myclabs/deep-copy/fixtures/f011/</path>
    <filename>ArrayObjectExtended_8php</filename>
    <class kind="class">DeepCopy::f011::ArrayObjectExtended</class>
    <namespace>DeepCopy::f011</namespace>
  </compound>
  <compound kind="file">
    <name>deep_copy.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/myclabs/deep-copy/src/DeepCopy/</path>
    <filename>deep__copy_8php</filename>
    <namespace>DeepCopy</namespace>
  </compound>
  <compound kind="file">
    <name>DeepCopy.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/myclabs/deep-copy/src/DeepCopy/</path>
    <filename>DeepCopy_8php</filename>
    <class kind="class">DeepCopy::DeepCopy</class>
    <namespace>DeepCopy</namespace>
  </compound>
  <compound kind="file">
    <name>CloneException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/myclabs/deep-copy/src/DeepCopy/Exception/</path>
    <filename>CloneException_8php</filename>
    <class kind="class">DeepCopy::Exception::CloneException</class>
    <namespace>DeepCopy::Exception</namespace>
  </compound>
  <compound kind="file">
    <name>PropertyException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/myclabs/deep-copy/src/DeepCopy/Exception/</path>
    <filename>PropertyException_8php</filename>
    <class kind="class">DeepCopy::Exception::PropertyException</class>
    <namespace>DeepCopy::Exception</namespace>
  </compound>
  <compound kind="file">
    <name>DoctrineCollectionFilter.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/myclabs/deep-copy/src/DeepCopy/Filter/Doctrine/</path>
    <filename>DoctrineCollectionFilter_8php</filename>
    <class kind="class">DeepCopy::Filter::Doctrine::DoctrineCollectionFilter</class>
    <namespace>DeepCopy::Filter::Doctrine</namespace>
  </compound>
  <compound kind="file">
    <name>DoctrineEmptyCollectionFilter.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/myclabs/deep-copy/src/DeepCopy/Filter/Doctrine/</path>
    <filename>DoctrineEmptyCollectionFilter_8php</filename>
    <class kind="class">DeepCopy::Filter::Doctrine::DoctrineEmptyCollectionFilter</class>
    <namespace>DeepCopy::Filter::Doctrine</namespace>
  </compound>
  <compound kind="file">
    <name>DoctrineProxyFilter.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/myclabs/deep-copy/src/DeepCopy/Filter/Doctrine/</path>
    <filename>DoctrineProxyFilter_8php</filename>
    <class kind="class">DeepCopy::Filter::Doctrine::DoctrineProxyFilter</class>
    <namespace>DeepCopy::Filter::Doctrine</namespace>
  </compound>
  <compound kind="file">
    <name>Filter.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/myclabs/deep-copy/src/DeepCopy/Filter/</path>
    <filename>myclabs_2deep-copy_2src_2DeepCopy_2Filter_2Filter_8php</filename>
    <class kind="interface">DeepCopy::Filter::Filter</class>
    <namespace>DeepCopy::Filter</namespace>
  </compound>
  <compound kind="file">
    <name>Filter.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/src/</path>
    <filename>phpunit_2php-code-coverage_2src_2Filter_8php</filename>
    <class kind="class">SebastianBergmann::CodeCoverage::Filter</class>
    <namespace>SebastianBergmann::CodeCoverage</namespace>
  </compound>
  <compound kind="file">
    <name>Filter.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Util/</path>
    <filename>phpunit_2phpunit_2src_2Util_2Filter_8php</filename>
    <class kind="class">PHPUnit::Util::Filter</class>
    <namespace>PHPUnit::Util</namespace>
  </compound>
  <compound kind="file">
    <name>KeepFilter.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/myclabs/deep-copy/src/DeepCopy/Filter/</path>
    <filename>KeepFilter_8php</filename>
    <class kind="class">DeepCopy::Filter::KeepFilter</class>
    <namespace>DeepCopy::Filter</namespace>
  </compound>
  <compound kind="file">
    <name>ReplaceFilter.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/myclabs/deep-copy/src/DeepCopy/Filter/</path>
    <filename>Filter_2ReplaceFilter_8php</filename>
    <class kind="class">DeepCopy::Filter::ReplaceFilter</class>
    <namespace>DeepCopy::Filter</namespace>
  </compound>
  <compound kind="file">
    <name>ReplaceFilter.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/myclabs/deep-copy/src/DeepCopy/TypeFilter/</path>
    <filename>TypeFilter_2ReplaceFilter_8php</filename>
    <class kind="class">DeepCopy::TypeFilter::ReplaceFilter</class>
    <namespace>DeepCopy::TypeFilter</namespace>
  </compound>
  <compound kind="file">
    <name>SetNullFilter.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/myclabs/deep-copy/src/DeepCopy/Filter/</path>
    <filename>SetNullFilter_8php</filename>
    <class kind="class">DeepCopy::Filter::SetNullFilter</class>
    <namespace>DeepCopy::Filter</namespace>
  </compound>
  <compound kind="file">
    <name>DoctrineProxyMatcher.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/myclabs/deep-copy/src/DeepCopy/Matcher/Doctrine/</path>
    <filename>DoctrineProxyMatcher_8php</filename>
    <class kind="class">DeepCopy::Matcher::Doctrine::DoctrineProxyMatcher</class>
    <namespace>DeepCopy::Matcher::Doctrine</namespace>
  </compound>
  <compound kind="file">
    <name>Matcher.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/myclabs/deep-copy/src/DeepCopy/Matcher/</path>
    <filename>myclabs_2deep-copy_2src_2DeepCopy_2Matcher_2Matcher_8php</filename>
    <class kind="interface">DeepCopy::Matcher::Matcher</class>
    <namespace>DeepCopy::Matcher</namespace>
  </compound>
  <compound kind="file">
    <name>Matcher.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/MockObject/</path>
    <filename>phpunit_2phpunit_2src_2Framework_2MockObject_2Matcher_8php</filename>
    <class kind="class">PHPUnit::Framework::MockObject::Matcher</class>
    <namespace>PHPUnit::Framework::MockObject</namespace>
  </compound>
  <compound kind="file">
    <name>PropertyMatcher.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/myclabs/deep-copy/src/DeepCopy/Matcher/</path>
    <filename>PropertyMatcher_8php</filename>
    <class kind="class">DeepCopy::Matcher::PropertyMatcher</class>
    <namespace>DeepCopy::Matcher</namespace>
  </compound>
  <compound kind="file">
    <name>PropertyNameMatcher.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/myclabs/deep-copy/src/DeepCopy/Matcher/</path>
    <filename>PropertyNameMatcher_8php</filename>
    <class kind="class">DeepCopy::Matcher::PropertyNameMatcher</class>
    <namespace>DeepCopy::Matcher</namespace>
  </compound>
  <compound kind="file">
    <name>PropertyTypeMatcher.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/myclabs/deep-copy/src/DeepCopy/Matcher/</path>
    <filename>PropertyTypeMatcher_8php</filename>
    <class kind="class">DeepCopy::Matcher::PropertyTypeMatcher</class>
    <namespace>DeepCopy::Matcher</namespace>
  </compound>
  <compound kind="file">
    <name>ReflectionHelper.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/myclabs/deep-copy/src/DeepCopy/Reflection/</path>
    <filename>ReflectionHelper_8php</filename>
    <class kind="class">DeepCopy::Reflection::ReflectionHelper</class>
    <namespace>DeepCopy::Reflection</namespace>
  </compound>
  <compound kind="file">
    <name>DateIntervalFilter.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/myclabs/deep-copy/src/DeepCopy/TypeFilter/Date/</path>
    <filename>DateIntervalFilter_8php</filename>
    <class kind="class">DeepCopy::TypeFilter::Date::DateIntervalFilter</class>
    <namespace>DeepCopy::TypeFilter::Date</namespace>
  </compound>
  <compound kind="file">
    <name>ShallowCopyFilter.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/myclabs/deep-copy/src/DeepCopy/TypeFilter/</path>
    <filename>ShallowCopyFilter_8php</filename>
    <class kind="class">DeepCopy::TypeFilter::ShallowCopyFilter</class>
    <namespace>DeepCopy::TypeFilter</namespace>
  </compound>
  <compound kind="file">
    <name>ArrayObjectFilter.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/myclabs/deep-copy/src/DeepCopy/TypeFilter/Spl/</path>
    <filename>ArrayObjectFilter_8php</filename>
    <class kind="class">DeepCopy::TypeFilter::Spl::ArrayObjectFilter</class>
    <namespace>DeepCopy::TypeFilter::Spl</namespace>
  </compound>
  <compound kind="file">
    <name>SplDoublyLinkedList.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/myclabs/deep-copy/src/DeepCopy/TypeFilter/Spl/</path>
    <filename>SplDoublyLinkedList_8php</filename>
    <class kind="class">DeepCopy::TypeFilter::Spl::SplDoublyLinkedList</class>
    <namespace>DeepCopy::TypeFilter::Spl</namespace>
  </compound>
  <compound kind="file">
    <name>SplDoublyLinkedListFilter.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/myclabs/deep-copy/src/DeepCopy/TypeFilter/Spl/</path>
    <filename>SplDoublyLinkedListFilter_8php</filename>
    <class kind="class">DeepCopy::TypeFilter::Spl::SplDoublyLinkedListFilter</class>
    <namespace>DeepCopy::TypeFilter::Spl</namespace>
  </compound>
  <compound kind="file">
    <name>TypeFilter.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/myclabs/deep-copy/src/DeepCopy/TypeFilter/</path>
    <filename>TypeFilter_8php</filename>
    <class kind="interface">DeepCopy::TypeFilter::TypeFilter</class>
    <namespace>DeepCopy::TypeFilter</namespace>
  </compound>
  <compound kind="file">
    <name>TypeMatcher.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/myclabs/deep-copy/src/DeepCopy/TypeMatcher/</path>
    <filename>TypeMatcher_8php</filename>
    <class kind="class">DeepCopy::TypeMatcher::TypeMatcher</class>
    <namespace>DeepCopy::TypeMatcher</namespace>
  </compound>
  <compound kind="file">
    <name>DeepCopyTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/myclabs/deep-copy/tests/DeepCopyTest/</path>
    <filename>DeepCopyTest_8php</filename>
    <class kind="class">DeepCopyTest::DeepCopyTest</class>
    <namespace>DeepCopyTest</namespace>
  </compound>
  <compound kind="file">
    <name>DoctrineCollectionFilterTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/myclabs/deep-copy/tests/DeepCopyTest/Filter/Doctrine/</path>
    <filename>DoctrineCollectionFilterTest_8php</filename>
    <class kind="class">DeepCopyTest::Filter::Doctrine::DoctrineCollectionFilterTest</class>
    <namespace>DeepCopyTest::Filter::Doctrine</namespace>
  </compound>
  <compound kind="file">
    <name>DoctrineEmptyCollectionFilterTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/myclabs/deep-copy/tests/DeepCopyTest/Filter/Doctrine/</path>
    <filename>DoctrineEmptyCollectionFilterTest_8php</filename>
    <class kind="class">DeepCopyTest::Filter::Doctrine::DoctrineEmptyCollectionFilterTest</class>
    <namespace>DeepCopyTest::Filter::Doctrine</namespace>
  </compound>
  <compound kind="file">
    <name>DoctrineProxyFilterTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/myclabs/deep-copy/tests/DeepCopyTest/Filter/Doctrine/</path>
    <filename>DoctrineProxyFilterTest_8php</filename>
    <class kind="class">DeepCopyTest::Filter::Doctrine::DoctrineProxyFilterTest</class>
    <class kind="class">DeepCopyTest::Filter::Doctrine::Foo</class>
    <namespace>DeepCopyTest::Filter::Doctrine</namespace>
  </compound>
  <compound kind="file">
    <name>KeepFilterTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/myclabs/deep-copy/tests/DeepCopyTest/Filter/</path>
    <filename>KeepFilterTest_8php</filename>
    <class kind="class">DeepCopyTest::Filter::KeepFilterTest</class>
    <namespace>DeepCopyTest::Filter</namespace>
  </compound>
  <compound kind="file">
    <name>ReplaceFilterTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/myclabs/deep-copy/tests/DeepCopyTest/Filter/</path>
    <filename>Filter_2ReplaceFilterTest_8php</filename>
    <class kind="class">DeepCopyTest::Filter::ReplaceFilterTest</class>
    <namespace>DeepCopyTest::Filter</namespace>
  </compound>
  <compound kind="file">
    <name>ReplaceFilterTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/myclabs/deep-copy/tests/DeepCopyTest/TypeFilter/</path>
    <filename>TypeFilter_2ReplaceFilterTest_8php</filename>
    <class kind="class">DeepCopyTest::TypeFilter::ReplaceFilterTest</class>
    <namespace>DeepCopyTest::TypeFilter</namespace>
  </compound>
  <compound kind="file">
    <name>SetNullFilterTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/myclabs/deep-copy/tests/DeepCopyTest/Filter/</path>
    <filename>SetNullFilterTest_8php</filename>
    <class kind="class">DeepCopyTest::Filter::SetNullFilterTest</class>
    <namespace>DeepCopyTest::Filter</namespace>
  </compound>
  <compound kind="file">
    <name>DoctrineProxyMatcherTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/myclabs/deep-copy/tests/DeepCopyTest/Matcher/Doctrine/</path>
    <filename>DoctrineProxyMatcherTest_8php</filename>
    <class kind="class">DeepCopyTest::Matcher::Doctrine::DoctrineProxyMatcherTest</class>
    <class kind="class">DeepCopyTest::Matcher::Doctrine::FooProxy</class>
    <namespace>DeepCopyTest::Matcher::Doctrine</namespace>
  </compound>
  <compound kind="file">
    <name>PropertyMatcherTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/myclabs/deep-copy/tests/DeepCopyTest/Matcher/</path>
    <filename>PropertyMatcherTest_8php</filename>
    <class kind="class">DeepCopyTest::Matcher::PropertyMatcherTest</class>
    <class kind="class">DeepCopyTest::Matcher::X</class>
    <class kind="class">DeepCopyTest::Matcher::Y</class>
    <namespace>DeepCopyTest::Matcher</namespace>
  </compound>
  <compound kind="file">
    <name>PropertyNameMatcherTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/myclabs/deep-copy/tests/DeepCopyTest/Matcher/</path>
    <filename>PropertyNameMatcherTest_8php</filename>
    <class kind="class">DeepCopyTest::Matcher::PropertyNameMatcherTest</class>
    <namespace>DeepCopyTest::Matcher</namespace>
  </compound>
  <compound kind="file">
    <name>PropertyTypeMatcherTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/myclabs/deep-copy/tests/DeepCopyTest/Matcher/</path>
    <filename>PropertyTypeMatcherTest_8php</filename>
    <class kind="class">DeepCopyTest::Matcher::PropertyTypeMatcherTest</class>
    <class kind="class">DeepCopyTest::Matcher::PropertyTypeMatcherTestFixture1</class>
    <class kind="class">DeepCopyTest::Matcher::PropertyTypeMatcherTestFixture2</class>
    <namespace>DeepCopyTest::Matcher</namespace>
  </compound>
  <compound kind="file">
    <name>ReflectionHelperTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/myclabs/deep-copy/tests/DeepCopyTest/Reflection/</path>
    <filename>ReflectionHelperTest_8php</filename>
    <class kind="class">DeepCopyTest::Reflection::ReflectionHelperTest</class>
    <class kind="class">DeepCopyTest::Reflection::ReflectionHelperTestParent</class>
    <class kind="class">DeepCopyTest::Reflection::ReflectionHelperTestChild</class>
    <namespace>DeepCopyTest::Reflection</namespace>
  </compound>
  <compound kind="file">
    <name>DateIntervalFilterTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/myclabs/deep-copy/tests/DeepCopyTest/TypeFilter/Date/</path>
    <filename>DateIntervalFilterTest_8php</filename>
    <class kind="class">DeepCopyTest::TypeFilter::Date::DateIntervalFilterTest</class>
    <namespace>DeepCopyTest::TypeFilter::Date</namespace>
  </compound>
  <compound kind="file">
    <name>ShallowCopyFilterTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/myclabs/deep-copy/tests/DeepCopyTest/TypeFilter/</path>
    <filename>ShallowCopyFilterTest_8php</filename>
    <class kind="class">DeepCopyTest::TypeFilter::ShallowCopyFilterTest</class>
    <namespace>DeepCopyTest::TypeFilter</namespace>
  </compound>
  <compound kind="file">
    <name>ArrayObjectFilterTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/myclabs/deep-copy/tests/DeepCopyTest/TypeFilter/Spl/</path>
    <filename>ArrayObjectFilterTest_8php</filename>
    <class kind="class">DeepCopyTest::TypeFilter::Spl::ArrayObjectFilterTest</class>
    <namespace>DeepCopyTest::TypeFilter::Spl</namespace>
  </compound>
  <compound kind="file">
    <name>SplDoublyLinkedListFilterTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/myclabs/deep-copy/tests/DeepCopyTest/TypeFilter/Spl/</path>
    <filename>SplDoublyLinkedListFilterTest_8php</filename>
    <class kind="class">DeepCopyTest::TypeFilter::Spl::SplDoublyLinkedListFilterTest</class>
    <class kind="class">DeepCopyTest::TypeFilter::Spl::FakeDeepCopy</class>
    <namespace>DeepCopyTest::TypeFilter::Spl</namespace>
  </compound>
  <compound kind="file">
    <name>TypeMatcherTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/myclabs/deep-copy/tests/DeepCopyTest/TypeMatcher/</path>
    <filename>TypeMatcherTest_8php</filename>
    <class kind="class">DeepCopyTest::TypeMatcher::TypeMatcherTest</class>
    <class kind="class">DeepCopyTest::TypeMatcher::Foo</class>
    <class kind="class">DeepCopyTest::TypeMatcher::Bar</class>
    <class kind="interface">DeepCopyTest::TypeMatcher::IA</class>
    <class kind="class">DeepCopyTest::TypeMatcher::A</class>
    <namespace>DeepCopyTest::TypeMatcher</namespace>
  </compound>
  <compound kind="file">
    <name>example-01.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/examples/</path>
    <filename>example-01_8php</filename>
    <member kind="variable">
      <type></type>
      <name>$manifest</name>
      <anchorfile>example-01_8php.html</anchorfile>
      <anchor>a4d1af7792e788060ae7e6f5cf8f28afa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Exception.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/src/exceptions/</path>
    <filename>phar-io_2manifest_2src_2exceptions_2Exception_8php</filename>
    <class kind="interface">PharIo::Manifest::Exception</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>Exception.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/version/src/exceptions/</path>
    <filename>phar-io_2version_2src_2exceptions_2Exception_8php</filename>
    <class kind="interface">PharIo::Version::Exception</class>
    <namespace>PharIo::Version</namespace>
  </compound>
  <compound kind="file">
    <name>Exception.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Exception/</path>
    <filename>phpspec_2prophecy_2src_2Prophecy_2Exception_2Exception_8php</filename>
    <class kind="interface">Prophecy::Exception::Exception</class>
    <namespace>Prophecy::Exception</namespace>
  </compound>
  <compound kind="file">
    <name>Exception.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/src/Exception/</path>
    <filename>phpunit_2php-code-coverage_2src_2Exception_2Exception_8php</filename>
    <class kind="interface">SebastianBergmann::CodeCoverage::Exception</class>
    <namespace>SebastianBergmann::CodeCoverage</namespace>
  </compound>
  <compound kind="file">
    <name>Exception.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-timer/src/</path>
    <filename>phpunit_2php-timer_2src_2Exception_8php</filename>
    <class kind="interface">SebastianBergmann::Timer::Exception</class>
    <namespace>SebastianBergmann::Timer</namespace>
  </compound>
  <compound kind="file">
    <name>Exception.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/</path>
    <filename>phpunit_2phpunit_2src_2Exception_8php</filename>
    <class kind="interface">PHPUnit::Exception</class>
    <namespace>PHPUnit</namespace>
  </compound>
  <compound kind="file">
    <name>Exception.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Constraint/</path>
    <filename>phpunit_2phpunit_2src_2Framework_2Constraint_2Exception_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::Exception</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>Exception.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Exception/</path>
    <filename>phpunit_2phpunit_2src_2Framework_2Exception_2Exception_8php</filename>
    <class kind="class">PHPUnit::Framework::Exception</class>
    <namespace>PHPUnit::Framework</namespace>
  </compound>
  <compound kind="file">
    <name>Exception.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/MockObject/Exception/</path>
    <filename>phpunit_2phpunit_2src_2Framework_2MockObject_2Exception_2Exception_8php</filename>
    <class kind="interface">PHPUnit::Framework::MockObject::Exception</class>
    <namespace>PHPUnit::Framework::MockObject</namespace>
  </compound>
  <compound kind="file">
    <name>Exception.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/MockObject/Stub/</path>
    <filename>phpunit_2phpunit_2src_2Framework_2MockObject_2Stub_2Exception_8php</filename>
    <class kind="class">PHPUnit::Framework::MockObject::Stub::Exception</class>
    <namespace>PHPUnit::Framework::MockObject::Stub</namespace>
  </compound>
  <compound kind="file">
    <name>Exception.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Runner/</path>
    <filename>phpunit_2phpunit_2src_2Runner_2Exception_8php</filename>
    <class kind="class">PHPUnit::Runner::Exception</class>
    <namespace>PHPUnit::Runner</namespace>
  </compound>
  <compound kind="file">
    <name>Exception.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/TextUI/</path>
    <filename>phpunit_2phpunit_2src_2TextUI_2Exception_8php</filename>
    <class kind="class">PHPUnit::TextUI::Exception</class>
    <namespace>PHPUnit::TextUI</namespace>
  </compound>
  <compound kind="file">
    <name>Exception.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Util/</path>
    <filename>phpunit_2phpunit_2src_2Util_2Exception_8php</filename>
    <class kind="class">PHPUnit::Util::Exception</class>
    <namespace>PHPUnit::Util</namespace>
  </compound>
  <compound kind="file">
    <name>Exception.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/diff/src/Exception/</path>
    <filename>sebastian_2diff_2src_2Exception_2Exception_8php</filename>
    <class kind="interface">SebastianBergmann::Diff::Exception</class>
    <namespace>SebastianBergmann::Diff</namespace>
  </compound>
  <compound kind="file">
    <name>Exception.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/global-state/src/exceptions/</path>
    <filename>sebastian_2global-state_2src_2exceptions_2Exception_8php</filename>
    <class kind="interface">SebastianBergmann::GlobalState::Exception</class>
    <namespace>SebastianBergmann::GlobalState</namespace>
  </compound>
  <compound kind="file">
    <name>Exception.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/object-enumerator/src/</path>
    <filename>sebastian_2object-enumerator_2src_2Exception_8php</filename>
    <class kind="interface">SebastianBergmann::ObjectEnumerator::Exception</class>
    <namespace>SebastianBergmann::ObjectEnumerator</namespace>
  </compound>
  <compound kind="file">
    <name>Exception.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/object-reflector/src/</path>
    <filename>sebastian_2object-reflector_2src_2Exception_8php</filename>
    <class kind="interface">SebastianBergmann::ObjectReflector::Exception</class>
    <namespace>SebastianBergmann::ObjectReflector</namespace>
  </compound>
  <compound kind="file">
    <name>Exception.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/recursion-context/src/</path>
    <filename>sebastian_2recursion-context_2src_2Exception_8php</filename>
    <class kind="interface">SebastianBergmann::RecursionContext::Exception</class>
    <namespace>SebastianBergmann::RecursionContext</namespace>
  </compound>
  <compound kind="file">
    <name>Exception.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/type/src/exception/</path>
    <filename>sebastian_2type_2src_2exception_2Exception_8php</filename>
    <class kind="interface">SebastianBergmann::Type::Exception</class>
    <namespace>SebastianBergmann::Type</namespace>
  </compound>
  <compound kind="file">
    <name>Exception.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/theseer/tokenizer/src/</path>
    <filename>theseer_2tokenizer_2src_2Exception_8php</filename>
    <class kind="class">TheSeer::Tokenizer::Exception</class>
    <namespace>TheSeer::Tokenizer</namespace>
  </compound>
  <compound kind="file">
    <name>InvalidApplicationNameException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/src/exceptions/</path>
    <filename>InvalidApplicationNameException_8php</filename>
    <class kind="class">PharIo::Manifest::InvalidApplicationNameException</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>InvalidEmailException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/src/exceptions/</path>
    <filename>InvalidEmailException_8php</filename>
    <class kind="class">PharIo::Manifest::InvalidEmailException</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>InvalidUrlException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/src/exceptions/</path>
    <filename>InvalidUrlException_8php</filename>
    <class kind="class">PharIo::Manifest::InvalidUrlException</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>ManifestDocumentException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/src/exceptions/</path>
    <filename>ManifestDocumentException_8php</filename>
    <class kind="class">PharIo::Manifest::ManifestDocumentException</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>ManifestDocumentMapperException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/src/exceptions/</path>
    <filename>ManifestDocumentMapperException_8php</filename>
    <class kind="class">PharIo::Manifest::ManifestDocumentMapperException</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>ManifestElementException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/src/exceptions/</path>
    <filename>ManifestElementException_8php</filename>
    <class kind="class">PharIo::Manifest::ManifestElementException</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>ManifestLoaderException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/src/exceptions/</path>
    <filename>ManifestLoaderException_8php</filename>
    <class kind="class">PharIo::Manifest::ManifestLoaderException</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>ManifestDocumentMapper.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/src/</path>
    <filename>ManifestDocumentMapper_8php</filename>
    <class kind="class">PharIo::Manifest::ManifestDocumentMapper</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>ManifestLoader.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/src/</path>
    <filename>ManifestLoader_8php</filename>
    <class kind="class">PharIo::Manifest::ManifestLoader</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>ManifestSerializer.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/src/</path>
    <filename>ManifestSerializer_8php</filename>
    <class kind="class">PharIo::Manifest::ManifestSerializer</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>Application.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/src/values/</path>
    <filename>Application_8php</filename>
    <class kind="class">PharIo::Manifest::Application</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>ApplicationName.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/src/values/</path>
    <filename>ApplicationName_8php</filename>
    <class kind="class">PharIo::Manifest::ApplicationName</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>Author.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/src/values/</path>
    <filename>phar-io_2manifest_2src_2values_2Author_8php</filename>
    <class kind="class">PharIo::Manifest::Author</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>Author.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/src/DocBlock/Tags/</path>
    <filename>phpdocumentor_2reflection-docblock_2src_2DocBlock_2Tags_2Author_8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::Author</class>
    <namespace>phpDocumentor::Reflection::DocBlock::Tags</namespace>
  </compound>
  <compound kind="file">
    <name>Author.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>phpunit_2phpunit_2tests_2__files_2Author_8php</filename>
    <class kind="class">Author</class>
  </compound>
  <compound kind="file">
    <name>Author.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/comparator/tests/_fixture/</path>
    <filename>sebastian_2comparator_2tests_2__fixture_2Author_8php</filename>
    <class kind="class">SebastianBergmann::Comparator::Author</class>
    <namespace>SebastianBergmann::Comparator</namespace>
  </compound>
  <compound kind="file">
    <name>AuthorCollection.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/src/values/</path>
    <filename>AuthorCollection_8php</filename>
    <class kind="class">PharIo::Manifest::AuthorCollection</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>AuthorCollectionIterator.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/src/values/</path>
    <filename>AuthorCollectionIterator_8php</filename>
    <class kind="class">PharIo::Manifest::AuthorCollectionIterator</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>BundledComponent.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/src/values/</path>
    <filename>BundledComponent_8php</filename>
    <class kind="class">PharIo::Manifest::BundledComponent</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>BundledComponentCollection.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/src/values/</path>
    <filename>BundledComponentCollection_8php</filename>
    <class kind="class">PharIo::Manifest::BundledComponentCollection</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>BundledComponentCollectionIterator.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/src/values/</path>
    <filename>BundledComponentCollectionIterator_8php</filename>
    <class kind="class">PharIo::Manifest::BundledComponentCollectionIterator</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>CopyrightInformation.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/src/values/</path>
    <filename>CopyrightInformation_8php</filename>
    <class kind="class">PharIo::Manifest::CopyrightInformation</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>Email.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/src/values/</path>
    <filename>Email_8php</filename>
    <class kind="class">PharIo::Manifest::Email</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>Extension.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/src/values/</path>
    <filename>phar-io_2manifest_2src_2values_2Extension_8php</filename>
    <class kind="class">PharIo::Manifest::Extension</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>Extension.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/_files/</path>
    <filename>phpunit_2phpunit_2tests_2end-to-end_2__files_2Extension_8php</filename>
    <class kind="class">PHPUnit::Test::Extension</class>
    <namespace>PHPUnit::Test</namespace>
  </compound>
  <compound kind="file">
    <name>Library.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/src/values/</path>
    <filename>Library_8php</filename>
    <class kind="class">PharIo::Manifest::Library</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>License.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/src/values/</path>
    <filename>License_8php</filename>
    <class kind="class">PharIo::Manifest::License</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>Manifest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/src/values/</path>
    <filename>Manifest_8php</filename>
    <class kind="class">PharIo::Manifest::Manifest</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>PhpExtensionRequirement.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/src/values/</path>
    <filename>PhpExtensionRequirement_8php</filename>
    <class kind="class">PharIo::Manifest::PhpExtensionRequirement</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>PhpVersionRequirement.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/src/values/</path>
    <filename>PhpVersionRequirement_8php</filename>
    <class kind="class">PharIo::Manifest::PhpVersionRequirement</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>Requirement.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/src/values/</path>
    <filename>Requirement_8php</filename>
    <class kind="interface">PharIo::Manifest::Requirement</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>RequirementCollection.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/src/values/</path>
    <filename>RequirementCollection_8php</filename>
    <class kind="class">PharIo::Manifest::RequirementCollection</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>RequirementCollectionIterator.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/src/values/</path>
    <filename>RequirementCollectionIterator_8php</filename>
    <class kind="class">PharIo::Manifest::RequirementCollectionIterator</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>Type.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/src/values/</path>
    <filename>phar-io_2manifest_2src_2values_2Type_8php</filename>
    <class kind="class">PharIo::Manifest::Type</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>Type.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/type-resolver/src/</path>
    <filename>phpdocumentor_2type-resolver_2src_2Type_8php</filename>
    <class kind="interface">phpDocumentor::Reflection::Type</class>
    <namespace>phpDocumentor::Reflection</namespace>
  </compound>
  <compound kind="file">
    <name>Type.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Util/</path>
    <filename>phpunit_2phpunit_2src_2Util_2Type_8php</filename>
    <class kind="class">PHPUnit::Util::Type</class>
    <namespace>PHPUnit::Util</namespace>
  </compound>
  <compound kind="file">
    <name>Type.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/type/src/</path>
    <filename>sebastian_2type_2src_2Type_8php</filename>
    <class kind="class">SebastianBergmann::Type::Type</class>
    <namespace>SebastianBergmann::Type</namespace>
  </compound>
  <compound kind="file">
    <name>Url.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/src/values/</path>
    <filename>phar-io_2manifest_2src_2values_2Url_8php</filename>
    <class kind="class">PharIo::Manifest::Url</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>Url.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/src/DocBlock/Tags/Reference/</path>
    <filename>phpdocumentor_2reflection-docblock_2src_2DocBlock_2Tags_2Reference_2Url_8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::Reference::Url</class>
    <namespace>phpDocumentor::Reflection::DocBlock::Tags::Reference</namespace>
  </compound>
  <compound kind="file">
    <name>AuthorElement.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/src/xml/</path>
    <filename>AuthorElement_8php</filename>
    <class kind="class">PharIo::Manifest::AuthorElement</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>AuthorElementCollection.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/src/xml/</path>
    <filename>AuthorElementCollection_8php</filename>
    <class kind="class">PharIo::Manifest::AuthorElementCollection</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>BundlesElement.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/src/xml/</path>
    <filename>BundlesElement_8php</filename>
    <class kind="class">PharIo::Manifest::BundlesElement</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>ComponentElement.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/src/xml/</path>
    <filename>ComponentElement_8php</filename>
    <class kind="class">PharIo::Manifest::ComponentElement</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>ComponentElementCollection.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/src/xml/</path>
    <filename>ComponentElementCollection_8php</filename>
    <class kind="class">PharIo::Manifest::ComponentElementCollection</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>ContainsElement.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/src/xml/</path>
    <filename>ContainsElement_8php</filename>
    <class kind="class">PharIo::Manifest::ContainsElement</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>CopyrightElement.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/src/xml/</path>
    <filename>CopyrightElement_8php</filename>
    <class kind="class">PharIo::Manifest::CopyrightElement</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>ElementCollection.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/src/xml/</path>
    <filename>ElementCollection_8php</filename>
    <class kind="class">PharIo::Manifest::ElementCollection</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>ExtElement.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/src/xml/</path>
    <filename>ExtElement_8php</filename>
    <class kind="class">PharIo::Manifest::ExtElement</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>ExtElementCollection.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/src/xml/</path>
    <filename>ExtElementCollection_8php</filename>
    <class kind="class">PharIo::Manifest::ExtElementCollection</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>ExtensionElement.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/src/xml/</path>
    <filename>ExtensionElement_8php</filename>
    <class kind="class">PharIo::Manifest::ExtensionElement</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>LicenseElement.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/src/xml/</path>
    <filename>LicenseElement_8php</filename>
    <class kind="class">PharIo::Manifest::LicenseElement</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>ManifestDocument.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/src/xml/</path>
    <filename>ManifestDocument_8php</filename>
    <class kind="class">PharIo::Manifest::ManifestDocument</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>ManifestDocumentLoadingException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/src/xml/</path>
    <filename>ManifestDocumentLoadingException_8php</filename>
    <class kind="class">PharIo::Manifest::ManifestDocumentLoadingException</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>ManifestElement.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/src/xml/</path>
    <filename>ManifestElement_8php</filename>
    <class kind="class">PharIo::Manifest::ManifestElement</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>PhpElement.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/src/xml/</path>
    <filename>PhpElement_8php</filename>
    <class kind="class">PharIo::Manifest::PhpElement</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>RequiresElement.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/src/xml/</path>
    <filename>RequiresElement_8php</filename>
    <class kind="class">PharIo::Manifest::RequiresElement</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>ManifestDocumentLoadingExceptionTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/tests/exceptions/</path>
    <filename>ManifestDocumentLoadingExceptionTest_8php</filename>
    <class kind="class">PharIo::Manifest::ManifestDocumentLoadingExceptionTest</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>ManifestDocumentMapperTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/tests/</path>
    <filename>ManifestDocumentMapperTest_8php</filename>
    <class kind="class">PharIo::Manifest::ManifestDocumentMapperTest</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>ManifestLoaderTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/tests/</path>
    <filename>ManifestLoaderTest_8php</filename>
    <class kind="class">PharIo::Manifest::ManifestLoaderTest</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>ManifestSerializerTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/tests/</path>
    <filename>ManifestSerializerTest_8php</filename>
    <class kind="class">PharIo::Manifest::ManifestSerializerTest</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>ApplicationNameTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/tests/values/</path>
    <filename>ApplicationNameTest_8php</filename>
    <class kind="class">PharIo::Manifest::ApplicationNameTest</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>ApplicationTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/tests/values/</path>
    <filename>ApplicationTest_8php</filename>
    <class kind="class">PharIo::Manifest::ApplicationTest</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>AuthorCollectionTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/tests/values/</path>
    <filename>AuthorCollectionTest_8php</filename>
    <class kind="class">PharIo::Manifest::AuthorCollectionTest</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>AuthorTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/tests/values/</path>
    <filename>phar-io_2manifest_2tests_2values_2AuthorTest_8php</filename>
    <class kind="class">PharIo::Manifest::AuthorTest</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>AuthorTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/tests/unit/DocBlock/Tags/</path>
    <filename>phpdocumentor_2reflection-docblock_2tests_2unit_2DocBlock_2Tags_2AuthorTest_8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::AuthorTest</class>
    <namespace>phpDocumentor::Reflection::DocBlock::Tags</namespace>
  </compound>
  <compound kind="file">
    <name>BundledComponentCollectionTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/tests/values/</path>
    <filename>BundledComponentCollectionTest_8php</filename>
    <class kind="class">PharIo::Manifest::BundledComponentCollectionTest</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>BundledComponentTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/tests/values/</path>
    <filename>BundledComponentTest_8php</filename>
    <class kind="class">PharIo::Manifest::BundledComponentTest</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>CopyrightInformationTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/tests/values/</path>
    <filename>CopyrightInformationTest_8php</filename>
    <class kind="class">PharIo::Manifest::CopyrightInformationTest</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>EmailTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/tests/values/</path>
    <filename>EmailTest_8php</filename>
    <class kind="class">PharIo::Manifest::EmailTest</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>ExtensionTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/tests/values/</path>
    <filename>ExtensionTest_8php</filename>
    <class kind="class">PharIo::Manifest::ExtensionTest</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>LibraryTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/tests/values/</path>
    <filename>LibraryTest_8php</filename>
    <class kind="class">PharIo::Manifest::LibraryTest</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>LicenseTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/tests/values/</path>
    <filename>LicenseTest_8php</filename>
    <class kind="class">PharIo::Manifest::LicenseTest</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>ManifestTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/tests/values/</path>
    <filename>ManifestTest_8php</filename>
    <class kind="class">PharIo::Manifest::ManifestTest</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>PhpExtensionRequirementTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/tests/values/</path>
    <filename>PhpExtensionRequirementTest_8php</filename>
    <class kind="class">PharIo::Manifest::PhpExtensionRequirementTest</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>PhpVersionRequirementTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/tests/values/</path>
    <filename>PhpVersionRequirementTest_8php</filename>
    <class kind="class">PharIo::Manifest::PhpVersionRequirementTest</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>RequirementCollectionTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/tests/values/</path>
    <filename>RequirementCollectionTest_8php</filename>
    <class kind="class">PharIo::Manifest::RequirementCollectionTest</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>UrlTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/tests/values/</path>
    <filename>UrlTest_8php</filename>
    <class kind="class">PharIo::Manifest::UrlTest</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>AuthorElementCollectionTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/tests/xml/</path>
    <filename>AuthorElementCollectionTest_8php</filename>
    <class kind="class">PharIo::Manifest::AuthorElementCollectionTest</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>AuthorElementTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/tests/xml/</path>
    <filename>AuthorElementTest_8php</filename>
    <class kind="class">PharIo::Manifest::AuthorElementTest</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>BundlesElementTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/tests/xml/</path>
    <filename>BundlesElementTest_8php</filename>
    <class kind="class">PharIo::Manifest::BundlesElementTest</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>ComponentElementCollectionTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/tests/xml/</path>
    <filename>ComponentElementCollectionTest_8php</filename>
    <class kind="class">PharIo::Manifest::ComponentElementCollectionTest</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>ComponentElementTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/tests/xml/</path>
    <filename>ComponentElementTest_8php</filename>
    <class kind="class">PharIo::Manifest::ComponentElementTest</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>ContainsElementTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/tests/xml/</path>
    <filename>ContainsElementTest_8php</filename>
    <class kind="class">PharIo::Manifest::ContainsElementTest</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>CopyrightElementTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/tests/xml/</path>
    <filename>CopyrightElementTest_8php</filename>
    <class kind="class">PharIo::Manifest::CopyrightElementTest</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>ExtElementCollectionTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/tests/xml/</path>
    <filename>ExtElementCollectionTest_8php</filename>
    <class kind="class">PharIo::Manifest::ExtElementCollectionTest</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>ExtElementTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/tests/xml/</path>
    <filename>ExtElementTest_8php</filename>
    <class kind="class">PharIo::Manifest::ExtElementTest</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>ExtensionElementTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/tests/xml/</path>
    <filename>ExtensionElementTest_8php</filename>
    <class kind="class">PharIo::Manifest::ExtensionElementTest</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>LicenseElementTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/tests/xml/</path>
    <filename>LicenseElementTest_8php</filename>
    <class kind="class">PharIo::Manifest::LicenseElementTest</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>ManifestDocumentTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/tests/xml/</path>
    <filename>ManifestDocumentTest_8php</filename>
    <class kind="class">PharIo::Manifest::ManifestDocumentTest</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>PhpElementTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/tests/xml/</path>
    <filename>PhpElementTest_8php</filename>
    <class kind="class">PharIo::Manifest::PhpElementTest</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>RequiresElementTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/manifest/tests/xml/</path>
    <filename>RequiresElementTest_8php</filename>
    <class kind="class">PharIo::Manifest::RequiresElementTest</class>
    <namespace>PharIo::Manifest</namespace>
  </compound>
  <compound kind="file">
    <name>CHANGELOG.md</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/version/</path>
    <filename>phar-io_2version_2CHANGELOG_8md</filename>
  </compound>
  <compound kind="file">
    <name>CHANGELOG.md</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/theseer/tokenizer/</path>
    <filename>theseer_2tokenizer_2CHANGELOG_8md</filename>
  </compound>
  <compound kind="file">
    <name>CHANGELOG.md</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/webmozart/assert/</path>
    <filename>webmozart_2assert_2CHANGELOG_8md</filename>
  </compound>
  <compound kind="file">
    <name>AbstractVersionConstraint.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/version/src/constraints/</path>
    <filename>AbstractVersionConstraint_8php</filename>
    <class kind="class">PharIo::Version::AbstractVersionConstraint</class>
    <namespace>PharIo::Version</namespace>
  </compound>
  <compound kind="file">
    <name>AndVersionConstraintGroup.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/version/src/constraints/</path>
    <filename>AndVersionConstraintGroup_8php</filename>
    <class kind="class">PharIo::Version::AndVersionConstraintGroup</class>
    <namespace>PharIo::Version</namespace>
  </compound>
  <compound kind="file">
    <name>AnyVersionConstraint.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/version/src/constraints/</path>
    <filename>AnyVersionConstraint_8php</filename>
    <class kind="class">PharIo::Version::AnyVersionConstraint</class>
    <namespace>PharIo::Version</namespace>
  </compound>
  <compound kind="file">
    <name>ExactVersionConstraint.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/version/src/constraints/</path>
    <filename>ExactVersionConstraint_8php</filename>
    <class kind="class">PharIo::Version::ExactVersionConstraint</class>
    <namespace>PharIo::Version</namespace>
  </compound>
  <compound kind="file">
    <name>GreaterThanOrEqualToVersionConstraint.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/version/src/constraints/</path>
    <filename>GreaterThanOrEqualToVersionConstraint_8php</filename>
    <class kind="class">PharIo::Version::GreaterThanOrEqualToVersionConstraint</class>
    <namespace>PharIo::Version</namespace>
  </compound>
  <compound kind="file">
    <name>OrVersionConstraintGroup.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/version/src/constraints/</path>
    <filename>OrVersionConstraintGroup_8php</filename>
    <class kind="class">PharIo::Version::OrVersionConstraintGroup</class>
    <namespace>PharIo::Version</namespace>
  </compound>
  <compound kind="file">
    <name>SpecificMajorAndMinorVersionConstraint.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/version/src/constraints/</path>
    <filename>SpecificMajorAndMinorVersionConstraint_8php</filename>
    <class kind="class">PharIo::Version::SpecificMajorAndMinorVersionConstraint</class>
    <namespace>PharIo::Version</namespace>
  </compound>
  <compound kind="file">
    <name>SpecificMajorVersionConstraint.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/version/src/constraints/</path>
    <filename>SpecificMajorVersionConstraint_8php</filename>
    <class kind="class">PharIo::Version::SpecificMajorVersionConstraint</class>
    <namespace>PharIo::Version</namespace>
  </compound>
  <compound kind="file">
    <name>VersionConstraint.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/version/src/constraints/</path>
    <filename>VersionConstraint_8php</filename>
    <class kind="interface">PharIo::Version::VersionConstraint</class>
    <namespace>PharIo::Version</namespace>
  </compound>
  <compound kind="file">
    <name>InvalidPreReleaseSuffixException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/version/src/exceptions/</path>
    <filename>InvalidPreReleaseSuffixException_8php</filename>
    <class kind="class">PharIo::Version::InvalidPreReleaseSuffixException</class>
    <namespace>PharIo::Version</namespace>
  </compound>
  <compound kind="file">
    <name>InvalidVersionException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/version/src/exceptions/</path>
    <filename>InvalidVersionException_8php</filename>
    <class kind="class">PharIo::Version::InvalidVersionException</class>
    <namespace>PharIo::Version</namespace>
  </compound>
  <compound kind="file">
    <name>UnsupportedVersionConstraintException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/version/src/exceptions/</path>
    <filename>UnsupportedVersionConstraintException_8php</filename>
    <class kind="class">PharIo::Version::UnsupportedVersionConstraintException</class>
    <namespace>PharIo::Version</namespace>
  </compound>
  <compound kind="file">
    <name>PreReleaseSuffix.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/version/src/</path>
    <filename>PreReleaseSuffix_8php</filename>
    <class kind="class">PharIo::Version::PreReleaseSuffix</class>
    <namespace>PharIo::Version</namespace>
  </compound>
  <compound kind="file">
    <name>Version.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/version/src/</path>
    <filename>phar-io_2version_2src_2Version_8php</filename>
    <class kind="class">PharIo::Version::Version</class>
    <namespace>PharIo::Version</namespace>
  </compound>
  <compound kind="file">
    <name>Version.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/src/DocBlock/Tags/</path>
    <filename>phpdocumentor_2reflection-docblock_2src_2DocBlock_2Tags_2Version_8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::Version</class>
    <namespace>phpDocumentor::Reflection::DocBlock::Tags</namespace>
  </compound>
  <compound kind="file">
    <name>Version.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/src/</path>
    <filename>phpunit_2php-code-coverage_2src_2Version_8php</filename>
    <class kind="class">SebastianBergmann::CodeCoverage::Version</class>
    <namespace>SebastianBergmann::CodeCoverage</namespace>
  </compound>
  <compound kind="file">
    <name>Version.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Runner/</path>
    <filename>phpunit_2phpunit_2src_2Runner_2Version_8php</filename>
    <class kind="class">PHPUnit::Runner::Version</class>
    <namespace>PHPUnit::Runner</namespace>
  </compound>
  <compound kind="file">
    <name>Version.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/version/src/</path>
    <filename>sebastian_2version_2src_2Version_8php</filename>
    <class kind="class">SebastianBergmann::Version</class>
    <namespace>SebastianBergmann</namespace>
  </compound>
  <compound kind="file">
    <name>VersionConstraintParser.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/version/src/</path>
    <filename>VersionConstraintParser_8php</filename>
    <class kind="class">PharIo::Version::VersionConstraintParser</class>
    <namespace>PharIo::Version</namespace>
  </compound>
  <compound kind="file">
    <name>VersionConstraintValue.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/version/src/</path>
    <filename>VersionConstraintValue_8php</filename>
    <class kind="class">PharIo::Version::VersionConstraintValue</class>
    <namespace>PharIo::Version</namespace>
  </compound>
  <compound kind="file">
    <name>VersionNumber.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/version/src/</path>
    <filename>VersionNumber_8php</filename>
    <class kind="class">PharIo::Version::VersionNumber</class>
    <namespace>PharIo::Version</namespace>
  </compound>
  <compound kind="file">
    <name>VersionConstraintParserTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/version/tests/Integration/</path>
    <filename>VersionConstraintParserTest_8php</filename>
    <class kind="class">PharIo::Version::VersionConstraintParserTest</class>
    <namespace>PharIo::Version</namespace>
  </compound>
  <compound kind="file">
    <name>AbstractVersionConstraintTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/version/tests/Unit/</path>
    <filename>AbstractVersionConstraintTest_8php</filename>
    <class kind="class">PharIo::Version::AbstractVersionConstraintTest</class>
    <namespace>PharIo::Version</namespace>
  </compound>
  <compound kind="file">
    <name>AndVersionConstraintGroupTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/version/tests/Unit/</path>
    <filename>AndVersionConstraintGroupTest_8php</filename>
    <class kind="class">PharIo::Version::AndVersionConstraintGroupTest</class>
    <namespace>PharIo::Version</namespace>
  </compound>
  <compound kind="file">
    <name>AnyVersionConstraintTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/version/tests/Unit/</path>
    <filename>AnyVersionConstraintTest_8php</filename>
    <class kind="class">PharIo::Version::AnyVersionConstraintTest</class>
    <namespace>PharIo::Version</namespace>
  </compound>
  <compound kind="file">
    <name>ExactVersionConstraintTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/version/tests/Unit/</path>
    <filename>ExactVersionConstraintTest_8php</filename>
    <class kind="class">PharIo::Version::ExactVersionConstraintTest</class>
    <namespace>PharIo::Version</namespace>
  </compound>
  <compound kind="file">
    <name>GreaterThanOrEqualToVersionConstraintTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/version/tests/Unit/</path>
    <filename>GreaterThanOrEqualToVersionConstraintTest_8php</filename>
    <class kind="class">PharIo::Version::GreaterThanOrEqualToVersionConstraintTest</class>
    <namespace>PharIo::Version</namespace>
  </compound>
  <compound kind="file">
    <name>OrVersionConstraintGroupTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/version/tests/Unit/</path>
    <filename>OrVersionConstraintGroupTest_8php</filename>
    <class kind="class">PharIo::Version::OrVersionConstraintGroupTest</class>
    <namespace>PharIo::Version</namespace>
  </compound>
  <compound kind="file">
    <name>PreReleaseSuffixTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/version/tests/Unit/</path>
    <filename>PreReleaseSuffixTest_8php</filename>
    <class kind="class">PharIo::Version::PreReleaseSuffixTest</class>
    <namespace>PharIo::Version</namespace>
  </compound>
  <compound kind="file">
    <name>SpecificMajorAndMinorVersionConstraintTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/version/tests/Unit/</path>
    <filename>SpecificMajorAndMinorVersionConstraintTest_8php</filename>
    <class kind="class">PharIo::Version::SpecificMajorAndMinorVersionConstraintTest</class>
    <namespace>PharIo::Version</namespace>
  </compound>
  <compound kind="file">
    <name>SpecificMajorVersionConstraintTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/version/tests/Unit/</path>
    <filename>SpecificMajorVersionConstraintTest_8php</filename>
    <class kind="class">PharIo::Version::SpecificMajorVersionConstraintTest</class>
    <namespace>PharIo::Version</namespace>
  </compound>
  <compound kind="file">
    <name>VersionTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phar-io/version/tests/Unit/</path>
    <filename>phar-io_2version_2tests_2Unit_2VersionTest_8php</filename>
    <class kind="class">PharIo::Version::VersionTest</class>
    <namespace>PharIo::Version</namespace>
  </compound>
  <compound kind="file">
    <name>VersionTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/tests/unit/DocBlock/Tags/</path>
    <filename>phpdocumentor_2reflection-docblock_2tests_2unit_2DocBlock_2Tags_2VersionTest_8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::VersionTest</class>
    <namespace>phpDocumentor::Reflection::DocBlock::Tags</namespace>
  </compound>
  <compound kind="file">
    <name>Element.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-common/src/</path>
    <filename>Element_8php</filename>
    <class kind="interface">phpDocumentor::Reflection::Element</class>
    <namespace>phpDocumentor::Reflection</namespace>
  </compound>
  <compound kind="file">
    <name>File.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-common/src/</path>
    <filename>phpdocumentor_2reflection-common_2src_2File_8php</filename>
    <class kind="interface">phpDocumentor::Reflection::File</class>
    <namespace>phpDocumentor::Reflection</namespace>
  </compound>
  <compound kind="file">
    <name>File.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/src/Node/</path>
    <filename>phpunit_2php-code-coverage_2src_2Node_2File_8php</filename>
    <class kind="class">SebastianBergmann::CodeCoverage::Node::File</class>
    <namespace>SebastianBergmann::CodeCoverage::Node</namespace>
  </compound>
  <compound kind="file">
    <name>File.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/src/Report/Html/Renderer/</path>
    <filename>phpunit_2php-code-coverage_2src_2Report_2Html_2Renderer_2File_8php</filename>
    <class kind="class">SebastianBergmann::CodeCoverage::Report::Html::File</class>
    <namespace>SebastianBergmann::CodeCoverage::Report::Html</namespace>
  </compound>
  <compound kind="file">
    <name>File.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/src/Report/Xml/</path>
    <filename>phpunit_2php-code-coverage_2src_2Report_2Xml_2File_8php</filename>
    <class kind="class">SebastianBergmann::CodeCoverage::Report::Xml::File</class>
    <namespace>SebastianBergmann::CodeCoverage::Report::Xml</namespace>
  </compound>
  <compound kind="file">
    <name>Fqsen.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-common/src/</path>
    <filename>reflection-common_2src_2Fqsen_8php</filename>
    <class kind="class">phpDocumentor::Reflection::Fqsen</class>
    <namespace>phpDocumentor::Reflection</namespace>
  </compound>
  <compound kind="file">
    <name>Fqsen.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/src/DocBlock/Tags/Reference/</path>
    <filename>reflection-docblock_2src_2DocBlock_2Tags_2Reference_2Fqsen_8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::Reference::Fqsen</class>
    <namespace>phpDocumentor::Reflection::DocBlock::Tags::Reference</namespace>
  </compound>
  <compound kind="file">
    <name>Location.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-common/src/</path>
    <filename>Location_8php</filename>
    <class kind="class">phpDocumentor::Reflection::Location</class>
    <namespace>phpDocumentor::Reflection</namespace>
  </compound>
  <compound kind="file">
    <name>Project.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-common/src/</path>
    <filename>phpdocumentor_2reflection-common_2src_2Project_8php</filename>
    <class kind="interface">phpDocumentor::Reflection::Project</class>
    <namespace>phpDocumentor::Reflection</namespace>
  </compound>
  <compound kind="file">
    <name>Project.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/src/Report/Xml/</path>
    <filename>phpunit_2php-code-coverage_2src_2Report_2Xml_2Project_8php</filename>
    <class kind="class">SebastianBergmann::CodeCoverage::Report::Xml::Project</class>
    <namespace>SebastianBergmann::CodeCoverage::Report::Xml</namespace>
  </compound>
  <compound kind="file">
    <name>ProjectFactory.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-common/src/</path>
    <filename>ProjectFactory_8php</filename>
    <class kind="interface">phpDocumentor::Reflection::ProjectFactory</class>
    <namespace>phpDocumentor::Reflection</namespace>
  </compound>
  <compound kind="file">
    <name>bootstrap.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-common/tests/common/</path>
    <filename>phpdocumentor_2reflection-common_2tests_2common_2bootstrap_8php</filename>
  </compound>
  <compound kind="file">
    <name>bootstrap.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/tests/</path>
    <filename>phpunit_2php-code-coverage_2tests_2bootstrap_8php</filename>
    <member kind="variable">
      <type>const</type>
      <name>TEST_FILES_PATH</name>
      <anchorfile>phpunit_2php-code-coverage_2tests_2bootstrap_8php.html</anchorfile>
      <anchor>a1e6de45925d7e2f1cacda3975d501df0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>bootstrap.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-token-stream/tests/</path>
    <filename>phpunit_2php-token-stream_2tests_2bootstrap_8php</filename>
    <member kind="variable">
      <type>const</type>
      <name>TEST_FILES_PATH</name>
      <anchorfile>phpunit_2php-token-stream_2tests_2bootstrap_8php.html</anchorfile>
      <anchor>a1e6de45925d7e2f1cacda3975d501df0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>bootstrap.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/</path>
    <filename>phpunit_2phpunit_2tests_2bootstrap_8php</filename>
  </compound>
  <compound kind="file">
    <name>bootstrap.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/symfony/polyfill-ctype/</path>
    <filename>symfony_2polyfill-ctype_2bootstrap_8php</filename>
  </compound>
  <compound kind="file">
    <name>FqsenTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-common/tests/unit/</path>
    <filename>FqsenTest_8php</filename>
    <class kind="class">phpDocumentor::Reflection::FqsenTest</class>
    <namespace>phpDocumentor::Reflection</namespace>
  </compound>
  <compound kind="file">
    <name>01-interpreting-a-simple-docblock.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/examples/</path>
    <filename>01-interpreting-a-simple-docblock_8php</filename>
    <member kind="variable">
      <type></type>
      <name>$docComment</name>
      <anchorfile>01-interpreting-a-simple-docblock_8php.html</anchorfile>
      <anchor>aeb87b722d9e2652a54de960c443c9951</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$factory</name>
      <anchorfile>01-interpreting-a-simple-docblock_8php.html</anchorfile>
      <anchor>a099b374dc664ee043fffcd6ea05e3e70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$docblock</name>
      <anchorfile>01-interpreting-a-simple-docblock_8php.html</anchorfile>
      <anchor>abf700ed3060f06f15a7a01354dfd4087</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$summary</name>
      <anchorfile>01-interpreting-a-simple-docblock_8php.html</anchorfile>
      <anchor>acdcf998e93f562b960ce9f3a01989526</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$description</name>
      <anchorfile>01-interpreting-a-simple-docblock_8php.html</anchorfile>
      <anchor>a87b032cba06009e3467abf1c8018d960</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>02-interpreting-tags.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/examples/</path>
    <filename>02-interpreting-tags_8php</filename>
    <member kind="variable">
      <type></type>
      <name>$docComment</name>
      <anchorfile>02-interpreting-tags_8php.html</anchorfile>
      <anchor>aeb87b722d9e2652a54de960c443c9951</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$factory</name>
      <anchorfile>02-interpreting-tags_8php.html</anchorfile>
      <anchor>a099b374dc664ee043fffcd6ea05e3e70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$docblock</name>
      <anchorfile>02-interpreting-tags_8php.html</anchorfile>
      <anchor>abf700ed3060f06f15a7a01354dfd4087</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$hasSeeTag</name>
      <anchorfile>02-interpreting-tags_8php.html</anchorfile>
      <anchor>ae34e852e3f429649fe1f381511b4e159</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$tags</name>
      <anchorfile>02-interpreting-tags_8php.html</anchorfile>
      <anchor>a475a6a63b85186663d34151bcbd21590</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$seeTags</name>
      <anchorfile>02-interpreting-tags_8php.html</anchorfile>
      <anchor>a091220dd8d28d3b5f7ba95aef754b78e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>03-reconstituting-a-docblock.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/examples/</path>
    <filename>03-reconstituting-a-docblock_8php</filename>
    <member kind="variable">
      <type></type>
      <name>$docComment</name>
      <anchorfile>03-reconstituting-a-docblock_8php.html</anchorfile>
      <anchor>aeb87b722d9e2652a54de960c443c9951</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$factory</name>
      <anchorfile>03-reconstituting-a-docblock_8php.html</anchorfile>
      <anchor>a099b374dc664ee043fffcd6ea05e3e70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$docblock</name>
      <anchorfile>03-reconstituting-a-docblock_8php.html</anchorfile>
      <anchor>abf700ed3060f06f15a7a01354dfd4087</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$serializer</name>
      <anchorfile>03-reconstituting-a-docblock_8php.html</anchorfile>
      <anchor>a28c67e2682522dbcaa99e6b438bdbfdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$reconstitutedDocComment</name>
      <anchorfile>03-reconstituting-a-docblock_8php.html</anchorfile>
      <anchor>a08b2f63258e4c5beea8aca787e4c0f5b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>04-adding-your-own-tag.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/examples/</path>
    <filename>04-adding-your-own-tag_8php</filename>
    <class kind="class">MyTag</class>
    <member kind="variable">
      <type></type>
      <name>$docComment</name>
      <anchorfile>04-adding-your-own-tag_8php.html</anchorfile>
      <anchor>aeb87b722d9e2652a54de960c443c9951</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$customTags</name>
      <anchorfile>04-adding-your-own-tag_8php.html</anchorfile>
      <anchor>a6be45fb655d743425ea5b87ad85b2e93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$factory</name>
      <anchorfile>04-adding-your-own-tag_8php.html</anchorfile>
      <anchor>a099b374dc664ee043fffcd6ea05e3e70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$docblock</name>
      <anchorfile>04-adding-your-own-tag_8php.html</anchorfile>
      <anchor>abf700ed3060f06f15a7a01354dfd4087</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$customTagObjects</name>
      <anchorfile>04-adding-your-own-tag_8php.html</anchorfile>
      <anchor>a5f67492cd7689dce0866346ee40a84d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$serializer</name>
      <anchorfile>04-adding-your-own-tag_8php.html</anchorfile>
      <anchor>a28c67e2682522dbcaa99e6b438bdbfdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$reconstitutedDocComment</name>
      <anchorfile>04-adding-your-own-tag_8php.html</anchorfile>
      <anchor>a08b2f63258e4c5beea8aca787e4c0f5b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>02-escaping.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/examples/playing-with-descriptions/</path>
    <filename>02-escaping_8php</filename>
    <member kind="variable">
      <type></type>
      <name>$docComment</name>
      <anchorfile>02-escaping_8php.html</anchorfile>
      <anchor>aeb87b722d9e2652a54de960c443c9951</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$factory</name>
      <anchorfile>02-escaping_8php.html</anchorfile>
      <anchor>a099b374dc664ee043fffcd6ea05e3e70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$docblock</name>
      <anchorfile>02-escaping_8php.html</anchorfile>
      <anchor>abf700ed3060f06f15a7a01354dfd4087</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$description</name>
      <anchorfile>02-escaping_8php.html</anchorfile>
      <anchor>a87b032cba06009e3467abf1c8018d960</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$receivedDocComment</name>
      <anchorfile>02-escaping_8php.html</anchorfile>
      <anchor>a6a2e1e3d576a869db7d883ab17bb3b37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$foundDescription</name>
      <anchorfile>02-escaping_8php.html</anchorfile>
      <anchor>ab716f71691c9526f009b9043ba41ca66</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DocBlock.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/src/</path>
    <filename>phpdocumentor_2reflection-docblock_2src_2DocBlock_8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlock</class>
    <namespace>phpDocumentor::Reflection</namespace>
  </compound>
  <compound kind="file">
    <name>DocBlock.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Util/Annotation/</path>
    <filename>phpunit_2phpunit_2src_2Util_2Annotation_2DocBlock_8php</filename>
    <class kind="class">PHPUnit::Util::Annotation::DocBlock</class>
    <namespace>PHPUnit::Util::Annotation</namespace>
  </compound>
  <compound kind="file">
    <name>Description.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/src/DocBlock/</path>
    <filename>Description_8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Description</class>
    <namespace>phpDocumentor::Reflection::DocBlock</namespace>
  </compound>
  <compound kind="file">
    <name>DescriptionFactory.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/src/DocBlock/</path>
    <filename>DescriptionFactory_8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlock::DescriptionFactory</class>
    <namespace>phpDocumentor::Reflection::DocBlock</namespace>
  </compound>
  <compound kind="file">
    <name>ExampleFinder.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/src/DocBlock/</path>
    <filename>ExampleFinder_8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlock::ExampleFinder</class>
    <namespace>phpDocumentor::Reflection::DocBlock</namespace>
  </compound>
  <compound kind="file">
    <name>Serializer.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/src/DocBlock/</path>
    <filename>Serializer_8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Serializer</class>
    <namespace>phpDocumentor::Reflection::DocBlock</namespace>
  </compound>
  <compound kind="file">
    <name>StandardTagFactory.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/src/DocBlock/</path>
    <filename>StandardTagFactory_8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlock::StandardTagFactory</class>
    <namespace>phpDocumentor::Reflection::DocBlock</namespace>
  </compound>
  <compound kind="file">
    <name>Tag.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/src/DocBlock/</path>
    <filename>Tag_8php</filename>
    <class kind="interface">phpDocumentor::Reflection::DocBlock::Tag</class>
    <namespace>phpDocumentor::Reflection::DocBlock</namespace>
  </compound>
  <compound kind="file">
    <name>TagFactory.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/src/DocBlock/</path>
    <filename>TagFactory_8php</filename>
    <class kind="interface">phpDocumentor::Reflection::DocBlock::TagFactory</class>
    <namespace>phpDocumentor::Reflection::DocBlock</namespace>
  </compound>
  <compound kind="file">
    <name>BaseTag.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/src/DocBlock/Tags/</path>
    <filename>BaseTag_8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::BaseTag</class>
    <namespace>phpDocumentor::Reflection::DocBlock::Tags</namespace>
  </compound>
  <compound kind="file">
    <name>Covers.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/src/DocBlock/Tags/</path>
    <filename>Covers_8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::Covers</class>
    <namespace>phpDocumentor::Reflection::DocBlock::Tags</namespace>
  </compound>
  <compound kind="file">
    <name>Deprecated.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/src/DocBlock/Tags/</path>
    <filename>phpdocumentor_2reflection-docblock_2src_2DocBlock_2Tags_2Deprecated_8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::Deprecated</class>
    <namespace>phpDocumentor::Reflection::DocBlock::Tags</namespace>
  </compound>
  <compound kind="file">
    <name>Deprecated.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Error/</path>
    <filename>phpunit_2phpunit_2src_2Framework_2Error_2Deprecated_8php</filename>
    <class kind="class">PHPUnit::Framework::Error::Deprecated</class>
    <namespace>PHPUnit::Framework::Error</namespace>
  </compound>
  <compound kind="file">
    <name>Example.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/src/DocBlock/Tags/</path>
    <filename>Example_8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::Example</class>
    <namespace>phpDocumentor::Reflection::DocBlock::Tags</namespace>
  </compound>
  <compound kind="file">
    <name>StaticMethod.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/src/DocBlock/Tags/Factory/</path>
    <filename>StaticMethod_8php</filename>
    <class kind="interface">phpDocumentor::Reflection::DocBlock::Tags::Factory::StaticMethod</class>
    <namespace>phpDocumentor::Reflection::DocBlock::Tags::Factory</namespace>
  </compound>
  <compound kind="file">
    <name>Formatter.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/src/DocBlock/Tags/</path>
    <filename>Formatter_8php</filename>
    <class kind="interface">phpDocumentor::Reflection::DocBlock::Tags::Formatter</class>
    <namespace>phpDocumentor::Reflection::DocBlock::Tags</namespace>
  </compound>
  <compound kind="file">
    <name>AlignFormatter.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/src/DocBlock/Tags/Formatter/</path>
    <filename>AlignFormatter_8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::Formatter::AlignFormatter</class>
    <namespace>phpDocumentor::Reflection::DocBlock::Tags::Formatter</namespace>
  </compound>
  <compound kind="file">
    <name>PassthroughFormatter.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/src/DocBlock/Tags/Formatter/</path>
    <filename>PassthroughFormatter_8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::Formatter::PassthroughFormatter</class>
    <namespace>phpDocumentor::Reflection::DocBlock::Tags::Formatter</namespace>
  </compound>
  <compound kind="file">
    <name>Generic.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/src/DocBlock/Tags/</path>
    <filename>Generic_8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::Generic</class>
    <namespace>phpDocumentor::Reflection::DocBlock::Tags</namespace>
  </compound>
  <compound kind="file">
    <name>InvalidTag.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/src/DocBlock/Tags/</path>
    <filename>InvalidTag_8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::InvalidTag</class>
    <namespace>phpDocumentor::Reflection::DocBlock::Tags</namespace>
  </compound>
  <compound kind="file">
    <name>Link.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/src/DocBlock/Tags/</path>
    <filename>Link_8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::Link</class>
    <namespace>phpDocumentor::Reflection::DocBlock::Tags</namespace>
  </compound>
  <compound kind="file">
    <name>Param.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/src/DocBlock/Tags/</path>
    <filename>Param_8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::Param</class>
    <namespace>phpDocumentor::Reflection::DocBlock::Tags</namespace>
  </compound>
  <compound kind="file">
    <name>Property.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/src/DocBlock/Tags/</path>
    <filename>Property_8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::Property</class>
    <namespace>phpDocumentor::Reflection::DocBlock::Tags</namespace>
  </compound>
  <compound kind="file">
    <name>PropertyRead.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/src/DocBlock/Tags/</path>
    <filename>PropertyRead_8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::PropertyRead</class>
    <namespace>phpDocumentor::Reflection::DocBlock::Tags</namespace>
  </compound>
  <compound kind="file">
    <name>PropertyWrite.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/src/DocBlock/Tags/</path>
    <filename>PropertyWrite_8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::PropertyWrite</class>
    <namespace>phpDocumentor::Reflection::DocBlock::Tags</namespace>
  </compound>
  <compound kind="file">
    <name>Reference.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/src/DocBlock/Tags/Reference/</path>
    <filename>Reference_8php</filename>
    <class kind="interface">phpDocumentor::Reflection::DocBlock::Tags::Reference::Reference</class>
    <namespace>phpDocumentor::Reflection::DocBlock::Tags::Reference</namespace>
  </compound>
  <compound kind="file">
    <name>Return_.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/src/DocBlock/Tags/</path>
    <filename>Return___8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::Return_</class>
    <namespace>phpDocumentor::Reflection::DocBlock::Tags</namespace>
  </compound>
  <compound kind="file">
    <name>See.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/src/DocBlock/Tags/</path>
    <filename>See_8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::See</class>
    <namespace>phpDocumentor::Reflection::DocBlock::Tags</namespace>
  </compound>
  <compound kind="file">
    <name>Since.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/src/DocBlock/Tags/</path>
    <filename>Since_8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::Since</class>
    <namespace>phpDocumentor::Reflection::DocBlock::Tags</namespace>
  </compound>
  <compound kind="file">
    <name>Source.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/src/DocBlock/Tags/</path>
    <filename>phpdocumentor_2reflection-docblock_2src_2DocBlock_2Tags_2Source_8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::Source</class>
    <namespace>phpDocumentor::Reflection::DocBlock::Tags</namespace>
  </compound>
  <compound kind="file">
    <name>Source.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/src/Report/Xml/</path>
    <filename>phpunit_2php-code-coverage_2src_2Report_2Xml_2Source_8php</filename>
    <class kind="class">SebastianBergmann::CodeCoverage::Report::Xml::Source</class>
    <namespace>SebastianBergmann::CodeCoverage::Report::Xml</namespace>
  </compound>
  <compound kind="file">
    <name>TagWithType.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/src/DocBlock/Tags/</path>
    <filename>TagWithType_8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::TagWithType</class>
    <namespace>phpDocumentor::Reflection::DocBlock::Tags</namespace>
  </compound>
  <compound kind="file">
    <name>Throws.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/src/DocBlock/Tags/</path>
    <filename>Throws_8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::Throws</class>
    <namespace>phpDocumentor::Reflection::DocBlock::Tags</namespace>
  </compound>
  <compound kind="file">
    <name>Uses.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/src/DocBlock/Tags/</path>
    <filename>Uses_8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::Uses</class>
    <namespace>phpDocumentor::Reflection::DocBlock::Tags</namespace>
  </compound>
  <compound kind="file">
    <name>Var_.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/src/DocBlock/Tags/</path>
    <filename>Var___8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::Var_</class>
    <namespace>phpDocumentor::Reflection::DocBlock::Tags</namespace>
  </compound>
  <compound kind="file">
    <name>DocBlockFactory.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/src/</path>
    <filename>DocBlockFactory_8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlockFactory</class>
    <namespace>phpDocumentor::Reflection</namespace>
  </compound>
  <compound kind="file">
    <name>DocBlockFactoryInterface.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/src/</path>
    <filename>DocBlockFactoryInterface_8php</filename>
    <class kind="interface">phpDocumentor::Reflection::DocBlockFactoryInterface</class>
    <namespace>phpDocumentor::Reflection</namespace>
  </compound>
  <compound kind="file">
    <name>PcreException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/src/Exception/</path>
    <filename>PcreException_8php</filename>
    <class kind="class">phpDocumentor::Reflection::Exception::PcreException</class>
    <namespace>phpDocumentor::Reflection::Exception</namespace>
  </compound>
  <compound kind="file">
    <name>Utils.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/src/</path>
    <filename>Utils_8php</filename>
    <class kind="class">phpDocumentor::Reflection::Utils</class>
    <namespace>phpDocumentor::Reflection</namespace>
  </compound>
  <compound kind="file">
    <name>coverage-checker.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/tests/</path>
    <filename>coverage-checker_8php</filename>
    <member kind="variable">
      <type></type>
      <name>$inputFile</name>
      <anchorfile>coverage-checker_8php.html</anchorfile>
      <anchor>a5e881cc0d235e0144c9d833c44cff369</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$percentage</name>
      <anchorfile>coverage-checker_8php.html</anchorfile>
      <anchor>ae995ff20f80201bd82d98f6b0e8f9fdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>if(!file_exists($inputFile)) if(! $percentage)</type>
      <name>$xml</name>
      <anchorfile>coverage-checker_8php.html</anchorfile>
      <anchor>af2974f7145193b6d7afb811f42495e00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$metrics</name>
      <anchorfile>coverage-checker_8php.html</anchorfile>
      <anchor>aec09e16bb8fbc96a9337c925fe8a5b57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$totalElements</name>
      <anchorfile>coverage-checker_8php.html</anchorfile>
      <anchor>af80df5fed5ba286c9dcdd9439bbd7906</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$checkedElements</name>
      <anchorfile>coverage-checker_8php.html</anchorfile>
      <anchor>a6770df5da4abb7a5bdd80e85b9b6c5a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>foreach($metrics as $metric)</type>
      <name>$coverage</name>
      <anchorfile>coverage-checker_8php.html</anchorfile>
      <anchor>af357e25e4a2e9453c0a48cd0586b934e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>if</name>
      <anchorfile>coverage-checker_8php.html</anchorfile>
      <anchor>a9b5a8c59baa0370c15fb6e8469461253</anchor>
      <arglist>( $coverage&lt; $percentage)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DocblockSeeTagResolvingTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/tests/integration/</path>
    <filename>DocblockSeeTagResolvingTest_8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocblockSeeTagResolvingTest</class>
    <namespace>phpDocumentor::Reflection</namespace>
  </compound>
  <compound kind="file">
    <name>DocblocksWithAnnotationsTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/tests/integration/</path>
    <filename>DocblocksWithAnnotationsTest_8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocblocksWithAnnotationsTest</class>
    <namespace>phpDocumentor::Reflection</namespace>
  </compound>
  <compound kind="file">
    <name>InterpretingDocBlocksTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/tests/integration/</path>
    <filename>InterpretingDocBlocksTest_8php</filename>
    <class kind="class">phpDocumentor::Reflection::InterpretingDocBlocksTest</class>
    <namespace>phpDocumentor::Reflection</namespace>
  </compound>
  <compound kind="file">
    <name>ModifyBackTraceSafeTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/tests/integration/</path>
    <filename>ModifyBackTraceSafeTest_8php</filename>
    <class kind="class">phpDocumentor::Reflection::ModifyBackTraceSafeTest</class>
    <class kind="class">phpDocumentor::Reflection::Node</class>
    <class kind="class">phpDocumentor::Reflection::Traverser</class>
    <namespace>phpDocumentor::Reflection</namespace>
  </compound>
  <compound kind="file">
    <name>ReconstitutingADocBlockTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/tests/integration/</path>
    <filename>ReconstitutingADocBlockTest_8php</filename>
    <class kind="class">phpDocumentor::Reflection::ReconstitutingADocBlockTest</class>
    <namespace>phpDocumentor::Reflection</namespace>
  </compound>
  <compound kind="file">
    <name>UsingTagsTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/tests/integration/</path>
    <filename>UsingTagsTest_8php</filename>
    <class kind="class">phpDocumentor::Reflection::UsingTagsTest</class>
    <namespace>phpDocumentor::Reflection</namespace>
  </compound>
  <compound kind="file">
    <name>CustomParam.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/tests/unit/Assets/</path>
    <filename>CustomParam_8php</filename>
    <class kind="class">phpDocumentor::Reflection::Assets::CustomParam</class>
    <namespace>phpDocumentor::Reflection::Assets</namespace>
  </compound>
  <compound kind="file">
    <name>CustomServiceClass.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/tests/unit/Assets/</path>
    <filename>CustomServiceClass_8php</filename>
    <class kind="class">phpDocumentor::Reflection::Assets::CustomServiceClass</class>
    <namespace>phpDocumentor::Reflection::Assets</namespace>
  </compound>
  <compound kind="file">
    <name>CustomServiceInterface.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/tests/unit/Assets/</path>
    <filename>CustomServiceInterface_8php</filename>
    <class kind="class">phpDocumentor::Reflection::Assets::CustomServiceInterface</class>
    <namespace>phpDocumentor::Reflection::Assets</namespace>
  </compound>
  <compound kind="file">
    <name>DescriptionFactoryTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/tests/unit/DocBlock/</path>
    <filename>DescriptionFactoryTest_8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlock::DescriptionFactoryTest</class>
    <namespace>phpDocumentor::Reflection::DocBlock</namespace>
  </compound>
  <compound kind="file">
    <name>DescriptionTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/tests/unit/DocBlock/</path>
    <filename>DescriptionTest_8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlock::DescriptionTest</class>
    <namespace>phpDocumentor::Reflection::DocBlock</namespace>
  </compound>
  <compound kind="file">
    <name>ExampleFinderTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/tests/unit/DocBlock/</path>
    <filename>ExampleFinderTest_8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlock::ExampleFinderTest</class>
    <namespace>phpDocumentor::Reflection::DocBlock</namespace>
  </compound>
  <compound kind="file">
    <name>SerializerTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/tests/unit/DocBlock/</path>
    <filename>SerializerTest_8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlock::SerializerTest</class>
    <namespace>phpDocumentor::Reflection::DocBlock</namespace>
  </compound>
  <compound kind="file">
    <name>StandardTagFactoryTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/tests/unit/DocBlock/</path>
    <filename>StandardTagFactoryTest_8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlock::StandardTagFactoryTest</class>
    <namespace>phpDocumentor::Reflection::DocBlock</namespace>
  </compound>
  <compound kind="file">
    <name>CoversTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/tests/unit/DocBlock/Tags/</path>
    <filename>CoversTest_8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::CoversTest</class>
    <namespace>phpDocumentor::Reflection::DocBlock::Tags</namespace>
  </compound>
  <compound kind="file">
    <name>DeprecatedTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/tests/unit/DocBlock/Tags/</path>
    <filename>DeprecatedTest_8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::DeprecatedTest</class>
    <namespace>phpDocumentor::Reflection::DocBlock::Tags</namespace>
  </compound>
  <compound kind="file">
    <name>ExampleTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/tests/unit/DocBlock/Tags/</path>
    <filename>ExampleTest_8php</filename>
    <class kind="class">DocBlock::Tags::ExampleTest</class>
    <namespace>DocBlock::Tags</namespace>
  </compound>
  <compound kind="file">
    <name>AlignFormatterTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/tests/unit/DocBlock/Tags/Formatter/</path>
    <filename>AlignFormatterTest_8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::Formatter::AlignFormatterTest</class>
    <namespace>phpDocumentor::Reflection::DocBlock::Tags::Formatter</namespace>
  </compound>
  <compound kind="file">
    <name>PassthroughFormatterTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/tests/unit/DocBlock/Tags/Formatter/</path>
    <filename>PassthroughFormatterTest_8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::Formatter::PassthroughFormatterTest</class>
    <namespace>phpDocumentor::Reflection::DocBlock::Tags::Formatter</namespace>
  </compound>
  <compound kind="file">
    <name>GenericTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/tests/unit/DocBlock/Tags/</path>
    <filename>GenericTest_8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::GenericTest</class>
    <namespace>phpDocumentor::Reflection::DocBlock::Tags</namespace>
  </compound>
  <compound kind="file">
    <name>InvalidTagTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/tests/unit/DocBlock/Tags/</path>
    <filename>InvalidTagTest_8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::InvalidTagTest</class>
    <namespace>phpDocumentor::Reflection::DocBlock::Tags</namespace>
  </compound>
  <compound kind="file">
    <name>LinkTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/tests/unit/DocBlock/Tags/</path>
    <filename>LinkTest_8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::LinkTest</class>
    <namespace>phpDocumentor::Reflection::DocBlock::Tags</namespace>
  </compound>
  <compound kind="file">
    <name>MethodTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/tests/unit/DocBlock/Tags/</path>
    <filename>MethodTest_8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::MethodTest</class>
    <namespace>phpDocumentor::Reflection::DocBlock::Tags</namespace>
  </compound>
  <compound kind="file">
    <name>ParamTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/tests/unit/DocBlock/Tags/</path>
    <filename>ParamTest_8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::ParamTest</class>
    <namespace>phpDocumentor::Reflection::DocBlock::Tags</namespace>
  </compound>
  <compound kind="file">
    <name>PropertyReadTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/tests/unit/DocBlock/Tags/</path>
    <filename>PropertyReadTest_8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::PropertyReadTest</class>
    <namespace>phpDocumentor::Reflection::DocBlock::Tags</namespace>
  </compound>
  <compound kind="file">
    <name>PropertyTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/tests/unit/DocBlock/Tags/</path>
    <filename>PropertyTest_8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::PropertyTest</class>
    <namespace>phpDocumentor::Reflection::DocBlock::Tags</namespace>
  </compound>
  <compound kind="file">
    <name>PropertyWriteTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/tests/unit/DocBlock/Tags/</path>
    <filename>PropertyWriteTest_8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::PropertyWriteTest</class>
    <namespace>phpDocumentor::Reflection::DocBlock::Tags</namespace>
  </compound>
  <compound kind="file">
    <name>ReturnTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/tests/unit/DocBlock/Tags/</path>
    <filename>ReturnTest_8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::ReturnTest</class>
    <namespace>phpDocumentor::Reflection::DocBlock::Tags</namespace>
  </compound>
  <compound kind="file">
    <name>SeeTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/tests/unit/DocBlock/Tags/</path>
    <filename>SeeTest_8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::SeeTest</class>
    <namespace>phpDocumentor::Reflection::DocBlock::Tags</namespace>
  </compound>
  <compound kind="file">
    <name>SinceTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/tests/unit/DocBlock/Tags/</path>
    <filename>SinceTest_8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::SinceTest</class>
    <namespace>phpDocumentor::Reflection::DocBlock::Tags</namespace>
  </compound>
  <compound kind="file">
    <name>SourceTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/tests/unit/DocBlock/Tags/</path>
    <filename>SourceTest_8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::SourceTest</class>
    <namespace>phpDocumentor::Reflection::DocBlock::Tags</namespace>
  </compound>
  <compound kind="file">
    <name>ThrowsTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/tests/unit/DocBlock/Tags/</path>
    <filename>ThrowsTest_8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::ThrowsTest</class>
    <namespace>phpDocumentor::Reflection::DocBlock::Tags</namespace>
  </compound>
  <compound kind="file">
    <name>UsesTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/tests/unit/DocBlock/Tags/</path>
    <filename>UsesTest_8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::UsesTest</class>
    <namespace>phpDocumentor::Reflection::DocBlock::Tags</namespace>
  </compound>
  <compound kind="file">
    <name>VarTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/tests/unit/DocBlock/Tags/</path>
    <filename>VarTest_8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::VarTest</class>
    <namespace>phpDocumentor::Reflection::DocBlock::Tags</namespace>
  </compound>
  <compound kind="file">
    <name>DocBlockFactoryTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/tests/unit/</path>
    <filename>DocBlockFactoryTest_8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlockFactoryTest</class>
    <namespace>phpDocumentor::Reflection</namespace>
  </compound>
  <compound kind="file">
    <name>DocBlockTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/tests/unit/</path>
    <filename>DocBlockTest_8php</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlockTest</class>
    <namespace>phpDocumentor::Reflection</namespace>
  </compound>
  <compound kind="file">
    <name>PcreExceptionTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/tests/unit/Exception/</path>
    <filename>PcreExceptionTest_8php</filename>
    <class kind="class">phpDocumentor::Reflection::Exception::PcreExceptionTest</class>
    <namespace>phpDocumentor::Reflection::Exception</namespace>
  </compound>
  <compound kind="file">
    <name>PregSplitTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/reflection-docblock/tests/unit/</path>
    <filename>PregSplitTest_8php</filename>
    <class kind="class">phpDocumentor::Reflection::PregSplitTest</class>
    <namespace>phpDocumentor::Reflection</namespace>
  </compound>
  <compound kind="file">
    <name>01-resolving-simple-types.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/type-resolver/examples/</path>
    <filename>01-resolving-simple-types_8php</filename>
    <member kind="variable">
      <type></type>
      <name>$typeResolver</name>
      <anchorfile>01-resolving-simple-types_8php.html</anchorfile>
      <anchor>abd3cdae257349abcf3207feb78c9e661</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>02-resolving-classes.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/type-resolver/examples/</path>
    <filename>02-resolving-classes_8php</filename>
    <member kind="variable">
      <type></type>
      <name>$typeResolver</name>
      <anchorfile>02-resolving-classes_8php.html</anchorfile>
      <anchor>abd3cdae257349abcf3207feb78c9e661</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$context</name>
      <anchorfile>02-resolving-classes_8php.html</anchorfile>
      <anchor>ae05dedb802ada0155efdece2044fed64</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>03-resolving-all-elements.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/type-resolver/examples/</path>
    <filename>03-resolving-all-elements_8php</filename>
    <member kind="variable">
      <type></type>
      <name>$fqsenResolver</name>
      <anchorfile>03-resolving-all-elements_8php.html</anchorfile>
      <anchor>ad512f40943a9a5eb72be7ef41770a3c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$context</name>
      <anchorfile>03-resolving-all-elements_8php.html</anchorfile>
      <anchor>ae05dedb802ada0155efdece2044fed64</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>04-discovering-the-context-using-class-reflection.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/type-resolver/examples/</path>
    <filename>04-discovering-the-context-using-class-reflection_8php</filename>
    <member kind="variable">
      <type></type>
      <name>$typeResolver</name>
      <anchorfile>04-discovering-the-context-using-class-reflection_8php.html</anchorfile>
      <anchor>abd3cdae257349abcf3207feb78c9e661</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$fqsenResolver</name>
      <anchorfile>04-discovering-the-context-using-class-reflection_8php.html</anchorfile>
      <anchor>ad512f40943a9a5eb72be7ef41770a3c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$contextFactory</name>
      <anchorfile>04-discovering-the-context-using-class-reflection_8php.html</anchorfile>
      <anchor>a8ae90673bf777b533c1789e25638bdce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$context</name>
      <anchorfile>04-discovering-the-context-using-class-reflection_8php.html</anchorfile>
      <anchor>ae05dedb802ada0155efdece2044fed64</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>05-discovering-the-context-using-method-reflection.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/type-resolver/examples/</path>
    <filename>05-discovering-the-context-using-method-reflection_8php</filename>
    <member kind="variable">
      <type></type>
      <name>$typeResolver</name>
      <anchorfile>05-discovering-the-context-using-method-reflection_8php.html</anchorfile>
      <anchor>abd3cdae257349abcf3207feb78c9e661</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$fqsenResolver</name>
      <anchorfile>05-discovering-the-context-using-method-reflection_8php.html</anchorfile>
      <anchor>ad512f40943a9a5eb72be7ef41770a3c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$contextFactory</name>
      <anchorfile>05-discovering-the-context-using-method-reflection_8php.html</anchorfile>
      <anchor>a8ae90673bf777b533c1789e25638bdce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$context</name>
      <anchorfile>05-discovering-the-context-using-method-reflection_8php.html</anchorfile>
      <anchor>ae05dedb802ada0155efdece2044fed64</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>06-discovering-the-context-using-file-contents.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/type-resolver/examples/</path>
    <filename>06-discovering-the-context-using-file-contents_8php</filename>
    <member kind="variable">
      <type></type>
      <name>$typeResolver</name>
      <anchorfile>06-discovering-the-context-using-file-contents_8php.html</anchorfile>
      <anchor>abd3cdae257349abcf3207feb78c9e661</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$fqsenResolver</name>
      <anchorfile>06-discovering-the-context-using-file-contents_8php.html</anchorfile>
      <anchor>ad512f40943a9a5eb72be7ef41770a3c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$contextFactory</name>
      <anchorfile>06-discovering-the-context-using-file-contents_8php.html</anchorfile>
      <anchor>a8ae90673bf777b533c1789e25638bdce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$context</name>
      <anchorfile>06-discovering-the-context-using-file-contents_8php.html</anchorfile>
      <anchor>ae05dedb802ada0155efdece2044fed64</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Classy.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/type-resolver/examples/</path>
    <filename>Classy_8php</filename>
    <class kind="class">My::Example::Classy</class>
    <namespace>My::Example</namespace>
  </compound>
  <compound kind="file">
    <name>FqsenResolver.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/type-resolver/src/</path>
    <filename>FqsenResolver_8php</filename>
    <class kind="class">phpDocumentor::Reflection::FqsenResolver</class>
    <namespace>phpDocumentor::Reflection</namespace>
  </compound>
  <compound kind="file">
    <name>PseudoType.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/type-resolver/src/</path>
    <filename>PseudoType_8php</filename>
    <class kind="interface">phpDocumentor::Reflection::PseudoType</class>
    <namespace>phpDocumentor::Reflection</namespace>
  </compound>
  <compound kind="file">
    <name>False_.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/type-resolver/src/PseudoTypes/</path>
    <filename>False___8php</filename>
    <class kind="class">phpDocumentor::Reflection::PseudoTypes::False_</class>
    <namespace>phpDocumentor::Reflection::PseudoTypes</namespace>
  </compound>
  <compound kind="file">
    <name>True_.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/type-resolver/src/PseudoTypes/</path>
    <filename>True___8php</filename>
    <class kind="class">phpDocumentor::Reflection::PseudoTypes::True_</class>
    <namespace>phpDocumentor::Reflection::PseudoTypes</namespace>
  </compound>
  <compound kind="file">
    <name>TypeResolver.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/type-resolver/src/</path>
    <filename>TypeResolver_8php</filename>
    <class kind="class">phpDocumentor::Reflection::TypeResolver</class>
    <namespace>phpDocumentor::Reflection</namespace>
  </compound>
  <compound kind="file">
    <name>AbstractList.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/type-resolver/src/Types/</path>
    <filename>AbstractList_8php</filename>
    <class kind="class">phpDocumentor::Reflection::Types::AbstractList</class>
    <namespace>phpDocumentor::Reflection::Types</namespace>
  </compound>
  <compound kind="file">
    <name>AggregatedType.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/type-resolver/src/Types/</path>
    <filename>AggregatedType_8php</filename>
    <class kind="class">phpDocumentor::Reflection::Types::AggregatedType</class>
    <namespace>phpDocumentor::Reflection::Types</namespace>
  </compound>
  <compound kind="file">
    <name>Array_.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/type-resolver/src/Types/</path>
    <filename>Array___8php</filename>
    <class kind="class">phpDocumentor::Reflection::Types::Array_</class>
    <namespace>phpDocumentor::Reflection::Types</namespace>
  </compound>
  <compound kind="file">
    <name>Boolean.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/type-resolver/src/Types/</path>
    <filename>Boolean_8php</filename>
    <class kind="class">phpDocumentor::Reflection::Types::Boolean</class>
    <namespace>phpDocumentor::Reflection::Types</namespace>
  </compound>
  <compound kind="file">
    <name>Callable_.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/type-resolver/src/Types/</path>
    <filename>Callable___8php</filename>
    <class kind="class">phpDocumentor::Reflection::Types::Callable_</class>
    <namespace>phpDocumentor::Reflection::Types</namespace>
  </compound>
  <compound kind="file">
    <name>ClassString.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/type-resolver/src/Types/</path>
    <filename>ClassString_8php</filename>
    <class kind="class">phpDocumentor::Reflection::Types::ClassString</class>
    <namespace>phpDocumentor::Reflection::Types</namespace>
  </compound>
  <compound kind="file">
    <name>Collection.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/type-resolver/src/Types/</path>
    <filename>Collection_8php</filename>
    <class kind="class">phpDocumentor::Reflection::Types::Collection</class>
    <namespace>phpDocumentor::Reflection::Types</namespace>
  </compound>
  <compound kind="file">
    <name>Compound.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/type-resolver/src/Types/</path>
    <filename>Compound_8php</filename>
    <class kind="class">phpDocumentor::Reflection::Types::Compound</class>
    <namespace>phpDocumentor::Reflection::Types</namespace>
  </compound>
  <compound kind="file">
    <name>Context.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/type-resolver/src/Types/</path>
    <filename>phpdocumentor_2type-resolver_2src_2Types_2Context_8php</filename>
    <class kind="class">phpDocumentor::Reflection::Types::Context</class>
    <namespace>phpDocumentor::Reflection::Types</namespace>
  </compound>
  <compound kind="file">
    <name>Context.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/recursion-context/src/</path>
    <filename>sebastian_2recursion-context_2src_2Context_8php</filename>
    <class kind="class">SebastianBergmann::RecursionContext::Context</class>
    <namespace>SebastianBergmann::RecursionContext</namespace>
  </compound>
  <compound kind="file">
    <name>ContextFactory.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/type-resolver/src/Types/</path>
    <filename>ContextFactory_8php</filename>
    <class kind="class">phpDocumentor::Reflection::Types::ContextFactory</class>
    <namespace>phpDocumentor::Reflection::Types</namespace>
  </compound>
  <compound kind="file">
    <name>Expression.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/type-resolver/src/Types/</path>
    <filename>Expression_8php</filename>
    <class kind="class">phpDocumentor::Reflection::Types::Expression</class>
    <namespace>phpDocumentor::Reflection::Types</namespace>
  </compound>
  <compound kind="file">
    <name>Float_.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/type-resolver/src/Types/</path>
    <filename>Float___8php</filename>
    <class kind="class">phpDocumentor::Reflection::Types::Float_</class>
    <namespace>phpDocumentor::Reflection::Types</namespace>
  </compound>
  <compound kind="file">
    <name>Integer.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/type-resolver/src/Types/</path>
    <filename>Integer_8php</filename>
    <class kind="class">phpDocumentor::Reflection::Types::Integer</class>
    <namespace>phpDocumentor::Reflection::Types</namespace>
  </compound>
  <compound kind="file">
    <name>Intersection.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/type-resolver/src/Types/</path>
    <filename>Intersection_8php</filename>
    <class kind="class">phpDocumentor::Reflection::Types::Intersection</class>
    <namespace>phpDocumentor::Reflection::Types</namespace>
  </compound>
  <compound kind="file">
    <name>Iterable_.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/type-resolver/src/Types/</path>
    <filename>Iterable___8php</filename>
    <class kind="class">phpDocumentor::Reflection::Types::Iterable_</class>
    <namespace>phpDocumentor::Reflection::Types</namespace>
  </compound>
  <compound kind="file">
    <name>Mixed_.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/type-resolver/src/Types/</path>
    <filename>Mixed___8php</filename>
    <class kind="class">phpDocumentor::Reflection::Types::Mixed_</class>
    <namespace>phpDocumentor::Reflection::Types</namespace>
  </compound>
  <compound kind="file">
    <name>Null_.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/type-resolver/src/Types/</path>
    <filename>Null___8php</filename>
    <class kind="class">phpDocumentor::Reflection::Types::Null_</class>
    <namespace>phpDocumentor::Reflection::Types</namespace>
  </compound>
  <compound kind="file">
    <name>Nullable.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/type-resolver/src/Types/</path>
    <filename>Nullable_8php</filename>
    <class kind="class">phpDocumentor::Reflection::Types::Nullable</class>
    <namespace>phpDocumentor::Reflection::Types</namespace>
  </compound>
  <compound kind="file">
    <name>Object_.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/type-resolver/src/Types/</path>
    <filename>Object___8php</filename>
    <class kind="class">phpDocumentor::Reflection::Types::Object_</class>
    <namespace>phpDocumentor::Reflection::Types</namespace>
  </compound>
  <compound kind="file">
    <name>Parent_.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/type-resolver/src/Types/</path>
    <filename>Parent___8php</filename>
    <class kind="class">phpDocumentor::Reflection::Types::Parent_</class>
    <namespace>phpDocumentor::Reflection::Types</namespace>
  </compound>
  <compound kind="file">
    <name>Resource_.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/type-resolver/src/Types/</path>
    <filename>Resource___8php</filename>
    <class kind="class">phpDocumentor::Reflection::Types::Resource_</class>
    <namespace>phpDocumentor::Reflection::Types</namespace>
  </compound>
  <compound kind="file">
    <name>Scalar.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/type-resolver/src/Types/</path>
    <filename>Scalar_8php</filename>
    <class kind="class">phpDocumentor::Reflection::Types::Scalar</class>
    <namespace>phpDocumentor::Reflection::Types</namespace>
  </compound>
  <compound kind="file">
    <name>Self_.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/type-resolver/src/Types/</path>
    <filename>Self___8php</filename>
    <class kind="class">phpDocumentor::Reflection::Types::Self_</class>
    <namespace>phpDocumentor::Reflection::Types</namespace>
  </compound>
  <compound kind="file">
    <name>Static_.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/type-resolver/src/Types/</path>
    <filename>Static___8php</filename>
    <class kind="class">phpDocumentor::Reflection::Types::Static_</class>
    <namespace>phpDocumentor::Reflection::Types</namespace>
  </compound>
  <compound kind="file">
    <name>String_.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/type-resolver/src/Types/</path>
    <filename>String___8php</filename>
    <class kind="class">phpDocumentor::Reflection::Types::String_</class>
    <namespace>phpDocumentor::Reflection::Types</namespace>
  </compound>
  <compound kind="file">
    <name>This.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/type-resolver/src/Types/</path>
    <filename>This_8php</filename>
    <class kind="class">phpDocumentor::Reflection::Types::This</class>
    <namespace>phpDocumentor::Reflection::Types</namespace>
  </compound>
  <compound kind="file">
    <name>Void_.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/type-resolver/src/Types/</path>
    <filename>Void___8php</filename>
    <class kind="class">phpDocumentor::Reflection::Types::Void_</class>
    <namespace>phpDocumentor::Reflection::Types</namespace>
  </compound>
  <compound kind="file">
    <name>mpdf.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/type-resolver/tests/benchmark/Assets/</path>
    <filename>mpdf_8php</filename>
    <class kind="class">Mpdf::Mpdf</class>
    <namespace>Mpdf</namespace>
  </compound>
  <compound kind="file">
    <name>ContextFactoryBench.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/type-resolver/tests/benchmark/</path>
    <filename>ContextFactoryBench_8php</filename>
    <class kind="class">benchmark::ContextFactoryBench</class>
    <namespace>benchmark</namespace>
  </compound>
  <compound kind="file">
    <name>TypeResolverBench.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/type-resolver/tests/benchmark/</path>
    <filename>TypeResolverBench_8php</filename>
    <class kind="class">benchmark::TypeResolverBench</class>
    <namespace>benchmark</namespace>
  </compound>
  <compound kind="file">
    <name>TypeResolverWithContextBench.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/type-resolver/tests/benchmark/</path>
    <filename>TypeResolverWithContextBench_8php</filename>
    <class kind="class">benchmark::TypeResolverWithContextBench</class>
    <namespace>benchmark</namespace>
  </compound>
  <compound kind="file">
    <name>CollectionResolverTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/type-resolver/tests/unit/</path>
    <filename>CollectionResolverTest_8php</filename>
    <class kind="class">phpDocumentor::Reflection::CollectionResolverTest</class>
    <namespace>phpDocumentor::Reflection</namespace>
  </compound>
  <compound kind="file">
    <name>FqsenResolverTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/type-resolver/tests/unit/</path>
    <filename>FqsenResolverTest_8php</filename>
    <class kind="class">phpDocumentor::Reflection::FqsenResolverTest</class>
    <namespace>phpDocumentor::Reflection</namespace>
  </compound>
  <compound kind="file">
    <name>FalseTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/type-resolver/tests/unit/PseudoTypes/</path>
    <filename>FalseTest_8php</filename>
    <class kind="class">phpDocumentor::Reflection::PseudoTypes::FalseTest</class>
    <namespace>phpDocumentor::Reflection::PseudoTypes</namespace>
  </compound>
  <compound kind="file">
    <name>TrueTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/type-resolver/tests/unit/PseudoTypes/</path>
    <filename>TrueTest_8php</filename>
    <class kind="class">phpDocumentor::Reflection::PseudoTypes::TrueTest</class>
    <namespace>phpDocumentor::Reflection::PseudoTypes</namespace>
  </compound>
  <compound kind="file">
    <name>TypeResolverTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/type-resolver/tests/unit/</path>
    <filename>TypeResolverTest_8php</filename>
    <class kind="class">phpDocumentor::Reflection::TypeResolverTest</class>
    <namespace>phpDocumentor::Reflection</namespace>
  </compound>
  <compound kind="file">
    <name>ArrayTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/type-resolver/tests/unit/Types/</path>
    <filename>ArrayTest_8php</filename>
    <class kind="class">phpDocumentor::Reflection::Types::ArrayTest</class>
    <namespace>phpDocumentor::Reflection::Types</namespace>
  </compound>
  <compound kind="file">
    <name>BooleanTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/type-resolver/tests/unit/Types/</path>
    <filename>BooleanTest_8php</filename>
    <class kind="class">phpDocumentor::Reflection::Types::BooleanTest</class>
    <namespace>phpDocumentor::Reflection::Types</namespace>
  </compound>
  <compound kind="file">
    <name>ClassStringTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/type-resolver/tests/unit/Types/</path>
    <filename>ClassStringTest_8php</filename>
    <class kind="class">phpDocumentor::Reflection::Types::ClassStringTest</class>
    <namespace>phpDocumentor::Reflection::Types</namespace>
  </compound>
  <compound kind="file">
    <name>CollectionTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/type-resolver/tests/unit/Types/</path>
    <filename>CollectionTest_8php</filename>
    <class kind="class">phpDocumentor::Reflection::Types::CollectionTest</class>
    <namespace>phpDocumentor::Reflection::Types</namespace>
  </compound>
  <compound kind="file">
    <name>CompoundTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/type-resolver/tests/unit/Types/</path>
    <filename>CompoundTest_8php</filename>
    <class kind="class">phpDocumentor::Reflection::Types::CompoundTest</class>
    <namespace>phpDocumentor::Reflection::Types</namespace>
  </compound>
  <compound kind="file">
    <name>ContextFactoryTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/type-resolver/tests/unit/Types/</path>
    <filename>ContextFactoryTest_8php</filename>
    <class kind="class">phpDocumentor::Reflection::Types::ContextFactoryTest</class>
    <class kind="class">phpDocumentor::Reflection::Types::Mock::Foo</class>
    <namespace>phpDocumentor</namespace>
    <namespace>phpDocumentor::Reflection</namespace>
    <namespace>phpDocumentor::Reflection::Types</namespace>
    <namespace>phpDocumentor::Reflection::Types::Mock</namespace>
  </compound>
  <compound kind="file">
    <name>ContextTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/type-resolver/tests/unit/Types/</path>
    <filename>phpdocumentor_2type-resolver_2tests_2unit_2Types_2ContextTest_8php</filename>
    <class kind="class">phpDocumentor::Reflection::Types::ContextTest</class>
    <namespace>phpDocumentor::Reflection::Types</namespace>
  </compound>
  <compound kind="file">
    <name>ContextTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/recursion-context/tests/</path>
    <filename>sebastian_2recursion-context_2tests_2ContextTest_8php</filename>
    <class kind="class">SebastianBergmann::RecursionContext::ContextTest</class>
    <namespace>SebastianBergmann::RecursionContext</namespace>
  </compound>
  <compound kind="file">
    <name>IterableTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/type-resolver/tests/unit/Types/</path>
    <filename>IterableTest_8php</filename>
    <class kind="class">phpDocumentor::Reflection::Types::IterableTest</class>
    <namespace>phpDocumentor::Reflection::Types</namespace>
  </compound>
  <compound kind="file">
    <name>NullableTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpdocumentor/type-resolver/tests/unit/Types/</path>
    <filename>NullableTest_8php</filename>
    <class kind="class">phpDocumentor::Reflection::Types::NullableTest</class>
    <namespace>phpDocumentor::Reflection::Types</namespace>
  </compound>
  <compound kind="file">
    <name>CHANGES.md</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/</path>
    <filename>CHANGES_8md</filename>
  </compound>
  <compound kind="file">
    <name>Argument.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/</path>
    <filename>Argument_8php</filename>
    <class kind="class">Prophecy::Argument</class>
    <namespace>Prophecy</namespace>
  </compound>
  <compound kind="file">
    <name>ArgumentsWildcard.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Argument/</path>
    <filename>ArgumentsWildcard_8php</filename>
    <class kind="class">Prophecy::Argument::ArgumentsWildcard</class>
    <namespace>Prophecy::Argument</namespace>
  </compound>
  <compound kind="file">
    <name>AnyValuesToken.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Argument/Token/</path>
    <filename>AnyValuesToken_8php</filename>
    <class kind="class">Prophecy::Argument::Token::AnyValuesToken</class>
    <namespace>Prophecy::Argument::Token</namespace>
  </compound>
  <compound kind="file">
    <name>AnyValueToken.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Argument/Token/</path>
    <filename>AnyValueToken_8php</filename>
    <class kind="class">Prophecy::Argument::Token::AnyValueToken</class>
    <namespace>Prophecy::Argument::Token</namespace>
  </compound>
  <compound kind="file">
    <name>ApproximateValueToken.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Argument/Token/</path>
    <filename>ApproximateValueToken_8php</filename>
    <class kind="class">Prophecy::Argument::Token::ApproximateValueToken</class>
    <namespace>Prophecy::Argument::Token</namespace>
  </compound>
  <compound kind="file">
    <name>ArrayCountToken.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Argument/Token/</path>
    <filename>ArrayCountToken_8php</filename>
    <class kind="class">Prophecy::Argument::Token::ArrayCountToken</class>
    <namespace>Prophecy::Argument::Token</namespace>
  </compound>
  <compound kind="file">
    <name>ArrayEntryToken.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Argument/Token/</path>
    <filename>ArrayEntryToken_8php</filename>
    <class kind="class">Prophecy::Argument::Token::ArrayEntryToken</class>
    <namespace>Prophecy::Argument::Token</namespace>
  </compound>
  <compound kind="file">
    <name>ArrayEveryEntryToken.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Argument/Token/</path>
    <filename>ArrayEveryEntryToken_8php</filename>
    <class kind="class">Prophecy::Argument::Token::ArrayEveryEntryToken</class>
    <namespace>Prophecy::Argument::Token</namespace>
  </compound>
  <compound kind="file">
    <name>CallbackToken.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Argument/Token/</path>
    <filename>CallbackToken_8php</filename>
    <class kind="class">Prophecy::Argument::Token::CallbackToken</class>
    <namespace>Prophecy::Argument::Token</namespace>
  </compound>
  <compound kind="file">
    <name>ExactValueToken.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Argument/Token/</path>
    <filename>ExactValueToken_8php</filename>
    <class kind="class">Prophecy::Argument::Token::ExactValueToken</class>
    <namespace>Prophecy::Argument::Token</namespace>
  </compound>
  <compound kind="file">
    <name>IdenticalValueToken.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Argument/Token/</path>
    <filename>IdenticalValueToken_8php</filename>
    <class kind="class">Prophecy::Argument::Token::IdenticalValueToken</class>
    <namespace>Prophecy::Argument::Token</namespace>
  </compound>
  <compound kind="file">
    <name>InArrayToken.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Argument/Token/</path>
    <filename>InArrayToken_8php</filename>
    <class kind="class">Prophecy::Argument::Token::InArrayToken</class>
    <namespace>Prophecy::Argument::Token</namespace>
  </compound>
  <compound kind="file">
    <name>LogicalAndToken.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Argument/Token/</path>
    <filename>LogicalAndToken_8php</filename>
    <class kind="class">Prophecy::Argument::Token::LogicalAndToken</class>
    <namespace>Prophecy::Argument::Token</namespace>
  </compound>
  <compound kind="file">
    <name>LogicalNotToken.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Argument/Token/</path>
    <filename>LogicalNotToken_8php</filename>
    <class kind="class">Prophecy::Argument::Token::LogicalNotToken</class>
    <namespace>Prophecy::Argument::Token</namespace>
  </compound>
  <compound kind="file">
    <name>NotInArrayToken.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Argument/Token/</path>
    <filename>NotInArrayToken_8php</filename>
    <class kind="class">Prophecy::Argument::Token::NotInArrayToken</class>
    <namespace>Prophecy::Argument::Token</namespace>
  </compound>
  <compound kind="file">
    <name>ObjectStateToken.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Argument/Token/</path>
    <filename>ObjectStateToken_8php</filename>
    <class kind="class">Prophecy::Argument::Token::ObjectStateToken</class>
    <namespace>Prophecy::Argument::Token</namespace>
  </compound>
  <compound kind="file">
    <name>StringContainsToken.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Argument/Token/</path>
    <filename>StringContainsToken_8php</filename>
    <class kind="class">Prophecy::Argument::Token::StringContainsToken</class>
    <namespace>Prophecy::Argument::Token</namespace>
  </compound>
  <compound kind="file">
    <name>TokenInterface.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Argument/Token/</path>
    <filename>TokenInterface_8php</filename>
    <class kind="interface">Prophecy::Argument::Token::TokenInterface</class>
    <namespace>Prophecy::Argument::Token</namespace>
  </compound>
  <compound kind="file">
    <name>TypeToken.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Argument/Token/</path>
    <filename>TypeToken_8php</filename>
    <class kind="class">Prophecy::Argument::Token::TypeToken</class>
    <namespace>Prophecy::Argument::Token</namespace>
  </compound>
  <compound kind="file">
    <name>Call.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Call/</path>
    <filename>Call_8php</filename>
    <class kind="class">Prophecy::Call::Call</class>
    <namespace>Prophecy::Call</namespace>
  </compound>
  <compound kind="file">
    <name>CallCenter.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Call/</path>
    <filename>CallCenter_8php</filename>
    <class kind="class">Prophecy::Call::CallCenter</class>
    <namespace>Prophecy::Call</namespace>
  </compound>
  <compound kind="file">
    <name>ClosureComparator.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Comparator/</path>
    <filename>ClosureComparator_8php</filename>
    <class kind="class">Prophecy::Comparator::ClosureComparator</class>
    <namespace>Prophecy::Comparator</namespace>
  </compound>
  <compound kind="file">
    <name>Factory.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Comparator/</path>
    <filename>phpspec_2prophecy_2src_2Prophecy_2Comparator_2Factory_8php</filename>
    <class kind="class">Prophecy::Comparator::Factory</class>
    <namespace>Prophecy::Comparator</namespace>
  </compound>
  <compound kind="file">
    <name>Factory.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-file-iterator/src/</path>
    <filename>phpunit_2php-file-iterator_2src_2Factory_8php</filename>
    <class kind="class">SebastianBergmann::FileIterator::Factory</class>
    <namespace>SebastianBergmann::FileIterator</namespace>
  </compound>
  <compound kind="file">
    <name>Factory.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Runner/Filter/</path>
    <filename>phpunit_2phpunit_2src_2Runner_2Filter_2Factory_8php</filename>
    <class kind="class">PHPUnit::Runner::Filter::Factory</class>
    <namespace>PHPUnit::Runner::Filter</namespace>
  </compound>
  <compound kind="file">
    <name>Factory.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/comparator/src/</path>
    <filename>sebastian_2comparator_2src_2Factory_8php</filename>
    <class kind="class">SebastianBergmann::Comparator::Factory</class>
    <namespace>SebastianBergmann::Comparator</namespace>
  </compound>
  <compound kind="file">
    <name>ProphecyComparator.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Comparator/</path>
    <filename>ProphecyComparator_8php</filename>
    <class kind="class">Prophecy::Comparator::ProphecyComparator</class>
    <namespace>Prophecy::Comparator</namespace>
  </compound>
  <compound kind="file">
    <name>CachedDoubler.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Doubler/</path>
    <filename>CachedDoubler_8php</filename>
    <class kind="class">Prophecy::Doubler::CachedDoubler</class>
    <namespace>Prophecy::Doubler</namespace>
  </compound>
  <compound kind="file">
    <name>ClassPatchInterface.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Doubler/ClassPatch/</path>
    <filename>ClassPatchInterface_8php</filename>
    <class kind="interface">Prophecy::Doubler::ClassPatch::ClassPatchInterface</class>
    <namespace>Prophecy::Doubler::ClassPatch</namespace>
  </compound>
  <compound kind="file">
    <name>DisableConstructorPatch.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Doubler/ClassPatch/</path>
    <filename>DisableConstructorPatch_8php</filename>
    <class kind="class">Prophecy::Doubler::ClassPatch::DisableConstructorPatch</class>
    <namespace>Prophecy::Doubler::ClassPatch</namespace>
  </compound>
  <compound kind="file">
    <name>HhvmExceptionPatch.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Doubler/ClassPatch/</path>
    <filename>HhvmExceptionPatch_8php</filename>
    <class kind="class">Prophecy::Doubler::ClassPatch::HhvmExceptionPatch</class>
    <namespace>Prophecy::Doubler::ClassPatch</namespace>
  </compound>
  <compound kind="file">
    <name>KeywordPatch.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Doubler/ClassPatch/</path>
    <filename>KeywordPatch_8php</filename>
    <class kind="class">Prophecy::Doubler::ClassPatch::KeywordPatch</class>
    <namespace>Prophecy::Doubler::ClassPatch</namespace>
  </compound>
  <compound kind="file">
    <name>MagicCallPatch.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Doubler/ClassPatch/</path>
    <filename>MagicCallPatch_8php</filename>
    <class kind="class">Prophecy::Doubler::ClassPatch::MagicCallPatch</class>
    <namespace>Prophecy::Doubler::ClassPatch</namespace>
  </compound>
  <compound kind="file">
    <name>ProphecySubjectPatch.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Doubler/ClassPatch/</path>
    <filename>ProphecySubjectPatch_8php</filename>
    <class kind="class">Prophecy::Doubler::ClassPatch::ProphecySubjectPatch</class>
    <namespace>Prophecy::Doubler::ClassPatch</namespace>
  </compound>
  <compound kind="file">
    <name>ReflectionClassNewInstancePatch.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Doubler/ClassPatch/</path>
    <filename>ReflectionClassNewInstancePatch_8php</filename>
    <class kind="class">Prophecy::Doubler::ClassPatch::ReflectionClassNewInstancePatch</class>
    <namespace>Prophecy::Doubler::ClassPatch</namespace>
  </compound>
  <compound kind="file">
    <name>SplFileInfoPatch.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Doubler/ClassPatch/</path>
    <filename>SplFileInfoPatch_8php</filename>
    <class kind="class">Prophecy::Doubler::ClassPatch::SplFileInfoPatch</class>
    <namespace>Prophecy::Doubler::ClassPatch</namespace>
  </compound>
  <compound kind="file">
    <name>ThrowablePatch.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Doubler/ClassPatch/</path>
    <filename>ThrowablePatch_8php</filename>
    <class kind="class">Prophecy::Doubler::ClassPatch::ThrowablePatch</class>
    <namespace>Prophecy::Doubler::ClassPatch</namespace>
  </compound>
  <compound kind="file">
    <name>TraversablePatch.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Doubler/ClassPatch/</path>
    <filename>TraversablePatch_8php</filename>
    <class kind="class">Prophecy::Doubler::ClassPatch::TraversablePatch</class>
    <namespace>Prophecy::Doubler::ClassPatch</namespace>
  </compound>
  <compound kind="file">
    <name>DoubleInterface.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Doubler/</path>
    <filename>DoubleInterface_8php</filename>
    <class kind="interface">Prophecy::Doubler::DoubleInterface</class>
    <namespace>Prophecy::Doubler</namespace>
  </compound>
  <compound kind="file">
    <name>Doubler.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Doubler/</path>
    <filename>Doubler_8php</filename>
    <class kind="class">Prophecy::Doubler::Doubler</class>
    <namespace>Prophecy::Doubler</namespace>
  </compound>
  <compound kind="file">
    <name>ClassCodeGenerator.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Doubler/Generator/</path>
    <filename>ClassCodeGenerator_8php</filename>
    <class kind="class">Prophecy::Doubler::Generator::ClassCodeGenerator</class>
    <namespace>Prophecy::Doubler::Generator</namespace>
  </compound>
  <compound kind="file">
    <name>ClassCreator.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Doubler/Generator/</path>
    <filename>ClassCreator_8php</filename>
    <class kind="class">Prophecy::Doubler::Generator::ClassCreator</class>
    <namespace>Prophecy::Doubler::Generator</namespace>
  </compound>
  <compound kind="file">
    <name>ClassMirror.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Doubler/Generator/</path>
    <filename>ClassMirror_8php</filename>
    <class kind="class">Prophecy::Doubler::Generator::ClassMirror</class>
    <namespace>Prophecy::Doubler::Generator</namespace>
  </compound>
  <compound kind="file">
    <name>ArgumentNode.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Doubler/Generator/Node/</path>
    <filename>ArgumentNode_8php</filename>
    <class kind="class">Prophecy::Doubler::Generator::Node::ArgumentNode</class>
    <namespace>Prophecy::Doubler::Generator::Node</namespace>
  </compound>
  <compound kind="file">
    <name>ArgumentTypeNode.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Doubler/Generator/Node/</path>
    <filename>ArgumentTypeNode_8php</filename>
    <class kind="class">Prophecy::Doubler::Generator::Node::ArgumentTypeNode</class>
    <namespace>Prophecy::Doubler::Generator::Node</namespace>
  </compound>
  <compound kind="file">
    <name>ClassNode.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Doubler/Generator/Node/</path>
    <filename>ClassNode_8php</filename>
    <class kind="class">Prophecy::Doubler::Generator::Node::ClassNode</class>
    <namespace>Prophecy::Doubler::Generator::Node</namespace>
  </compound>
  <compound kind="file">
    <name>MethodNode.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Doubler/Generator/Node/</path>
    <filename>MethodNode_8php</filename>
    <class kind="class">Prophecy::Doubler::Generator::Node::MethodNode</class>
    <namespace>Prophecy::Doubler::Generator::Node</namespace>
  </compound>
  <compound kind="file">
    <name>ReturnTypeNode.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Doubler/Generator/Node/</path>
    <filename>ReturnTypeNode_8php</filename>
    <class kind="class">Prophecy::Doubler::Generator::Node::ReturnTypeNode</class>
    <namespace>Prophecy::Doubler::Generator::Node</namespace>
  </compound>
  <compound kind="file">
    <name>TypeNodeAbstract.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Doubler/Generator/Node/</path>
    <filename>TypeNodeAbstract_8php</filename>
    <class kind="class">Prophecy::Doubler::Generator::Node::TypeNodeAbstract</class>
    <namespace>Prophecy::Doubler::Generator::Node</namespace>
  </compound>
  <compound kind="file">
    <name>ReflectionInterface.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Doubler/Generator/</path>
    <filename>ReflectionInterface_8php</filename>
    <class kind="interface">Prophecy::Doubler::Generator::ReflectionInterface</class>
    <namespace>Prophecy::Doubler::Generator</namespace>
  </compound>
  <compound kind="file">
    <name>TypeHintReference.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Doubler/Generator/</path>
    <filename>TypeHintReference_8php</filename>
    <class kind="class">Prophecy::Doubler::Generator::TypeHintReference</class>
    <namespace>Prophecy::Doubler::Generator</namespace>
  </compound>
  <compound kind="file">
    <name>LazyDouble.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Doubler/</path>
    <filename>LazyDouble_8php</filename>
    <class kind="class">Prophecy::Doubler::LazyDouble</class>
    <namespace>Prophecy::Doubler</namespace>
  </compound>
  <compound kind="file">
    <name>NameGenerator.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Doubler/</path>
    <filename>NameGenerator_8php</filename>
    <class kind="class">Prophecy::Doubler::NameGenerator</class>
    <namespace>Prophecy::Doubler</namespace>
  </compound>
  <compound kind="file">
    <name>UnexpectedCallException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Exception/Call/</path>
    <filename>UnexpectedCallException_8php</filename>
    <class kind="class">Prophecy::Exception::Call::UnexpectedCallException</class>
    <namespace>Prophecy::Exception::Call</namespace>
  </compound>
  <compound kind="file">
    <name>ClassCreatorException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Exception/Doubler/</path>
    <filename>ClassCreatorException_8php</filename>
    <class kind="class">Prophecy::Exception::Doubler::ClassCreatorException</class>
    <namespace>Prophecy::Exception::Doubler</namespace>
  </compound>
  <compound kind="file">
    <name>ClassMirrorException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Exception/Doubler/</path>
    <filename>ClassMirrorException_8php</filename>
    <class kind="class">Prophecy::Exception::Doubler::ClassMirrorException</class>
    <namespace>Prophecy::Exception::Doubler</namespace>
  </compound>
  <compound kind="file">
    <name>ClassNotFoundException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Exception/Doubler/</path>
    <filename>ClassNotFoundException_8php</filename>
    <class kind="class">Prophecy::Exception::Doubler::ClassNotFoundException</class>
    <namespace>Prophecy::Exception::Doubler</namespace>
  </compound>
  <compound kind="file">
    <name>DoubleException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Exception/Doubler/</path>
    <filename>DoubleException_8php</filename>
    <class kind="class">Prophecy::Exception::Doubler::DoubleException</class>
    <namespace>Prophecy::Exception::Doubler</namespace>
  </compound>
  <compound kind="file">
    <name>DoublerException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Exception/Doubler/</path>
    <filename>DoublerException_8php</filename>
    <class kind="interface">Prophecy::Exception::Doubler::DoublerException</class>
    <namespace>Prophecy::Exception::Doubler</namespace>
  </compound>
  <compound kind="file">
    <name>InterfaceNotFoundException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Exception/Doubler/</path>
    <filename>InterfaceNotFoundException_8php</filename>
    <class kind="class">Prophecy::Exception::Doubler::InterfaceNotFoundException</class>
    <namespace>Prophecy::Exception::Doubler</namespace>
  </compound>
  <compound kind="file">
    <name>MethodNotExtendableException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Exception/Doubler/</path>
    <filename>MethodNotExtendableException_8php</filename>
    <class kind="class">Prophecy::Exception::Doubler::MethodNotExtendableException</class>
    <namespace>Prophecy::Exception::Doubler</namespace>
  </compound>
  <compound kind="file">
    <name>MethodNotFoundException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Exception/Doubler/</path>
    <filename>MethodNotFoundException_8php</filename>
    <class kind="class">Prophecy::Exception::Doubler::MethodNotFoundException</class>
    <namespace>Prophecy::Exception::Doubler</namespace>
  </compound>
  <compound kind="file">
    <name>ReturnByReferenceException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Exception/Doubler/</path>
    <filename>ReturnByReferenceException_8php</filename>
    <class kind="class">Prophecy::Exception::Doubler::ReturnByReferenceException</class>
    <namespace>Prophecy::Exception::Doubler</namespace>
  </compound>
  <compound kind="file">
    <name>AggregateException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Exception/Prediction/</path>
    <filename>AggregateException_8php</filename>
    <class kind="class">Prophecy::Exception::Prediction::AggregateException</class>
    <namespace>Prophecy::Exception::Prediction</namespace>
  </compound>
  <compound kind="file">
    <name>FailedPredictionException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Exception/Prediction/</path>
    <filename>FailedPredictionException_8php</filename>
    <class kind="class">Prophecy::Exception::Prediction::FailedPredictionException</class>
    <namespace>Prophecy::Exception::Prediction</namespace>
  </compound>
  <compound kind="file">
    <name>NoCallsException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Exception/Prediction/</path>
    <filename>NoCallsException_8php</filename>
    <class kind="class">Prophecy::Exception::Prediction::NoCallsException</class>
    <namespace>Prophecy::Exception::Prediction</namespace>
  </compound>
  <compound kind="file">
    <name>PredictionException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Exception/Prediction/</path>
    <filename>PredictionException_8php</filename>
    <class kind="interface">Prophecy::Exception::Prediction::PredictionException</class>
    <namespace>Prophecy::Exception::Prediction</namespace>
  </compound>
  <compound kind="file">
    <name>UnexpectedCallsCountException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Exception/Prediction/</path>
    <filename>UnexpectedCallsCountException_8php</filename>
    <class kind="class">Prophecy::Exception::Prediction::UnexpectedCallsCountException</class>
    <namespace>Prophecy::Exception::Prediction</namespace>
  </compound>
  <compound kind="file">
    <name>UnexpectedCallsException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Exception/Prediction/</path>
    <filename>UnexpectedCallsException_8php</filename>
    <class kind="class">Prophecy::Exception::Prediction::UnexpectedCallsException</class>
    <namespace>Prophecy::Exception::Prediction</namespace>
  </compound>
  <compound kind="file">
    <name>MethodProphecyException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Exception/Prophecy/</path>
    <filename>MethodProphecyException_8php</filename>
    <class kind="class">Prophecy::Exception::Prophecy::MethodProphecyException</class>
    <namespace>Prophecy::Exception::Prophecy</namespace>
  </compound>
  <compound kind="file">
    <name>ObjectProphecyException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Exception/Prophecy/</path>
    <filename>ObjectProphecyException_8php</filename>
    <class kind="class">Prophecy::Exception::Prophecy::ObjectProphecyException</class>
    <namespace>Prophecy::Exception::Prophecy</namespace>
  </compound>
  <compound kind="file">
    <name>ProphecyException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Exception/Prophecy/</path>
    <filename>ProphecyException_8php</filename>
    <class kind="interface">Prophecy::Exception::Prophecy::ProphecyException</class>
    <namespace>Prophecy::Exception::Prophecy</namespace>
  </compound>
  <compound kind="file">
    <name>ClassAndInterfaceTagRetriever.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/PhpDocumentor/</path>
    <filename>ClassAndInterfaceTagRetriever_8php</filename>
    <class kind="class">Prophecy::PhpDocumentor::ClassAndInterfaceTagRetriever</class>
    <namespace>Prophecy::PhpDocumentor</namespace>
  </compound>
  <compound kind="file">
    <name>ClassTagRetriever.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/PhpDocumentor/</path>
    <filename>ClassTagRetriever_8php</filename>
    <class kind="class">Prophecy::PhpDocumentor::ClassTagRetriever</class>
    <namespace>Prophecy::PhpDocumentor</namespace>
  </compound>
  <compound kind="file">
    <name>LegacyClassTagRetriever.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/PhpDocumentor/</path>
    <filename>LegacyClassTagRetriever_8php</filename>
    <class kind="class">Prophecy::PhpDocumentor::LegacyClassTagRetriever</class>
    <namespace>Prophecy::PhpDocumentor</namespace>
  </compound>
  <compound kind="file">
    <name>MethodTagRetrieverInterface.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/PhpDocumentor/</path>
    <filename>MethodTagRetrieverInterface_8php</filename>
    <class kind="interface">Prophecy::PhpDocumentor::MethodTagRetrieverInterface</class>
    <namespace>Prophecy::PhpDocumentor</namespace>
  </compound>
  <compound kind="file">
    <name>CallbackPrediction.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Prediction/</path>
    <filename>CallbackPrediction_8php</filename>
    <class kind="class">Prophecy::Prediction::CallbackPrediction</class>
    <namespace>Prophecy::Prediction</namespace>
  </compound>
  <compound kind="file">
    <name>CallPrediction.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Prediction/</path>
    <filename>CallPrediction_8php</filename>
    <class kind="class">Prophecy::Prediction::CallPrediction</class>
    <namespace>Prophecy::Prediction</namespace>
  </compound>
  <compound kind="file">
    <name>CallTimesPrediction.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Prediction/</path>
    <filename>CallTimesPrediction_8php</filename>
    <class kind="class">Prophecy::Prediction::CallTimesPrediction</class>
    <namespace>Prophecy::Prediction</namespace>
  </compound>
  <compound kind="file">
    <name>NoCallsPrediction.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Prediction/</path>
    <filename>NoCallsPrediction_8php</filename>
    <class kind="class">Prophecy::Prediction::NoCallsPrediction</class>
    <namespace>Prophecy::Prediction</namespace>
  </compound>
  <compound kind="file">
    <name>PredictionInterface.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Prediction/</path>
    <filename>PredictionInterface_8php</filename>
    <class kind="interface">Prophecy::Prediction::PredictionInterface</class>
    <namespace>Prophecy::Prediction</namespace>
  </compound>
  <compound kind="file">
    <name>CallbackPromise.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Promise/</path>
    <filename>CallbackPromise_8php</filename>
    <class kind="class">Prophecy::Promise::CallbackPromise</class>
    <namespace>Prophecy::Promise</namespace>
  </compound>
  <compound kind="file">
    <name>PromiseInterface.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Promise/</path>
    <filename>PromiseInterface_8php</filename>
    <class kind="interface">Prophecy::Promise::PromiseInterface</class>
    <namespace>Prophecy::Promise</namespace>
  </compound>
  <compound kind="file">
    <name>ReturnArgumentPromise.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Promise/</path>
    <filename>ReturnArgumentPromise_8php</filename>
    <class kind="class">Prophecy::Promise::ReturnArgumentPromise</class>
    <namespace>Prophecy::Promise</namespace>
  </compound>
  <compound kind="file">
    <name>ReturnPromise.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Promise/</path>
    <filename>ReturnPromise_8php</filename>
    <class kind="class">Prophecy::Promise::ReturnPromise</class>
    <namespace>Prophecy::Promise</namespace>
  </compound>
  <compound kind="file">
    <name>ThrowPromise.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Promise/</path>
    <filename>ThrowPromise_8php</filename>
    <class kind="class">Prophecy::Promise::ThrowPromise</class>
    <namespace>Prophecy::Promise</namespace>
  </compound>
  <compound kind="file">
    <name>MethodProphecy.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Prophecy/</path>
    <filename>MethodProphecy_8php</filename>
    <class kind="class">Prophecy::Prophecy::MethodProphecy</class>
    <namespace>Prophecy::Prophecy</namespace>
  </compound>
  <compound kind="file">
    <name>ObjectProphecy.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Prophecy/</path>
    <filename>ObjectProphecy_8php</filename>
    <class kind="class">Prophecy::Prophecy::ObjectProphecy</class>
    <namespace>Prophecy::Prophecy</namespace>
  </compound>
  <compound kind="file">
    <name>ProphecyInterface.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Prophecy/</path>
    <filename>ProphecyInterface_8php</filename>
    <class kind="interface">Prophecy::Prophecy::ProphecyInterface</class>
    <namespace>Prophecy::Prophecy</namespace>
  </compound>
  <compound kind="file">
    <name>ProphecySubjectInterface.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Prophecy/</path>
    <filename>ProphecySubjectInterface_8php</filename>
    <class kind="interface">Prophecy::Prophecy::ProphecySubjectInterface</class>
    <namespace>Prophecy::Prophecy</namespace>
  </compound>
  <compound kind="file">
    <name>Revealer.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Prophecy/</path>
    <filename>Revealer_8php</filename>
    <class kind="class">Prophecy::Prophecy::Revealer</class>
    <namespace>Prophecy::Prophecy</namespace>
  </compound>
  <compound kind="file">
    <name>RevealerInterface.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Prophecy/</path>
    <filename>RevealerInterface_8php</filename>
    <class kind="interface">Prophecy::Prophecy::RevealerInterface</class>
    <namespace>Prophecy::Prophecy</namespace>
  </compound>
  <compound kind="file">
    <name>Prophet.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/</path>
    <filename>Prophet_8php</filename>
    <class kind="class">Prophecy::Prophet</class>
    <namespace>Prophecy</namespace>
  </compound>
  <compound kind="file">
    <name>ExportUtil.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Util/</path>
    <filename>ExportUtil_8php</filename>
    <class kind="class">Prophecy::Util::ExportUtil</class>
    <namespace>Prophecy::Util</namespace>
  </compound>
  <compound kind="file">
    <name>StringUtil.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpspec/prophecy/src/Prophecy/Util/</path>
    <filename>StringUtil_8php</filename>
    <class kind="class">Prophecy::Util::StringUtil</class>
    <namespace>Prophecy::Util</namespace>
  </compound>
  <compound kind="file">
    <name>ChangeLog.md</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/</path>
    <filename>phpunit_2php-code-coverage_2ChangeLog_8md</filename>
  </compound>
  <compound kind="file">
    <name>ChangeLog.md</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-file-iterator/</path>
    <filename>phpunit_2php-file-iterator_2ChangeLog_8md</filename>
  </compound>
  <compound kind="file">
    <name>ChangeLog.md</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-timer/</path>
    <filename>phpunit_2php-timer_2ChangeLog_8md</filename>
  </compound>
  <compound kind="file">
    <name>ChangeLog.md</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-token-stream/</path>
    <filename>phpunit_2php-token-stream_2ChangeLog_8md</filename>
  </compound>
  <compound kind="file">
    <name>ChangeLog.md</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/code-unit-reverse-lookup/</path>
    <filename>sebastian_2code-unit-reverse-lookup_2ChangeLog_8md</filename>
  </compound>
  <compound kind="file">
    <name>ChangeLog.md</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/comparator/</path>
    <filename>sebastian_2comparator_2ChangeLog_8md</filename>
  </compound>
  <compound kind="file">
    <name>ChangeLog.md</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/diff/</path>
    <filename>sebastian_2diff_2ChangeLog_8md</filename>
  </compound>
  <compound kind="file">
    <name>ChangeLog.md</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/environment/</path>
    <filename>sebastian_2environment_2ChangeLog_8md</filename>
  </compound>
  <compound kind="file">
    <name>ChangeLog.md</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/exporter/</path>
    <filename>sebastian_2exporter_2ChangeLog_8md</filename>
  </compound>
  <compound kind="file">
    <name>ChangeLog.md</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/global-state/</path>
    <filename>sebastian_2global-state_2ChangeLog_8md</filename>
  </compound>
  <compound kind="file">
    <name>ChangeLog.md</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/object-enumerator/</path>
    <filename>sebastian_2object-enumerator_2ChangeLog_8md</filename>
  </compound>
  <compound kind="file">
    <name>ChangeLog.md</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/object-reflector/</path>
    <filename>sebastian_2object-reflector_2ChangeLog_8md</filename>
  </compound>
  <compound kind="file">
    <name>ChangeLog.md</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/resource-operations/</path>
    <filename>sebastian_2resource-operations_2ChangeLog_8md</filename>
  </compound>
  <compound kind="file">
    <name>ChangeLog.md</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/type/</path>
    <filename>sebastian_2type_2ChangeLog_8md</filename>
  </compound>
  <compound kind="file">
    <name>CodeCoverage.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/src/</path>
    <filename>CodeCoverage_8php</filename>
    <class kind="class">SebastianBergmann::CodeCoverage::CodeCoverage</class>
    <namespace>SebastianBergmann::CodeCoverage</namespace>
  </compound>
  <compound kind="file">
    <name>Driver.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/src/Driver/</path>
    <filename>Driver_8php</filename>
    <class kind="interface">SebastianBergmann::CodeCoverage::Driver::Driver</class>
    <namespace>SebastianBergmann::CodeCoverage::Driver</namespace>
  </compound>
  <compound kind="file">
    <name>PCOV.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/src/Driver/</path>
    <filename>PCOV_8php</filename>
    <class kind="class">SebastianBergmann::CodeCoverage::Driver::PCOV</class>
    <namespace>SebastianBergmann::CodeCoverage::Driver</namespace>
  </compound>
  <compound kind="file">
    <name>PHPDBG.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/src/Driver/</path>
    <filename>PHPDBG_8php</filename>
    <class kind="class">SebastianBergmann::CodeCoverage::Driver::PHPDBG</class>
    <namespace>SebastianBergmann::CodeCoverage::Driver</namespace>
  </compound>
  <compound kind="file">
    <name>Xdebug.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/src/Driver/</path>
    <filename>Xdebug_8php</filename>
    <class kind="class">SebastianBergmann::CodeCoverage::Driver::Xdebug</class>
    <namespace>SebastianBergmann::CodeCoverage::Driver</namespace>
  </compound>
  <compound kind="file">
    <name>CoveredCodeNotExecutedException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/src/Exception/</path>
    <filename>php-code-coverage_2src_2Exception_2CoveredCodeNotExecutedException_8php</filename>
    <class kind="class">SebastianBergmann::CodeCoverage::CoveredCodeNotExecutedException</class>
    <namespace>SebastianBergmann::CodeCoverage</namespace>
  </compound>
  <compound kind="file">
    <name>CoveredCodeNotExecutedException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Exception/</path>
    <filename>phpunit_2src_2Framework_2Exception_2CoveredCodeNotExecutedException_8php</filename>
    <class kind="class">PHPUnit::Framework::CoveredCodeNotExecutedException</class>
    <namespace>PHPUnit::Framework</namespace>
  </compound>
  <compound kind="file">
    <name>MissingCoversAnnotationException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/src/Exception/</path>
    <filename>php-code-coverage_2src_2Exception_2MissingCoversAnnotationException_8php</filename>
    <class kind="class">SebastianBergmann::CodeCoverage::MissingCoversAnnotationException</class>
    <namespace>SebastianBergmann::CodeCoverage</namespace>
  </compound>
  <compound kind="file">
    <name>MissingCoversAnnotationException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Exception/</path>
    <filename>phpunit_2src_2Framework_2Exception_2MissingCoversAnnotationException_8php</filename>
    <class kind="class">PHPUnit::Framework::MissingCoversAnnotationException</class>
    <namespace>PHPUnit::Framework</namespace>
  </compound>
  <compound kind="file">
    <name>RuntimeException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/src/Exception/</path>
    <filename>phpunit_2php-code-coverage_2src_2Exception_2RuntimeException_8php</filename>
    <class kind="class">SebastianBergmann::CodeCoverage::RuntimeException</class>
    <namespace>SebastianBergmann::CodeCoverage</namespace>
  </compound>
  <compound kind="file">
    <name>RuntimeException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-timer/src/</path>
    <filename>phpunit_2php-timer_2src_2RuntimeException_8php</filename>
    <class kind="class">SebastianBergmann::Timer::RuntimeException</class>
    <namespace>SebastianBergmann::Timer</namespace>
  </compound>
  <compound kind="file">
    <name>RuntimeException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/MockObject/Exception/</path>
    <filename>phpunit_2phpunit_2src_2Framework_2MockObject_2Exception_2RuntimeException_8php</filename>
    <class kind="class">PHPUnit::Framework::MockObject::RuntimeException</class>
    <namespace>PHPUnit::Framework::MockObject</namespace>
  </compound>
  <compound kind="file">
    <name>RuntimeException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/global-state/src/exceptions/</path>
    <filename>sebastian_2global-state_2src_2exceptions_2RuntimeException_8php</filename>
    <class kind="class">SebastianBergmann::GlobalState::RuntimeException</class>
    <namespace>SebastianBergmann::GlobalState</namespace>
  </compound>
  <compound kind="file">
    <name>RuntimeException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/type/src/exception/</path>
    <filename>sebastian_2type_2src_2exception_2RuntimeException_8php</filename>
    <class kind="class">SebastianBergmann::Type::RuntimeException</class>
    <namespace>SebastianBergmann::Type</namespace>
  </compound>
  <compound kind="file">
    <name>UnintentionallyCoveredCodeException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/src/Exception/</path>
    <filename>UnintentionallyCoveredCodeException_8php</filename>
    <class kind="class">SebastianBergmann::CodeCoverage::UnintentionallyCoveredCodeException</class>
    <namespace>SebastianBergmann::CodeCoverage</namespace>
  </compound>
  <compound kind="file">
    <name>AbstractNode.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/src/Node/</path>
    <filename>AbstractNode_8php</filename>
    <class kind="class">SebastianBergmann::CodeCoverage::Node::AbstractNode</class>
    <namespace>SebastianBergmann::CodeCoverage::Node</namespace>
  </compound>
  <compound kind="file">
    <name>Builder.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/src/Node/</path>
    <filename>Builder_8php</filename>
    <class kind="class">SebastianBergmann::CodeCoverage::Node::Builder</class>
    <namespace>SebastianBergmann::CodeCoverage::Node</namespace>
  </compound>
  <compound kind="file">
    <name>Directory.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/src/Node/</path>
    <filename>Node_2Directory_8php</filename>
    <class kind="class">SebastianBergmann::CodeCoverage::Node::Directory</class>
    <namespace>SebastianBergmann::CodeCoverage::Node</namespace>
  </compound>
  <compound kind="file">
    <name>Directory.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/src/Report/Html/Renderer/</path>
    <filename>Report_2Html_2Renderer_2Directory_8php</filename>
    <class kind="class">SebastianBergmann::CodeCoverage::Report::Html::Directory</class>
    <namespace>SebastianBergmann::CodeCoverage::Report::Html</namespace>
  </compound>
  <compound kind="file">
    <name>Directory.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/src/Report/Xml/</path>
    <filename>Report_2Xml_2Directory_8php</filename>
    <class kind="class">SebastianBergmann::CodeCoverage::Report::Xml::Directory</class>
    <namespace>SebastianBergmann::CodeCoverage::Report::Xml</namespace>
  </compound>
  <compound kind="file">
    <name>Iterator.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/src/Node/</path>
    <filename>phpunit_2php-code-coverage_2src_2Node_2Iterator_8php</filename>
    <class kind="class">SebastianBergmann::CodeCoverage::Node::Iterator</class>
    <namespace>SebastianBergmann::CodeCoverage::Node</namespace>
  </compound>
  <compound kind="file">
    <name>Iterator.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-file-iterator/src/</path>
    <filename>phpunit_2php-file-iterator_2src_2Iterator_8php</filename>
    <class kind="class">SebastianBergmann::FileIterator::Iterator</class>
    <namespace>SebastianBergmann::FileIterator</namespace>
  </compound>
  <compound kind="file">
    <name>Iterator.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/type/tests/_fixture/</path>
    <filename>sebastian_2type_2tests_2__fixture_2Iterator_8php</filename>
    <class kind="class">SebastianBergmann::Type::TestFixture::Iterator</class>
    <namespace>SebastianBergmann::Type::TestFixture</namespace>
  </compound>
  <compound kind="file">
    <name>Clover.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/src/Report/</path>
    <filename>Clover_8php</filename>
    <class kind="class">SebastianBergmann::CodeCoverage::Report::Clover</class>
    <namespace>SebastianBergmann::CodeCoverage::Report</namespace>
  </compound>
  <compound kind="file">
    <name>Crap4j.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/src/Report/</path>
    <filename>Crap4j_8php</filename>
    <class kind="class">SebastianBergmann::CodeCoverage::Report::Crap4j</class>
    <namespace>SebastianBergmann::CodeCoverage::Report</namespace>
  </compound>
  <compound kind="file">
    <name>Facade.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/src/Report/Html/</path>
    <filename>php-code-coverage_2src_2Report_2Html_2Facade_8php</filename>
    <class kind="class">SebastianBergmann::CodeCoverage::Report::Html::Facade</class>
    <namespace>SebastianBergmann::CodeCoverage::Report::Html</namespace>
  </compound>
  <compound kind="file">
    <name>Facade.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/src/Report/Xml/</path>
    <filename>php-code-coverage_2src_2Report_2Xml_2Facade_8php</filename>
    <class kind="class">SebastianBergmann::CodeCoverage::Report::Xml::Facade</class>
    <namespace>SebastianBergmann::CodeCoverage::Report::Xml</namespace>
  </compound>
  <compound kind="file">
    <name>Facade.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-file-iterator/src/</path>
    <filename>php-file-iterator_2src_2Facade_8php</filename>
    <class kind="class">SebastianBergmann::FileIterator::Facade</class>
    <namespace>SebastianBergmann::FileIterator</namespace>
  </compound>
  <compound kind="file">
    <name>Renderer.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/src/Report/Html/</path>
    <filename>Renderer_8php</filename>
    <class kind="class">SebastianBergmann::CodeCoverage::Report::Html::Renderer</class>
    <namespace>SebastianBergmann::CodeCoverage::Report::Html</namespace>
  </compound>
  <compound kind="file">
    <name>Dashboard.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/src/Report/Html/Renderer/</path>
    <filename>Dashboard_8php</filename>
    <class kind="class">SebastianBergmann::CodeCoverage::Report::Html::Dashboard</class>
    <namespace>SebastianBergmann::CodeCoverage::Report::Html</namespace>
  </compound>
  <compound kind="file">
    <name>PHP.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/src/Report/</path>
    <filename>PHP_8php</filename>
    <namespace>SebastianBergmann::CodeCoverage::Report</namespace>
  </compound>
  <compound kind="file">
    <name>Text.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/src/Report/</path>
    <filename>Text_8php</filename>
    <class kind="class">SebastianBergmann::CodeCoverage::Report::Text</class>
    <namespace>SebastianBergmann::CodeCoverage::Report</namespace>
  </compound>
  <compound kind="file">
    <name>BuildInformation.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/src/Report/Xml/</path>
    <filename>BuildInformation_8php</filename>
    <class kind="class">SebastianBergmann::CodeCoverage::Report::Xml::BuildInformation</class>
    <namespace>SebastianBergmann::CodeCoverage::Report::Xml</namespace>
  </compound>
  <compound kind="file">
    <name>Coverage.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/src/Report/Xml/</path>
    <filename>Coverage_8php</filename>
    <class kind="class">SebastianBergmann::CodeCoverage::Report::Xml::Coverage</class>
    <namespace>SebastianBergmann::CodeCoverage::Report::Xml</namespace>
  </compound>
  <compound kind="file">
    <name>Node.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/src/Report/Xml/</path>
    <filename>Node_8php</filename>
    <class kind="class">SebastianBergmann::CodeCoverage::Report::Xml::Node</class>
    <namespace>SebastianBergmann::CodeCoverage::Report::Xml</namespace>
  </compound>
  <compound kind="file">
    <name>Report.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/src/Report/Xml/</path>
    <filename>Report_8php</filename>
    <class kind="class">SebastianBergmann::CodeCoverage::Report::Xml::Report</class>
    <namespace>SebastianBergmann::CodeCoverage::Report::Xml</namespace>
  </compound>
  <compound kind="file">
    <name>Tests.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/src/Report/Xml/</path>
    <filename>Tests_8php</filename>
    <class kind="class">SebastianBergmann::CodeCoverage::Report::Xml::Tests</class>
    <namespace>SebastianBergmann::CodeCoverage::Report::Xml</namespace>
  </compound>
  <compound kind="file">
    <name>Totals.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/src/Report/Xml/</path>
    <filename>Totals_8php</filename>
    <class kind="class">SebastianBergmann::CodeCoverage::Report::Xml::Totals</class>
    <namespace>SebastianBergmann::CodeCoverage::Report::Xml</namespace>
  </compound>
  <compound kind="file">
    <name>Unit.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/src/Report/Xml/</path>
    <filename>Unit_8php</filename>
    <class kind="class">SebastianBergmann::CodeCoverage::Report::Xml::Unit</class>
    <namespace>SebastianBergmann::CodeCoverage::Report::Xml</namespace>
  </compound>
  <compound kind="file">
    <name>Util.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/src/</path>
    <filename>php-code-coverage_2src_2Util_8php</filename>
    <class kind="class">SebastianBergmann::CodeCoverage::Util</class>
    <namespace>SebastianBergmann::CodeCoverage</namespace>
  </compound>
  <compound kind="file">
    <name>Util.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-token-stream/src/Token/</path>
    <filename>php-token-stream_2src_2Token_2Util_8php</filename>
    <class kind="class">PHP_Token_Util</class>
  </compound>
  <compound kind="file">
    <name>BankAccount-text.txt</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/tests/_files/</path>
    <filename>BankAccount-text_8txt</filename>
  </compound>
  <compound kind="file">
    <name>BankAccount.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/tests/_files/</path>
    <filename>php-code-coverage_2tests_2__files_2BankAccount_8php</filename>
    <class kind="class">BankAccount</class>
  </compound>
  <compound kind="file">
    <name>BankAccount.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>phpunit_2tests_2__files_2BankAccount_8php</filename>
    <class kind="class">BankAccountException</class>
    <class kind="class">BankAccount</class>
  </compound>
  <compound kind="file">
    <name>BankAccountTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/tests/_files/</path>
    <filename>php-code-coverage_2tests_2__files_2BankAccountTest_8php</filename>
    <class kind="class">BankAccountTest</class>
  </compound>
  <compound kind="file">
    <name>BankAccountTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>phpunit_2tests_2__files_2BankAccountTest_8php</filename>
    <class kind="class">BankAccountTest</class>
  </compound>
  <compound kind="file">
    <name>class-with-anonymous-function-text.txt</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/tests/_files/</path>
    <filename>class-with-anonymous-function-text_8txt</filename>
  </compound>
  <compound kind="file">
    <name>CoverageClassExtendedTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/tests/_files/</path>
    <filename>php-code-coverage_2tests_2__files_2CoverageClassExtendedTest_8php</filename>
    <class kind="class">CoverageClassExtendedTest</class>
  </compound>
  <compound kind="file">
    <name>CoverageClassExtendedTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>phpunit_2tests_2__files_2CoverageClassExtendedTest_8php</filename>
    <class kind="class">CoverageClassExtendedTest</class>
  </compound>
  <compound kind="file">
    <name>CoverageClassTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/tests/_files/</path>
    <filename>php-code-coverage_2tests_2__files_2CoverageClassTest_8php</filename>
    <class kind="class">CoverageClassTest</class>
  </compound>
  <compound kind="file">
    <name>CoverageClassTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>phpunit_2tests_2__files_2CoverageClassTest_8php</filename>
    <class kind="class">CoverageClassTest</class>
  </compound>
  <compound kind="file">
    <name>CoverageFunctionParenthesesTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/tests/_files/</path>
    <filename>php-code-coverage_2tests_2__files_2CoverageFunctionParenthesesTest_8php</filename>
    <class kind="class">CoverageFunctionParenthesesTest</class>
  </compound>
  <compound kind="file">
    <name>CoverageFunctionParenthesesTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>phpunit_2tests_2__files_2CoverageFunctionParenthesesTest_8php</filename>
    <class kind="class">CoverageFunctionParenthesesTest</class>
  </compound>
  <compound kind="file">
    <name>CoverageFunctionParenthesesWhitespaceTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/tests/_files/</path>
    <filename>php-code-coverage_2tests_2__files_2CoverageFunctionParenthesesWhitespaceTest_8php</filename>
    <class kind="class">CoverageFunctionParenthesesWhitespaceTest</class>
  </compound>
  <compound kind="file">
    <name>CoverageFunctionParenthesesWhitespaceTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>phpunit_2tests_2__files_2CoverageFunctionParenthesesWhitespaceTest_8php</filename>
    <class kind="class">CoverageFunctionParenthesesWhitespaceTest</class>
  </compound>
  <compound kind="file">
    <name>CoverageFunctionTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/tests/_files/</path>
    <filename>php-code-coverage_2tests_2__files_2CoverageFunctionTest_8php</filename>
    <class kind="class">CoverageFunctionTest</class>
  </compound>
  <compound kind="file">
    <name>CoverageFunctionTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>phpunit_2tests_2__files_2CoverageFunctionTest_8php</filename>
    <class kind="class">CoverageFunctionTest</class>
  </compound>
  <compound kind="file">
    <name>CoverageMethodOneLineAnnotationTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/tests/_files/</path>
    <filename>php-code-coverage_2tests_2__files_2CoverageMethodOneLineAnnotationTest_8php</filename>
    <class kind="class">CoverageMethodOneLineAnnotationTest</class>
  </compound>
  <compound kind="file">
    <name>CoverageMethodOneLineAnnotationTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>phpunit_2tests_2__files_2CoverageMethodOneLineAnnotationTest_8php</filename>
    <class kind="class">CoverageMethodOneLineAnnotationTest</class>
  </compound>
  <compound kind="file">
    <name>CoverageMethodParenthesesTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/tests/_files/</path>
    <filename>php-code-coverage_2tests_2__files_2CoverageMethodParenthesesTest_8php</filename>
    <class kind="class">CoverageMethodParenthesesTest</class>
  </compound>
  <compound kind="file">
    <name>CoverageMethodParenthesesTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>phpunit_2tests_2__files_2CoverageMethodParenthesesTest_8php</filename>
    <class kind="class">CoverageMethodParenthesesTest</class>
  </compound>
  <compound kind="file">
    <name>CoverageMethodParenthesesWhitespaceTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/tests/_files/</path>
    <filename>php-code-coverage_2tests_2__files_2CoverageMethodParenthesesWhitespaceTest_8php</filename>
    <class kind="class">CoverageMethodParenthesesWhitespaceTest</class>
  </compound>
  <compound kind="file">
    <name>CoverageMethodParenthesesWhitespaceTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>phpunit_2tests_2__files_2CoverageMethodParenthesesWhitespaceTest_8php</filename>
    <class kind="class">CoverageMethodParenthesesWhitespaceTest</class>
  </compound>
  <compound kind="file">
    <name>CoverageMethodTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/tests/_files/</path>
    <filename>php-code-coverage_2tests_2__files_2CoverageMethodTest_8php</filename>
    <class kind="class">CoverageMethodTest</class>
  </compound>
  <compound kind="file">
    <name>CoverageMethodTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>phpunit_2tests_2__files_2CoverageMethodTest_8php</filename>
    <class kind="class">CoverageMethodTest</class>
  </compound>
  <compound kind="file">
    <name>CoverageNoneTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/tests/_files/</path>
    <filename>php-code-coverage_2tests_2__files_2CoverageNoneTest_8php</filename>
    <class kind="class">CoverageNoneTest</class>
  </compound>
  <compound kind="file">
    <name>CoverageNoneTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>phpunit_2tests_2__files_2CoverageNoneTest_8php</filename>
    <class kind="class">CoverageNoneTest</class>
  </compound>
  <compound kind="file">
    <name>CoverageNothingTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/tests/_files/</path>
    <filename>CoverageNothingTest_8php</filename>
    <class kind="class">CoverageNothingTest</class>
  </compound>
  <compound kind="file">
    <name>CoverageNotPrivateTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/tests/_files/</path>
    <filename>php-code-coverage_2tests_2__files_2CoverageNotPrivateTest_8php</filename>
    <class kind="class">CoverageNotPrivateTest</class>
  </compound>
  <compound kind="file">
    <name>CoverageNotPrivateTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>phpunit_2tests_2__files_2CoverageNotPrivateTest_8php</filename>
    <class kind="class">CoverageNotPrivateTest</class>
  </compound>
  <compound kind="file">
    <name>CoverageNotProtectedTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/tests/_files/</path>
    <filename>php-code-coverage_2tests_2__files_2CoverageNotProtectedTest_8php</filename>
    <class kind="class">CoverageNotProtectedTest</class>
  </compound>
  <compound kind="file">
    <name>CoverageNotProtectedTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>phpunit_2tests_2__files_2CoverageNotProtectedTest_8php</filename>
    <class kind="class">CoverageNotProtectedTest</class>
  </compound>
  <compound kind="file">
    <name>CoverageNotPublicTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/tests/_files/</path>
    <filename>php-code-coverage_2tests_2__files_2CoverageNotPublicTest_8php</filename>
    <class kind="class">CoverageNotPublicTest</class>
  </compound>
  <compound kind="file">
    <name>CoverageNotPublicTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>phpunit_2tests_2__files_2CoverageNotPublicTest_8php</filename>
    <class kind="class">CoverageNotPublicTest</class>
  </compound>
  <compound kind="file">
    <name>CoveragePrivateTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/tests/_files/</path>
    <filename>php-code-coverage_2tests_2__files_2CoveragePrivateTest_8php</filename>
    <class kind="class">CoveragePrivateTest</class>
  </compound>
  <compound kind="file">
    <name>CoveragePrivateTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>phpunit_2tests_2__files_2CoveragePrivateTest_8php</filename>
    <class kind="class">CoveragePrivateTest</class>
  </compound>
  <compound kind="file">
    <name>CoverageProtectedTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/tests/_files/</path>
    <filename>php-code-coverage_2tests_2__files_2CoverageProtectedTest_8php</filename>
    <class kind="class">CoverageProtectedTest</class>
  </compound>
  <compound kind="file">
    <name>CoverageProtectedTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>phpunit_2tests_2__files_2CoverageProtectedTest_8php</filename>
    <class kind="class">CoverageProtectedTest</class>
  </compound>
  <compound kind="file">
    <name>CoveragePublicTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/tests/_files/</path>
    <filename>php-code-coverage_2tests_2__files_2CoveragePublicTest_8php</filename>
    <class kind="class">CoveragePublicTest</class>
  </compound>
  <compound kind="file">
    <name>CoveragePublicTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>phpunit_2tests_2__files_2CoveragePublicTest_8php</filename>
    <class kind="class">CoveragePublicTest</class>
  </compound>
  <compound kind="file">
    <name>CoverageTwoDefaultClassAnnotations.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/tests/_files/</path>
    <filename>php-code-coverage_2tests_2__files_2CoverageTwoDefaultClassAnnotations_8php</filename>
    <class kind="class">CoverageTwoDefaultClassAnnotations</class>
  </compound>
  <compound kind="file">
    <name>CoverageTwoDefaultClassAnnotations.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>phpunit_2tests_2__files_2CoverageTwoDefaultClassAnnotations_8php</filename>
    <class kind="class">CoverageTwoDefaultClassAnnotations</class>
  </compound>
  <compound kind="file">
    <name>CoveredClass.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/tests/_files/</path>
    <filename>php-code-coverage_2tests_2__files_2CoveredClass_8php</filename>
    <class kind="class">CoveredParentClass</class>
    <class kind="class">CoveredClass</class>
  </compound>
  <compound kind="file">
    <name>CoveredClass.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>phpunit_2tests_2__files_2CoveredClass_8php</filename>
    <class kind="class">CoveredParentClass</class>
    <class kind="class">CoveredClass</class>
  </compound>
  <compound kind="file">
    <name>CoveredFunction.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/tests/_files/</path>
    <filename>php-code-coverage_2tests_2__files_2CoveredFunction_8php</filename>
    <member kind="function">
      <type></type>
      <name>globalFunction</name>
      <anchorfile>php-code-coverage_2tests_2__files_2CoveredFunction_8php.html</anchorfile>
      <anchor>a321be2fcdead5148a9cc7794f56f08ad</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CoveredFunction.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>phpunit_2tests_2__files_2CoveredFunction_8php</filename>
    <member kind="function">
      <type></type>
      <name>globalFunction</name>
      <anchorfile>phpunit_2tests_2__files_2CoveredFunction_8php.html</anchorfile>
      <anchor>a321be2fcdead5148a9cc7794f56f08ad</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Crash.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/tests/_files/</path>
    <filename>Crash_8php</filename>
  </compound>
  <compound kind="file">
    <name>ignored-lines-text.txt</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/tests/_files/</path>
    <filename>ignored-lines-text_8txt</filename>
  </compound>
  <compound kind="file">
    <name>NamespaceCoverageClassExtendedTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/tests/_files/</path>
    <filename>php-code-coverage_2tests_2__files_2NamespaceCoverageClassExtendedTest_8php</filename>
    <class kind="class">NamespaceCoverageClassExtendedTest</class>
  </compound>
  <compound kind="file">
    <name>NamespaceCoverageClassExtendedTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>phpunit_2tests_2__files_2NamespaceCoverageClassExtendedTest_8php</filename>
    <class kind="class">NamespaceCoverageClassExtendedTest</class>
  </compound>
  <compound kind="file">
    <name>NamespaceCoverageClassTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/tests/_files/</path>
    <filename>php-code-coverage_2tests_2__files_2NamespaceCoverageClassTest_8php</filename>
    <class kind="class">NamespaceCoverageClassTest</class>
  </compound>
  <compound kind="file">
    <name>NamespaceCoverageClassTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>phpunit_2tests_2__files_2NamespaceCoverageClassTest_8php</filename>
    <class kind="class">NamespaceCoverageClassTest</class>
  </compound>
  <compound kind="file">
    <name>NamespaceCoverageCoversClassPublicTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/tests/_files/</path>
    <filename>php-code-coverage_2tests_2__files_2NamespaceCoverageCoversClassPublicTest_8php</filename>
    <class kind="class">NamespaceCoverageCoversClassPublicTest</class>
  </compound>
  <compound kind="file">
    <name>NamespaceCoverageCoversClassPublicTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>phpunit_2tests_2__files_2NamespaceCoverageCoversClassPublicTest_8php</filename>
    <class kind="class">NamespaceCoverageCoversClassPublicTest</class>
  </compound>
  <compound kind="file">
    <name>NamespaceCoverageCoversClassTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/tests/_files/</path>
    <filename>php-code-coverage_2tests_2__files_2NamespaceCoverageCoversClassTest_8php</filename>
    <class kind="class">NamespaceCoverageCoversClassTest</class>
  </compound>
  <compound kind="file">
    <name>NamespaceCoverageCoversClassTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>phpunit_2tests_2__files_2NamespaceCoverageCoversClassTest_8php</filename>
    <class kind="class">NamespaceCoverageCoversClassTest</class>
  </compound>
  <compound kind="file">
    <name>NamespaceCoverageMethodTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/tests/_files/</path>
    <filename>php-code-coverage_2tests_2__files_2NamespaceCoverageMethodTest_8php</filename>
    <class kind="class">NamespaceCoverageMethodTest</class>
  </compound>
  <compound kind="file">
    <name>NamespaceCoverageMethodTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>phpunit_2tests_2__files_2NamespaceCoverageMethodTest_8php</filename>
    <class kind="class">NamespaceCoverageMethodTest</class>
  </compound>
  <compound kind="file">
    <name>NamespaceCoverageNotPrivateTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/tests/_files/</path>
    <filename>php-code-coverage_2tests_2__files_2NamespaceCoverageNotPrivateTest_8php</filename>
    <class kind="class">NamespaceCoverageNotPrivateTest</class>
  </compound>
  <compound kind="file">
    <name>NamespaceCoverageNotPrivateTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>phpunit_2tests_2__files_2NamespaceCoverageNotPrivateTest_8php</filename>
    <class kind="class">NamespaceCoverageNotPrivateTest</class>
  </compound>
  <compound kind="file">
    <name>NamespaceCoverageNotProtectedTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/tests/_files/</path>
    <filename>php-code-coverage_2tests_2__files_2NamespaceCoverageNotProtectedTest_8php</filename>
    <class kind="class">NamespaceCoverageNotProtectedTest</class>
  </compound>
  <compound kind="file">
    <name>NamespaceCoverageNotProtectedTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>phpunit_2tests_2__files_2NamespaceCoverageNotProtectedTest_8php</filename>
    <class kind="class">NamespaceCoverageNotProtectedTest</class>
  </compound>
  <compound kind="file">
    <name>NamespaceCoverageNotPublicTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/tests/_files/</path>
    <filename>php-code-coverage_2tests_2__files_2NamespaceCoverageNotPublicTest_8php</filename>
    <class kind="class">NamespaceCoverageNotPublicTest</class>
  </compound>
  <compound kind="file">
    <name>NamespaceCoverageNotPublicTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>phpunit_2tests_2__files_2NamespaceCoverageNotPublicTest_8php</filename>
    <class kind="class">NamespaceCoverageNotPublicTest</class>
  </compound>
  <compound kind="file">
    <name>NamespaceCoveragePrivateTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/tests/_files/</path>
    <filename>php-code-coverage_2tests_2__files_2NamespaceCoveragePrivateTest_8php</filename>
    <class kind="class">NamespaceCoveragePrivateTest</class>
  </compound>
  <compound kind="file">
    <name>NamespaceCoveragePrivateTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>phpunit_2tests_2__files_2NamespaceCoveragePrivateTest_8php</filename>
    <class kind="class">NamespaceCoveragePrivateTest</class>
  </compound>
  <compound kind="file">
    <name>NamespaceCoverageProtectedTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/tests/_files/</path>
    <filename>php-code-coverage_2tests_2__files_2NamespaceCoverageProtectedTest_8php</filename>
    <class kind="class">NamespaceCoverageProtectedTest</class>
  </compound>
  <compound kind="file">
    <name>NamespaceCoverageProtectedTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>phpunit_2tests_2__files_2NamespaceCoverageProtectedTest_8php</filename>
    <class kind="class">NamespaceCoverageProtectedTest</class>
  </compound>
  <compound kind="file">
    <name>NamespaceCoveragePublicTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/tests/_files/</path>
    <filename>php-code-coverage_2tests_2__files_2NamespaceCoveragePublicTest_8php</filename>
    <class kind="class">NamespaceCoveragePublicTest</class>
  </compound>
  <compound kind="file">
    <name>NamespaceCoveragePublicTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>phpunit_2tests_2__files_2NamespaceCoveragePublicTest_8php</filename>
    <class kind="class">NamespaceCoveragePublicTest</class>
  </compound>
  <compound kind="file">
    <name>NamespaceCoveredClass.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/tests/_files/</path>
    <filename>php-code-coverage_2tests_2__files_2NamespaceCoveredClass_8php</filename>
    <class kind="class">Foo::CoveredParentClass</class>
    <class kind="class">Foo::CoveredClass</class>
    <namespace>Foo</namespace>
  </compound>
  <compound kind="file">
    <name>NamespaceCoveredClass.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>phpunit_2tests_2__files_2NamespaceCoveredClass_8php</filename>
    <class kind="class">Foo::CoveredParentClass</class>
    <class kind="class">Foo::CoveredClass</class>
    <namespace>Foo</namespace>
  </compound>
  <compound kind="file">
    <name>NotExistingCoveredElementTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/tests/_files/</path>
    <filename>php-code-coverage_2tests_2__files_2NotExistingCoveredElementTest_8php</filename>
    <class kind="class">NotExistingCoveredElementTest</class>
  </compound>
  <compound kind="file">
    <name>NotExistingCoveredElementTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>phpunit_2tests_2__files_2NotExistingCoveredElementTest_8php</filename>
    <class kind="class">NotExistingCoveredElementTest</class>
  </compound>
  <compound kind="file">
    <name>source_with_class_and_anonymous_function.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/tests/_files/</path>
    <filename>source__with__class__and__anonymous__function_8php</filename>
    <class kind="class">CoveredClassWithAnonymousFunctionInStaticMethod</class>
  </compound>
  <compound kind="file">
    <name>source_with_ignore.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/tests/_files/</path>
    <filename>source__with__ignore_8php</filename>
    <class kind="class">Foo</class>
    <class kind="class">Bar</class>
    <class kind="interface">Bor</class>
    <member kind="function">
      <type></type>
      <name>baz</name>
      <anchorfile>source__with__ignore_8php.html</anchorfile>
      <anchor>ae7a58e6eb64e3fa0d88ff421f558d8f4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>source_with_namespace.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/tests/_files/</path>
    <filename>source__with__namespace_8php</filename>
    <class kind="class">bar::baz::source_with_namespace</class>
    <namespace>bar::baz</namespace>
    <member kind="function">
      <type>&amp;</type>
      <name>foo</name>
      <anchorfile>namespacebar_1_1baz.html</anchorfile>
      <anchor>a18d1f863c3b8d8a292b6274fb4a93ae5</anchor>
      <arglist>($bar)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>source_with_oneline_annotations.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/tests/_files/</path>
    <filename>source__with__oneline__annotations_8php</filename>
    <class kind="interface">FooInterface</class>
    <class kind="class">Foo</class>
    <member kind="function">
      <type></type>
      <name>baz</name>
      <anchorfile>source__with__oneline__annotations_8php.html</anchorfile>
      <anchor>ae7a58e6eb64e3fa0d88ff421f558d8f4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>source_with_use_statements.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/tests/_files/</path>
    <filename>source__with__use__statements_8php</filename>
    <class kind="class">SebastianBergmann::CodeCoverage::TestFixture::C</class>
    <namespace>SebastianBergmann::CodeCoverage::TestFixture</namespace>
  </compound>
  <compound kind="file">
    <name>source_without_ignore.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/tests/_files/</path>
    <filename>source__without__ignore_8php</filename>
  </compound>
  <compound kind="file">
    <name>source_without_namespace.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/tests/_files/</path>
    <filename>source__without__namespace_8php</filename>
    <class kind="class">Foo</class>
    <member kind="function">
      <type>&amp;</type>
      <name>foo</name>
      <anchorfile>source__without__namespace_8php.html</anchorfile>
      <anchor>ad7cf84e3c094f652ef0e0287d42393b1</anchor>
      <arglist>($bar)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TestCase.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/tests/</path>
    <filename>php-code-coverage_2tests_2TestCase_8php</filename>
    <class kind="class">SebastianBergmann::CodeCoverage::TestCase</class>
    <namespace>SebastianBergmann::CodeCoverage</namespace>
  </compound>
  <compound kind="file">
    <name>TestCase.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/</path>
    <filename>phpunit_2src_2Framework_2TestCase_8php</filename>
    <class kind="class">PHPUnit::Framework::TestCase</class>
    <namespace>PHPUnit::Framework</namespace>
  </compound>
  <compound kind="file">
    <name>BuilderTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/tests/tests/</path>
    <filename>BuilderTest_8php</filename>
    <class kind="class">SebastianBergmann::CodeCoverage::Report::BuilderTest</class>
    <namespace>SebastianBergmann::CodeCoverage::Report</namespace>
  </compound>
  <compound kind="file">
    <name>CloverTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/tests/tests/</path>
    <filename>CloverTest_8php</filename>
    <class kind="class">SebastianBergmann::CodeCoverage::Report::CloverTest</class>
    <namespace>SebastianBergmann::CodeCoverage::Report</namespace>
  </compound>
  <compound kind="file">
    <name>CodeCoverageTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/tests/tests/</path>
    <filename>CodeCoverageTest_8php</filename>
    <class kind="class">SebastianBergmann::CodeCoverage::CodeCoverageTest</class>
    <namespace>SebastianBergmann::CodeCoverage</namespace>
  </compound>
  <compound kind="file">
    <name>Crap4jTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/tests/tests/</path>
    <filename>Crap4jTest_8php</filename>
    <class kind="class">SebastianBergmann::CodeCoverage::Report::Crap4jTest</class>
    <namespace>SebastianBergmann::CodeCoverage::Report</namespace>
  </compound>
  <compound kind="file">
    <name>UnintentionallyCoveredCodeExceptionTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/tests/tests/Exception/</path>
    <filename>UnintentionallyCoveredCodeExceptionTest_8php</filename>
    <class kind="class">SebastianBergmann::CodeCoverage::tests::Exception::UnintentionallyCoveredCodeExceptionTest</class>
    <namespace>SebastianBergmann::CodeCoverage::tests::Exception</namespace>
  </compound>
  <compound kind="file">
    <name>FilterTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/tests/tests/</path>
    <filename>FilterTest_8php</filename>
    <class kind="class">SebastianBergmann::CodeCoverage::FilterTest</class>
    <namespace>SebastianBergmann::CodeCoverage</namespace>
  </compound>
  <compound kind="file">
    <name>HTMLTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/tests/tests/</path>
    <filename>HTMLTest_8php</filename>
    <class kind="class">SebastianBergmann::CodeCoverage::Report::Html::HTMLTest</class>
    <namespace>SebastianBergmann::CodeCoverage::Report::Html</namespace>
  </compound>
  <compound kind="file">
    <name>TextTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/tests/tests/</path>
    <filename>TextTest_8php</filename>
    <class kind="class">SebastianBergmann::CodeCoverage::Report::TextTest</class>
    <namespace>SebastianBergmann::CodeCoverage::Report</namespace>
  </compound>
  <compound kind="file">
    <name>UtilTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/tests/tests/</path>
    <filename>UtilTest_8php</filename>
    <class kind="class">SebastianBergmann::CodeCoverage::UtilTest</class>
    <namespace>SebastianBergmann::CodeCoverage</namespace>
  </compound>
  <compound kind="file">
    <name>XmlTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-code-coverage/tests/tests/</path>
    <filename>php-code-coverage_2tests_2tests_2XmlTest_8php</filename>
    <class kind="class">SebastianBergmann::CodeCoverage::Report::Xml::XmlTest</class>
    <namespace>SebastianBergmann::CodeCoverage::Report::Xml</namespace>
  </compound>
  <compound kind="file">
    <name>XmlTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Util/</path>
    <filename>phpunit_2tests_2unit_2Util_2XmlTest_8php</filename>
    <class kind="class">PHPUnit::Util::XmlTest</class>
    <namespace>PHPUnit::Util</namespace>
  </compound>
  <compound kind="file">
    <name>FactoryTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-file-iterator/tests/</path>
    <filename>phpunit_2php-file-iterator_2tests_2FactoryTest_8php</filename>
    <class kind="class">SebastianBergmann::FileIterator::FactoryTest</class>
    <namespace>SebastianBergmann::FileIterator</namespace>
  </compound>
  <compound kind="file">
    <name>FactoryTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/comparator/tests/</path>
    <filename>sebastian_2comparator_2tests_2FactoryTest_8php</filename>
    <class kind="class">SebastianBergmann::Comparator::FactoryTest</class>
    <namespace>SebastianBergmann::Comparator</namespace>
  </compound>
  <compound kind="file">
    <name>Template.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-text-template/src/</path>
    <filename>Template_8php</filename>
    <class kind="class">Text_Template</class>
  </compound>
  <compound kind="file">
    <name>Timer.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-timer/src/</path>
    <filename>Timer_8php</filename>
    <class kind="class">SebastianBergmann::Timer::Timer</class>
    <namespace>SebastianBergmann::Timer</namespace>
  </compound>
  <compound kind="file">
    <name>TimerTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-timer/tests/</path>
    <filename>TimerTest_8php</filename>
    <class kind="class">SebastianBergmann::Timer::TimerTest</class>
    <namespace>SebastianBergmann::Timer</namespace>
  </compound>
  <compound kind="file">
    <name>Token.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-token-stream/src/</path>
    <filename>phpunit_2php-token-stream_2src_2Token_8php</filename>
    <class kind="class">PHP_Token</class>
    <class kind="class">PHP_TokenWithScope</class>
    <class kind="class">PHP_TokenWithScopeAndVisibility</class>
    <class kind="class">PHP_Token_Includes</class>
    <class kind="class">PHP_Token_FUNCTION</class>
    <class kind="class">PHP_Token_INTERFACE</class>
    <class kind="class">PHP_Token_ABSTRACT</class>
    <class kind="class">PHP_Token_AMPERSAND</class>
    <class kind="class">PHP_Token_AND_EQUAL</class>
    <class kind="class">PHP_Token_ARRAY</class>
    <class kind="class">PHP_Token_ARRAY_CAST</class>
    <class kind="class">PHP_Token_AS</class>
    <class kind="class">PHP_Token_AT</class>
    <class kind="class">PHP_Token_BACKTICK</class>
    <class kind="class">PHP_Token_BAD_CHARACTER</class>
    <class kind="class">PHP_Token_BOOLEAN_AND</class>
    <class kind="class">PHP_Token_BOOLEAN_OR</class>
    <class kind="class">PHP_Token_BOOL_CAST</class>
    <class kind="class">PHP_Token_BREAK</class>
    <class kind="class">PHP_Token_CARET</class>
    <class kind="class">PHP_Token_CASE</class>
    <class kind="class">PHP_Token_CATCH</class>
    <class kind="class">PHP_Token_CHARACTER</class>
    <class kind="class">PHP_Token_CLASS</class>
    <class kind="class">PHP_Token_CLASS_C</class>
    <class kind="class">PHP_Token_CLASS_NAME_CONSTANT</class>
    <class kind="class">PHP_Token_CLONE</class>
    <class kind="class">PHP_Token_CLOSE_BRACKET</class>
    <class kind="class">PHP_Token_CLOSE_CURLY</class>
    <class kind="class">PHP_Token_CLOSE_SQUARE</class>
    <class kind="class">PHP_Token_CLOSE_TAG</class>
    <class kind="class">PHP_Token_COLON</class>
    <class kind="class">PHP_Token_COMMA</class>
    <class kind="class">PHP_Token_COMMENT</class>
    <class kind="class">PHP_Token_CONCAT_EQUAL</class>
    <class kind="class">PHP_Token_CONST</class>
    <class kind="class">PHP_Token_CONSTANT_ENCAPSED_STRING</class>
    <class kind="class">PHP_Token_CONTINUE</class>
    <class kind="class">PHP_Token_CURLY_OPEN</class>
    <class kind="class">PHP_Token_DEC</class>
    <class kind="class">PHP_Token_DECLARE</class>
    <class kind="class">PHP_Token_DEFAULT</class>
    <class kind="class">PHP_Token_DIV</class>
    <class kind="class">PHP_Token_DIV_EQUAL</class>
    <class kind="class">PHP_Token_DNUMBER</class>
    <class kind="class">PHP_Token_DO</class>
    <class kind="class">PHP_Token_DOC_COMMENT</class>
    <class kind="class">PHP_Token_DOLLAR</class>
    <class kind="class">PHP_Token_DOLLAR_OPEN_CURLY_BRACES</class>
    <class kind="class">PHP_Token_DOT</class>
    <class kind="class">PHP_Token_DOUBLE_ARROW</class>
    <class kind="class">PHP_Token_DOUBLE_CAST</class>
    <class kind="class">PHP_Token_DOUBLE_COLON</class>
    <class kind="class">PHP_Token_DOUBLE_QUOTES</class>
    <class kind="class">PHP_Token_ECHO</class>
    <class kind="class">PHP_Token_ELSE</class>
    <class kind="class">PHP_Token_ELSEIF</class>
    <class kind="class">PHP_Token_EMPTY</class>
    <class kind="class">PHP_Token_ENCAPSED_AND_WHITESPACE</class>
    <class kind="class">PHP_Token_ENDDECLARE</class>
    <class kind="class">PHP_Token_ENDFOR</class>
    <class kind="class">PHP_Token_ENDFOREACH</class>
    <class kind="class">PHP_Token_ENDIF</class>
    <class kind="class">PHP_Token_ENDSWITCH</class>
    <class kind="class">PHP_Token_ENDWHILE</class>
    <class kind="class">PHP_Token_END_HEREDOC</class>
    <class kind="class">PHP_Token_EQUAL</class>
    <class kind="class">PHP_Token_EVAL</class>
    <class kind="class">PHP_Token_EXCLAMATION_MARK</class>
    <class kind="class">PHP_Token_EXIT</class>
    <class kind="class">PHP_Token_EXTENDS</class>
    <class kind="class">PHP_Token_FILE</class>
    <class kind="class">PHP_Token_FINAL</class>
    <class kind="class">PHP_Token_FOR</class>
    <class kind="class">PHP_Token_FOREACH</class>
    <class kind="class">PHP_Token_FUNC_C</class>
    <class kind="class">PHP_Token_GLOBAL</class>
    <class kind="class">PHP_Token_GT</class>
    <class kind="class">PHP_Token_IF</class>
    <class kind="class">PHP_Token_IMPLEMENTS</class>
    <class kind="class">PHP_Token_INC</class>
    <class kind="class">PHP_Token_INCLUDE</class>
    <class kind="class">PHP_Token_INCLUDE_ONCE</class>
    <class kind="class">PHP_Token_INLINE_HTML</class>
    <class kind="class">PHP_Token_INSTANCEOF</class>
    <class kind="class">PHP_Token_INT_CAST</class>
    <class kind="class">PHP_Token_ISSET</class>
    <class kind="class">PHP_Token_IS_EQUAL</class>
    <class kind="class">PHP_Token_IS_GREATER_OR_EQUAL</class>
    <class kind="class">PHP_Token_IS_IDENTICAL</class>
    <class kind="class">PHP_Token_IS_NOT_EQUAL</class>
    <class kind="class">PHP_Token_IS_NOT_IDENTICAL</class>
    <class kind="class">PHP_Token_IS_SMALLER_OR_EQUAL</class>
    <class kind="class">PHP_Token_LINE</class>
    <class kind="class">PHP_Token_LIST</class>
    <class kind="class">PHP_Token_LNUMBER</class>
    <class kind="class">PHP_Token_LOGICAL_AND</class>
    <class kind="class">PHP_Token_LOGICAL_OR</class>
    <class kind="class">PHP_Token_LOGICAL_XOR</class>
    <class kind="class">PHP_Token_LT</class>
    <class kind="class">PHP_Token_METHOD_C</class>
    <class kind="class">PHP_Token_MINUS</class>
    <class kind="class">PHP_Token_MINUS_EQUAL</class>
    <class kind="class">PHP_Token_MOD_EQUAL</class>
    <class kind="class">PHP_Token_MULT</class>
    <class kind="class">PHP_Token_MUL_EQUAL</class>
    <class kind="class">PHP_Token_NEW</class>
    <class kind="class">PHP_Token_NUM_STRING</class>
    <class kind="class">PHP_Token_OBJECT_CAST</class>
    <class kind="class">PHP_Token_OBJECT_OPERATOR</class>
    <class kind="class">PHP_Token_OPEN_BRACKET</class>
    <class kind="class">PHP_Token_OPEN_CURLY</class>
    <class kind="class">PHP_Token_OPEN_SQUARE</class>
    <class kind="class">PHP_Token_OPEN_TAG</class>
    <class kind="class">PHP_Token_OPEN_TAG_WITH_ECHO</class>
    <class kind="class">PHP_Token_OR_EQUAL</class>
    <class kind="class">PHP_Token_PAAMAYIM_NEKUDOTAYIM</class>
    <class kind="class">PHP_Token_PERCENT</class>
    <class kind="class">PHP_Token_PIPE</class>
    <class kind="class">PHP_Token_PLUS</class>
    <class kind="class">PHP_Token_PLUS_EQUAL</class>
    <class kind="class">PHP_Token_PRINT</class>
    <class kind="class">PHP_Token_PRIVATE</class>
    <class kind="class">PHP_Token_PROTECTED</class>
    <class kind="class">PHP_Token_PUBLIC</class>
    <class kind="class">PHP_Token_QUESTION_MARK</class>
    <class kind="class">PHP_Token_REQUIRE</class>
    <class kind="class">PHP_Token_REQUIRE_ONCE</class>
    <class kind="class">PHP_Token_RETURN</class>
    <class kind="class">PHP_Token_SEMICOLON</class>
    <class kind="class">PHP_Token_SL</class>
    <class kind="class">PHP_Token_SL_EQUAL</class>
    <class kind="class">PHP_Token_SR</class>
    <class kind="class">PHP_Token_SR_EQUAL</class>
    <class kind="class">PHP_Token_START_HEREDOC</class>
    <class kind="class">PHP_Token_STATIC</class>
    <class kind="class">PHP_Token_STRING</class>
    <class kind="class">PHP_Token_STRING_CAST</class>
    <class kind="class">PHP_Token_STRING_VARNAME</class>
    <class kind="class">PHP_Token_SWITCH</class>
    <class kind="class">PHP_Token_THROW</class>
    <class kind="class">PHP_Token_TILDE</class>
    <class kind="class">PHP_Token_TRY</class>
    <class kind="class">PHP_Token_UNSET</class>
    <class kind="class">PHP_Token_UNSET_CAST</class>
    <class kind="class">PHP_Token_USE</class>
    <class kind="class">PHP_Token_USE_FUNCTION</class>
    <class kind="class">PHP_Token_VAR</class>
    <class kind="class">PHP_Token_VARIABLE</class>
    <class kind="class">PHP_Token_WHILE</class>
    <class kind="class">PHP_Token_WHITESPACE</class>
    <class kind="class">PHP_Token_XOR_EQUAL</class>
    <class kind="class">PHP_Token_HALT_COMPILER</class>
    <class kind="class">PHP_Token_DIR</class>
    <class kind="class">PHP_Token_GOTO</class>
    <class kind="class">PHP_Token_NAMESPACE</class>
    <class kind="class">PHP_Token_NS_C</class>
    <class kind="class">PHP_Token_NS_SEPARATOR</class>
    <class kind="class">PHP_Token_CALLABLE</class>
    <class kind="class">PHP_Token_INSTEADOF</class>
    <class kind="class">PHP_Token_TRAIT</class>
    <class kind="class">PHP_Token_TRAIT_C</class>
    <class kind="class">PHP_Token_FINALLY</class>
    <class kind="class">PHP_Token_YIELD</class>
    <class kind="class">PHP_Token_ELLIPSIS</class>
    <class kind="class">PHP_Token_POW</class>
    <class kind="class">PHP_Token_POW_EQUAL</class>
    <class kind="class">PHP_Token_COALESCE</class>
    <class kind="class">PHP_Token_SPACESHIP</class>
    <class kind="class">PHP_Token_YIELD_FROM</class>
    <class kind="class">PHP_Token_COALESCE_EQUAL</class>
    <class kind="class">PHP_Token_FN</class>
  </compound>
  <compound kind="file">
    <name>Token.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/theseer/tokenizer/src/</path>
    <filename>theseer_2tokenizer_2src_2Token_8php</filename>
    <class kind="class">TheSeer::Tokenizer::Token</class>
    <namespace>TheSeer::Tokenizer</namespace>
  </compound>
  <compound kind="file">
    <name>Stream.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-token-stream/src/Token/</path>
    <filename>Stream_8php</filename>
    <class kind="class">PHP_Token_Stream</class>
  </compound>
  <compound kind="file">
    <name>CachingFactory.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-token-stream/src/Token/Stream/</path>
    <filename>CachingFactory_8php</filename>
    <class kind="class">PHP_Token_Stream_CachingFactory</class>
  </compound>
  <compound kind="file">
    <name>class_with_method_named_empty.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-token-stream/tests/_fixture/</path>
    <filename>class__with__method__named__empty_8php</filename>
    <class kind="class">class_with_method_named_empty</class>
  </compound>
  <compound kind="file">
    <name>class_with_method_that_declares_anonymous_class.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-token-stream/tests/_fixture/</path>
    <filename>class__with__method__that__declares__anonymous__class_8php</filename>
    <class kind="interface">foo</class>
    <class kind="class">class_with_method_that_declares_anonymous_class</class>
  </compound>
  <compound kind="file">
    <name>class_with_method_that_declares_anonymous_class2.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-token-stream/tests/_fixture/</path>
    <filename>class__with__method__that__declares__anonymous__class2_8php</filename>
    <class kind="class">Test</class>
  </compound>
  <compound kind="file">
    <name>class_with_multiple_anonymous_classes_and_functions.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-token-stream/tests/_fixture/</path>
    <filename>class__with__multiple__anonymous__classes__and__functions_8php</filename>
    <class kind="class">class_with_multiple_anonymous_classes_and_functions</class>
  </compound>
  <compound kind="file">
    <name>classExtendsNamespacedClass.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-token-stream/tests/_fixture/</path>
    <filename>classExtendsNamespacedClass_8php</filename>
    <class kind="class">Foo::Bar::Baz</class>
    <class kind="class">Other::Space::Extender</class>
    <namespace>Foo::Bar</namespace>
    <namespace>Other::Space</namespace>
  </compound>
  <compound kind="file">
    <name>classInNamespace.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-token-stream/tests/_fixture/</path>
    <filename>classInNamespace_8php</filename>
    <class kind="class">Foo::Bar::TestClass</class>
    <namespace>Foo::Bar</namespace>
  </compound>
  <compound kind="file">
    <name>classInScopedNamespace.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-token-stream/tests/_fixture/</path>
    <filename>classInScopedNamespace_8php</filename>
    <class kind="class">Foo::BarScoped::TestClass</class>
    <namespace>Foo</namespace>
    <namespace>Foo::BarScoped</namespace>
  </compound>
  <compound kind="file">
    <name>classUsesNamespacedFunction.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-token-stream/tests/_fixture/</path>
    <filename>classUsesNamespacedFunction_8php</filename>
    <class kind="class">foo::Foo</class>
    <namespace>foo</namespace>
  </compound>
  <compound kind="file">
    <name>closure.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-token-stream/tests/_fixture/</path>
    <filename>closure_8php</filename>
    <member kind="variable">
      <type></type>
      <name>$function1</name>
      <anchorfile>closure_8php.html</anchorfile>
      <anchor>a917f59cf14a2cd556bc2a9dbfc59374a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$function2</name>
      <anchorfile>closure_8php.html</anchorfile>
      <anchor>ab837d03d0a806c6167c2388b726b7d99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$function3</name>
      <anchorfile>closure_8php.html</anchorfile>
      <anchor>ae5683a59c4ecfa76ab86e853ca344821</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$function4</name>
      <anchorfile>closure_8php.html</anchorfile>
      <anchor>a5e47042f6b1825000e2a230b7bb6b146</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$function5</name>
      <anchorfile>closure_8php.html</anchorfile>
      <anchor>a019f9473c997ed75e3f78d5e6b93038a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$function6</name>
      <anchorfile>closure_8php.html</anchorfile>
      <anchor>a6529df55343edecc7be31c09ff54b7cf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>issue19.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-token-stream/tests/_fixture/</path>
    <filename>issue19_8php</filename>
    <class kind="class">TestClass</class>
  </compound>
  <compound kind="file">
    <name>issue30.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-token-stream/tests/_fixture/</path>
    <filename>issue30_8php</filename>
    <class kind="class">Foo</class>
  </compound>
  <compound kind="file">
    <name>multipleNamespacesWithOneClassUsingBraces.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-token-stream/tests/_fixture/</path>
    <filename>multipleNamespacesWithOneClassUsingBraces_8php</filename>
    <class kind="class">Foo::Bar::TestClassInBar</class>
    <class kind="class">Foo::Baz::TestClassInBaz</class>
    <namespace>Foo::Bar</namespace>
    <namespace>Foo::Baz</namespace>
  </compound>
  <compound kind="file">
    <name>multipleNamespacesWithOneClassUsingNonBraceSyntax.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-token-stream/tests/_fixture/</path>
    <filename>multipleNamespacesWithOneClassUsingNonBraceSyntax_8php</filename>
    <class kind="class">Foo::Bar::TestClassInBar</class>
    <class kind="class">Foo::Baz::TestClassInBaz</class>
    <namespace>Foo</namespace>
    <namespace>Foo::Bar</namespace>
    <namespace>Foo::Baz</namespace>
  </compound>
  <compound kind="file">
    <name>php-code-coverage-issue-424.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-token-stream/tests/_fixture/</path>
    <filename>php-code-coverage-issue-424_8php</filename>
    <class kind="class">Example</class>
  </compound>
  <compound kind="file">
    <name>source.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-token-stream/tests/_fixture/</path>
    <filename>source_8php</filename>
    <class kind="class">Foo</class>
  </compound>
  <compound kind="file">
    <name>source2.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-token-stream/tests/_fixture/</path>
    <filename>source2_8php</filename>
    <class kind="class">A</class>
  </compound>
  <compound kind="file">
    <name>source3.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-token-stream/tests/_fixture/</path>
    <filename>source3_8php</filename>
    <member kind="variable">
      <type></type>
      <name>$included_files</name>
      <anchorfile>source3_8php.html</anchorfile>
      <anchor>af3b2ca98a510c4e55d6cea25f1000c19</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>source4.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-token-stream/tests/_fixture/</path>
    <filename>source4_8php</filename>
    <class kind="interface">iTemplate</class>
    <class kind="class">a</class>
    <class kind="interface">b</class>
    <class kind="class">c</class>
  </compound>
  <compound kind="file">
    <name>source5.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-token-stream/tests/_fixture/</path>
    <filename>source5_8php</filename>
    <class kind="interface">i</class>
    <class kind="class">a</class>
    <class kind="class">c</class>
    <member kind="function">
      <type></type>
      <name>foo</name>
      <anchorfile>source5_8php.html</anchorfile>
      <anchor>aa1d02eb390a2830efba42c5fbbd36544</anchor>
      <arglist>($a, array $b, array $c=array())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ClassTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-token-stream/tests/Token/</path>
    <filename>ClassTest_8php</filename>
    <class kind="class">PHP_Token_ClassTest</class>
  </compound>
  <compound kind="file">
    <name>ClosureTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-token-stream/tests/Token/</path>
    <filename>ClosureTest_8php</filename>
    <class kind="class">PHP_Token_ClosureTest</class>
  </compound>
  <compound kind="file">
    <name>FunctionTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-token-stream/tests/Token/</path>
    <filename>FunctionTest_8php</filename>
    <class kind="class">PHP_Token_FunctionTest</class>
  </compound>
  <compound kind="file">
    <name>IncludeTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-token-stream/tests/Token/</path>
    <filename>IncludeTest_8php</filename>
    <class kind="class">PHP_Token_IncludeTest</class>
  </compound>
  <compound kind="file">
    <name>InterfaceTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-token-stream/tests/Token/</path>
    <filename>InterfaceTest_8php</filename>
    <class kind="class">PHP_Token_InterfaceTest</class>
  </compound>
  <compound kind="file">
    <name>NamespaceTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/php-token-stream/tests/Token/</path>
    <filename>NamespaceTest_8php</filename>
    <class kind="class">PHP_Token_NamespaceTest</class>
  </compound>
  <compound kind="file">
    <name>.phpstorm.meta.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/</path>
    <filename>_8phpstorm_8meta_8php</filename>
    <namespace>PHPSTORM_META</namespace>
  </compound>
  <compound kind="file">
    <name>php-scoper.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/build/config/</path>
    <filename>php-scoper_8php</filename>
    <member kind="variable">
      <type></type>
      <name>return</name>
      <anchorfile>php-scoper_8php.html</anchorfile>
      <anchor>a673d770b4c228aedd57b33483660d43d</anchor>
      <arglist>[&apos;whitelist&apos;=&gt;[&apos;PHPUnit\ *&apos;, &apos;Prophecy\ *&apos;,],]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>generate-global-assert-wrappers.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/build/scripts/</path>
    <filename>generate-global-assert-wrappers_8php</filename>
    <member kind="variable">
      <type></type>
      <name>$lines</name>
      <anchorfile>generate-global-assert-wrappers_8php.html</anchorfile>
      <anchor>aa5ccd7899c1472ec7d0ed1de61fb866a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$buffer</name>
      <anchorfile>generate-global-assert-wrappers_8php.html</anchorfile>
      <anchor>af1862006a19e84e552f66189adc792ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PHPUnit Framework $method getName() . &quot;&apos;)) n</type>
      <name>n</name>
      <anchorfile>generate-global-assert-wrappers_8php.html</anchorfile>
      <anchor>ac369b27a193c30f59cdedff0e9c857fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$usedClasses</name>
      <anchorfile>generate-global-assert-wrappers_8php.html</anchorfile>
      <anchor>a3e14d82e73ce8033d5928517435b65f1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>phar-manifest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/build/scripts/</path>
    <filename>phar-manifest_8php</filename>
    <member kind="variable">
      <type></type>
      <name>print</name>
      <anchorfile>phar-manifest_8php.html</anchorfile>
      <anchor>a3ad3a4240c0f97c7e85aff5c52a454d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$tag</name>
      <anchorfile>phar-manifest_8php.html</anchorfile>
      <anchor>a81d5015d41ed8ec66e9db8cdc5db9555</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>if(\strpos($tag, &apos;-&apos;)===false &amp;&amp;\strpos($tag, &apos;No names found&apos;)===false)</type>
      <name>else</name>
      <anchorfile>phar-manifest_8php.html</anchorfile>
      <anchor>af50812e663caa05b7df1806a93b7f2e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$hash</name>
      <anchorfile>phar-manifest_8php.html</anchorfile>
      <anchor>ae4ca548bcfadc871a64eb7e8d03330e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>print</type>
      <name>n</name>
      <anchorfile>phar-manifest_8php.html</anchorfile>
      <anchor>ab1b2829a7425bcec97d0ab4e6b3c77f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$lock</name>
      <anchorfile>phar-manifest_8php.html</anchorfile>
      <anchor>af42e78ece9ec638f2928b3bef452d3e1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>phar-version.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/build/scripts/</path>
    <filename>phar-version_8php</filename>
    <member kind="variable">
      <type>if($argv[2]==&apos;release&apos;)</type>
      <name>else</name>
      <anchorfile>phar-version_8php.html</anchorfile>
      <anchor>ae0048b2ff7a8a8969643923684d74944</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>version.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/build/scripts/</path>
    <filename>version_8php</filename>
    <member kind="variable">
      <type></type>
      <name>$buffer</name>
      <anchorfile>version_8php.html</anchorfile>
      <anchor>af1862006a19e84e552f66189adc792ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$start</name>
      <anchorfile>version_8php.html</anchorfile>
      <anchor>a50a00e7de77365e00b117e73aa82fb9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$end</name>
      <anchorfile>version_8php.html</anchorfile>
      <anchor>ac2040b96cd66d4d79b1d9fe0027d2f9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$version</name>
      <anchorfile>version_8php.html</anchorfile>
      <anchor>a17c8948c68aa44fa9961ae169b6a8961</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ChangeLog-8.5.md</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/</path>
    <filename>ChangeLog-8_85_8md</filename>
  </compound>
  <compound kind="file">
    <name>Assert.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/</path>
    <filename>phpunit_2phpunit_2src_2Framework_2Assert_8php</filename>
    <class kind="class">PHPUnit::Framework::Assert</class>
    <namespace>PHPUnit::Framework</namespace>
  </compound>
  <compound kind="file">
    <name>Assert.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/webmozart/assert/src/</path>
    <filename>webmozart_2assert_2src_2Assert_8php</filename>
    <class kind="class">Webmozart::Assert::Assert</class>
    <namespace>Webmozart::Assert</namespace>
  </compound>
  <compound kind="file">
    <name>Functions.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Assert/</path>
    <filename>Functions_8php</filename>
  </compound>
  <compound kind="file">
    <name>ArrayHasKey.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Constraint/</path>
    <filename>ArrayHasKey_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::ArrayHasKey</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>ArraySubset.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Constraint/</path>
    <filename>ArraySubset_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::ArraySubset</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>Attribute.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Constraint/</path>
    <filename>Attribute_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::Attribute</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>Callback.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Constraint/</path>
    <filename>Callback_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::Callback</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>ClassHasAttribute.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Constraint/</path>
    <filename>ClassHasAttribute_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::ClassHasAttribute</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>ClassHasStaticAttribute.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Constraint/</path>
    <filename>ClassHasStaticAttribute_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::ClassHasStaticAttribute</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>Composite.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Constraint/</path>
    <filename>Composite_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::Composite</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>Constraint.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Constraint/</path>
    <filename>Constraint_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::Constraint</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>Count.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Constraint/</path>
    <filename>Count_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::Count</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>DirectoryExists.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Constraint/</path>
    <filename>DirectoryExists_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::DirectoryExists</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>ExceptionCode.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Constraint/</path>
    <filename>ExceptionCode_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::ExceptionCode</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>ExceptionMessage.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Constraint/</path>
    <filename>ExceptionMessage_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::ExceptionMessage</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>ExceptionMessageRegularExpression.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Constraint/</path>
    <filename>ExceptionMessageRegularExpression_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::ExceptionMessageRegularExpression</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>FileExists.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Constraint/</path>
    <filename>FileExists_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::FileExists</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>GreaterThan.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Constraint/</path>
    <filename>GreaterThan_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::GreaterThan</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>IsAnything.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Constraint/</path>
    <filename>IsAnything_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::IsAnything</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>IsEmpty.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Constraint/</path>
    <filename>IsEmpty_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::IsEmpty</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>IsEqual.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Constraint/</path>
    <filename>IsEqual_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::IsEqual</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>IsFalse.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Constraint/</path>
    <filename>IsFalse_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::IsFalse</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>IsFinite.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Constraint/</path>
    <filename>IsFinite_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::IsFinite</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>IsIdentical.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Constraint/</path>
    <filename>IsIdentical_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::IsIdentical</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>IsInfinite.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Constraint/</path>
    <filename>IsInfinite_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::IsInfinite</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>IsInstanceOf.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Constraint/</path>
    <filename>IsInstanceOf_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::IsInstanceOf</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>IsJson.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Constraint/</path>
    <filename>IsJson_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::IsJson</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>IsNan.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Constraint/</path>
    <filename>IsNan_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::IsNan</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>IsNull.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Constraint/</path>
    <filename>IsNull_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::IsNull</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>IsReadable.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Constraint/</path>
    <filename>IsReadable_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::IsReadable</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>IsTrue.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Constraint/</path>
    <filename>IsTrue_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::IsTrue</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>IsType.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Constraint/</path>
    <filename>IsType_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::IsType</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>IsWritable.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Constraint/</path>
    <filename>IsWritable_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::IsWritable</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>JsonMatches.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Constraint/</path>
    <filename>JsonMatches_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::JsonMatches</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>JsonMatchesErrorMessageProvider.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Constraint/</path>
    <filename>JsonMatchesErrorMessageProvider_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::JsonMatchesErrorMessageProvider</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>LessThan.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Constraint/</path>
    <filename>LessThan_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::LessThan</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>LogicalAnd.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Constraint/</path>
    <filename>LogicalAnd_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::LogicalAnd</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>LogicalNot.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Constraint/</path>
    <filename>LogicalNot_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::LogicalNot</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>LogicalOr.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Constraint/</path>
    <filename>LogicalOr_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::LogicalOr</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>LogicalXor.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Constraint/</path>
    <filename>LogicalXor_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::LogicalXor</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>ObjectHasAttribute.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Constraint/</path>
    <filename>ObjectHasAttribute_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::ObjectHasAttribute</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>RegularExpression.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Constraint/</path>
    <filename>Framework_2Constraint_2RegularExpression_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::RegularExpression</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>RegularExpression.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Util/</path>
    <filename>Util_2RegularExpression_8php</filename>
    <class kind="class">PHPUnit::Util::RegularExpression</class>
    <namespace>PHPUnit::Util</namespace>
  </compound>
  <compound kind="file">
    <name>SameSize.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Constraint/</path>
    <filename>SameSize_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::SameSize</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>StringContains.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Constraint/</path>
    <filename>StringContains_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::StringContains</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>StringEndsWith.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Constraint/</path>
    <filename>StringEndsWith_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::StringEndsWith</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>StringMatchesFormatDescription.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Constraint/</path>
    <filename>StringMatchesFormatDescription_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::StringMatchesFormatDescription</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>StringStartsWith.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Constraint/</path>
    <filename>StringStartsWith_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::StringStartsWith</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>TraversableContains.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Constraint/</path>
    <filename>TraversableContains_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::TraversableContains</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>TraversableContainsEqual.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Constraint/</path>
    <filename>TraversableContainsEqual_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::TraversableContainsEqual</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>TraversableContainsIdentical.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Constraint/</path>
    <filename>TraversableContainsIdentical_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::TraversableContainsIdentical</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>TraversableContainsOnly.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Constraint/</path>
    <filename>TraversableContainsOnly_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::TraversableContainsOnly</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>DataProviderTestSuite.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/</path>
    <filename>DataProviderTestSuite_8php</filename>
    <class kind="class">PHPUnit::Framework::DataProviderTestSuite</class>
    <namespace>PHPUnit::Framework</namespace>
  </compound>
  <compound kind="file">
    <name>Error.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Error/</path>
    <filename>Error_8php</filename>
    <class kind="class">PHPUnit::Framework::Error::Error</class>
    <namespace>PHPUnit::Framework::Error</namespace>
  </compound>
  <compound kind="file">
    <name>Notice.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Error/</path>
    <filename>Notice_8php</filename>
    <class kind="class">PHPUnit::Framework::Error::Notice</class>
    <namespace>PHPUnit::Framework::Error</namespace>
  </compound>
  <compound kind="file">
    <name>Warning.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Error/</path>
    <filename>Error_2Warning_8php</filename>
    <class kind="class">PHPUnit::Framework::Error::Warning</class>
    <namespace>PHPUnit::Framework::Error</namespace>
  </compound>
  <compound kind="file">
    <name>Warning.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Exception/</path>
    <filename>Exception_2Warning_8php</filename>
    <class kind="class">PHPUnit::Framework::Warning</class>
    <namespace>PHPUnit::Framework</namespace>
  </compound>
  <compound kind="file">
    <name>AssertionFailedError.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Exception/</path>
    <filename>AssertionFailedError_8php</filename>
    <class kind="class">PHPUnit::Framework::AssertionFailedError</class>
    <namespace>PHPUnit::Framework</namespace>
  </compound>
  <compound kind="file">
    <name>CodeCoverageException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Exception/</path>
    <filename>CodeCoverageException_8php</filename>
    <class kind="class">PHPUnit::Framework::CodeCoverageException</class>
    <namespace>PHPUnit::Framework</namespace>
  </compound>
  <compound kind="file">
    <name>ExpectationFailedException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Exception/</path>
    <filename>ExpectationFailedException_8php</filename>
    <class kind="class">PHPUnit::Framework::ExpectationFailedException</class>
    <namespace>PHPUnit::Framework</namespace>
  </compound>
  <compound kind="file">
    <name>IncompleteTestError.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Exception/</path>
    <filename>IncompleteTestError_8php</filename>
    <class kind="class">PHPUnit::Framework::IncompleteTestError</class>
    <namespace>PHPUnit::Framework</namespace>
  </compound>
  <compound kind="file">
    <name>InvalidCoversTargetException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Exception/</path>
    <filename>InvalidCoversTargetException_8php</filename>
    <class kind="class">PHPUnit::Framework::InvalidCoversTargetException</class>
    <namespace>PHPUnit::Framework</namespace>
  </compound>
  <compound kind="file">
    <name>InvalidDataProviderException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Exception/</path>
    <filename>InvalidDataProviderException_8php</filename>
    <class kind="class">PHPUnit::Framework::InvalidDataProviderException</class>
    <namespace>PHPUnit::Framework</namespace>
  </compound>
  <compound kind="file">
    <name>NoChildTestSuiteException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Exception/</path>
    <filename>NoChildTestSuiteException_8php</filename>
    <class kind="class">PHPUnit::Framework::NoChildTestSuiteException</class>
    <namespace>PHPUnit::Framework</namespace>
  </compound>
  <compound kind="file">
    <name>OutputError.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Exception/</path>
    <filename>OutputError_8php</filename>
    <class kind="class">PHPUnit::Framework::OutputError</class>
    <namespace>PHPUnit::Framework</namespace>
  </compound>
  <compound kind="file">
    <name>PHPTAssertionFailedError.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Exception/</path>
    <filename>PHPTAssertionFailedError_8php</filename>
    <class kind="class">PHPUnit::Framework::PHPTAssertionFailedError</class>
    <namespace>PHPUnit::Framework</namespace>
  </compound>
  <compound kind="file">
    <name>RiskyTestError.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Exception/</path>
    <filename>RiskyTestError_8php</filename>
    <class kind="class">PHPUnit::Framework::RiskyTestError</class>
    <namespace>PHPUnit::Framework</namespace>
  </compound>
  <compound kind="file">
    <name>SkippedTestError.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Exception/</path>
    <filename>SkippedTestError_8php</filename>
    <class kind="class">PHPUnit::Framework::SkippedTestError</class>
    <namespace>PHPUnit::Framework</namespace>
  </compound>
  <compound kind="file">
    <name>SkippedTestSuiteError.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Exception/</path>
    <filename>SkippedTestSuiteError_8php</filename>
    <class kind="class">PHPUnit::Framework::SkippedTestSuiteError</class>
    <namespace>PHPUnit::Framework</namespace>
  </compound>
  <compound kind="file">
    <name>SyntheticError.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Exception/</path>
    <filename>SyntheticError_8php</filename>
    <class kind="class">PHPUnit::Framework::SyntheticError</class>
    <namespace>PHPUnit::Framework</namespace>
  </compound>
  <compound kind="file">
    <name>SyntheticSkippedError.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Exception/</path>
    <filename>SyntheticSkippedError_8php</filename>
    <class kind="class">PHPUnit::Framework::SyntheticSkippedError</class>
    <namespace>PHPUnit::Framework</namespace>
  </compound>
  <compound kind="file">
    <name>UnintentionallyCoveredCodeError.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/Exception/</path>
    <filename>UnintentionallyCoveredCodeError_8php</filename>
    <class kind="class">PHPUnit::Framework::UnintentionallyCoveredCodeError</class>
    <namespace>PHPUnit::Framework</namespace>
  </compound>
  <compound kind="file">
    <name>ExceptionWrapper.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/</path>
    <filename>ExceptionWrapper_8php</filename>
    <class kind="class">PHPUnit::Framework::ExceptionWrapper</class>
    <namespace>PHPUnit::Framework</namespace>
  </compound>
  <compound kind="file">
    <name>IncompleteTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/</path>
    <filename>src_2Framework_2IncompleteTest_8php</filename>
    <class kind="interface">PHPUnit::Framework::IncompleteTest</class>
    <namespace>PHPUnit::Framework</namespace>
  </compound>
  <compound kind="file">
    <name>IncompleteTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>tests_2__files_2IncompleteTest_8php</filename>
    <class kind="class">IncompleteTest</class>
  </compound>
  <compound kind="file">
    <name>IncompleteTestCase.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/</path>
    <filename>IncompleteTestCase_8php</filename>
    <class kind="class">PHPUnit::Framework::IncompleteTestCase</class>
    <namespace>PHPUnit::Framework</namespace>
  </compound>
  <compound kind="file">
    <name>InvalidParameterGroupException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/</path>
    <filename>InvalidParameterGroupException_8php</filename>
    <class kind="class">PHPUnit::Framework::InvalidParameterGroupException</class>
    <namespace>PHPUnit::Framework</namespace>
  </compound>
  <compound kind="file">
    <name>Api.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/MockObject/Api/</path>
    <filename>Api_8php</filename>
    <namespace>PHPUnit::Framework::MockObject</namespace>
    <member kind="function">
      <type></type>
      <name>__phpunit_setOriginalObject</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1MockObject.html</anchorfile>
      <anchor>af323001a1713d90051514c08014076b4</anchor>
      <arglist>($originalObject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__phpunit_setReturnValueGeneration</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1MockObject.html</anchorfile>
      <anchor>a1f38d33cfe3b0d5f5fd27fc4288dee37</anchor>
      <arglist>(bool $returnValueGeneration)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__phpunit_getInvocationHandler</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1MockObject.html</anchorfile>
      <anchor>a12dcac1e4e45358144a79da9258909e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__phpunit_hasMatchers</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1MockObject.html</anchorfile>
      <anchor>a962dc5d2d3ec13e740a2dc5f9a4d36d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__phpunit_verify</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1MockObject.html</anchorfile>
      <anchor>ae26547a2792315fc8c99e7a77339c698</anchor>
      <arglist>(bool $unsetInvocationMocker=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>expects</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1MockObject.html</anchorfile>
      <anchor>af523cb478765a606ea9087e97abbc0c1</anchor>
      <arglist>(InvocationOrder $matcher)</arglist>
    </member>
    <member kind="variable">
      <type>trait</type>
      <name>Api</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1MockObject.html</anchorfile>
      <anchor>acefb5e8596931fb6b3677c14b9f858ed</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MockedCloneMethod.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/MockObject/Api/</path>
    <filename>MockedCloneMethod_8php</filename>
    <namespace>PHPUnit::Framework::MockObject</namespace>
  </compound>
  <compound kind="file">
    <name>UnmockedCloneMethod.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/MockObject/Api/</path>
    <filename>UnmockedCloneMethod_8php</filename>
    <namespace>PHPUnit::Framework::MockObject</namespace>
  </compound>
  <compound kind="file">
    <name>Identity.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/MockObject/Builder/</path>
    <filename>Identity_8php</filename>
    <class kind="interface">PHPUnit::Framework::MockObject::Builder::Identity</class>
    <namespace>PHPUnit::Framework::MockObject::Builder</namespace>
  </compound>
  <compound kind="file">
    <name>InvocationMocker.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/MockObject/Builder/</path>
    <filename>InvocationMocker_8php</filename>
    <class kind="class">PHPUnit::Framework::MockObject::Builder::InvocationMocker</class>
    <namespace>PHPUnit::Framework::MockObject::Builder</namespace>
  </compound>
  <compound kind="file">
    <name>InvocationStubber.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/MockObject/Builder/</path>
    <filename>InvocationStubber_8php</filename>
    <class kind="interface">PHPUnit::Framework::MockObject::Builder::InvocationStubber</class>
    <namespace>PHPUnit::Framework::MockObject::Builder</namespace>
  </compound>
  <compound kind="file">
    <name>Match.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/MockObject/Builder/</path>
    <filename>Match_8php</filename>
    <class kind="interface">PHPUnit::Framework::MockObject::Builder::Match</class>
    <namespace>PHPUnit::Framework::MockObject::Builder</namespace>
  </compound>
  <compound kind="file">
    <name>MethodNameMatch.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/MockObject/Builder/</path>
    <filename>MethodNameMatch_8php</filename>
    <class kind="interface">PHPUnit::Framework::MockObject::Builder::MethodNameMatch</class>
    <namespace>PHPUnit::Framework::MockObject::Builder</namespace>
  </compound>
  <compound kind="file">
    <name>ParametersMatch.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/MockObject/Builder/</path>
    <filename>ParametersMatch_8php</filename>
    <class kind="interface">PHPUnit::Framework::MockObject::Builder::ParametersMatch</class>
    <namespace>PHPUnit::Framework::MockObject::Builder</namespace>
  </compound>
  <compound kind="file">
    <name>Stub.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/MockObject/Builder/</path>
    <filename>Builder_2Stub_8php</filename>
    <class kind="interface">PHPUnit::Framework::MockObject::Builder::Stub</class>
    <namespace>PHPUnit::Framework::MockObject::Builder</namespace>
  </compound>
  <compound kind="file">
    <name>Stub.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/MockObject/Stub/</path>
    <filename>Stub_2Stub_8php</filename>
    <class kind="interface">PHPUnit::Framework::MockObject::Stub::Stub</class>
    <namespace>PHPUnit::Framework::MockObject::Stub</namespace>
  </compound>
  <compound kind="file">
    <name>Stub.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/MockObject/</path>
    <filename>Stub_8php</filename>
    <class kind="interface">PHPUnit::Framework::MockObject::Stub</class>
    <namespace>PHPUnit::Framework::MockObject</namespace>
  </compound>
  <compound kind="file">
    <name>ConfigurableMethod.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/MockObject/</path>
    <filename>ConfigurableMethod_8php</filename>
    <class kind="class">PHPUnit::Framework::MockObject::ConfigurableMethod</class>
    <namespace>PHPUnit::Framework::MockObject</namespace>
  </compound>
  <compound kind="file">
    <name>BadMethodCallException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/MockObject/Exception/</path>
    <filename>BadMethodCallException_8php</filename>
    <class kind="class">PHPUnit::Framework::MockObject::BadMethodCallException</class>
    <namespace>PHPUnit::Framework::MockObject</namespace>
  </compound>
  <compound kind="file">
    <name>ConfigurableMethodsAlreadyInitializedException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/MockObject/Exception/</path>
    <filename>ConfigurableMethodsAlreadyInitializedException_8php</filename>
    <class kind="class">PHPUnit::Framework::MockObject::ConfigurableMethodsAlreadyInitializedException</class>
    <namespace>PHPUnit::Framework::MockObject</namespace>
  </compound>
  <compound kind="file">
    <name>IncompatibleReturnValueException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/MockObject/Exception/</path>
    <filename>IncompatibleReturnValueException_8php</filename>
    <class kind="class">PHPUnit::Framework::MockObject::IncompatibleReturnValueException</class>
    <namespace>PHPUnit::Framework::MockObject</namespace>
  </compound>
  <compound kind="file">
    <name>Generator.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/MockObject/</path>
    <filename>Generator_8php</filename>
    <class kind="class">PHPUnit::Framework::MockObject::Generator</class>
    <namespace>PHPUnit::Framework::MockObject</namespace>
  </compound>
  <compound kind="file">
    <name>Invocation.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/MockObject/</path>
    <filename>Invocation_8php</filename>
    <class kind="class">PHPUnit::Framework::MockObject::Invocation</class>
    <namespace>PHPUnit::Framework::MockObject</namespace>
  </compound>
  <compound kind="file">
    <name>InvocationHandler.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/MockObject/</path>
    <filename>InvocationHandler_8php</filename>
    <class kind="class">PHPUnit::Framework::MockObject::InvocationHandler</class>
    <namespace>PHPUnit::Framework::MockObject</namespace>
  </compound>
  <compound kind="file">
    <name>MethodNameConstraint.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/MockObject/</path>
    <filename>MethodNameConstraint_8php</filename>
    <class kind="class">PHPUnit::Framework::MockObject::MethodNameConstraint</class>
    <namespace>PHPUnit::Framework::MockObject</namespace>
  </compound>
  <compound kind="file">
    <name>MockBuilder.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/MockObject/</path>
    <filename>MockBuilder_8php</filename>
    <class kind="class">PHPUnit::Framework::MockObject::MockBuilder</class>
    <namespace>PHPUnit::Framework::MockObject</namespace>
  </compound>
  <compound kind="file">
    <name>MockClass.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/MockObject/</path>
    <filename>MockClass_8php</filename>
    <class kind="class">PHPUnit::Framework::MockObject::MockClass</class>
    <namespace>PHPUnit::Framework::MockObject</namespace>
  </compound>
  <compound kind="file">
    <name>MockMethod.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/MockObject/</path>
    <filename>MockMethod_8php</filename>
    <class kind="class">PHPUnit::Framework::MockObject::MockMethod</class>
    <namespace>PHPUnit::Framework::MockObject</namespace>
  </compound>
  <compound kind="file">
    <name>MockMethodSet.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/MockObject/</path>
    <filename>MockMethodSet_8php</filename>
    <class kind="class">PHPUnit::Framework::MockObject::MockMethodSet</class>
    <namespace>PHPUnit::Framework::MockObject</namespace>
  </compound>
  <compound kind="file">
    <name>MockObject.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/MockObject/</path>
    <filename>MockObject_8php</filename>
    <class kind="interface">PHPUnit::Framework::MockObject::MockObject</class>
    <namespace>PHPUnit::Framework::MockObject</namespace>
  </compound>
  <compound kind="file">
    <name>MockTrait.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/MockObject/</path>
    <filename>MockTrait_8php</filename>
    <class kind="class">PHPUnit::Framework::MockObject::MockTrait</class>
    <namespace>PHPUnit::Framework::MockObject</namespace>
  </compound>
  <compound kind="file">
    <name>MockType.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/MockObject/</path>
    <filename>MockType_8php</filename>
    <class kind="interface">PHPUnit::Framework::MockObject::MockType</class>
    <namespace>PHPUnit::Framework::MockObject</namespace>
  </compound>
  <compound kind="file">
    <name>AnyInvokedCount.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/MockObject/Rule/</path>
    <filename>AnyInvokedCount_8php</filename>
    <class kind="class">PHPUnit::Framework::MockObject::Rule::AnyInvokedCount</class>
    <namespace>PHPUnit::Framework::MockObject::Rule</namespace>
  </compound>
  <compound kind="file">
    <name>AnyParameters.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/MockObject/Rule/</path>
    <filename>AnyParameters_8php</filename>
    <class kind="class">PHPUnit::Framework::MockObject::Rule::AnyParameters</class>
    <namespace>PHPUnit::Framework::MockObject::Rule</namespace>
  </compound>
  <compound kind="file">
    <name>ConsecutiveParameters.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/MockObject/Rule/</path>
    <filename>ConsecutiveParameters_8php</filename>
    <class kind="class">PHPUnit::Framework::MockObject::Rule::ConsecutiveParameters</class>
    <namespace>PHPUnit::Framework::MockObject::Rule</namespace>
  </compound>
  <compound kind="file">
    <name>InvocationOrder.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/MockObject/Rule/</path>
    <filename>InvocationOrder_8php</filename>
    <class kind="class">PHPUnit::Framework::MockObject::Rule::InvocationOrder</class>
    <namespace>PHPUnit::Framework::MockObject::Rule</namespace>
  </compound>
  <compound kind="file">
    <name>InvokedAtIndex.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/MockObject/Rule/</path>
    <filename>InvokedAtIndex_8php</filename>
    <class kind="class">PHPUnit::Framework::MockObject::Rule::InvokedAtIndex</class>
    <namespace>PHPUnit::Framework::MockObject::Rule</namespace>
  </compound>
  <compound kind="file">
    <name>InvokedAtLeastCount.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/MockObject/Rule/</path>
    <filename>InvokedAtLeastCount_8php</filename>
    <class kind="class">PHPUnit::Framework::MockObject::Rule::InvokedAtLeastCount</class>
    <namespace>PHPUnit::Framework::MockObject::Rule</namespace>
  </compound>
  <compound kind="file">
    <name>InvokedAtLeastOnce.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/MockObject/Rule/</path>
    <filename>InvokedAtLeastOnce_8php</filename>
    <class kind="class">PHPUnit::Framework::MockObject::Rule::InvokedAtLeastOnce</class>
    <namespace>PHPUnit::Framework::MockObject::Rule</namespace>
  </compound>
  <compound kind="file">
    <name>InvokedAtMostCount.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/MockObject/Rule/</path>
    <filename>InvokedAtMostCount_8php</filename>
    <class kind="class">PHPUnit::Framework::MockObject::Rule::InvokedAtMostCount</class>
    <namespace>PHPUnit::Framework::MockObject::Rule</namespace>
  </compound>
  <compound kind="file">
    <name>InvokedCount.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/MockObject/Rule/</path>
    <filename>InvokedCount_8php</filename>
    <class kind="class">PHPUnit::Framework::MockObject::Rule::InvokedCount</class>
    <namespace>PHPUnit::Framework::MockObject::Rule</namespace>
  </compound>
  <compound kind="file">
    <name>MethodName.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/MockObject/Rule/</path>
    <filename>MethodName_8php</filename>
    <class kind="class">PHPUnit::Framework::MockObject::Rule::MethodName</class>
    <namespace>PHPUnit::Framework::MockObject::Rule</namespace>
  </compound>
  <compound kind="file">
    <name>Parameters.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/MockObject/Rule/</path>
    <filename>Parameters_8php</filename>
    <class kind="class">PHPUnit::Framework::MockObject::Rule::Parameters</class>
    <namespace>PHPUnit::Framework::MockObject::Rule</namespace>
  </compound>
  <compound kind="file">
    <name>ParametersRule.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/MockObject/Rule/</path>
    <filename>ParametersRule_8php</filename>
    <class kind="interface">PHPUnit::Framework::MockObject::Rule::ParametersRule</class>
    <namespace>PHPUnit::Framework::MockObject::Rule</namespace>
  </compound>
  <compound kind="file">
    <name>ConsecutiveCalls.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/MockObject/Stub/</path>
    <filename>ConsecutiveCalls_8php</filename>
    <class kind="class">PHPUnit::Framework::MockObject::Stub::ConsecutiveCalls</class>
    <namespace>PHPUnit::Framework::MockObject::Stub</namespace>
  </compound>
  <compound kind="file">
    <name>ReturnArgument.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/MockObject/Stub/</path>
    <filename>ReturnArgument_8php</filename>
    <class kind="class">PHPUnit::Framework::MockObject::Stub::ReturnArgument</class>
    <namespace>PHPUnit::Framework::MockObject::Stub</namespace>
  </compound>
  <compound kind="file">
    <name>ReturnCallback.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/MockObject/Stub/</path>
    <filename>ReturnCallback_8php</filename>
    <class kind="class">PHPUnit::Framework::MockObject::Stub::ReturnCallback</class>
    <namespace>PHPUnit::Framework::MockObject::Stub</namespace>
  </compound>
  <compound kind="file">
    <name>ReturnReference.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/MockObject/Stub/</path>
    <filename>ReturnReference_8php</filename>
    <class kind="class">PHPUnit::Framework::MockObject::Stub::ReturnReference</class>
    <namespace>PHPUnit::Framework::MockObject::Stub</namespace>
  </compound>
  <compound kind="file">
    <name>ReturnSelf.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/MockObject/Stub/</path>
    <filename>ReturnSelf_8php</filename>
    <class kind="class">PHPUnit::Framework::MockObject::Stub::ReturnSelf</class>
    <namespace>PHPUnit::Framework::MockObject::Stub</namespace>
  </compound>
  <compound kind="file">
    <name>ReturnStub.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/MockObject/Stub/</path>
    <filename>ReturnStub_8php</filename>
    <class kind="class">PHPUnit::Framework::MockObject::Stub::ReturnStub</class>
    <namespace>PHPUnit::Framework::MockObject::Stub</namespace>
  </compound>
  <compound kind="file">
    <name>ReturnValueMap.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/MockObject/Stub/</path>
    <filename>ReturnValueMap_8php</filename>
    <class kind="class">PHPUnit::Framework::MockObject::Stub::ReturnValueMap</class>
    <namespace>PHPUnit::Framework::MockObject::Stub</namespace>
  </compound>
  <compound kind="file">
    <name>Verifiable.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/MockObject/</path>
    <filename>Verifiable_8php</filename>
    <class kind="interface">PHPUnit::Framework::MockObject::Verifiable</class>
    <namespace>PHPUnit::Framework::MockObject</namespace>
  </compound>
  <compound kind="file">
    <name>SelfDescribing.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/</path>
    <filename>SelfDescribing_8php</filename>
    <class kind="interface">PHPUnit::Framework::SelfDescribing</class>
    <namespace>PHPUnit::Framework</namespace>
  </compound>
  <compound kind="file">
    <name>SkippedTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/</path>
    <filename>SkippedTest_8php</filename>
    <class kind="interface">PHPUnit::Framework::SkippedTest</class>
    <namespace>PHPUnit::Framework</namespace>
  </compound>
  <compound kind="file">
    <name>SkippedTestCase.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/</path>
    <filename>SkippedTestCase_8php</filename>
    <class kind="class">PHPUnit::Framework::SkippedTestCase</class>
    <namespace>PHPUnit::Framework</namespace>
  </compound>
  <compound kind="file">
    <name>Test.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/</path>
    <filename>src_2Framework_2Test_8php</filename>
    <class kind="interface">PHPUnit::Framework::Test</class>
    <namespace>PHPUnit::Framework</namespace>
  </compound>
  <compound kind="file">
    <name>Test.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Util/</path>
    <filename>src_2Util_2Test_8php</filename>
    <class kind="class">PHPUnit::Util::Test</class>
    <namespace>PHPUnit::Util</namespace>
  </compound>
  <compound kind="file">
    <name>Test.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/GitHub/2448/</path>
    <filename>tests_2end-to-end_2regression_2GitHub_22448_2Test_8php</filename>
    <class kind="class">Test</class>
  </compound>
  <compound kind="file">
    <name>TestBuilder.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/</path>
    <filename>TestBuilder_8php</filename>
    <class kind="class">PHPUnit::Framework::TestBuilder</class>
    <namespace>PHPUnit::Framework</namespace>
  </compound>
  <compound kind="file">
    <name>TestFailure.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/</path>
    <filename>TestFailure_8php</filename>
    <class kind="class">PHPUnit::Framework::TestFailure</class>
    <namespace>PHPUnit::Framework</namespace>
  </compound>
  <compound kind="file">
    <name>TestListener.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/</path>
    <filename>TestListener_8php</filename>
    <class kind="interface">PHPUnit::Framework::TestListener</class>
    <namespace>PHPUnit::Framework</namespace>
  </compound>
  <compound kind="file">
    <name>TestListenerDefaultImplementation.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/</path>
    <filename>TestListenerDefaultImplementation_8php</filename>
    <namespace>PHPUnit::Framework</namespace>
  </compound>
  <compound kind="file">
    <name>TestResult.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/</path>
    <filename>TestResult_8php</filename>
    <class kind="class">PHPUnit::Framework::TestResult</class>
    <namespace>PHPUnit::Framework</namespace>
  </compound>
  <compound kind="file">
    <name>TestSuite.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/</path>
    <filename>TestSuite_8php</filename>
    <class kind="class">PHPUnit::Framework::TestSuite</class>
    <namespace>PHPUnit::Framework</namespace>
  </compound>
  <compound kind="file">
    <name>TestSuiteIterator.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/</path>
    <filename>TestSuiteIterator_8php</filename>
    <class kind="class">PHPUnit::Framework::TestSuiteIterator</class>
    <namespace>PHPUnit::Framework</namespace>
  </compound>
  <compound kind="file">
    <name>WarningTestCase.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Framework/</path>
    <filename>WarningTestCase_8php</filename>
    <class kind="class">PHPUnit::Framework::WarningTestCase</class>
    <namespace>PHPUnit::Framework</namespace>
  </compound>
  <compound kind="file">
    <name>BaseTestRunner.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Runner/</path>
    <filename>BaseTestRunner_8php</filename>
    <class kind="class">PHPUnit::Runner::BaseTestRunner</class>
    <namespace>PHPUnit::Runner</namespace>
  </compound>
  <compound kind="file">
    <name>DefaultTestResultCache.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Runner/</path>
    <filename>DefaultTestResultCache_8php</filename>
    <class kind="class">PHPUnit::Runner::DefaultTestResultCache</class>
    <namespace>PHPUnit::Runner</namespace>
  </compound>
  <compound kind="file">
    <name>ExcludeGroupFilterIterator.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Runner/Filter/</path>
    <filename>ExcludeGroupFilterIterator_8php</filename>
    <class kind="class">PHPUnit::Runner::Filter::ExcludeGroupFilterIterator</class>
    <namespace>PHPUnit::Runner::Filter</namespace>
  </compound>
  <compound kind="file">
    <name>GroupFilterIterator.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Runner/Filter/</path>
    <filename>GroupFilterIterator_8php</filename>
    <class kind="class">PHPUnit::Runner::Filter::GroupFilterIterator</class>
    <namespace>PHPUnit::Runner::Filter</namespace>
  </compound>
  <compound kind="file">
    <name>IncludeGroupFilterIterator.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Runner/Filter/</path>
    <filename>IncludeGroupFilterIterator_8php</filename>
    <class kind="class">PHPUnit::Runner::Filter::IncludeGroupFilterIterator</class>
    <namespace>PHPUnit::Runner::Filter</namespace>
  </compound>
  <compound kind="file">
    <name>NameFilterIterator.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Runner/Filter/</path>
    <filename>NameFilterIterator_8php</filename>
    <class kind="class">PHPUnit::Runner::Filter::NameFilterIterator</class>
    <namespace>PHPUnit::Runner::Filter</namespace>
  </compound>
  <compound kind="file">
    <name>AfterIncompleteTestHook.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Runner/Hook/</path>
    <filename>AfterIncompleteTestHook_8php</filename>
    <class kind="interface">PHPUnit::Runner::AfterIncompleteTestHook</class>
    <namespace>PHPUnit::Runner</namespace>
  </compound>
  <compound kind="file">
    <name>AfterLastTestHook.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Runner/Hook/</path>
    <filename>AfterLastTestHook_8php</filename>
    <class kind="interface">PHPUnit::Runner::AfterLastTestHook</class>
    <namespace>PHPUnit::Runner</namespace>
  </compound>
  <compound kind="file">
    <name>AfterRiskyTestHook.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Runner/Hook/</path>
    <filename>AfterRiskyTestHook_8php</filename>
    <class kind="interface">PHPUnit::Runner::AfterRiskyTestHook</class>
    <namespace>PHPUnit::Runner</namespace>
  </compound>
  <compound kind="file">
    <name>AfterSkippedTestHook.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Runner/Hook/</path>
    <filename>AfterSkippedTestHook_8php</filename>
    <class kind="interface">PHPUnit::Runner::AfterSkippedTestHook</class>
    <namespace>PHPUnit::Runner</namespace>
  </compound>
  <compound kind="file">
    <name>AfterSuccessfulTestHook.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Runner/Hook/</path>
    <filename>AfterSuccessfulTestHook_8php</filename>
    <class kind="interface">PHPUnit::Runner::AfterSuccessfulTestHook</class>
    <namespace>PHPUnit::Runner</namespace>
  </compound>
  <compound kind="file">
    <name>AfterTestErrorHook.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Runner/Hook/</path>
    <filename>AfterTestErrorHook_8php</filename>
    <class kind="interface">PHPUnit::Runner::AfterTestErrorHook</class>
    <namespace>PHPUnit::Runner</namespace>
  </compound>
  <compound kind="file">
    <name>AfterTestFailureHook.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Runner/Hook/</path>
    <filename>AfterTestFailureHook_8php</filename>
    <class kind="interface">PHPUnit::Runner::AfterTestFailureHook</class>
    <namespace>PHPUnit::Runner</namespace>
  </compound>
  <compound kind="file">
    <name>AfterTestHook.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Runner/Hook/</path>
    <filename>AfterTestHook_8php</filename>
    <class kind="interface">PHPUnit::Runner::AfterTestHook</class>
    <namespace>PHPUnit::Runner</namespace>
  </compound>
  <compound kind="file">
    <name>AfterTestWarningHook.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Runner/Hook/</path>
    <filename>AfterTestWarningHook_8php</filename>
    <class kind="interface">PHPUnit::Runner::AfterTestWarningHook</class>
    <namespace>PHPUnit::Runner</namespace>
  </compound>
  <compound kind="file">
    <name>BeforeFirstTestHook.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Runner/Hook/</path>
    <filename>BeforeFirstTestHook_8php</filename>
    <class kind="interface">PHPUnit::Runner::BeforeFirstTestHook</class>
    <namespace>PHPUnit::Runner</namespace>
  </compound>
  <compound kind="file">
    <name>BeforeTestHook.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Runner/Hook/</path>
    <filename>BeforeTestHook_8php</filename>
    <class kind="interface">PHPUnit::Runner::BeforeTestHook</class>
    <namespace>PHPUnit::Runner</namespace>
  </compound>
  <compound kind="file">
    <name>Hook.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Runner/Hook/</path>
    <filename>Hook_8php</filename>
    <class kind="interface">PHPUnit::Runner::Hook</class>
    <namespace>PHPUnit::Runner</namespace>
  </compound>
  <compound kind="file">
    <name>TestHook.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Runner/Hook/</path>
    <filename>TestHook_8php</filename>
    <class kind="interface">PHPUnit::Runner::TestHook</class>
    <namespace>PHPUnit::Runner</namespace>
  </compound>
  <compound kind="file">
    <name>TestListenerAdapter.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Runner/Hook/</path>
    <filename>TestListenerAdapter_8php</filename>
    <class kind="class">PHPUnit::Runner::TestListenerAdapter</class>
    <namespace>PHPUnit::Runner</namespace>
  </compound>
  <compound kind="file">
    <name>NullTestResultCache.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Runner/</path>
    <filename>NullTestResultCache_8php</filename>
    <class kind="class">PHPUnit::Runner::NullTestResultCache</class>
    <namespace>PHPUnit::Runner</namespace>
  </compound>
  <compound kind="file">
    <name>PhptTestCase.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Runner/</path>
    <filename>PhptTestCase_8php</filename>
    <class kind="class">PHPUnit::Runner::PhptTestCase</class>
    <namespace>PHPUnit::Runner</namespace>
  </compound>
  <compound kind="file">
    <name>ResultCacheExtension.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Runner/</path>
    <filename>ResultCacheExtension_8php</filename>
    <class kind="class">PHPUnit::Runner::ResultCacheExtension</class>
    <namespace>PHPUnit::Runner</namespace>
  </compound>
  <compound kind="file">
    <name>StandardTestSuiteLoader.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Runner/</path>
    <filename>StandardTestSuiteLoader_8php</filename>
    <class kind="class">PHPUnit::Runner::StandardTestSuiteLoader</class>
    <namespace>PHPUnit::Runner</namespace>
  </compound>
  <compound kind="file">
    <name>TestResultCache.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Runner/</path>
    <filename>TestResultCache_8php</filename>
    <class kind="interface">PHPUnit::Runner::TestResultCache</class>
    <namespace>PHPUnit::Runner</namespace>
  </compound>
  <compound kind="file">
    <name>TestSuiteLoader.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Runner/</path>
    <filename>TestSuiteLoader_8php</filename>
    <class kind="interface">PHPUnit::Runner::TestSuiteLoader</class>
    <namespace>PHPUnit::Runner</namespace>
  </compound>
  <compound kind="file">
    <name>TestSuiteSorter.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Runner/</path>
    <filename>TestSuiteSorter_8php</filename>
    <class kind="class">PHPUnit::Runner::TestSuiteSorter</class>
    <namespace>PHPUnit::Runner</namespace>
  </compound>
  <compound kind="file">
    <name>Command.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/TextUI/</path>
    <filename>Command_8php</filename>
    <class kind="class">PHPUnit::TextUI::Command</class>
    <namespace>PHPUnit::TextUI</namespace>
  </compound>
  <compound kind="file">
    <name>Help.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/TextUI/</path>
    <filename>Help_8php</filename>
    <class kind="class">PHPUnit::TextUI::Help</class>
    <namespace>PHPUnit::TextUI</namespace>
  </compound>
  <compound kind="file">
    <name>ResultPrinter.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/TextUI/</path>
    <filename>TextUI_2ResultPrinter_8php</filename>
    <class kind="class">PHPUnit::TextUI::ResultPrinter</class>
    <namespace>PHPUnit::TextUI</namespace>
  </compound>
  <compound kind="file">
    <name>ResultPrinter.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Util/TestDox/</path>
    <filename>Util_2TestDox_2ResultPrinter_8php</filename>
    <class kind="class">PHPUnit::Util::TestDox::ResultPrinter</class>
    <namespace>PHPUnit::Util::TestDox</namespace>
  </compound>
  <compound kind="file">
    <name>TestRunner.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/TextUI/</path>
    <filename>TestRunner_8php</filename>
    <class kind="class">PHPUnit::TextUI::TestRunner</class>
    <namespace>PHPUnit::TextUI</namespace>
  </compound>
  <compound kind="file">
    <name>Registry.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Util/Annotation/</path>
    <filename>Registry_8php</filename>
    <class kind="class">PHPUnit::Util::Annotation::Registry</class>
    <namespace>PHPUnit::Util::Annotation</namespace>
  </compound>
  <compound kind="file">
    <name>Blacklist.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Util/</path>
    <filename>phpunit_2phpunit_2src_2Util_2Blacklist_8php</filename>
    <class kind="class">PHPUnit::Util::Blacklist</class>
    <namespace>PHPUnit::Util</namespace>
  </compound>
  <compound kind="file">
    <name>Blacklist.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/global-state/src/</path>
    <filename>sebastian_2global-state_2src_2Blacklist_8php</filename>
    <class kind="class">SebastianBergmann::GlobalState::Blacklist</class>
    <namespace>SebastianBergmann::GlobalState</namespace>
  </compound>
  <compound kind="file">
    <name>Color.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Util/</path>
    <filename>Color_8php</filename>
    <class kind="class">PHPUnit::Util::Color</class>
    <namespace>PHPUnit::Util</namespace>
  </compound>
  <compound kind="file">
    <name>Configuration.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Util/</path>
    <filename>Configuration_8php</filename>
    <class kind="class">PHPUnit::Util::Configuration</class>
    <namespace>PHPUnit::Util</namespace>
  </compound>
  <compound kind="file">
    <name>ConfigurationGenerator.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Util/</path>
    <filename>ConfigurationGenerator_8php</filename>
    <class kind="class">PHPUnit::Util::ConfigurationGenerator</class>
    <namespace>PHPUnit::Util</namespace>
  </compound>
  <compound kind="file">
    <name>ErrorHandler.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Util/</path>
    <filename>ErrorHandler_8php</filename>
    <class kind="class">PHPUnit::Util::ErrorHandler</class>
    <namespace>PHPUnit::Util</namespace>
  </compound>
  <compound kind="file">
    <name>FileLoader.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Util/</path>
    <filename>FileLoader_8php</filename>
    <class kind="class">PHPUnit::Util::FileLoader</class>
    <namespace>PHPUnit::Util</namespace>
  </compound>
  <compound kind="file">
    <name>Filesystem.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Util/</path>
    <filename>Filesystem_8php</filename>
    <class kind="class">PHPUnit::Util::Filesystem</class>
    <namespace>PHPUnit::Util</namespace>
  </compound>
  <compound kind="file">
    <name>Getopt.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Util/</path>
    <filename>Getopt_8php</filename>
    <class kind="class">PHPUnit::Util::Getopt</class>
    <namespace>PHPUnit::Util</namespace>
  </compound>
  <compound kind="file">
    <name>GlobalState.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Util/</path>
    <filename>GlobalState_8php</filename>
    <class kind="class">PHPUnit::Util::GlobalState</class>
    <namespace>PHPUnit::Util</namespace>
  </compound>
  <compound kind="file">
    <name>InvalidDataSetException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Util/</path>
    <filename>InvalidDataSetException_8php</filename>
    <class kind="class">PHPUnit::Util::InvalidDataSetException</class>
    <namespace>PHPUnit::Util</namespace>
  </compound>
  <compound kind="file">
    <name>Json.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Util/</path>
    <filename>Json_8php</filename>
    <class kind="class">PHPUnit::Util::Json</class>
    <namespace>PHPUnit::Util</namespace>
  </compound>
  <compound kind="file">
    <name>JUnit.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Util/Log/</path>
    <filename>JUnit_8php</filename>
    <class kind="class">PHPUnit::Util::Log::JUnit</class>
    <namespace>PHPUnit::Util::Log</namespace>
  </compound>
  <compound kind="file">
    <name>TeamCity.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Util/Log/</path>
    <filename>TeamCity_8php</filename>
    <class kind="class">PHPUnit::Util::Log::TeamCity</class>
    <namespace>PHPUnit::Util::Log</namespace>
  </compound>
  <compound kind="file">
    <name>AbstractPhpProcess.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Util/PHP/</path>
    <filename>AbstractPhpProcess_8php</filename>
    <class kind="class">PHPUnit::Util::PHP::AbstractPhpProcess</class>
    <namespace>PHPUnit::Util::PHP</namespace>
  </compound>
  <compound kind="file">
    <name>DefaultPhpProcess.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Util/PHP/</path>
    <filename>DefaultPhpProcess_8php</filename>
    <class kind="class">PHPUnit::Util::PHP::DefaultPhpProcess</class>
    <namespace>PHPUnit::Util::PHP</namespace>
  </compound>
  <compound kind="file">
    <name>WindowsPhpProcess.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Util/PHP/</path>
    <filename>WindowsPhpProcess_8php</filename>
    <class kind="class">PHPUnit::Util::PHP::WindowsPhpProcess</class>
    <namespace>PHPUnit::Util::PHP</namespace>
  </compound>
  <compound kind="file">
    <name>Printer.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Util/</path>
    <filename>Printer_8php</filename>
    <class kind="class">PHPUnit::Util::Printer</class>
    <namespace>PHPUnit::Util</namespace>
  </compound>
  <compound kind="file">
    <name>CliTestDoxPrinter.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Util/TestDox/</path>
    <filename>CliTestDoxPrinter_8php</filename>
    <class kind="class">PHPUnit::Util::TestDox::CliTestDoxPrinter</class>
    <namespace>PHPUnit::Util::TestDox</namespace>
  </compound>
  <compound kind="file">
    <name>HtmlResultPrinter.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Util/TestDox/</path>
    <filename>HtmlResultPrinter_8php</filename>
    <class kind="class">PHPUnit::Util::TestDox::HtmlResultPrinter</class>
    <namespace>PHPUnit::Util::TestDox</namespace>
  </compound>
  <compound kind="file">
    <name>NamePrettifier.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Util/TestDox/</path>
    <filename>NamePrettifier_8php</filename>
    <class kind="class">PHPUnit::Util::TestDox::NamePrettifier</class>
    <namespace>PHPUnit::Util::TestDox</namespace>
  </compound>
  <compound kind="file">
    <name>TestDoxPrinter.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Util/TestDox/</path>
    <filename>TestDoxPrinter_8php</filename>
    <class kind="class">PHPUnit::Util::TestDox::TestDoxPrinter</class>
    <namespace>PHPUnit::Util::TestDox</namespace>
  </compound>
  <compound kind="file">
    <name>TextResultPrinter.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Util/TestDox/</path>
    <filename>TextResultPrinter_8php</filename>
    <class kind="class">PHPUnit::Util::TestDox::TextResultPrinter</class>
    <namespace>PHPUnit::Util::TestDox</namespace>
  </compound>
  <compound kind="file">
    <name>XmlResultPrinter.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Util/TestDox/</path>
    <filename>XmlResultPrinter_8php</filename>
    <class kind="class">PHPUnit::Util::TestDox::XmlResultPrinter</class>
    <namespace>PHPUnit::Util::TestDox</namespace>
  </compound>
  <compound kind="file">
    <name>TextTestListRenderer.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Util/</path>
    <filename>TextTestListRenderer_8php</filename>
    <class kind="class">PHPUnit::Util::TextTestListRenderer</class>
    <namespace>PHPUnit::Util</namespace>
  </compound>
  <compound kind="file">
    <name>VersionComparisonOperator.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Util/</path>
    <filename>VersionComparisonOperator_8php</filename>
    <class kind="class">PHPUnit::Util::VersionComparisonOperator</class>
    <namespace>PHPUnit::Util</namespace>
  </compound>
  <compound kind="file">
    <name>XdebugFilterScriptGenerator.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Util/</path>
    <filename>XdebugFilterScriptGenerator_8php</filename>
    <class kind="class">PHPUnit::Util::XdebugFilterScriptGenerator</class>
    <namespace>PHPUnit::Util</namespace>
  </compound>
  <compound kind="file">
    <name>Xml.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Util/</path>
    <filename>Xml_8php</filename>
    <class kind="class">PHPUnit::Util::Xml</class>
    <namespace>PHPUnit::Util</namespace>
  </compound>
  <compound kind="file">
    <name>XmlTestListRenderer.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/src/Util/</path>
    <filename>XmlTestListRenderer_8php</filename>
    <class kind="class">PHPUnit::Util::XmlTestListRenderer</class>
    <namespace>PHPUnit::Util</namespace>
  </compound>
  <compound kind="file">
    <name>3194.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>3194_8php</filename>
  </compound>
  <compound kind="file">
    <name>AbstractMockTestClass.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>AbstractMockTestClass_8php</filename>
    <class kind="class">AbstractMockTestClass</class>
  </compound>
  <compound kind="file">
    <name>AbstractTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>AbstractTest_8php</filename>
    <class kind="class">AbstractTest</class>
  </compound>
  <compound kind="file">
    <name>AbstractTrait.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>AbstractTrait_8php</filename>
    <member kind="function">
      <type></type>
      <name>mockableMethod</name>
      <anchorfile>AbstractTrait_8php.html</anchorfile>
      <anchor>a81ef193e0246f47187adf302f8bff813</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>anotherMockableMethod</name>
      <anchorfile>AbstractTrait_8php.html</anchorfile>
      <anchor>a16beb11dd7ede7590ad0bea724355ec6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>trait</type>
      <name>AbstractTrait</name>
      <anchorfile>AbstractTrait_8php.html</anchorfile>
      <anchor>a318b09bd2aa175f2de5f7dd5fb869624</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AbstractVariousIterableDataProviderTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>AbstractVariousIterableDataProviderTest_8php</filename>
    <class kind="class">AbstractVariousIterableDataProviderTest</class>
  </compound>
  <compound kind="file">
    <name>ActualOutputTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>ActualOutputTest_8php</filename>
    <class kind="class">PHPUnit::TestFixture::ActualOutputTest</class>
    <namespace>PHPUnit::TestFixture</namespace>
  </compound>
  <compound kind="file">
    <name>AnInterface.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>AnInterface_8php</filename>
    <class kind="interface">AnInterface</class>
  </compound>
  <compound kind="file">
    <name>AnInterfaceWithReturnType.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>AnInterfaceWithReturnType_8php</filename>
    <class kind="interface">AnInterfaceWithReturnType</class>
  </compound>
  <compound kind="file">
    <name>AnotherInterface.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>AnotherInterface_8php</filename>
    <class kind="interface">AnotherInterface</class>
  </compound>
  <compound kind="file">
    <name>ArrayAccessible.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>ArrayAccessible_8php</filename>
    <class kind="class">ArrayAccessible</class>
  </compound>
  <compound kind="file">
    <name>AssertionExample.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>AssertionExample_8php</filename>
    <class kind="class">AssertionExample</class>
  </compound>
  <compound kind="file">
    <name>AssertionExampleTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>AssertionExampleTest_8php</filename>
    <class kind="class">AssertionExampleTest</class>
  </compound>
  <compound kind="file">
    <name>BankAccountTest.test.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>BankAccountTest_8test_8php</filename>
    <class kind="class">BankAccountWithCustomExtensionTest</class>
  </compound>
  <compound kind="file">
    <name>BankAccountTest2.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>BankAccountTest2_8php</filename>
    <class kind="class">BankAccountTest</class>
  </compound>
  <compound kind="file">
    <name>Bar.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>Bar_8php</filename>
    <class kind="class">Bar</class>
  </compound>
  <compound kind="file">
    <name>BeforeAndAfterTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>BeforeAndAfterTest_8php</filename>
    <class kind="class">BeforeAndAfterTest</class>
  </compound>
  <compound kind="file">
    <name>BeforeClassAndAfterClassTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>BeforeClassAndAfterClassTest_8php</filename>
    <class kind="class">BeforeClassAndAfterClassTest</class>
  </compound>
  <compound kind="file">
    <name>BeforeClassWithOnlyDataProviderTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>BeforeClassWithOnlyDataProviderTest_8php</filename>
    <class kind="class">BeforeClassWithOnlyDataProviderTest</class>
  </compound>
  <compound kind="file">
    <name>Book.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>phpunit_2phpunit_2tests_2__files_2Book_8php</filename>
    <class kind="class">Book</class>
  </compound>
  <compound kind="file">
    <name>Book.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/comparator/tests/_fixture/</path>
    <filename>sebastian_2comparator_2tests_2__fixture_2Book_8php</filename>
    <class kind="class">SebastianBergmann::Comparator::Book</class>
    <namespace>SebastianBergmann::Comparator</namespace>
  </compound>
  <compound kind="file">
    <name>Calculator.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>Calculator_8php</filename>
    <class kind="class">Calculator</class>
  </compound>
  <compound kind="file">
    <name>ChangeCurrentWorkingDirectoryTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>ChangeCurrentWorkingDirectoryTest_8php</filename>
    <class kind="class">ChangeCurrentWorkingDirectoryTest</class>
  </compound>
  <compound kind="file">
    <name>ClassThatImplementsSerializable.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>ClassThatImplementsSerializable_8php</filename>
    <class kind="class">ClassThatImplementsSerializable</class>
  </compound>
  <compound kind="file">
    <name>ClassWithAllPossibleReturnTypes.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>ClassWithAllPossibleReturnTypes_8php</filename>
    <class kind="class">ClassWithAllPossibleReturnTypes</class>
  </compound>
  <compound kind="file">
    <name>ClassWithNonPublicAttributes.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>ClassWithNonPublicAttributes_8php</filename>
    <class kind="class">ParentClassWithPrivateAttributes</class>
    <class kind="class">ParentClassWithProtectedAttributes</class>
    <class kind="class">ClassWithNonPublicAttributes</class>
  </compound>
  <compound kind="file">
    <name>ClassWithScalarTypeDeclarations.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>ClassWithScalarTypeDeclarations_8php</filename>
    <class kind="class">ClassWithScalarTypeDeclarations</class>
  </compound>
  <compound kind="file">
    <name>ClassWithSelfTypeHint.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>ClassWithSelfTypeHint_8php</filename>
    <class kind="class">ClassWithSelfTypeHint</class>
  </compound>
  <compound kind="file">
    <name>ClassWithStaticMethod.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>ClassWithStaticMethod_8php</filename>
    <class kind="class">ClassWithStaticMethod</class>
  </compound>
  <compound kind="file">
    <name>ClassWithToString.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>phpunit_2phpunit_2tests_2__files_2ClassWithToString_8php</filename>
    <class kind="class">ClassWithToString</class>
  </compound>
  <compound kind="file">
    <name>ClassWithToString.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/comparator/tests/_fixture/</path>
    <filename>sebastian_2comparator_2tests_2__fixture_2ClassWithToString_8php</filename>
    <class kind="class">SebastianBergmann::Comparator::ClassWithToString</class>
    <namespace>SebastianBergmann::Comparator</namespace>
  </compound>
  <compound kind="file">
    <name>ClassWithVariadicArgumentMethod.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>ClassWithVariadicArgumentMethod_8php</filename>
    <class kind="class">ClassWithVariadicArgumentMethod</class>
  </compound>
  <compound kind="file">
    <name>ConcreteTest.my.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>ConcreteTest_8my_8php</filename>
    <class kind="class">ConcreteWithMyCustomExtensionTest</class>
  </compound>
  <compound kind="file">
    <name>ConcreteTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>ConcreteTest_8php</filename>
    <class kind="class">ConcreteTest</class>
  </compound>
  <compound kind="file">
    <name>CountConstraint.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>CountConstraint_8php</filename>
    <class kind="class">CountConstraint</class>
  </compound>
  <compound kind="file">
    <name>CoverageClassNothingTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>CoverageClassNothingTest_8php</filename>
    <class kind="class">CoverageClassNothingTest</class>
  </compound>
  <compound kind="file">
    <name>CoverageClassWithoutAnnotationsTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>CoverageClassWithoutAnnotationsTest_8php</filename>
    <class kind="class">CoverageClassWithoutAnnotationsTest</class>
  </compound>
  <compound kind="file">
    <name>CoverageCoversOverridesCoversNothingTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>CoverageCoversOverridesCoversNothingTest_8php</filename>
    <class kind="class">CoverageCoversOverridesCoversNothingTest</class>
  </compound>
  <compound kind="file">
    <name>CoverageMethodNothingCoversMethod.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>CoverageMethodNothingCoversMethod_8php</filename>
    <class kind="class">CoverageMethodNothingCoversMethod</class>
  </compound>
  <compound kind="file">
    <name>CoverageMethodNothingTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>CoverageMethodNothingTest_8php</filename>
    <class kind="class">CoverageMethodNothingTest</class>
  </compound>
  <compound kind="file">
    <name>CoverageNamespacedFunctionTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>CoverageNamespacedFunctionTest_8php</filename>
    <class kind="class">CoverageNamespacedFunctionTest</class>
  </compound>
  <compound kind="file">
    <name>CustomPrinter.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>CustomPrinter_8php</filename>
    <class kind="class">CustomPrinter</class>
  </compound>
  <compound kind="file">
    <name>DataProviderDebugTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>DataProviderDebugTest_8php</filename>
    <class kind="class">DataProviderDebugTest</class>
  </compound>
  <compound kind="file">
    <name>DataProviderDependencyTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>DataProviderDependencyTest_8php</filename>
    <class kind="class">DataProviderDependencyTest</class>
  </compound>
  <compound kind="file">
    <name>DataproviderExecutionOrderTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>DataproviderExecutionOrderTest_8php</filename>
    <class kind="class">DataproviderExecutionOrderTest</class>
  </compound>
  <compound kind="file">
    <name>DataproviderExecutionOrderTest_result_cache.txt</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>DataproviderExecutionOrderTest__result__cache_8txt</filename>
    <member kind="variable">
      <type>C</type>
      <name>__pad0__</name>
      <anchorfile>DataproviderExecutionOrderTest__result__cache_8txt.html</anchorfile>
      <anchor>a4a70169ff33fd08b4dd3bc11ac0a3012</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>a</type>
      <name>__pad1__</name>
      <anchorfile>DataproviderExecutionOrderTest__result__cache_8txt.html</anchorfile>
      <anchor>a85ad1cd9c8767b5f5be96fabeb951a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>i</type>
      <name>__pad2__</name>
      <anchorfile>DataproviderExecutionOrderTest__result__cache_8txt.html</anchorfile>
      <anchor>a37dcf07104039d70ac17463e145a688f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>s</type>
      <name>__pad3__</name>
      <anchorfile>DataproviderExecutionOrderTest__result__cache_8txt.html</anchorfile>
      <anchor>a30e2940ca9241bea97024617b8775c4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>i</type>
      <name>__pad4__</name>
      <anchorfile>DataproviderExecutionOrderTest__result__cache_8txt.html</anchorfile>
      <anchor>a2d2309c97e9907bb44d5a5fdebcf3e17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>s</type>
      <name>__pad5__</name>
      <anchorfile>DataproviderExecutionOrderTest__result__cache_8txt.html</anchorfile>
      <anchor>a525fc6f440e966450670f0d8c454dd46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>i</type>
      <name>__pad6__</name>
      <anchorfile>DataproviderExecutionOrderTest__result__cache_8txt.html</anchorfile>
      <anchor>ae4cb909921ba7b5deddb1967517692c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>s</type>
      <name>__pad7__</name>
      <anchorfile>DataproviderExecutionOrderTest__result__cache_8txt.html</anchorfile>
      <anchor>a5bae1a717b8b06b2e2dbc7f2fc608287</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>i</type>
      <name>__pad8__</name>
      <anchorfile>DataproviderExecutionOrderTest__result__cache_8txt.html</anchorfile>
      <anchor>a24719c8e9a780c72ee153ebc987e096c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>s</type>
      <name>__pad9__</name>
      <anchorfile>DataproviderExecutionOrderTest__result__cache_8txt.html</anchorfile>
      <anchor>af8f9ab7c771ec3b3dfe2329026837b3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>i</type>
      <name>__pad10__</name>
      <anchorfile>DataproviderExecutionOrderTest__result__cache_8txt.html</anchorfile>
      <anchor>a234dbdbdf13cb37bf4dc3c91f0af6f00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>s</type>
      <name>__pad11__</name>
      <anchorfile>DataproviderExecutionOrderTest__result__cache_8txt.html</anchorfile>
      <anchor>afc78fb8d04641de62c7e3d5742f4f1b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>a</type>
      <name>__pad12__</name>
      <anchorfile>DataproviderExecutionOrderTest__result__cache_8txt.html</anchorfile>
      <anchor>a0a8980ffcbf18f7e3cdacc737de977c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>d</type>
      <name>__pad13__</name>
      <anchorfile>DataproviderExecutionOrderTest__result__cache_8txt.html</anchorfile>
      <anchor>a0cd3a0ee436657bfa55bd9a63c1d769e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>s</type>
      <name>__pad14__</name>
      <anchorfile>DataproviderExecutionOrderTest__result__cache_8txt.html</anchorfile>
      <anchor>ac8bb71364f9f0874f83d519ccd47894f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>d</type>
      <name>__pad15__</name>
      <anchorfile>DataproviderExecutionOrderTest__result__cache_8txt.html</anchorfile>
      <anchor>a318f97c7e51ed63677875a0c19a5c114</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>s</type>
      <name>__pad16__</name>
      <anchorfile>DataproviderExecutionOrderTest__result__cache_8txt.html</anchorfile>
      <anchor>aafb29fd3f6460db5e38c8cc53adbca4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>d</type>
      <name>__pad17__</name>
      <anchorfile>DataproviderExecutionOrderTest__result__cache_8txt.html</anchorfile>
      <anchor>ae8275721297a08497e7f1d554452b322</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>s</type>
      <name>__pad18__</name>
      <anchorfile>DataproviderExecutionOrderTest__result__cache_8txt.html</anchorfile>
      <anchor>a46d77a24321eac88e84b0b854f5f57c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>d</type>
      <name>__pad19__</name>
      <anchorfile>DataproviderExecutionOrderTest__result__cache_8txt.html</anchorfile>
      <anchor>abcfd1fceb189a91e10bdab1a8a3684a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>s</type>
      <name>__pad20__</name>
      <anchorfile>DataproviderExecutionOrderTest__result__cache_8txt.html</anchorfile>
      <anchor>acf8970f72f009f37fa8f603ac38656c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>d</type>
      <name>__pad21__</name>
      <anchorfile>DataproviderExecutionOrderTest__result__cache_8txt.html</anchorfile>
      <anchor>a37c1d54998253b7ad2a0c621923a3422</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>s</type>
      <name>__pad22__</name>
      <anchorfile>DataproviderExecutionOrderTest__result__cache_8txt.html</anchorfile>
      <anchor>a9f15a3ec36272f0c659f27d651a11d8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>d</type>
      <name>__pad23__</name>
      <anchorfile>DataproviderExecutionOrderTest__result__cache_8txt.html</anchorfile>
      <anchor>a964f2045d3c336f77d8f11a7952e4d0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>s</type>
      <name>__pad24__</name>
      <anchorfile>DataproviderExecutionOrderTest__result__cache_8txt.html</anchorfile>
      <anchor>a926dd101cde8eb314640a5f2a1c80ce6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>d</type>
      <name>__pad25__</name>
      <anchorfile>DataproviderExecutionOrderTest__result__cache_8txt.html</anchorfile>
      <anchor>a09d5b3a8efb3654c7b1e008ba12a4a66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>s</type>
      <name>__pad26__</name>
      <anchorfile>DataproviderExecutionOrderTest__result__cache_8txt.html</anchorfile>
      <anchor>acf5f6ca02556a16f42e041134b72b708</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>d</type>
      <name>__pad27__</name>
      <anchorfile>DataproviderExecutionOrderTest__result__cache_8txt.html</anchorfile>
      <anchor>a4819832bdaacf740717babeb88cf5166</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>s</type>
      <name>__pad28__</name>
      <anchorfile>DataproviderExecutionOrderTest__result__cache_8txt.html</anchorfile>
      <anchor>a3ac8fd8f734b1ee78013ee10386149b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>d</type>
      <name>__pad29__</name>
      <anchorfile>DataproviderExecutionOrderTest__result__cache_8txt.html</anchorfile>
      <anchor>a4301955c399ad165447d7301e1eb308b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>s</type>
      <name>__pad30__</name>
      <anchorfile>DataproviderExecutionOrderTest__result__cache_8txt.html</anchorfile>
      <anchor>a6ac833acaabee1c4dd946d1a69ec9732</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>d</type>
      <name>__pad31__</name>
      <anchorfile>DataproviderExecutionOrderTest__result__cache_8txt.html</anchorfile>
      <anchor>acdc4220ff02a2e6b5ee7250ea58321f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>s</type>
      <name>__pad32__</name>
      <anchorfile>DataproviderExecutionOrderTest__result__cache_8txt.html</anchorfile>
      <anchor>a2b2b347b7ba138912f9147173a9160f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>d</type>
      <name>__pad33__</name>
      <anchorfile>DataproviderExecutionOrderTest__result__cache_8txt.html</anchorfile>
      <anchor>add9147a4b2a4beb83d499ff380505143</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>s</type>
      <name>__pad34__</name>
      <anchorfile>DataproviderExecutionOrderTest__result__cache_8txt.html</anchorfile>
      <anchor>a0f7f81e4c504c7242252a66ee361542f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>d</type>
      <name>__pad35__</name>
      <anchorfile>DataproviderExecutionOrderTest__result__cache_8txt.html</anchorfile>
      <anchor>a5a269b1279574d731d862052dabc8b15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>s</type>
      <name>__pad36__</name>
      <anchorfile>DataproviderExecutionOrderTest__result__cache_8txt.html</anchorfile>
      <anchor>a43c0f6e1a588d3d3b3d1ab53908a4403</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>d</type>
      <name>__pad37__</name>
      <anchorfile>DataproviderExecutionOrderTest__result__cache_8txt.html</anchorfile>
      <anchor>abb99e06f24d06055609de4e992af4c0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>s</type>
      <name>__pad38__</name>
      <anchorfile>DataproviderExecutionOrderTest__result__cache_8txt.html</anchorfile>
      <anchor>a88c5bf9fed436e918f0cb4dce8d625bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>d</type>
      <name>__pad39__</name>
      <anchorfile>DataproviderExecutionOrderTest__result__cache_8txt.html</anchorfile>
      <anchor>ad70cc27665b6866a871bbdab9b94c80b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>s</type>
      <name>__pad40__</name>
      <anchorfile>DataproviderExecutionOrderTest__result__cache_8txt.html</anchorfile>
      <anchor>ab0b18dba87a6cd4d8c5f62f7c46f1a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>d</type>
      <name>__pad41__</name>
      <anchorfile>DataproviderExecutionOrderTest__result__cache_8txt.html</anchorfile>
      <anchor>a6cf9770c7e3ddf549deeea958c119b7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>s</type>
      <name>__pad42__</name>
      <anchorfile>DataproviderExecutionOrderTest__result__cache_8txt.html</anchorfile>
      <anchor>a206a58eb45edd3ed3b22d4055bfece35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>d</type>
      <name>__pad43__</name>
      <anchorfile>DataproviderExecutionOrderTest__result__cache_8txt.html</anchorfile>
      <anchor>a8f750ca5dc1b8c9cf518c7b6992dfe51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>s</type>
      <name>__pad44__</name>
      <anchorfile>DataproviderExecutionOrderTest__result__cache_8txt.html</anchorfile>
      <anchor>a63c394cb8897a6453051b09446d49673</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>d</type>
      <name>__pad45__</name>
      <anchorfile>DataproviderExecutionOrderTest__result__cache_8txt.html</anchorfile>
      <anchor>aed6e825c8a9fe616fc8eeb9c9252e2a3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DataProviderFilterTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>DataProviderFilterTest_8php</filename>
    <class kind="class">DataProviderFilterTest</class>
  </compound>
  <compound kind="file">
    <name>DataProviderIncompleteTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>DataProviderIncompleteTest_8php</filename>
    <class kind="class">DataProviderIncompleteTest</class>
  </compound>
  <compound kind="file">
    <name>FirstTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/DataProviderIssue2833/</path>
    <filename>DataProviderIssue2833_2FirstTest_8php</filename>
    <class kind="class">Foo::DataProviderIssue2833::FirstTest</class>
    <namespace>Foo::DataProviderIssue2833</namespace>
  </compound>
  <compound kind="file">
    <name>FirstTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/DataProviderIssue2922/</path>
    <filename>DataProviderIssue2922_2FirstTest_8php</filename>
    <class kind="class">Foo::DataProviderIssue2922::FirstTest</class>
    <namespace>Foo::DataProviderIssue2922</namespace>
  </compound>
  <compound kind="file">
    <name>SecondTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/DataProviderIssue2833/</path>
    <filename>DataProviderIssue2833_2SecondTest_8php</filename>
    <class kind="class">Foo::DataProviderIssue2833::SecondTest</class>
    <namespace>Foo::DataProviderIssue2833</namespace>
  </compound>
  <compound kind="file">
    <name>SecondTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/DataProviderIssue2922/</path>
    <filename>DataProviderIssue2922_2SecondTest_8php</filename>
    <class kind="class">Foo::DataProviderIssue2922::SecondHelloWorldTest</class>
    <namespace>Foo::DataProviderIssue2922</namespace>
  </compound>
  <compound kind="file">
    <name>TestWithDataProviderTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/DataProviderIssue2859/tests/another/</path>
    <filename>TestWithDataProviderTest_8php</filename>
    <class kind="class">Foo::DataProviderIssue2859::TestWithDataProviderTest</class>
    <namespace>Foo::DataProviderIssue2859</namespace>
  </compound>
  <compound kind="file">
    <name>DataProviderSkippedTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>DataProviderSkippedTest_8php</filename>
    <class kind="class">DataProviderSkippedTest</class>
  </compound>
  <compound kind="file">
    <name>DataProviderTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>DataProviderTest_8php</filename>
    <class kind="class">DataProviderTest</class>
  </compound>
  <compound kind="file">
    <name>DependencyFailureTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>DependencyFailureTest_8php</filename>
    <class kind="class">DependencyFailureTest</class>
  </compound>
  <compound kind="file">
    <name>DependencySuccessTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>DependencySuccessTest_8php</filename>
    <class kind="class">DependencySuccessTest</class>
  </compound>
  <compound kind="file">
    <name>DoesNotPerformAssertionsButPerformingAssertionsTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>DoesNotPerformAssertionsButPerformingAssertionsTest_8php</filename>
    <class kind="class">DoesNotPerformAssertionsButPerformingAssertionsTest</class>
  </compound>
  <compound kind="file">
    <name>DoNoAssertionTestCase.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>DoNoAssertionTestCase_8php</filename>
    <class kind="class">DoNoAssertionTestCase</class>
  </compound>
  <compound kind="file">
    <name>DoubleTestCase.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>DoubleTestCase_8php</filename>
    <class kind="class">DoubleTestCase</class>
  </compound>
  <compound kind="file">
    <name>DummyBarTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>DummyBarTest_8php</filename>
    <class kind="class">DummyBarTest</class>
  </compound>
  <compound kind="file">
    <name>DummyException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>DummyException_8php</filename>
    <class kind="class">DummyException</class>
  </compound>
  <compound kind="file">
    <name>DummyFooTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>DummyFooTest_8php</filename>
    <class kind="class">DummyFooTest</class>
  </compound>
  <compound kind="file">
    <name>DuplicateKeyDataProviderTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>DuplicateKeyDataProviderTest_8php</filename>
    <class kind="class">DuplicateKeyDataProviderTest</class>
  </compound>
  <compound kind="file">
    <name>EmptyDataProviderTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>EmptyDataProviderTest_8php</filename>
    <class kind="class">EmptyDataProviderTest</class>
  </compound>
  <compound kind="file">
    <name>EmptyTestCaseTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>EmptyTestCaseTest_8php</filename>
    <class kind="class">EmptyTestCaseTest</class>
  </compound>
  <compound kind="file">
    <name>ExampleTrait.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>ExampleTrait_8php</filename>
  </compound>
  <compound kind="file">
    <name>ExceptionInAssertPostConditionsTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>ExceptionInAssertPostConditionsTest_8php</filename>
    <class kind="class">ExceptionInAssertPostConditionsTest</class>
  </compound>
  <compound kind="file">
    <name>ExceptionInAssertPreConditionsTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>ExceptionInAssertPreConditionsTest_8php</filename>
    <class kind="class">ExceptionInAssertPreConditionsTest</class>
  </compound>
  <compound kind="file">
    <name>ExceptionInSetUpTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>ExceptionInSetUpTest_8php</filename>
    <class kind="class">ExceptionInSetUpTest</class>
  </compound>
  <compound kind="file">
    <name>ExceptionInTearDownAfterClassTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>ExceptionInTearDownAfterClassTest_8php</filename>
    <class kind="class">ExceptionInTearDownAfterClassTest</class>
  </compound>
  <compound kind="file">
    <name>ExceptionInTearDownTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>ExceptionInTearDownTest_8php</filename>
    <class kind="class">ExceptionInTearDownTest</class>
  </compound>
  <compound kind="file">
    <name>ExceptionInTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>ExceptionInTest_8php</filename>
    <class kind="class">ExceptionInTest</class>
  </compound>
  <compound kind="file">
    <name>ExceptionInTestDetectedInTeardown.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>ExceptionInTestDetectedInTeardown_8php</filename>
    <class kind="class">ExceptionInTestDetectedInTeardown</class>
  </compound>
  <compound kind="file">
    <name>ExceptionNamespaceTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>ExceptionNamespaceTest_8php</filename>
    <class kind="class">My::Space::ExceptionNamespaceTest</class>
    <namespace>My::Space</namespace>
  </compound>
  <compound kind="file">
    <name>ExceptionStackTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>ExceptionStackTest_8php</filename>
    <class kind="class">ExceptionStackTest</class>
  </compound>
  <compound kind="file">
    <name>ExceptionTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>__files_2ExceptionTest_8php</filename>
    <class kind="class">ExceptionTest</class>
  </compound>
  <compound kind="file">
    <name>ExceptionTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/Constraint/</path>
    <filename>unit_2Framework_2Constraint_2ExceptionTest_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::ExceptionTest</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>ExceptionTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/Exception/</path>
    <filename>unit_2Framework_2Exception_2ExceptionTest_8php</filename>
    <class kind="class">PHPUnit::Framework::ExceptionTest</class>
    <namespace>PHPUnit::Framework</namespace>
  </compound>
  <compound kind="file">
    <name>ExceptionWithThrowable.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>ExceptionWithThrowable_8php</filename>
    <class kind="interface">ExceptionWithThrowable</class>
  </compound>
  <compound kind="file">
    <name>expectedFileFormat.txt</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>expectedFileFormat_8txt</filename>
  </compound>
  <compound kind="file">
    <name>Failure.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>Failure_8php</filename>
    <class kind="class">Failure</class>
  </compound>
  <compound kind="file">
    <name>FailureTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>FailureTest_8php</filename>
    <class kind="class">FailureTest</class>
  </compound>
  <compound kind="file">
    <name>FalsyConstraint.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>FalsyConstraint_8php</filename>
    <class kind="class">FalsyConstraint</class>
  </compound>
  <compound kind="file">
    <name>FatalTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>FatalTest_8php</filename>
    <class kind="class">FatalTest</class>
  </compound>
  <compound kind="file">
    <name>FinalClass.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>FinalClass_8php</filename>
    <class kind="class">FinalClass</class>
  </compound>
  <compound kind="file">
    <name>FunctionCallback.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>FunctionCallback_8php</filename>
    <class kind="class">FunctionCallbackWrapper</class>
  </compound>
  <compound kind="file">
    <name>InheritanceA.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/Inheritance/</path>
    <filename>InheritanceA_8php</filename>
    <class kind="class">InheritanceA</class>
  </compound>
  <compound kind="file">
    <name>InheritanceB.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/Inheritance/</path>
    <filename>InheritanceB_8php</filename>
    <class kind="class">InheritanceB</class>
  </compound>
  <compound kind="file">
    <name>InheritedTestCase.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>InheritedTestCase_8php</filename>
    <class kind="class">InheritedTestCase</class>
  </compound>
  <compound kind="file">
    <name>IniTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>IniTest_8php</filename>
    <class kind="class">IniTest</class>
  </compound>
  <compound kind="file">
    <name>InterfaceWithSemiReservedMethodName.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>InterfaceWithSemiReservedMethodName_8php</filename>
    <class kind="interface">InterfaceWithSemiReservedMethodName</class>
  </compound>
  <compound kind="file">
    <name>InterfaceWithStaticMethod.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>InterfaceWithStaticMethod_8php</filename>
    <class kind="interface">InterfaceWithStaticMethod</class>
  </compound>
  <compound kind="file">
    <name>IsolationTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>IsolationTest_8php</filename>
    <class kind="class">IsolationTest</class>
  </compound>
  <compound kind="file">
    <name>MethodCallback.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>MethodCallback_8php</filename>
    <class kind="class">MethodCallback</class>
  </compound>
  <compound kind="file">
    <name>MethodCallbackByReference.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>MethodCallbackByReference_8php</filename>
    <class kind="class">MethodCallbackByReference</class>
  </compound>
  <compound kind="file">
    <name>AnotherClassUsingConfigurableMethods.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/mock-object/</path>
    <filename>AnotherClassUsingConfigurableMethods_8php</filename>
    <class kind="class">PHPUnit::TestFixture::MockObject::AnotherClassUsingConfigurableMethods</class>
    <namespace>PHPUnit::TestFixture::MockObject</namespace>
  </compound>
  <compound kind="file">
    <name>ChildClass.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/mock-object/</path>
    <filename>phpunit_2phpunit_2tests_2__files_2mock-object_2ChildClass_8php</filename>
    <class kind="class">PHPUnit::TestFixture::MockObject::ChildClass</class>
    <namespace>PHPUnit::TestFixture::MockObject</namespace>
  </compound>
  <compound kind="file">
    <name>ChildClass.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/object-reflector/tests/_fixture/</path>
    <filename>sebastian_2object-reflector_2tests_2__fixture_2ChildClass_8php</filename>
    <class kind="class">SebastianBergmann::ObjectReflector::TestFixture::ChildClass</class>
    <namespace>SebastianBergmann::ObjectReflector::TestFixture</namespace>
  </compound>
  <compound kind="file">
    <name>ChildClass.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/type/tests/_fixture/</path>
    <filename>sebastian_2type_2tests_2__fixture_2ChildClass_8php</filename>
    <class kind="class">SebastianBergmann::Type::TestFixture::ChildClass</class>
    <namespace>SebastianBergmann::Type::TestFixture</namespace>
  </compound>
  <compound kind="file">
    <name>ClassUsingConfigurableMethods.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/mock-object/</path>
    <filename>ClassUsingConfigurableMethods_8php</filename>
    <class kind="class">PHPUnit::TestFixture::MockObject::ClassUsingConfigurableMethods</class>
    <namespace>PHPUnit::TestFixture::MockObject</namespace>
  </compound>
  <compound kind="file">
    <name>ClassWithImplicitProtocol.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/mock-object/</path>
    <filename>ClassWithImplicitProtocol_8php</filename>
    <class kind="class">PHPUnit::TestFixture::MockObject::ClassWithImplicitProtocol</class>
    <namespace>PHPUnit::TestFixture::MockObject</namespace>
  </compound>
  <compound kind="file">
    <name>ClassWithoutParentButParentReturnType.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/mock-object/</path>
    <filename>ClassWithoutParentButParentReturnType_8php</filename>
    <class kind="class">PHPUnit::TestFixture::MockObject::ClassWithoutParentButParentReturnType</class>
    <namespace>PHPUnit::TestFixture::MockObject</namespace>
  </compound>
  <compound kind="file">
    <name>MockClassWithConfigurableMethods.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/mock-object/</path>
    <filename>MockClassWithConfigurableMethods_8php</filename>
    <class kind="class">PHPUnit::TestFixture::MockObject::MockClassWithConfigurableMethods</class>
    <namespace>PHPUnit::TestFixture::MockObject</namespace>
  </compound>
  <compound kind="file">
    <name>ParentClass.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/mock-object/</path>
    <filename>phpunit_2phpunit_2tests_2__files_2mock-object_2ParentClass_8php</filename>
    <class kind="class">PHPUnit::TestFixture::MockObject::ParentClass</class>
    <namespace>PHPUnit::TestFixture::MockObject</namespace>
  </compound>
  <compound kind="file">
    <name>ParentClass.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/object-reflector/tests/_fixture/</path>
    <filename>sebastian_2object-reflector_2tests_2__fixture_2ParentClass_8php</filename>
    <class kind="class">SebastianBergmann::ObjectReflector::TestFixture::ParentClass</class>
    <namespace>SebastianBergmann::ObjectReflector::TestFixture</namespace>
  </compound>
  <compound kind="file">
    <name>ParentClass.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/type/tests/_fixture/</path>
    <filename>sebastian_2type_2tests_2__fixture_2ParentClass_8php</filename>
    <class kind="class">SebastianBergmann::Type::TestFixture::ParentClass</class>
    <namespace>SebastianBergmann::Type::TestFixture</namespace>
  </compound>
  <compound kind="file">
    <name>ReinitializeConfigurableMethods.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/mock-object/</path>
    <filename>ReinitializeConfigurableMethods_8php</filename>
    <class kind="class">PHPUnit::TestFixture::MockObject::ReinitializeConfigurableMethods</class>
    <namespace>PHPUnit::TestFixture::MockObject</namespace>
  </compound>
  <compound kind="file">
    <name>Mockable.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>Mockable_8php</filename>
    <class kind="class">Mockable</class>
  </compound>
  <compound kind="file">
    <name>MockRunner.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>MockRunner_8php</filename>
    <class kind="class">MockRunner</class>
  </compound>
  <compound kind="file">
    <name>MockTestInterface.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>MockTestInterface_8php</filename>
    <class kind="interface">MockTestInterface</class>
  </compound>
  <compound kind="file">
    <name>ModifiedConstructorTestCase.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>ModifiedConstructorTestCase_8php</filename>
    <class kind="class">ModifiedConstructorTestCase</class>
  </compound>
  <compound kind="file">
    <name>MultipleDataProviderTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>MultipleDataProviderTest_8php</filename>
    <class kind="class">MultipleDataProviderTest</class>
  </compound>
  <compound kind="file">
    <name>MyTestListener.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>MyTestListener_8php</filename>
    <class kind="class">MyTestListener</class>
  </compound>
  <compound kind="file">
    <name>NamedConstraint.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>NamedConstraint_8php</filename>
    <class kind="class">NamedConstraint</class>
  </compound>
  <compound kind="file">
    <name>NamespacedClass.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/namespace/someNamespaceA/</path>
    <filename>someNamespaceA_2NamespacedClass_8php</filename>
    <class kind="class">someNamespaceA::NamespacedClass</class>
    <namespace>someNamespaceA</namespace>
  </compound>
  <compound kind="file">
    <name>NamespacedClass.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/namespace/someNamespaceB/</path>
    <filename>someNamespaceB_2NamespacedClass_8php</filename>
    <class kind="class">someNamespaceB::NamespacedClass</class>
    <namespace>someNamespaceB</namespace>
  </compound>
  <compound kind="file">
    <name>NamespaceCoveredFunction.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>NamespaceCoveredFunction_8php</filename>
    <namespace>foo</namespace>
    <member kind="function">
      <type></type>
      <name>func</name>
      <anchorfile>namespacefoo.html</anchorfile>
      <anchor>ad6d2ba6f0c3fb27a84b6ff10e945e96d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NoArgTestCaseTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>NoArgTestCaseTest_8php</filename>
    <class kind="class">NoArgTestCaseTest</class>
  </compound>
  <compound kind="file">
    <name>NonStatic.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>NonStatic_8php</filename>
    <class kind="class">NonStatic</class>
  </compound>
  <compound kind="file">
    <name>NoTestCaseClass.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>NoTestCaseClass_8php</filename>
    <class kind="class">NoTestCaseClass</class>
  </compound>
  <compound kind="file">
    <name>NoTestCases.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>NoTestCases_8php</filename>
    <class kind="class">NoTestCases</class>
  </compound>
  <compound kind="file">
    <name>NothingTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>NothingTest_8php</filename>
    <class kind="class">NothingTest</class>
  </compound>
  <compound kind="file">
    <name>NotPublicTestCase.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>NotPublicTestCase_8php</filename>
    <class kind="class">NotPublicTestCase</class>
  </compound>
  <compound kind="file">
    <name>NotSelfDescribingTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>NotSelfDescribingTest_8php</filename>
    <class kind="class">NotSelfDescribingTest</class>
  </compound>
  <compound kind="file">
    <name>NotVoidTestCase.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>NotVoidTestCase_8php</filename>
    <class kind="class">NotVoidTestCase</class>
  </compound>
  <compound kind="file">
    <name>NumericGroupAnnotationTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>NumericGroupAnnotationTest_8php</filename>
    <class kind="class">NumericGroupAnnotationTest</class>
  </compound>
  <compound kind="file">
    <name>OneTestCase.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>OneTestCase_8php</filename>
    <class kind="class">OneTestCase</class>
  </compound>
  <compound kind="file">
    <name>OutputTestCase.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>OutputTestCase_8php</filename>
    <class kind="class">OutputTestCase</class>
  </compound>
  <compound kind="file">
    <name>OverrideTestCase.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>OverrideTestCase_8php</filename>
    <class kind="class">OverrideTestCase</class>
  </compound>
  <compound kind="file">
    <name>ParseTestMethodAnnotationsMock.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>ParseTestMethodAnnotationsMock_8php</filename>
    <class kind="class">ParseTestMethodAnnotationsMock</class>
  </compound>
  <compound kind="file">
    <name>PartialMockTestClass.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>PartialMockTestClass_8php</filename>
    <class kind="class">PartialMockTestClass</class>
  </compound>
  <compound kind="file">
    <name>OneTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/phpunit-example-extension/tests/</path>
    <filename>__files_2phpunit-example-extension_2tests_2OneTest_8php</filename>
    <class kind="class">OneTest</class>
  </compound>
  <compound kind="file">
    <name>OneTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/Trac/783/</path>
    <filename>end-to-end_2regression_2Trac_2783_2OneTest_8php</filename>
    <class kind="class">OneTest</class>
  </compound>
  <compound kind="file">
    <name>RequirementsClassBeforeClassHookTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>RequirementsClassBeforeClassHookTest_8php</filename>
    <class kind="class">RequirementsClassBeforeClassHookTest</class>
  </compound>
  <compound kind="file">
    <name>RequirementsClassDocBlockTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>RequirementsClassDocBlockTest_8php</filename>
    <class kind="class">RequirementsClassDocBlockTest</class>
  </compound>
  <compound kind="file">
    <name>RequirementsTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>RequirementsTest_8php</filename>
    <class kind="class">RequirementsTest</class>
  </compound>
  <compound kind="file">
    <name>RouterTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>RouterTest_8php</filename>
    <class kind="class">RouterTest</class>
  </compound>
  <compound kind="file">
    <name>SampleArrayAccess.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>SampleArrayAccess_8php</filename>
    <class kind="class">SampleArrayAccess</class>
  </compound>
  <compound kind="file">
    <name>SampleClass.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>phpunit_2phpunit_2tests_2__files_2SampleClass_8php</filename>
    <class kind="class">SampleClass</class>
  </compound>
  <compound kind="file">
    <name>SampleClass.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/comparator/tests/_fixture/</path>
    <filename>sebastian_2comparator_2tests_2__fixture_2SampleClass_8php</filename>
    <class kind="class">SebastianBergmann::Comparator::SampleClass</class>
    <namespace>SebastianBergmann::Comparator</namespace>
  </compound>
  <compound kind="file">
    <name>SeparateProcessesTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>SeparateProcessesTest_8php</filename>
    <class kind="class">SeparateProcessesTest</class>
  </compound>
  <compound kind="file">
    <name>Singleton.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>Singleton_8php</filename>
    <class kind="class">Singleton</class>
  </compound>
  <compound kind="file">
    <name>SingletonClass.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>SingletonClass_8php</filename>
    <class kind="class">SingletonClass</class>
  </compound>
  <compound kind="file">
    <name>SomeClass.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>SomeClass_8php</filename>
    <class kind="class">SomeClass</class>
  </compound>
  <compound kind="file">
    <name>StaticMockTestClass.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>StaticMockTestClass_8php</filename>
    <class kind="class">StaticMockTestClass</class>
  </compound>
  <compound kind="file">
    <name>StopOnErrorTestSuite.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>StopOnErrorTestSuite_8php</filename>
    <class kind="class">StopOnErrorTestSuite</class>
  </compound>
  <compound kind="file">
    <name>StopOnWarningTestSuite.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>StopOnWarningTestSuite_8php</filename>
    <class kind="class">StopOnWarningTestSuite</class>
  </compound>
  <compound kind="file">
    <name>StopsOnWarningTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>StopsOnWarningTest_8php</filename>
    <class kind="class">StopsOnWarningTest</class>
  </compound>
  <compound kind="file">
    <name>StringableClass.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>StringableClass_8php</filename>
    <class kind="class">StringableClass</class>
  </compound>
  <compound kind="file">
    <name>Struct.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>phpunit_2phpunit_2tests_2__files_2Struct_8php</filename>
    <class kind="class">Struct</class>
  </compound>
  <compound kind="file">
    <name>Struct.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/comparator/tests/_fixture/</path>
    <filename>sebastian_2comparator_2tests_2__fixture_2Struct_8php</filename>
    <class kind="class">SebastianBergmann::Comparator::Struct</class>
    <namespace>SebastianBergmann::Comparator</namespace>
  </compound>
  <compound kind="file">
    <name>Success.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>Success_8php</filename>
    <class kind="class">Success</class>
  </compound>
  <compound kind="file">
    <name>TemplateMethodsTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>TemplateMethodsTest_8php</filename>
    <class kind="class">TemplateMethodsTest</class>
  </compound>
  <compound kind="file">
    <name>TestableCliTestDoxPrinter.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>TestableCliTestDoxPrinter_8php</filename>
    <class kind="class">PHPUnit::Util::TestDox::TestableCliTestDoxPrinter</class>
    <namespace>PHPUnit::Util::TestDox</namespace>
  </compound>
  <compound kind="file">
    <name>TestAutoreferenced.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>TestAutoreferenced_8php</filename>
    <class kind="class">TestAutoreferenced</class>
  </compound>
  <compound kind="file">
    <name>TestCaseWithExceptionInHook.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>TestCaseWithExceptionInHook_8php</filename>
    <class kind="class">TestCaseWithExceptionInHook</class>
  </compound>
  <compound kind="file">
    <name>TestGeneratorMaker.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>TestGeneratorMaker_8php</filename>
    <class kind="class">TestGeneratorMaker</class>
  </compound>
  <compound kind="file">
    <name>TestIncomplete.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>TestIncomplete_8php</filename>
    <class kind="class">TestIncomplete</class>
  </compound>
  <compound kind="file">
    <name>TestIterator.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>TestIterator_8php</filename>
    <class kind="class">TestIterator</class>
  </compound>
  <compound kind="file">
    <name>TestIterator2.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>TestIterator2_8php</filename>
    <class kind="class">TestIterator2</class>
  </compound>
  <compound kind="file">
    <name>TestIteratorAggregate.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>TestIteratorAggregate_8php</filename>
    <class kind="class">TestIteratorAggregate</class>
  </compound>
  <compound kind="file">
    <name>TestIteratorAggregate2.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>TestIteratorAggregate2_8php</filename>
    <class kind="class">TestIteratorAggregate2</class>
  </compound>
  <compound kind="file">
    <name>TestProxyFixture.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>TestProxyFixture_8php</filename>
    <class kind="class">TestProxyFixture</class>
  </compound>
  <compound kind="file">
    <name>TestRisky.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>TestRisky_8php</filename>
    <class kind="class">TestRisky</class>
  </compound>
  <compound kind="file">
    <name>TestSkipped.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>TestSkipped_8php</filename>
    <class kind="class">TestSkipped</class>
  </compound>
  <compound kind="file">
    <name>TestTestError.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>TestTestError_8php</filename>
    <class kind="class">TestError</class>
  </compound>
  <compound kind="file">
    <name>TestWarning.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>TestWarning_8php</filename>
    <class kind="class">TestWarning</class>
  </compound>
  <compound kind="file">
    <name>TestWithAnnotations.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>TestWithAnnotations_8php</filename>
    <class kind="class">TestWithAnnotations</class>
  </compound>
  <compound kind="file">
    <name>TestWithDifferentNames.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>TestWithDifferentNames_8php</filename>
    <class kind="class">TestWithDifferentNames</class>
  </compound>
  <compound kind="file">
    <name>TestWithDifferentOutput.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>TestWithDifferentOutput_8php</filename>
    <class kind="class">TestWithDifferentOutput</class>
  </compound>
  <compound kind="file">
    <name>TestWithDifferentSizes.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>TestWithDifferentSizes_8php</filename>
    <class kind="class">TestWithDifferentSizes</class>
  </compound>
  <compound kind="file">
    <name>TestWithDifferentStatuses.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>TestWithDifferentStatuses_8php</filename>
    <class kind="class">TestWithDifferentStatuses</class>
  </compound>
  <compound kind="file">
    <name>TestWithTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>TestWithTest_8php</filename>
    <class kind="class">TestWithTest</class>
  </compound>
  <compound kind="file">
    <name>ThrowExceptionTestCase.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>ThrowExceptionTestCase_8php</filename>
    <class kind="class">ThrowExceptionTestCase</class>
  </compound>
  <compound kind="file">
    <name>ThrowNoExceptionTestCase.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>ThrowNoExceptionTestCase_8php</filename>
    <class kind="class">ThrowNoExceptionTestCase</class>
  </compound>
  <compound kind="file">
    <name>TraitWithConstructor.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>TraitWithConstructor_8php</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>TraitWithConstructor_8php.html</anchorfile>
      <anchor>a83828889e1e984950366956d8726ae28</anchor>
      <arglist>(string $value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>value</name>
      <anchorfile>TraitWithConstructor_8php.html</anchorfile>
      <anchor>aefbfa229f1c9e1fc967bff724a010f9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>trait</type>
      <name>TraitWithConstructor</name>
      <anchorfile>TraitWithConstructor_8php.html</anchorfile>
      <anchor>adc55fc9a8aaeebd99f4c92bfcfc1cb57</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TraversableMockTestInterface.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>TraversableMockTestInterface_8php</filename>
    <class kind="interface">TraversableMockTestInterface</class>
  </compound>
  <compound kind="file">
    <name>TruthyConstraint.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>TruthyConstraint_8php</filename>
    <class kind="class">TruthyConstraint</class>
  </compound>
  <compound kind="file">
    <name>VariousDocblockDefinedDataProvider.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>VariousDocblockDefinedDataProvider_8php</filename>
    <class kind="class">VariousDocblockDefinedDataProvider</class>
  </compound>
  <compound kind="file">
    <name>VariousIterableDataProviderTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>VariousIterableDataProviderTest_8php</filename>
    <class kind="class">VariousIterableDataProviderTest</class>
  </compound>
  <compound kind="file">
    <name>WasRun.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>WasRun_8php</filename>
    <class kind="class">WasRun</class>
  </compound>
  <compound kind="file">
    <name>WrapperIteratorAggregate.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/_files/</path>
    <filename>WrapperIteratorAggregate_8php</filename>
    <class kind="class">WrapperIteratorAggregate</class>
  </compound>
  <compound kind="file">
    <name>SetUpBeforeClassTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/basic/unit/</path>
    <filename>SetUpBeforeClassTest_8php</filename>
    <class kind="class">PHPUnit::SelfTest::Basic::SetUpBeforeClassTest</class>
    <namespace>PHPUnit::SelfTest::Basic</namespace>
  </compound>
  <compound kind="file">
    <name>SetUpTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/basic/unit/</path>
    <filename>SetUpTest_8php</filename>
    <class kind="class">PHPUnit::SelfTest::Basic::SetUpTest</class>
    <namespace>PHPUnit::SelfTest::Basic</namespace>
  </compound>
  <compound kind="file">
    <name>StatusTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/basic/unit/</path>
    <filename>StatusTest_8php</filename>
    <class kind="class">PHPUnit::SelfTest::Basic::StatusTest</class>
    <namespace>PHPUnit::SelfTest::Basic</namespace>
  </compound>
  <compound kind="file">
    <name>TearDownAfterClassTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/basic/unit/</path>
    <filename>TearDownAfterClassTest_8php</filename>
    <class kind="class">PHPUnit::SelfTest::Basic::TearDownAfterClassTest</class>
    <namespace>PHPUnit::SelfTest::Basic</namespace>
  </compound>
  <compound kind="file">
    <name>expect_external.txt</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/_files/</path>
    <filename>expect__external_8txt</filename>
  </compound>
  <compound kind="file">
    <name>NullPrinter.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/_files/</path>
    <filename>NullPrinter_8php</filename>
    <class kind="class">PHPUnit::Test::NullPrinter</class>
    <namespace>PHPUnit::Test</namespace>
  </compound>
  <compound kind="file">
    <name>phpt-env.expected.txt</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/_files/</path>
    <filename>phpt-env_8expected_8txt</filename>
  </compound>
  <compound kind="file">
    <name>phpt_external.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/_files/</path>
    <filename>phpt__external_8php</filename>
    <member kind="variable">
      <type>print</type>
      <name>PHP_EOL</name>
      <anchorfile>phpt__external_8php.html</anchorfile>
      <anchor>a0c035b3b68c86d67457c3026e0689ea5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MyCommand.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/cli/_files/</path>
    <filename>MyCommand_8php</filename>
    <class kind="class">MyCommand</class>
  </compound>
  <compound kind="file">
    <name>output-cli-help-color.txt</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/cli/_files/</path>
    <filename>output-cli-help-color_8txt</filename>
  </compound>
  <compound kind="file">
    <name>output-cli-usage.txt</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/cli/_files/</path>
    <filename>output-cli-usage_8txt</filename>
    <member kind="variable">
      <type>PHPUnit s by Sebastian Bergmann and contributors</type>
      <name>Usage</name>
      <anchorfile>output-cli-usage_8txt.html</anchorfile>
      <anchor>a8bec1543dfe92207da4d55ac9f5a047d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PHPUnit s by Sebastian Bergmann and contributors phpt Test Execution</type>
      <name>Options</name>
      <anchorfile>output-cli-usage_8txt.html</anchorfile>
      <anchor>aca487792f5f2c49c9ff4ca6097d4c9ff</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ClonedDependencyTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/execution-order/_files/</path>
    <filename>ClonedDependencyTest_8php</filename>
    <class kind="class">ClonedDependencyTest</class>
  </compound>
  <compound kind="file">
    <name>DependencyTestSuite.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/execution-order/_files/</path>
    <filename>DependencyTestSuite_8php</filename>
    <class kind="class">DependencyTestSuite</class>
  </compound>
  <compound kind="file">
    <name>MultiDependencyTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/execution-order/_files/</path>
    <filename>MultiDependencyTest_8php</filename>
    <class kind="class">MultiDependencyTest</class>
  </compound>
  <compound kind="file">
    <name>MultiDependencyTest_result_cache.txt</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/execution-order/_files/</path>
    <filename>MultiDependencyTest__result__cache_8txt</filename>
    <member kind="variable">
      <type>C</type>
      <name>__pad0__</name>
      <anchorfile>MultiDependencyTest__result__cache_8txt.html</anchorfile>
      <anchor>a4a70169ff33fd08b4dd3bc11ac0a3012</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>a</type>
      <name>__pad1__</name>
      <anchorfile>MultiDependencyTest__result__cache_8txt.html</anchorfile>
      <anchor>a85ad1cd9c8767b5f5be96fabeb951a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>i</type>
      <name>__pad2__</name>
      <anchorfile>MultiDependencyTest__result__cache_8txt.html</anchorfile>
      <anchor>a37dcf07104039d70ac17463e145a688f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>s</type>
      <name>__pad3__</name>
      <anchorfile>MultiDependencyTest__result__cache_8txt.html</anchorfile>
      <anchor>a30e2940ca9241bea97024617b8775c4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>a</type>
      <name>__pad4__</name>
      <anchorfile>MultiDependencyTest__result__cache_8txt.html</anchorfile>
      <anchor>a36d049b923f8c5cec553a6e1806e818a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>d</type>
      <name>__pad5__</name>
      <anchorfile>MultiDependencyTest__result__cache_8txt.html</anchorfile>
      <anchor>a9357374ac5bf1596a2bdac20e73b0003</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>s</type>
      <name>__pad6__</name>
      <anchorfile>MultiDependencyTest__result__cache_8txt.html</anchorfile>
      <anchor>a6088dd17084707db9ed0226e20b7b1ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>d</type>
      <name>__pad7__</name>
      <anchorfile>MultiDependencyTest__result__cache_8txt.html</anchorfile>
      <anchor>a285ca993e736d3b73e40af764652c57c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>s</type>
      <name>__pad8__</name>
      <anchorfile>MultiDependencyTest__result__cache_8txt.html</anchorfile>
      <anchor>a2202b2fd7c49d468a09035b4500c1509</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>d</type>
      <name>__pad9__</name>
      <anchorfile>MultiDependencyTest__result__cache_8txt.html</anchorfile>
      <anchor>ad0df1783a66a9adfc7de871ad994430c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>s</type>
      <name>__pad10__</name>
      <anchorfile>MultiDependencyTest__result__cache_8txt.html</anchorfile>
      <anchor>a2acf6ae5a2d650b749024d0e03b783e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>d</type>
      <name>__pad11__</name>
      <anchorfile>MultiDependencyTest__result__cache_8txt.html</anchorfile>
      <anchor>af4c7ef7c43d848715243514043418885</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>s</type>
      <name>__pad12__</name>
      <anchorfile>MultiDependencyTest__result__cache_8txt.html</anchorfile>
      <anchor>acad8009176a9da93922391c8d98315a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>d</type>
      <name>__pad13__</name>
      <anchorfile>MultiDependencyTest__result__cache_8txt.html</anchorfile>
      <anchor>a0cd3a0ee436657bfa55bd9a63c1d769e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>StackTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/execution-order/_files/</path>
    <filename>StackTest_8php</filename>
    <class kind="class">StackTest</class>
  </compound>
  <compound kind="file">
    <name>TestWithDifferentDurations.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/execution-order/_files/</path>
    <filename>TestWithDifferentDurations_8php</filename>
    <class kind="class">TestWithDifferentDurations</class>
  </compound>
  <compound kind="file">
    <name>TestWithDifferentDurations.phpunit.result.cache.txt</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/execution-order/_files/</path>
    <filename>TestWithDifferentDurations_8phpunit_8result_8cache_8txt</filename>
    <member kind="variable">
      <type>C</type>
      <name>__pad0__</name>
      <anchorfile>TestWithDifferentDurations_8phpunit_8result_8cache_8txt.html</anchorfile>
      <anchor>a4a70169ff33fd08b4dd3bc11ac0a3012</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>a</type>
      <name>__pad1__</name>
      <anchorfile>TestWithDifferentDurations_8phpunit_8result_8cache_8txt.html</anchorfile>
      <anchor>a85ad1cd9c8767b5f5be96fabeb951a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>a</type>
      <name>__pad2__</name>
      <anchorfile>TestWithDifferentDurations_8phpunit_8result_8cache_8txt.html</anchorfile>
      <anchor>a30df2b59ddfa2f7a70feafd935a78b86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>d</type>
      <name>__pad3__</name>
      <anchorfile>TestWithDifferentDurations_8phpunit_8result_8cache_8txt.html</anchorfile>
      <anchor>a97c10adfe4ae8bbd951e87ffa25f8600</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>s</type>
      <name>__pad4__</name>
      <anchorfile>TestWithDifferentDurations_8phpunit_8result_8cache_8txt.html</anchorfile>
      <anchor>a174e610f7bcbd4be20b12e75ae50a3e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>d</type>
      <name>__pad5__</name>
      <anchorfile>TestWithDifferentDurations_8phpunit_8result_8cache_8txt.html</anchorfile>
      <anchor>a9357374ac5bf1596a2bdac20e73b0003</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>s</type>
      <name>__pad6__</name>
      <anchorfile>TestWithDifferentDurations_8phpunit_8result_8cache_8txt.html</anchorfile>
      <anchor>a6088dd17084707db9ed0226e20b7b1ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>d</type>
      <name>__pad7__</name>
      <anchorfile>TestWithDifferentDurations_8phpunit_8result_8cache_8txt.html</anchorfile>
      <anchor>a285ca993e736d3b73e40af764652c57c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>HookTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/loggers/_files/</path>
    <filename>HookTest_8php</filename>
    <class kind="class">PHPUnit::Test::HookTest</class>
    <namespace>PHPUnit::Test</namespace>
  </compound>
  <compound kind="file">
    <name>raw_output_ColorTest.txt</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/loggers/_files/</path>
    <filename>raw__output__ColorTest_8txt</filename>
    <member kind="variable">
      <type>PHPUnit s by Sebastian Bergmann and contributors</type>
      <name>Runtime</name>
      <anchorfile>raw__output__ColorTest_8txt.html</anchorfile>
      <anchor>ae9c1a94cdf5d42c543556db4b1012f1f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>raw_output_StatusTest.txt</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/loggers/_files/</path>
    <filename>raw__output__StatusTest_8txt</filename>
    <member kind="variable">
      <type>PHPUnit s Sebastian Bergmann and contributors</type>
      <name>Runtime</name>
      <anchorfile>raw__output__StatusTest_8txt.html</anchorfile>
      <anchor>a6ebd6b2b81433703abe29beb5992ef76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>__pad0__</name>
      <anchorfile>raw__output__StatusTest_8txt.html</anchorfile>
      <anchor>ab6f3c269fc46c9c1c0f81b3431240138</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>__pad1__</name>
      <anchorfile>raw__output__StatusTest_8txt.html</anchorfile>
      <anchor>ae31ac69c75bb42f47c8d6a7cde4937c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>__pad2__</name>
      <anchorfile>raw__output__StatusTest_8txt.html</anchorfile>
      <anchor>acb405321a5c6ae16fef21290649f2666</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TestDoxGroupTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/loggers/_files/</path>
    <filename>TestDoxGroupTest_8php</filename>
    <class kind="class">TestDoxGroupTest</class>
  </compound>
  <compound kind="file">
    <name>Issue1149Test.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/GitHub/1149/</path>
    <filename>Issue1149Test_8php</filename>
    <class kind="class">Issue1149Test</class>
  </compound>
  <compound kind="file">
    <name>bootstrap1216.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/GitHub/1216/</path>
    <filename>bootstrap1216_8php</filename>
    <member kind="variable">
      <type></type>
      <name>$_ENV</name>
      <anchorfile>bootstrap1216_8php.html</anchorfile>
      <anchor>ad251c4effbc87d5d552826f028d8e239</anchor>
      <arglist>[&apos;configAvailableInBootstrap&apos;]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Issue1216Test.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/GitHub/1216/</path>
    <filename>Issue1216Test_8php</filename>
    <class kind="class">Issue1216Test</class>
  </compound>
  <compound kind="file">
    <name>Issue1265Test.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/GitHub/1265/</path>
    <filename>Issue1265Test_8php</filename>
    <class kind="class">Issue1265Test</class>
  </compound>
  <compound kind="file">
    <name>Issue1330Test.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/GitHub/1330/</path>
    <filename>Issue1330Test_8php</filename>
    <class kind="class">Issue1330Test</class>
  </compound>
  <compound kind="file">
    <name>bootstrap1335.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/GitHub/1335/</path>
    <filename>bootstrap1335_8php</filename>
    <member kind="variable">
      <type></type>
      <name>$globalString</name>
      <anchorfile>bootstrap1335_8php.html</anchorfile>
      <anchor>a7789daa8ef5c8aaab7ddbeca0b437ec2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$globalIntTruthy</name>
      <anchorfile>bootstrap1335_8php.html</anchorfile>
      <anchor>acfb98ba6ca4a7e2e020ca42f7a4825aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$globalIntFalsey</name>
      <anchorfile>bootstrap1335_8php.html</anchorfile>
      <anchor>adaf43d21a6d8db11f26fd069149d364c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$globalFloat</name>
      <anchorfile>bootstrap1335_8php.html</anchorfile>
      <anchor>a7bbca9b7c36c60f44d26c826c9aaa451</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$globalBoolTrue</name>
      <anchorfile>bootstrap1335_8php.html</anchorfile>
      <anchor>aba3efb1b9f2ab94fcf73921c9f317c27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$globalBoolFalse</name>
      <anchorfile>bootstrap1335_8php.html</anchorfile>
      <anchor>aafdd89e19f276ca7c91d499896df5b4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$globalNull</name>
      <anchorfile>bootstrap1335_8php.html</anchorfile>
      <anchor>aaabf81b2dc11a776606f0642b87dad48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$globalArray</name>
      <anchorfile>bootstrap1335_8php.html</anchorfile>
      <anchor>ac15952f1654749e4debcbadb1976aac7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$globalNestedArray</name>
      <anchorfile>bootstrap1335_8php.html</anchorfile>
      <anchor>a67a456104aa71ae44a1c502409dc3ae0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$globalObject</name>
      <anchorfile>bootstrap1335_8php.html</anchorfile>
      <anchor>a86fff2cf35cd706442d7f9fded17850a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$globalObjectWithBackSlashString</name>
      <anchorfile>bootstrap1335_8php.html</anchorfile>
      <anchor>af9a9d1cd4a4da3b085df34b9e4e3a60b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$globalObjectWithDoubleBackSlashString</name>
      <anchorfile>bootstrap1335_8php.html</anchorfile>
      <anchor>ac5dffa728e1521c66fbbb403b9ba5b4f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Issue1335Test.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/GitHub/1335/</path>
    <filename>Issue1335Test_8php</filename>
    <class kind="class">Issue1335Test</class>
  </compound>
  <compound kind="file">
    <name>Issue1337Test.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/GitHub/1337/</path>
    <filename>Issue1337Test_8php</filename>
    <class kind="class">Issue1337Test</class>
  </compound>
  <compound kind="file">
    <name>Issue1348Test.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/GitHub/1348/</path>
    <filename>Issue1348Test_8php</filename>
    <class kind="class">Issue1348Test</class>
  </compound>
  <compound kind="file">
    <name>ChildProcessClass1351.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/GitHub/1351/</path>
    <filename>ChildProcessClass1351_8php</filename>
    <class kind="class">ChildProcessClass1351</class>
  </compound>
  <compound kind="file">
    <name>Issue1351Test.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/GitHub/1351/</path>
    <filename>Issue1351Test_8php</filename>
    <class kind="class">Issue1351Test</class>
  </compound>
  <compound kind="file">
    <name>Issue1374Test.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/GitHub/1374/</path>
    <filename>Issue1374Test_8php</filename>
    <class kind="class">Issue1374Test</class>
  </compound>
  <compound kind="file">
    <name>Issue1437Test.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/GitHub/1437/</path>
    <filename>Issue1437Test_8php</filename>
    <class kind="class">Issue1437Test</class>
  </compound>
  <compound kind="file">
    <name>Issue1468Test.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/GitHub/1468/</path>
    <filename>Issue1468Test_8php</filename>
    <class kind="class">Issue1468Test</class>
  </compound>
  <compound kind="file">
    <name>Issue1471Test.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/GitHub/1471/</path>
    <filename>Issue1471Test_8php</filename>
    <class kind="class">Issue1471Test</class>
  </compound>
  <compound kind="file">
    <name>Issue1472Test.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/GitHub/1472/</path>
    <filename>Issue1472Test_8php</filename>
    <class kind="class">Issue1472Test</class>
  </compound>
  <compound kind="file">
    <name>Issue1570Test.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/GitHub/1570/</path>
    <filename>Issue1570Test_8php</filename>
    <class kind="class">Issue1570Test</class>
  </compound>
  <compound kind="file">
    <name>Issue2085Test.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/GitHub/2085/</path>
    <filename>Issue2085Test_8php</filename>
    <class kind="class">Issue2085Test</class>
  </compound>
  <compound kind="file">
    <name>Issue2137Test.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/GitHub/2137/</path>
    <filename>Issue2137Test_8php</filename>
    <class kind="class">Issue2137Test</class>
  </compound>
  <compound kind="file">
    <name>Issue2145Test.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/GitHub/2145/</path>
    <filename>Issue2145Test_8php</filename>
    <class kind="class">Issue2145Test</class>
  </compound>
  <compound kind="file">
    <name>constant.inc</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/GitHub/2158/</path>
    <filename>constant_8inc</filename>
    <member kind="variable">
      <type>const</type>
      <name>TEST_CONSTANT</name>
      <anchorfile>constant_8inc.html</anchorfile>
      <anchor>aeaea1774ac9db4cd3f005cdd108fe7dd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Issue2158Test.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/GitHub/2158/</path>
    <filename>Issue2158Test_8php</filename>
    <class kind="class">Issue2158Test</class>
  </compound>
  <compound kind="file">
    <name>Issue2366Test.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/GitHub/2366/</path>
    <filename>Issue2366Test_8php</filename>
    <class kind="class">Issue2366</class>
    <class kind="class">Issue2366Test</class>
  </compound>
  <compound kind="file">
    <name>Issue2380Test.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/GitHub/2380/</path>
    <filename>Issue2380Test_8php</filename>
    <class kind="class">Issue2380Test</class>
  </compound>
  <compound kind="file">
    <name>Issue2382Test.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/GitHub/2382/</path>
    <filename>Issue2382Test_8php</filename>
    <class kind="class">Issue2382Test</class>
  </compound>
  <compound kind="file">
    <name>Issue2435Test.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/GitHub/2435/</path>
    <filename>Issue2435Test_8php</filename>
    <class kind="class">Issue2435Test</class>
  </compound>
  <compound kind="file">
    <name>SeparateClassRunMethodInNewProcessTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/GitHub/2724/</path>
    <filename>SeparateClassRunMethodInNewProcessTest_8php</filename>
    <class kind="class">SeparateClassRunMethodInNewProcessTest</class>
  </compound>
  <compound kind="file">
    <name>BeforeAfterClassPidTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/GitHub/2725/</path>
    <filename>BeforeAfterClassPidTest_8php</filename>
    <class kind="class">Issue2725::BeforeAfterClassPidTest</class>
    <namespace>Issue2725</namespace>
  </compound>
  <compound kind="file">
    <name>Issue2731Test.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/GitHub/2731/</path>
    <filename>Issue2731Test_8php</filename>
    <class kind="class">Issue2731Test</class>
  </compound>
  <compound kind="file">
    <name>Issue2811Test.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/GitHub/2811/</path>
    <filename>Issue2811Test_8php</filename>
    <class kind="class">Issue2811Test</class>
  </compound>
  <compound kind="file">
    <name>Issue2830Test.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/GitHub/2830/</path>
    <filename>Issue2830Test_8php</filename>
    <class kind="class">Issue2830Test</class>
  </compound>
  <compound kind="file">
    <name>unconventiallyNamedIssue2972Test.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/GitHub/2972/</path>
    <filename>unconventiallyNamedIssue2972Test_8php</filename>
    <class kind="class">Issue2972::Issue2972Test</class>
    <namespace>Issue2972</namespace>
  </compound>
  <compound kind="file">
    <name>Issue3093Test.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/GitHub/3093/</path>
    <filename>Issue3093Test_8php</filename>
    <class kind="class">Issue3093Test</class>
  </compound>
  <compound kind="file">
    <name>Issue3156Test.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/GitHub/3156/</path>
    <filename>Issue3156Test_8php</filename>
    <class kind="class">Test::Issue3156Test</class>
    <namespace>Test</namespace>
  </compound>
  <compound kind="file">
    <name>Issue322Test.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/GitHub/322/</path>
    <filename>Issue322Test_8php</filename>
    <class kind="class">Issue322Test</class>
  </compound>
  <compound kind="file">
    <name>Issue3379Test.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/GitHub/3379/</path>
    <filename>Issue3379Test_8php</filename>
    <class kind="class">Test::Issue3379Test</class>
    <namespace>Test</namespace>
  </compound>
  <compound kind="file">
    <name>Issue3379TestListener.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/GitHub/3379/</path>
    <filename>Issue3379TestListener_8php</filename>
    <class kind="class">Issue3379TestListener</class>
  </compound>
  <compound kind="file">
    <name>Issue3739Test.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/GitHub/3739/</path>
    <filename>Issue3739Test_8php</filename>
    <class kind="class">Issue3739::Issue3739</class>
    <class kind="class">Issue3739::Issue3739Test</class>
    <namespace>Issue3739</namespace>
  </compound>
  <compound kind="file">
    <name>Issue3881Test.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/GitHub/3881/</path>
    <filename>Issue3881Test_8php</filename>
    <class kind="class">AbstractIssue3881Test</class>
    <class kind="class">Issue3881Test</class>
  </compound>
  <compound kind="file">
    <name>Issue3889Test.test.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/GitHub/3889/</path>
    <filename>Issue3889Test_8test_8php</filename>
    <class kind="class">Issue3889Test</class>
  </compound>
  <compound kind="file">
    <name>MyIssue3889Test.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/GitHub/3889/</path>
    <filename>MyIssue3889Test_8php</filename>
    <class kind="class">Issue3889Test</class>
  </compound>
  <compound kind="file">
    <name>Issue3904_2Test.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/GitHub/3904/</path>
    <filename>Issue3904__2Test_8php</filename>
    <class kind="class">Issue3904_2Test</class>
  </compound>
  <compound kind="file">
    <name>Issue3904_3Test.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/GitHub/3904/</path>
    <filename>Issue3904__3Test_8php</filename>
    <class kind="class">Issue3904Test</class>
    <class kind="class">Issue3904_3TestSuiteLoader</class>
  </compound>
  <compound kind="file">
    <name>Issue3904Test.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/GitHub/3904/</path>
    <filename>Issue3904Test_8php</filename>
    <class kind="class">Bar</class>
    <class kind="class">Issue3904Test</class>
  </compound>
  <compound kind="file">
    <name>Issue3983Test.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/GitHub/3983/</path>
    <filename>Issue3983Test_8php</filename>
    <class kind="class">Issue3983Test</class>
  </compound>
  <compound kind="file">
    <name>Issue433Test.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/GitHub/433/</path>
    <filename>Issue433Test_8php</filename>
    <class kind="class">Issue433Test</class>
  </compound>
  <compound kind="file">
    <name>Issue445Test.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/GitHub/445/</path>
    <filename>Issue445Test_8php</filename>
    <class kind="class">Issue445Test</class>
  </compound>
  <compound kind="file">
    <name>Issue498Test.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/GitHub/498/</path>
    <filename>Issue498Test_8php</filename>
    <class kind="class">Issue498Test</class>
  </compound>
  <compound kind="file">
    <name>Issue503Test.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/GitHub/503/</path>
    <filename>Issue503Test_8php</filename>
    <class kind="class">Issue503Test</class>
  </compound>
  <compound kind="file">
    <name>Issue581Test.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/GitHub/581/</path>
    <filename>Issue581Test_8php</filename>
    <class kind="class">Issue581Test</class>
  </compound>
  <compound kind="file">
    <name>Issue74Test.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/GitHub/74/</path>
    <filename>Issue74Test_8php</filename>
    <class kind="class">Issue74Test</class>
  </compound>
  <compound kind="file">
    <name>NewException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/GitHub/74/</path>
    <filename>NewException_8php</filename>
    <class kind="class">NewException</class>
  </compound>
  <compound kind="file">
    <name>Issue765Test.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/GitHub/765/</path>
    <filename>Issue765Test_8php</filename>
    <class kind="class">Issue765Test</class>
  </compound>
  <compound kind="file">
    <name>bootstrap797.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/GitHub/797/</path>
    <filename>bootstrap797_8php</filename>
    <member kind="variable">
      <type>const</type>
      <name>GITHUB_ISSUE</name>
      <anchorfile>bootstrap797_8php.html</anchorfile>
      <anchor>a1e9a77ea5d230a69c9678f16e302ae0d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Issue797Test.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/GitHub/797/</path>
    <filename>Issue797Test_8php</filename>
    <class kind="class">Issue797Test</class>
  </compound>
  <compound kind="file">
    <name>Issue873Test.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/GitHub/873/</path>
    <filename>Issue873Test_8php</filename>
  </compound>
  <compound kind="file">
    <name>Issue1021Test.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/Trac/1021/</path>
    <filename>Issue1021Test_8php</filename>
    <class kind="class">Issue1021Test</class>
  </compound>
  <compound kind="file">
    <name>Issue578Test.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/Trac/578/</path>
    <filename>Issue578Test_8php</filename>
    <class kind="class">Issue578Test</class>
  </compound>
  <compound kind="file">
    <name>Issue684Test.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/Trac/684/</path>
    <filename>Issue684Test_8php</filename>
    <class kind="class">Foo_Bar_Issue684Test</class>
  </compound>
  <compound kind="file">
    <name>ChildSuite.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/Trac/783/</path>
    <filename>ChildSuite_8php</filename>
    <class kind="class">ChildSuite</class>
  </compound>
  <compound kind="file">
    <name>ParentSuite.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/Trac/783/</path>
    <filename>ParentSuite_8php</filename>
    <class kind="class">ParentSuite</class>
  </compound>
  <compound kind="file">
    <name>TwoTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/end-to-end/regression/Trac/783/</path>
    <filename>TwoTest_8php</filename>
    <class kind="class">TwoTest</class>
  </compound>
  <compound kind="file">
    <name>assert-empty.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/static-analysis/happy-path/</path>
    <filename>assert-empty_8php</filename>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath</namespace>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath.html</anchorfile>
      <anchor>ad1216f18433266a23a4dd86fa9087f75</anchor>
      <arglist>(?object $value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>assert-false.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/static-analysis/happy-path/</path>
    <filename>assert-false_8php</filename>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertFalse</namespace>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertFalse.html</anchorfile>
      <anchor>a20248421d03e802c2e56287474fe5561</anchor>
      <arglist>($value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>assert-instance-of.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/static-analysis/happy-path/</path>
    <filename>assert-instance-of_8php</filename>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertInstanceOf</namespace>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertInstanceOf.html</anchorfile>
      <anchor>a47373eb3ce23bcb1d49ef4a5b4eea9c5</anchor>
      <arglist>(object $value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>assert-is-array.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/static-analysis/happy-path/</path>
    <filename>assert-is-array_8php</filename>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsArray</namespace>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsArray.html</anchorfile>
      <anchor>a815e56fbe16d317e6c75865b7f315cec</anchor>
      <arglist>($value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>assert-is-bool.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/static-analysis/happy-path/</path>
    <filename>assert-is-bool_8php</filename>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsBool</namespace>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsBool.html</anchorfile>
      <anchor>a3596bdf6464fdee54c3bfc38ef81ed0c</anchor>
      <arglist>($value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>assert-is-callable.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/static-analysis/happy-path/</path>
    <filename>assert-is-callable_8php</filename>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsCallable</namespace>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsCallable.html</anchorfile>
      <anchor>a5bbb760b9d6c349380fbeccff2ac2ece</anchor>
      <arglist>($value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>assert-is-float.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/static-analysis/happy-path/</path>
    <filename>assert-is-float_8php</filename>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsFloat</namespace>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsFloat.html</anchorfile>
      <anchor>a02dd5da4be8428ee155dbfaa189f157c</anchor>
      <arglist>($value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>assert-is-int.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/static-analysis/happy-path/</path>
    <filename>assert-is-int_8php</filename>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsInt</namespace>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsInt.html</anchorfile>
      <anchor>a5867f86de91347f1d032704cbc19adf6</anchor>
      <arglist>($value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>assert-is-iterable.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/static-analysis/happy-path/</path>
    <filename>assert-is-iterable_8php</filename>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsIterable</namespace>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsIterable.html</anchorfile>
      <anchor>ac19028c03602652bd81dedd519950043</anchor>
      <arglist>($value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>assert-is-not-array.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/static-analysis/happy-path/</path>
    <filename>assert-is-not-array_8php</filename>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsNotArray</namespace>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsNotArray.html</anchorfile>
      <anchor>aada2e4fa01cf76191eeae9b485169e3e</anchor>
      <arglist>($value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>assert-is-not-bool.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/static-analysis/happy-path/</path>
    <filename>assert-is-not-bool_8php</filename>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsNotBool</namespace>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsNotBool.html</anchorfile>
      <anchor>ab9e29026132d34010268ebe70dead2b6</anchor>
      <arglist>($value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>assert-is-not-callable.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/static-analysis/happy-path/</path>
    <filename>assert-is-not-callable_8php</filename>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsCallable</namespace>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsCallable.html</anchorfile>
      <anchor>a5bbb760b9d6c349380fbeccff2ac2ece</anchor>
      <arglist>($value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>assert-is-not-float.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/static-analysis/happy-path/</path>
    <filename>assert-is-not-float_8php</filename>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsNotFloat</namespace>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsNotFloat.html</anchorfile>
      <anchor>aeeab804d39fec3bab2c2196121339c3b</anchor>
      <arglist>($value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>assert-is-not-int.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/static-analysis/happy-path/</path>
    <filename>assert-is-not-int_8php</filename>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsNotInt</namespace>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsNotInt.html</anchorfile>
      <anchor>a01c05e40eb570b60dc4c4d57027ea94f</anchor>
      <arglist>($value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>assert-is-not-iterable.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/static-analysis/happy-path/</path>
    <filename>assert-is-not-iterable_8php</filename>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsNotIterable</namespace>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsNotIterable.html</anchorfile>
      <anchor>abc72f958455196486cdc7dc64fdec027</anchor>
      <arglist>($value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>assert-is-not-numeric.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/static-analysis/happy-path/</path>
    <filename>assert-is-not-numeric_8php</filename>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsNotNumeric</namespace>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsNotNumeric.html</anchorfile>
      <anchor>ac427060c59483aff8c3a62c9b090c00b</anchor>
      <arglist>($value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>assert-is-not-object.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/static-analysis/happy-path/</path>
    <filename>assert-is-not-object_8php</filename>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsNotObject</namespace>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsNotObject.html</anchorfile>
      <anchor>aaa7e86b8401fd46c311c413ddfe7c5e7</anchor>
      <arglist>($value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>assert-is-not-resource.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/static-analysis/happy-path/</path>
    <filename>assert-is-not-resource_8php</filename>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsNotResource</namespace>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsNotResource.html</anchorfile>
      <anchor>a36cc4f948c91f6c90db57d65781ca426</anchor>
      <arglist>($value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>assert-is-not-scalar.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/static-analysis/happy-path/</path>
    <filename>assert-is-not-scalar_8php</filename>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsNotScalar</namespace>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsNotScalar.html</anchorfile>
      <anchor>a030097b5e0f4b0b66ccbc6474f050451</anchor>
      <arglist>($value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>assert-is-not-string.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/static-analysis/happy-path/</path>
    <filename>assert-is-not-string_8php</filename>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsNotString</namespace>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsNotString.html</anchorfile>
      <anchor>af257b324ba05843225c7a49869b06b10</anchor>
      <arglist>($value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>assert-is-numeric.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/static-analysis/happy-path/</path>
    <filename>assert-is-numeric_8php</filename>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsNumeric</namespace>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsNumeric.html</anchorfile>
      <anchor>a4aaf0fae22cba6d56e2fe4955a5116dd</anchor>
      <arglist>($value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>assert-is-object.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/static-analysis/happy-path/</path>
    <filename>assert-is-object_8php</filename>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsObject</namespace>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsObject.html</anchorfile>
      <anchor>a0034654264e27e51cd5aa89068489779</anchor>
      <arglist>($value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>assert-is-resource.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/static-analysis/happy-path/</path>
    <filename>assert-is-resource_8php</filename>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsResource</namespace>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsResource.html</anchorfile>
      <anchor>a62cc1d7c1b788f64214b24071e312fa6</anchor>
      <arglist>($value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>assert-is-scalar.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/static-analysis/happy-path/</path>
    <filename>assert-is-scalar_8php</filename>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsScalar</namespace>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsScalar.html</anchorfile>
      <anchor>a096c3400d311b87b340586ec9fe2d727</anchor>
      <arglist>($value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>assert-is-string.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/static-analysis/happy-path/</path>
    <filename>assert-is-string_8php</filename>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsString</namespace>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsString.html</anchorfile>
      <anchor>a40b1cfd96009ab4673ef03e6ce8cd113</anchor>
      <arglist>($value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>assert-not-empty.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/static-analysis/happy-path/</path>
    <filename>assert-not-empty_8php</filename>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertNotEmpty</namespace>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertNotEmpty.html</anchorfile>
      <anchor>aaa5235a0e1975715c11c007f6a5af069</anchor>
      <arglist>(?int $value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>assert-not-false.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/static-analysis/happy-path/</path>
    <filename>assert-not-false_8php</filename>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertNotFalse</namespace>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertNotFalse.html</anchorfile>
      <anchor>a21ed3e6c8ee2e486866e4525995e78bb</anchor>
      <arglist>($value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>assert-not-instance-of.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/static-analysis/happy-path/</path>
    <filename>assert-not-instance-of_8php</filename>
    <class kind="class">PHPUnit::Framework::StaticAnalysis::HappyPath::AssertNotInstanceOf::A</class>
    <class kind="class">PHPUnit::Framework::StaticAnalysis::HappyPath::AssertNotInstanceOf::B</class>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertNotInstanceOf</namespace>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertNotInstanceOf.html</anchorfile>
      <anchor>ad70150cd931f43f9ef39db38ec40bd83</anchor>
      <arglist>(object $value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>assert-not-null.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/static-analysis/happy-path/</path>
    <filename>assert-not-null_8php</filename>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertNotNull</namespace>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertNotNull.html</anchorfile>
      <anchor>af85bab4500ba3cb9257360fa4a5228b1</anchor>
      <arglist>(?int $value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>assert-not-true.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/static-analysis/happy-path/</path>
    <filename>assert-not-true_8php</filename>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertNotTrue</namespace>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertNotTrue.html</anchorfile>
      <anchor>afc428a2b0116c3cce749818dd5bb216a</anchor>
      <arglist>($value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>assert-null.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/static-analysis/happy-path/</path>
    <filename>assert-null_8php</filename>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertNull</namespace>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertNull.html</anchorfile>
      <anchor>ab5d2383312407f669ed3de2e5cc20d59</anchor>
      <arglist>($value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>assert-same.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/static-analysis/happy-path/</path>
    <filename>assert-same_8php</filename>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertSame</namespace>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertSame.html</anchorfile>
      <anchor>aee56d05886ccbc131361af29c921b8bd</anchor>
      <arglist>(\stdClass $a, object $b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>assert-true.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/static-analysis/happy-path/</path>
    <filename>assert-true_8php</filename>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertTrue</namespace>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertTrue.html</anchorfile>
      <anchor>a59a3b1f70554e53a4407079845de7df7</anchor>
      <arglist>($value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fail.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/static-analysis/happy-path/</path>
    <filename>fail_8php</filename>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertEmpty::Fail</namespace>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertEmpty_1_1Fail.html</anchorfile>
      <anchor>a3fba9dccc541ccdb17efa79b6f662328</anchor>
      <arglist>($value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TestUsingMocks.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/static-analysis/</path>
    <filename>TestUsingMocks_8php</filename>
    <class kind="class">PHPUnit::StaticAnalysis::HelloWorldClass</class>
    <class kind="class">PHPUnit::StaticAnalysis::TestUsingMocks</class>
    <namespace>PHPUnit::StaticAnalysis</namespace>
  </compound>
  <compound kind="file">
    <name>FunctionsTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/Assert/</path>
    <filename>FunctionsTest_8php</filename>
    <class kind="class">PHPUnit::Framework::FunctionsTest</class>
    <namespace>PHPUnit::Framework</namespace>
  </compound>
  <compound kind="file">
    <name>AssertTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/</path>
    <filename>AssertTest_8php</filename>
    <class kind="class">PHPUnit::Framework::AssertTest</class>
    <namespace>PHPUnit::Framework</namespace>
  </compound>
  <compound kind="file">
    <name>ArrayHasKeyTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/Constraint/</path>
    <filename>ArrayHasKeyTest_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::ArrayHasKeyTest</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>ArraySubsetTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/Constraint/</path>
    <filename>ArraySubsetTest_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::ArraySubsetTest</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>CallbackTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/Constraint/</path>
    <filename>CallbackTest_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::CallbackTest</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>ClassHasAttributeTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/Constraint/</path>
    <filename>ClassHasAttributeTest_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::ClassHasAttributeTest</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>ClassHasStaticAttributeTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/Constraint/</path>
    <filename>ClassHasStaticAttributeTest_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::ClassHasStaticAttributeTest</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>ConstraintTestCase.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/Constraint/</path>
    <filename>ConstraintTestCase_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::ConstraintTestCase</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>CountTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/Constraint/</path>
    <filename>CountTest_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::CountTest</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>DirectoryExistsTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/Constraint/</path>
    <filename>DirectoryExistsTest_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::DirectoryExistsTest</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>ExceptionCodeTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/Constraint/</path>
    <filename>ExceptionCodeTest_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::ExceptionCodeTest</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>ExceptionMessageRegExpTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/Constraint/</path>
    <filename>ExceptionMessageRegExpTest_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::ExceptionMessageRegExpTest</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>ExceptionMessageTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/Constraint/</path>
    <filename>ExceptionMessageTest_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::ExceptionMessageTest</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>FileExistsTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/Constraint/</path>
    <filename>FileExistsTest_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::FileExistsTest</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>GreaterThanTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/Constraint/</path>
    <filename>GreaterThanTest_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::GreaterThanTest</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>IsEmptyTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/Constraint/</path>
    <filename>IsEmptyTest_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::IsEmptyTest</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>IsEqualTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/Constraint/</path>
    <filename>IsEqualTest_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::IsEqualTest</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>IsIdenticalTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/Constraint/</path>
    <filename>IsIdenticalTest_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::IsIdenticalTest</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>IsInstanceOfTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/Constraint/</path>
    <filename>IsInstanceOfTest_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::IsInstanceOfTest</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>IsJsonTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/Constraint/</path>
    <filename>IsJsonTest_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::IsJsonTest</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>IsNullTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/Constraint/</path>
    <filename>IsNullTest_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::IsNullTest</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>IsReadableTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/Constraint/</path>
    <filename>IsReadableTest_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::IsReadableTest</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>IsTypeTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/Constraint/</path>
    <filename>IsTypeTest_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::IsTypeTest</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>IsWritableTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/Constraint/</path>
    <filename>IsWritableTest_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::IsWritableTest</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>JsonMatchesErrorMessageProviderTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/Constraint/</path>
    <filename>JsonMatchesErrorMessageProviderTest_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::JsonMatchesErrorMessageProviderTest</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>JsonMatchesTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/Constraint/</path>
    <filename>JsonMatchesTest_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::JsonMatchesTest</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>LessThanTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/Constraint/</path>
    <filename>LessThanTest_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::LessThanTest</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>LogicalAndTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/Constraint/</path>
    <filename>LogicalAndTest_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::LogicalAndTest</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>LogicalNotTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/Constraint/</path>
    <filename>LogicalNotTest_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::LogicalNotTest</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>LogicalOrTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/Constraint/</path>
    <filename>LogicalOrTest_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::LogicalOrTest</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>LogicalXorTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/Constraint/</path>
    <filename>LogicalXorTest_8php</filename>
    <class kind="class">Framework::Constraint::LogicalXorTest</class>
    <namespace>Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>ObjectHasAttributeTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/Constraint/</path>
    <filename>ObjectHasAttributeTest_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::ObjectHasAttributeTest</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>RegularExpressionTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/Constraint/</path>
    <filename>Framework_2Constraint_2RegularExpressionTest_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::RegularExpressionTest</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>RegularExpressionTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Util/</path>
    <filename>Util_2RegularExpressionTest_8php</filename>
    <class kind="class">PHPUnit::Util::RegularExpressionTest</class>
    <namespace>PHPUnit::Util</namespace>
  </compound>
  <compound kind="file">
    <name>SameSizeTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/Constraint/</path>
    <filename>SameSizeTest_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::SameSizeTest</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>StringContainsTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/Constraint/</path>
    <filename>StringContainsTest_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::StringContainsTest</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>StringEndsWithTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/Constraint/</path>
    <filename>StringEndsWithTest_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::StringEndsWithTest</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>StringMatchesFormatDescriptionTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/Constraint/</path>
    <filename>StringMatchesFormatDescriptionTest_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::StringMatchesFormatDescriptionTest</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>StringStartsWithTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/Constraint/</path>
    <filename>StringStartsWithTest_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::StringStartsWithTest</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>TraversableContainsTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/Constraint/</path>
    <filename>TraversableContainsTest_8php</filename>
    <class kind="class">PHPUnit::Framework::Constraint::TraversableContainsTest</class>
    <namespace>PHPUnit::Framework::Constraint</namespace>
  </compound>
  <compound kind="file">
    <name>ConstraintTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/</path>
    <filename>ConstraintTest_8php</filename>
    <class kind="class">PHPUnit::Framework::ConstraintTest</class>
    <namespace>PHPUnit::Framework</namespace>
  </compound>
  <compound kind="file">
    <name>ExceptionWrapperTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/</path>
    <filename>ExceptionWrapperTest_8php</filename>
    <class kind="class">PHPUnit::Framework::ExceptionWrapperTest</class>
    <namespace>PHPUnit::Framework</namespace>
  </compound>
  <compound kind="file">
    <name>IncompleteTestCaseTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/</path>
    <filename>IncompleteTestCaseTest_8php</filename>
    <class kind="class">PHPUnit::Framework::IncompleteTestCaseTest</class>
    <namespace>PHPUnit::Framework</namespace>
  </compound>
  <compound kind="file">
    <name>InvocationMockerTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/MockObject/Builder/</path>
    <filename>InvocationMockerTest_8php</filename>
    <class kind="class">InvocationMockerTest</class>
  </compound>
  <compound kind="file">
    <name>ConfigurableMethodsTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/MockObject/</path>
    <filename>ConfigurableMethodsTest_8php</filename>
    <class kind="class">PHPUnit::Framework::MockObject::ConfigurableMethodsTest</class>
    <namespace>PHPUnit::Framework::MockObject</namespace>
  </compound>
  <compound kind="file">
    <name>ConfigurableMethodTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/MockObject/</path>
    <filename>ConfigurableMethodTest_8php</filename>
    <class kind="class">PHPUnit::Framework::MockObject::ConfigurableMethodTest</class>
    <namespace>PHPUnit::Framework::MockObject</namespace>
  </compound>
  <compound kind="file">
    <name>GeneratorTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/MockObject/</path>
    <filename>GeneratorTest_8php</filename>
    <class kind="class">GeneratorTest</class>
  </compound>
  <compound kind="file">
    <name>InvocationHandlerTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/MockObject/</path>
    <filename>InvocationHandlerTest_8php</filename>
    <class kind="class">PHPUnit::Framework::MockObject::InvocationHandlerTest</class>
    <namespace>PHPUnit::Framework::MockObject</namespace>
  </compound>
  <compound kind="file">
    <name>ConsecutiveParametersTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/MockObject/Matcher/</path>
    <filename>ConsecutiveParametersTest_8php</filename>
    <class kind="class">ConsecutiveParametersTest</class>
  </compound>
  <compound kind="file">
    <name>MatcherTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/MockObject/</path>
    <filename>MatcherTest_8php</filename>
    <class kind="class">PHPUnit::Framework::MockObject::MatcherTest</class>
    <namespace>PHPUnit::Framework::MockObject</namespace>
  </compound>
  <compound kind="file">
    <name>MockBuilderTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/MockObject/</path>
    <filename>MockBuilderTest_8php</filename>
    <class kind="class">MockBuilderTest</class>
  </compound>
  <compound kind="file">
    <name>MockClassTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/MockObject/</path>
    <filename>MockClassTest_8php</filename>
    <class kind="class">PHPUnit::Framework::MockObject::MockClassTest</class>
    <namespace>PHPUnit::Framework::MockObject</namespace>
  </compound>
  <compound kind="file">
    <name>MockMethodTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/MockObject/</path>
    <filename>MockMethodTest_8php</filename>
    <class kind="class">PHPUnit::Framework::MockObject::MockMethodTest</class>
    <namespace>PHPUnit::Framework::MockObject</namespace>
  </compound>
  <compound kind="file">
    <name>MockObjectTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/MockObject/</path>
    <filename>MockObjectTest_8php</filename>
    <class kind="class">MockObjectTest</class>
  </compound>
  <compound kind="file">
    <name>MockTraitTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/MockObject/</path>
    <filename>MockTraitTest_8php</filename>
    <class kind="class">PHPUnit::Framework::MockObject::MockTraitTest</class>
    <namespace>PHPUnit::Framework::MockObject</namespace>
  </compound>
  <compound kind="file">
    <name>ProxyObjectTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/MockObject/</path>
    <filename>ProxyObjectTest_8php</filename>
    <class kind="class">ProxyObjectTest</class>
  </compound>
  <compound kind="file">
    <name>SkippedTestCaseTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/</path>
    <filename>SkippedTestCaseTest_8php</filename>
    <class kind="class">PHPUnit::Framework::SkippedTestCaseTest</class>
    <namespace>PHPUnit::Framework</namespace>
  </compound>
  <compound kind="file">
    <name>TestBuilderTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/</path>
    <filename>TestBuilderTest_8php</filename>
    <class kind="class">PHPUnit::Framework::TestBuilderTest</class>
    <namespace>PHPUnit::Framework</namespace>
  </compound>
  <compound kind="file">
    <name>TestCaseTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/</path>
    <filename>TestCaseTest_8php</filename>
    <class kind="class">PHPUnit::Framework::TestCaseTest</class>
    <namespace>PHPUnit::Framework</namespace>
  </compound>
  <compound kind="file">
    <name>TestFailureTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/</path>
    <filename>TestFailureTest_8php</filename>
    <class kind="class">PHPUnit::Framework::TestFailureTest</class>
    <namespace>PHPUnit::Framework</namespace>
  </compound>
  <compound kind="file">
    <name>TestImplementorTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/</path>
    <filename>TestImplementorTest_8php</filename>
    <class kind="class">PHPUnit::Framework::TestImplementorTest</class>
    <namespace>PHPUnit::Framework</namespace>
  </compound>
  <compound kind="file">
    <name>TestListenerTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/</path>
    <filename>TestListenerTest_8php</filename>
    <class kind="class">PHPUnit::Framework::TestListenerTest</class>
    <namespace>PHPUnit::Framework</namespace>
  </compound>
  <compound kind="file">
    <name>TestSuiteIteratorTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/</path>
    <filename>TestSuiteIteratorTest_8php</filename>
    <class kind="class">PHPUnit::Framework::TestSuiteIteratorTest</class>
    <namespace>PHPUnit::Framework</namespace>
  </compound>
  <compound kind="file">
    <name>TestSuiteTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Framework/</path>
    <filename>TestSuiteTest_8php</filename>
    <class kind="class">PHPUnit::Framework::TestSuiteTest</class>
    <namespace>PHPUnit::Framework</namespace>
  </compound>
  <compound kind="file">
    <name>DefaultTestResultCacheTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Runner/</path>
    <filename>DefaultTestResultCacheTest_8php</filename>
    <class kind="class">PHPUnit::Runner::DefaultTestResultCacheTest</class>
    <namespace>PHPUnit::Runner</namespace>
  </compound>
  <compound kind="file">
    <name>NameFilterIteratorTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Runner/Filter/</path>
    <filename>NameFilterIteratorTest_8php</filename>
    <class kind="class">PHPUnit::Runner::Filter::NameFilterIteratorTest</class>
    <namespace>PHPUnit::Runner::Filter</namespace>
  </compound>
  <compound kind="file">
    <name>NullTestResultCacheTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Runner/</path>
    <filename>NullTestResultCacheTest_8php</filename>
    <class kind="class">NullTestResultCacheTest</class>
  </compound>
  <compound kind="file">
    <name>PhptTestCaseTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Runner/</path>
    <filename>PhptTestCaseTest_8php</filename>
    <class kind="class">PHPUnit::Runner::PhptTestCaseTest</class>
    <namespace>PHPUnit::Runner</namespace>
  </compound>
  <compound kind="file">
    <name>ResultCacheExtensionTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Runner/</path>
    <filename>ResultCacheExtensionTest_8php</filename>
    <class kind="class">PHPUnit::Runner::ResultCacheExtensionTest</class>
    <namespace>PHPUnit::Runner</namespace>
  </compound>
  <compound kind="file">
    <name>TestResultCacheTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Runner/</path>
    <filename>TestResultCacheTest_8php</filename>
    <class kind="class">TestResultCacheTest</class>
  </compound>
  <compound kind="file">
    <name>TestSuiteSorterTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Runner/</path>
    <filename>TestSuiteSorterTest_8php</filename>
    <class kind="class">PHPUnit::Runner::TestSuiteSorterTest</class>
    <namespace>PHPUnit::Runner</namespace>
  </compound>
  <compound kind="file">
    <name>RegistryTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Util/Annotation/</path>
    <filename>RegistryTest_8php</filename>
    <class kind="class">PHPUnit::Util::Annotation::RegistryTest</class>
    <namespace>PHPUnit::Util::Annotation</namespace>
  </compound>
  <compound kind="file">
    <name>ColorTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Util/</path>
    <filename>ColorTest_8php</filename>
    <class kind="class">PHPUnit::Util::ColorTest</class>
    <namespace>PHPUnit::Util</namespace>
  </compound>
  <compound kind="file">
    <name>ConfigurationGeneratorTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Util/</path>
    <filename>ConfigurationGeneratorTest_8php</filename>
    <class kind="class">PHPUnit::Util::ConfigurationGeneratorTest</class>
    <namespace>PHPUnit::Util</namespace>
  </compound>
  <compound kind="file">
    <name>ConfigurationTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Util/</path>
    <filename>ConfigurationTest_8php</filename>
    <class kind="class">PHPUnit::Util::ConfigurationTest</class>
    <namespace>PHPUnit::Util</namespace>
  </compound>
  <compound kind="file">
    <name>GetoptTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Util/</path>
    <filename>GetoptTest_8php</filename>
    <class kind="class">PHPUnit::Util::GetoptTest</class>
    <namespace>PHPUnit::Util</namespace>
  </compound>
  <compound kind="file">
    <name>GlobalStateTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Util/</path>
    <filename>GlobalStateTest_8php</filename>
    <class kind="class">PHPUnit::Util::GlobalStateTest</class>
    <namespace>PHPUnit::Util</namespace>
  </compound>
  <compound kind="file">
    <name>JsonTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Util/</path>
    <filename>JsonTest_8php</filename>
    <class kind="class">PHPUnit::Util::JsonTest</class>
    <namespace>PHPUnit::Util</namespace>
  </compound>
  <compound kind="file">
    <name>AbstractPhpProcessTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Util/PHP/</path>
    <filename>AbstractPhpProcessTest_8php</filename>
    <class kind="class">PHPUnit::Util::PHP::AbstractPhpProcessTest</class>
    <namespace>PHPUnit::Util::PHP</namespace>
  </compound>
  <compound kind="file">
    <name>TestClassTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Util/</path>
    <filename>TestClassTest_8php</filename>
    <class kind="class">PHPUnit::Util::TestClassTest</class>
    <namespace>PHPUnit::Util</namespace>
  </compound>
  <compound kind="file">
    <name>CliTestDoxPrinterColorTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Util/TestDox/</path>
    <filename>CliTestDoxPrinterColorTest_8php</filename>
    <class kind="class">PHPUnit::Util::TestDox::CliTestDoxPrinterColorTest</class>
    <namespace>PHPUnit::Util::TestDox</namespace>
  </compound>
  <compound kind="file">
    <name>CliTestDoxPrinterTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Util/TestDox/</path>
    <filename>CliTestDoxPrinterTest_8php</filename>
    <class kind="class">PHPUnit::Util::TestDox::CliTestDoxPrinterTest</class>
    <namespace>PHPUnit::Util::TestDox</namespace>
  </compound>
  <compound kind="file">
    <name>NamePrettifierTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Util/TestDox/</path>
    <filename>NamePrettifierTest_8php</filename>
    <class kind="class">PHPUnit::Util::TestDox::NamePrettifierTest</class>
    <namespace>PHPUnit::Util::TestDox</namespace>
  </compound>
  <compound kind="file">
    <name>XDebugFilterScriptGeneratorTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/phpunit/phpunit/tests/unit/Util/</path>
    <filename>XDebugFilterScriptGeneratorTest_8php</filename>
    <class kind="class">PHPUnit::Util::XDebugFilterScriptGeneratorTest</class>
    <namespace>PHPUnit::Util</namespace>
  </compound>
  <compound kind="file">
    <name>Wizard.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/code-unit-reverse-lookup/src/</path>
    <filename>Wizard_8php</filename>
    <class kind="class">SebastianBergmann::CodeUnitReverseLookup::Wizard</class>
    <namespace>SebastianBergmann::CodeUnitReverseLookup</namespace>
  </compound>
  <compound kind="file">
    <name>WizardTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/code-unit-reverse-lookup/tests/</path>
    <filename>WizardTest_8php</filename>
    <class kind="class">SebastianBergmann::CodeUnitReverseLookup::WizardTest</class>
    <namespace>SebastianBergmann::CodeUnitReverseLookup</namespace>
  </compound>
  <compound kind="file">
    <name>ArrayComparator.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/comparator/src/</path>
    <filename>ArrayComparator_8php</filename>
    <class kind="class">SebastianBergmann::Comparator::ArrayComparator</class>
    <namespace>SebastianBergmann::Comparator</namespace>
  </compound>
  <compound kind="file">
    <name>Comparator.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/comparator/src/</path>
    <filename>Comparator_8php</filename>
    <class kind="class">SebastianBergmann::Comparator::Comparator</class>
    <namespace>SebastianBergmann::Comparator</namespace>
  </compound>
  <compound kind="file">
    <name>ComparisonFailure.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/comparator/src/</path>
    <filename>ComparisonFailure_8php</filename>
    <class kind="class">SebastianBergmann::Comparator::ComparisonFailure</class>
    <namespace>SebastianBergmann::Comparator</namespace>
  </compound>
  <compound kind="file">
    <name>DateTimeComparator.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/comparator/src/</path>
    <filename>DateTimeComparator_8php</filename>
    <class kind="class">SebastianBergmann::Comparator::DateTimeComparator</class>
    <namespace>SebastianBergmann::Comparator</namespace>
  </compound>
  <compound kind="file">
    <name>DOMNodeComparator.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/comparator/src/</path>
    <filename>DOMNodeComparator_8php</filename>
    <class kind="class">SebastianBergmann::Comparator::DOMNodeComparator</class>
    <namespace>SebastianBergmann::Comparator</namespace>
  </compound>
  <compound kind="file">
    <name>DoubleComparator.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/comparator/src/</path>
    <filename>DoubleComparator_8php</filename>
    <class kind="class">SebastianBergmann::Comparator::DoubleComparator</class>
    <namespace>SebastianBergmann::Comparator</namespace>
  </compound>
  <compound kind="file">
    <name>ExceptionComparator.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/comparator/src/</path>
    <filename>ExceptionComparator_8php</filename>
    <class kind="class">SebastianBergmann::Comparator::ExceptionComparator</class>
    <namespace>SebastianBergmann::Comparator</namespace>
  </compound>
  <compound kind="file">
    <name>MockObjectComparator.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/comparator/src/</path>
    <filename>MockObjectComparator_8php</filename>
    <class kind="class">SebastianBergmann::Comparator::MockObjectComparator</class>
    <namespace>SebastianBergmann::Comparator</namespace>
  </compound>
  <compound kind="file">
    <name>NumericComparator.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/comparator/src/</path>
    <filename>NumericComparator_8php</filename>
    <class kind="class">SebastianBergmann::Comparator::NumericComparator</class>
    <namespace>SebastianBergmann::Comparator</namespace>
  </compound>
  <compound kind="file">
    <name>ObjectComparator.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/comparator/src/</path>
    <filename>ObjectComparator_8php</filename>
    <class kind="class">SebastianBergmann::Comparator::ObjectComparator</class>
    <namespace>SebastianBergmann::Comparator</namespace>
  </compound>
  <compound kind="file">
    <name>ResourceComparator.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/comparator/src/</path>
    <filename>ResourceComparator_8php</filename>
    <class kind="class">SebastianBergmann::Comparator::ResourceComparator</class>
    <namespace>SebastianBergmann::Comparator</namespace>
  </compound>
  <compound kind="file">
    <name>ScalarComparator.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/comparator/src/</path>
    <filename>ScalarComparator_8php</filename>
    <class kind="class">SebastianBergmann::Comparator::ScalarComparator</class>
    <namespace>SebastianBergmann::Comparator</namespace>
  </compound>
  <compound kind="file">
    <name>SplObjectStorageComparator.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/comparator/src/</path>
    <filename>SplObjectStorageComparator_8php</filename>
    <class kind="class">SebastianBergmann::Comparator::SplObjectStorageComparator</class>
    <namespace>SebastianBergmann::Comparator</namespace>
  </compound>
  <compound kind="file">
    <name>TypeComparator.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/comparator/src/</path>
    <filename>TypeComparator_8php</filename>
    <class kind="class">SebastianBergmann::Comparator::TypeComparator</class>
    <namespace>SebastianBergmann::Comparator</namespace>
  </compound>
  <compound kind="file">
    <name>TestClass.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/comparator/tests/_fixture/</path>
    <filename>TestClass_8php</filename>
    <class kind="class">SebastianBergmann::Comparator::TestClass</class>
    <namespace>SebastianBergmann::Comparator</namespace>
  </compound>
  <compound kind="file">
    <name>TestClassComparator.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/comparator/tests/_fixture/</path>
    <filename>TestClassComparator_8php</filename>
    <class kind="class">SebastianBergmann::Comparator::TestClassComparator</class>
    <namespace>SebastianBergmann::Comparator</namespace>
  </compound>
  <compound kind="file">
    <name>ArrayComparatorTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/comparator/tests/</path>
    <filename>ArrayComparatorTest_8php</filename>
    <class kind="class">SebastianBergmann::Comparator::ArrayComparatorTest</class>
    <namespace>SebastianBergmann::Comparator</namespace>
  </compound>
  <compound kind="file">
    <name>ComparisonFailureTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/comparator/tests/</path>
    <filename>ComparisonFailureTest_8php</filename>
    <class kind="class">SebastianBergmann::Comparator::ComparisonFailureTest</class>
    <namespace>SebastianBergmann::Comparator</namespace>
  </compound>
  <compound kind="file">
    <name>DateTimeComparatorTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/comparator/tests/</path>
    <filename>DateTimeComparatorTest_8php</filename>
    <class kind="class">SebastianBergmann::Comparator::DateTimeComparatorTest</class>
    <namespace>SebastianBergmann::Comparator</namespace>
  </compound>
  <compound kind="file">
    <name>DOMNodeComparatorTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/comparator/tests/</path>
    <filename>DOMNodeComparatorTest_8php</filename>
    <class kind="class">SebastianBergmann::Comparator::DOMNodeComparatorTest</class>
    <namespace>SebastianBergmann::Comparator</namespace>
  </compound>
  <compound kind="file">
    <name>DoubleComparatorTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/comparator/tests/</path>
    <filename>DoubleComparatorTest_8php</filename>
    <class kind="class">SebastianBergmann::Comparator::DoubleComparatorTest</class>
    <namespace>SebastianBergmann::Comparator</namespace>
  </compound>
  <compound kind="file">
    <name>ExceptionComparatorTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/comparator/tests/</path>
    <filename>ExceptionComparatorTest_8php</filename>
    <class kind="class">SebastianBergmann::Comparator::ExceptionComparatorTest</class>
    <namespace>SebastianBergmann::Comparator</namespace>
  </compound>
  <compound kind="file">
    <name>MockObjectComparatorTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/comparator/tests/</path>
    <filename>MockObjectComparatorTest_8php</filename>
    <class kind="class">SebastianBergmann::Comparator::MockObjectComparatorTest</class>
    <namespace>SebastianBergmann::Comparator</namespace>
  </compound>
  <compound kind="file">
    <name>NumericComparatorTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/comparator/tests/</path>
    <filename>NumericComparatorTest_8php</filename>
    <class kind="class">SebastianBergmann::Comparator::NumericComparatorTest</class>
    <namespace>SebastianBergmann::Comparator</namespace>
  </compound>
  <compound kind="file">
    <name>ObjectComparatorTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/comparator/tests/</path>
    <filename>ObjectComparatorTest_8php</filename>
    <class kind="class">SebastianBergmann::Comparator::ObjectComparatorTest</class>
    <namespace>SebastianBergmann::Comparator</namespace>
  </compound>
  <compound kind="file">
    <name>ResourceComparatorTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/comparator/tests/</path>
    <filename>ResourceComparatorTest_8php</filename>
    <class kind="class">SebastianBergmann::Comparator::ResourceComparatorTest</class>
    <namespace>SebastianBergmann::Comparator</namespace>
  </compound>
  <compound kind="file">
    <name>ScalarComparatorTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/comparator/tests/</path>
    <filename>ScalarComparatorTest_8php</filename>
    <class kind="class">SebastianBergmann::Comparator::ScalarComparatorTest</class>
    <namespace>SebastianBergmann::Comparator</namespace>
  </compound>
  <compound kind="file">
    <name>SplObjectStorageComparatorTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/comparator/tests/</path>
    <filename>SplObjectStorageComparatorTest_8php</filename>
    <class kind="class">SebastianBergmann::Comparator::SplObjectStorageComparatorTest</class>
    <namespace>SebastianBergmann::Comparator</namespace>
  </compound>
  <compound kind="file">
    <name>TypeComparatorTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/comparator/tests/</path>
    <filename>TypeComparatorTest_8php</filename>
    <class kind="class">SebastianBergmann::Comparator::TypeComparatorTest</class>
    <namespace>SebastianBergmann::Comparator</namespace>
  </compound>
  <compound kind="file">
    <name>Chunk.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/diff/src/</path>
    <filename>Chunk_8php</filename>
    <class kind="class">SebastianBergmann::Diff::Chunk</class>
    <namespace>SebastianBergmann::Diff</namespace>
  </compound>
  <compound kind="file">
    <name>Diff.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/diff/src/</path>
    <filename>Diff_8php</filename>
    <class kind="class">SebastianBergmann::Diff::Diff</class>
    <namespace>SebastianBergmann::Diff</namespace>
  </compound>
  <compound kind="file">
    <name>Differ.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/diff/src/</path>
    <filename>Differ_8php</filename>
    <class kind="class">SebastianBergmann::Diff::Differ</class>
    <namespace>SebastianBergmann::Diff</namespace>
  </compound>
  <compound kind="file">
    <name>ConfigurationException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/diff/src/Exception/</path>
    <filename>ConfigurationException_8php</filename>
    <class kind="class">SebastianBergmann::Diff::ConfigurationException</class>
    <namespace>SebastianBergmann::Diff</namespace>
  </compound>
  <compound kind="file">
    <name>Line.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/diff/src/</path>
    <filename>Line_8php</filename>
    <class kind="class">SebastianBergmann::Diff::Line</class>
    <namespace>SebastianBergmann::Diff</namespace>
  </compound>
  <compound kind="file">
    <name>LongestCommonSubsequenceCalculator.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/diff/src/</path>
    <filename>LongestCommonSubsequenceCalculator_8php</filename>
    <class kind="interface">SebastianBergmann::Diff::LongestCommonSubsequenceCalculator</class>
    <namespace>SebastianBergmann::Diff</namespace>
  </compound>
  <compound kind="file">
    <name>MemoryEfficientLongestCommonSubsequenceCalculator.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/diff/src/</path>
    <filename>MemoryEfficientLongestCommonSubsequenceCalculator_8php</filename>
    <class kind="class">SebastianBergmann::Diff::MemoryEfficientLongestCommonSubsequenceCalculator</class>
    <namespace>SebastianBergmann::Diff</namespace>
  </compound>
  <compound kind="file">
    <name>AbstractChunkOutputBuilder.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/diff/src/Output/</path>
    <filename>AbstractChunkOutputBuilder_8php</filename>
    <class kind="class">SebastianBergmann::Diff::Output::AbstractChunkOutputBuilder</class>
    <namespace>SebastianBergmann::Diff::Output</namespace>
  </compound>
  <compound kind="file">
    <name>DiffOnlyOutputBuilder.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/diff/src/Output/</path>
    <filename>DiffOnlyOutputBuilder_8php</filename>
    <class kind="class">SebastianBergmann::Diff::Output::DiffOnlyOutputBuilder</class>
    <namespace>SebastianBergmann::Diff::Output</namespace>
  </compound>
  <compound kind="file">
    <name>DiffOutputBuilderInterface.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/diff/src/Output/</path>
    <filename>DiffOutputBuilderInterface_8php</filename>
    <class kind="interface">SebastianBergmann::Diff::Output::DiffOutputBuilderInterface</class>
    <namespace>SebastianBergmann::Diff::Output</namespace>
  </compound>
  <compound kind="file">
    <name>StrictUnifiedDiffOutputBuilder.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/diff/src/Output/</path>
    <filename>StrictUnifiedDiffOutputBuilder_8php</filename>
    <class kind="class">SebastianBergmann::Diff::Output::StrictUnifiedDiffOutputBuilder</class>
    <namespace>SebastianBergmann::Diff::Output</namespace>
  </compound>
  <compound kind="file">
    <name>UnifiedDiffOutputBuilder.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/diff/src/Output/</path>
    <filename>UnifiedDiffOutputBuilder_8php</filename>
    <class kind="class">SebastianBergmann::Diff::Output::UnifiedDiffOutputBuilder</class>
    <namespace>SebastianBergmann::Diff::Output</namespace>
  </compound>
  <compound kind="file">
    <name>Parser.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/diff/src/</path>
    <filename>Parser_8php</filename>
    <class kind="class">SebastianBergmann::Diff::Parser</class>
    <namespace>SebastianBergmann::Diff</namespace>
  </compound>
  <compound kind="file">
    <name>TimeEfficientLongestCommonSubsequenceCalculator.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/diff/src/</path>
    <filename>TimeEfficientLongestCommonSubsequenceCalculator_8php</filename>
    <class kind="class">SebastianBergmann::Diff::TimeEfficientLongestCommonSubsequenceCalculator</class>
    <namespace>SebastianBergmann::Diff</namespace>
  </compound>
  <compound kind="file">
    <name>ChunkTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/diff/tests/</path>
    <filename>ChunkTest_8php</filename>
    <class kind="class">SebastianBergmann::Diff::ChunkTest</class>
    <namespace>SebastianBergmann::Diff</namespace>
  </compound>
  <compound kind="file">
    <name>DifferTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/diff/tests/</path>
    <filename>DifferTest_8php</filename>
    <class kind="class">SebastianBergmann::Diff::DifferTest</class>
    <namespace>SebastianBergmann::Diff</namespace>
  </compound>
  <compound kind="file">
    <name>DiffTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/diff/tests/</path>
    <filename>DiffTest_8php</filename>
    <class kind="class">SebastianBergmann::Diff::DiffTest</class>
    <namespace>SebastianBergmann::Diff</namespace>
  </compound>
  <compound kind="file">
    <name>ConfigurationExceptionTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/diff/tests/Exception/</path>
    <filename>ConfigurationExceptionTest_8php</filename>
    <class kind="class">SebastianBergmann::Diff::ConfigurationExceptionTest</class>
    <namespace>SebastianBergmann::Diff</namespace>
  </compound>
  <compound kind="file">
    <name>patch.txt</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/diff/tests/fixtures/</path>
    <filename>patch_8txt</filename>
    <member kind="variable">
      <type>diff git a Foo php b Foo php index abcdefg abcdefh a Foo php b Foo</type>
      <name>php</name>
      <anchorfile>patch_8txt.html</anchorfile>
      <anchor>a3f9992ab8fa942ed02faa63682c3a84c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>diff git a Foo php b Foo php index abcdefg abcdefh a Foo php b Foo class Foo const</type>
      <name>ONE</name>
      <anchorfile>patch_8txt.html</anchorfile>
      <anchor>a5a527f9b5b90beb5c83ab87ededf9eed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>TWO</name>
      <anchorfile>patch_8txt.html</anchorfile>
      <anchor>ad9cf7b495bed923488ea995ef33e261b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>THREE</name>
      <anchorfile>patch_8txt.html</anchorfile>
      <anchor>aa6fb2f0e892d78368c66f85998d1558f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>FOUR</name>
      <anchorfile>patch_8txt.html</anchorfile>
      <anchor>a19583122157805fd24024fd310a7c508</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>patch2.txt</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/diff/tests/fixtures/</path>
    <filename>patch2_8txt</filename>
    <member kind="function">
      <type>class Foo public function</type>
      <name>doSomething</name>
      <anchorfile>patch2_8txt.html</anchorfile>
      <anchor>aadf171fadd3bf64c6c3283b813d58d2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>diff git a Foo php b Foo php index abcdefg abcdefh a Foo php b Foo</type>
      <name>php</name>
      <anchorfile>patch2_8txt.html</anchorfile>
      <anchor>a3f9992ab8fa942ed02faa63682c3a84c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>diff git a Foo php b Foo php index abcdefg abcdefh a Foo php b Foo class Foo const</type>
      <name>ONE</name>
      <anchorfile>patch2_8txt.html</anchorfile>
      <anchor>a5a527f9b5b90beb5c83ab87ededf9eed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>TWO</name>
      <anchorfile>patch2_8txt.html</anchorfile>
      <anchor>ad9cf7b495bed923488ea995ef33e261b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>THREE</name>
      <anchorfile>patch2_8txt.html</anchorfile>
      <anchor>aa6fb2f0e892d78368c66f85998d1558f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>FOUR</name>
      <anchorfile>patch2_8txt.html</anchorfile>
      <anchor>a19583122157805fd24024fd310a7c508</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>class Foo const</type>
      <name>A</name>
      <anchorfile>patch2_8txt.html</anchorfile>
      <anchor>a9d67257ee3b9f663cb722c44415ca719</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>B</name>
      <anchorfile>patch2_8txt.html</anchorfile>
      <anchor>a50a4cbdf63793e6a4650e0d8eebdbef3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>C</name>
      <anchorfile>patch2_8txt.html</anchorfile>
      <anchor>af33f4e85482e7ba78af07ce19d85cea8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>D</name>
      <anchorfile>patch2_8txt.html</anchorfile>
      <anchor>a8a281b6de714bae454cfb8cb8c3d49af</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>1_a.txt</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/diff/tests/fixtures/UnifiedDiffAssertTraitIntegrationTest/</path>
    <filename>1__a_8txt</filename>
  </compound>
  <compound kind="file">
    <name>1_b.txt</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/diff/tests/fixtures/UnifiedDiffAssertTraitIntegrationTest/</path>
    <filename>1__b_8txt</filename>
  </compound>
  <compound kind="file">
    <name>2_a.txt</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/diff/tests/fixtures/UnifiedDiffAssertTraitIntegrationTest/</path>
    <filename>2__a_8txt</filename>
  </compound>
  <compound kind="file">
    <name>2_b.txt</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/diff/tests/fixtures/UnifiedDiffAssertTraitIntegrationTest/</path>
    <filename>2__b_8txt</filename>
  </compound>
  <compound kind="file">
    <name>LineTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/diff/tests/</path>
    <filename>LineTest_8php</filename>
    <class kind="class">SebastianBergmann::Diff::LineTest</class>
    <namespace>SebastianBergmann::Diff</namespace>
  </compound>
  <compound kind="file">
    <name>LongestCommonSubsequenceTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/diff/tests/</path>
    <filename>LongestCommonSubsequenceTest_8php</filename>
    <class kind="class">SebastianBergmann::Diff::LongestCommonSubsequenceTest</class>
    <namespace>SebastianBergmann::Diff</namespace>
  </compound>
  <compound kind="file">
    <name>MemoryEfficientImplementationTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/diff/tests/</path>
    <filename>MemoryEfficientImplementationTest_8php</filename>
    <class kind="class">SebastianBergmann::Diff::MemoryEfficientImplementationTest</class>
    <namespace>SebastianBergmann::Diff</namespace>
  </compound>
  <compound kind="file">
    <name>AbstractChunkOutputBuilderTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/diff/tests/Output/</path>
    <filename>AbstractChunkOutputBuilderTest_8php</filename>
    <class kind="class">SebastianBergmann::Diff::Output::AbstractChunkOutputBuilderTest</class>
    <namespace>SebastianBergmann::Diff::Output</namespace>
  </compound>
  <compound kind="file">
    <name>DiffOnlyOutputBuilderTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/diff/tests/Output/</path>
    <filename>DiffOnlyOutputBuilderTest_8php</filename>
    <class kind="class">SebastianBergmann::Diff::Output::DiffOnlyOutputBuilderTest</class>
    <namespace>SebastianBergmann::Diff::Output</namespace>
  </compound>
  <compound kind="file">
    <name>StrictUnifiedDiffOutputBuilderIntegrationTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/diff/tests/Output/Integration/</path>
    <filename>StrictUnifiedDiffOutputBuilderIntegrationTest_8php</filename>
    <class kind="class">SebastianBergmann::Diff::Output::StrictUnifiedDiffOutputBuilderIntegrationTest</class>
    <namespace>SebastianBergmann::Diff::Output</namespace>
  </compound>
  <compound kind="file">
    <name>UnifiedDiffOutputBuilderIntegrationTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/diff/tests/Output/Integration/</path>
    <filename>UnifiedDiffOutputBuilderIntegrationTest_8php</filename>
    <class kind="class">SebastianBergmann::Diff::Output::UnifiedDiffOutputBuilderIntegrationTest</class>
    <namespace>SebastianBergmann::Diff::Output</namespace>
  </compound>
  <compound kind="file">
    <name>StrictUnifiedDiffOutputBuilderDataProvider.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/diff/tests/Output/</path>
    <filename>StrictUnifiedDiffOutputBuilderDataProvider_8php</filename>
    <class kind="class">SebastianBergmann::Diff::Output::StrictUnifiedDiffOutputBuilderDataProvider</class>
    <namespace>SebastianBergmann::Diff::Output</namespace>
  </compound>
  <compound kind="file">
    <name>StrictUnifiedDiffOutputBuilderTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/diff/tests/Output/</path>
    <filename>StrictUnifiedDiffOutputBuilderTest_8php</filename>
    <class kind="class">SebastianBergmann::Diff::Output::StrictUnifiedDiffOutputBuilderTest</class>
    <namespace>SebastianBergmann::Diff::Output</namespace>
  </compound>
  <compound kind="file">
    <name>UnifiedDiffOutputBuilderDataProvider.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/diff/tests/Output/</path>
    <filename>UnifiedDiffOutputBuilderDataProvider_8php</filename>
    <namespace>SebastianBergmann::Diff::Output</namespace>
  </compound>
  <compound kind="file">
    <name>UnifiedDiffOutputBuilderTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/diff/tests/Output/</path>
    <filename>UnifiedDiffOutputBuilderTest_8php</filename>
    <class kind="class">SebastianBergmann::Diff::Output::UnifiedDiffOutputBuilderTest</class>
    <namespace>SebastianBergmann::Diff::Output</namespace>
  </compound>
  <compound kind="file">
    <name>ParserTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/diff/tests/</path>
    <filename>ParserTest_8php</filename>
    <class kind="class">SebastianBergmann::Diff::ParserTest</class>
    <namespace>SebastianBergmann::Diff</namespace>
  </compound>
  <compound kind="file">
    <name>TimeEfficientImplementationTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/diff/tests/</path>
    <filename>TimeEfficientImplementationTest_8php</filename>
    <class kind="class">SebastianBergmann::Diff::TimeEfficientImplementationTest</class>
    <namespace>SebastianBergmann::Diff</namespace>
  </compound>
  <compound kind="file">
    <name>FileUtils.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/diff/tests/Utils/</path>
    <filename>FileUtils_8php</filename>
    <class kind="class">SebastianBergmann::Diff::Utils::FileUtils</class>
    <namespace>SebastianBergmann::Diff::Utils</namespace>
  </compound>
  <compound kind="file">
    <name>UnifiedDiffAssertTrait.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/diff/tests/Utils/</path>
    <filename>UnifiedDiffAssertTrait_8php</filename>
    <namespace>SebastianBergmann::Diff::Utils</namespace>
  </compound>
  <compound kind="file">
    <name>UnifiedDiffAssertTraitIntegrationTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/diff/tests/Utils/</path>
    <filename>UnifiedDiffAssertTraitIntegrationTest_8php</filename>
    <class kind="class">SebastianBergmann::Diff::Utils::UnifiedDiffAssertTraitIntegrationTest</class>
    <namespace>SebastianBergmann::Diff::Utils</namespace>
  </compound>
  <compound kind="file">
    <name>UnifiedDiffAssertTraitTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/diff/tests/Utils/</path>
    <filename>UnifiedDiffAssertTraitTest_8php</filename>
    <class kind="class">SebastianBergmann::Diff::Utils::UnifiedDiffAssertTraitTest</class>
    <namespace>SebastianBergmann::Diff::Utils</namespace>
  </compound>
  <compound kind="file">
    <name>Console.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/environment/src/</path>
    <filename>Console_8php</filename>
    <class kind="class">SebastianBergmann::Environment::Console</class>
    <namespace>SebastianBergmann::Environment</namespace>
  </compound>
  <compound kind="file">
    <name>OperatingSystem.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/environment/src/</path>
    <filename>OperatingSystem_8php</filename>
    <class kind="class">SebastianBergmann::Environment::OperatingSystem</class>
    <namespace>SebastianBergmann::Environment</namespace>
  </compound>
  <compound kind="file">
    <name>Runtime.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/environment/src/</path>
    <filename>Runtime_8php</filename>
    <class kind="class">SebastianBergmann::Environment::Runtime</class>
    <namespace>SebastianBergmann::Environment</namespace>
  </compound>
  <compound kind="file">
    <name>ConsoleTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/environment/tests/</path>
    <filename>ConsoleTest_8php</filename>
    <class kind="class">SebastianBergmann::Environment::ConsoleTest</class>
    <namespace>SebastianBergmann::Environment</namespace>
  </compound>
  <compound kind="file">
    <name>OperatingSystemTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/environment/tests/</path>
    <filename>OperatingSystemTest_8php</filename>
    <class kind="class">SebastianBergmann::Environment::OperatingSystemTest</class>
    <namespace>SebastianBergmann::Environment</namespace>
  </compound>
  <compound kind="file">
    <name>RuntimeTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/environment/tests/</path>
    <filename>RuntimeTest_8php</filename>
    <class kind="class">SebastianBergmann::Environment::RuntimeTest</class>
    <namespace>SebastianBergmann::Environment</namespace>
  </compound>
  <compound kind="file">
    <name>Exporter.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/exporter/src/</path>
    <filename>Exporter_8php</filename>
    <class kind="class">SebastianBergmann::Exporter::Exporter</class>
    <namespace>SebastianBergmann::Exporter</namespace>
  </compound>
  <compound kind="file">
    <name>ExporterTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/exporter/tests/</path>
    <filename>ExporterTest_8php</filename>
    <class kind="class">SebastianBergmann::Exporter::ExporterTest</class>
    <namespace>SebastianBergmann::Exporter</namespace>
  </compound>
  <compound kind="file">
    <name>CodeExporter.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/global-state/src/</path>
    <filename>CodeExporter_8php</filename>
    <class kind="class">SebastianBergmann::GlobalState::CodeExporter</class>
    <namespace>SebastianBergmann::GlobalState</namespace>
  </compound>
  <compound kind="file">
    <name>Restorer.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/global-state/src/</path>
    <filename>Restorer_8php</filename>
    <class kind="class">SebastianBergmann::GlobalState::Restorer</class>
    <namespace>SebastianBergmann::GlobalState</namespace>
  </compound>
  <compound kind="file">
    <name>Snapshot.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/global-state/src/</path>
    <filename>Snapshot_8php</filename>
    <class kind="class">SebastianBergmann::GlobalState::Snapshot</class>
    <namespace>SebastianBergmann::GlobalState</namespace>
  </compound>
  <compound kind="file">
    <name>BlacklistedChildClass.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/global-state/tests/_fixture/</path>
    <filename>BlacklistedChildClass_8php</filename>
    <class kind="class">SebastianBergmann::GlobalState::TestFixture::BlacklistedChildClass</class>
    <namespace>SebastianBergmann::GlobalState::TestFixture</namespace>
  </compound>
  <compound kind="file">
    <name>BlacklistedClass.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/global-state/tests/_fixture/</path>
    <filename>BlacklistedClass_8php</filename>
    <class kind="class">SebastianBergmann::GlobalState::TestFixture::BlacklistedClass</class>
    <namespace>SebastianBergmann::GlobalState::TestFixture</namespace>
  </compound>
  <compound kind="file">
    <name>BlacklistedImplementor.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/global-state/tests/_fixture/</path>
    <filename>BlacklistedImplementor_8php</filename>
    <class kind="class">SebastianBergmann::GlobalState::TestFixture::BlacklistedImplementor</class>
    <namespace>SebastianBergmann::GlobalState::TestFixture</namespace>
  </compound>
  <compound kind="file">
    <name>BlacklistedInterface.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/global-state/tests/_fixture/</path>
    <filename>BlacklistedInterface_8php</filename>
    <class kind="interface">SebastianBergmann::GlobalState::TestFixture::BlacklistedInterface</class>
    <namespace>SebastianBergmann::GlobalState::TestFixture</namespace>
  </compound>
  <compound kind="file">
    <name>SnapshotClass.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/global-state/tests/_fixture/</path>
    <filename>SnapshotClass_8php</filename>
    <class kind="class">SebastianBergmann::GlobalState::TestFixture::SnapshotClass</class>
    <namespace>SebastianBergmann::GlobalState::TestFixture</namespace>
  </compound>
  <compound kind="file">
    <name>SnapshotDomDocument.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/global-state/tests/_fixture/</path>
    <filename>SnapshotDomDocument_8php</filename>
    <class kind="class">SebastianBergmann::GlobalState::TestFixture::SnapshotDomDocument</class>
    <namespace>SebastianBergmann::GlobalState::TestFixture</namespace>
  </compound>
  <compound kind="file">
    <name>SnapshotFunctions.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/global-state/tests/_fixture/</path>
    <filename>SnapshotFunctions_8php</filename>
    <namespace>SebastianBergmann::GlobalState::TestFixture</namespace>
    <member kind="function">
      <type></type>
      <name>snapshotFunction</name>
      <anchorfile>namespaceSebastianBergmann_1_1GlobalState_1_1TestFixture.html</anchorfile>
      <anchor>aa9a1e3ca77bd927a1daf63ba6ab56fdf</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SnapshotTrait.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/global-state/tests/_fixture/</path>
    <filename>SnapshotTrait_8php</filename>
    <namespace>SebastianBergmann::GlobalState::TestFixture</namespace>
  </compound>
  <compound kind="file">
    <name>BlacklistTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/global-state/tests/</path>
    <filename>BlacklistTest_8php</filename>
    <class kind="class">SebastianBergmann::GlobalState::BlacklistTest</class>
    <namespace>SebastianBergmann::GlobalState</namespace>
  </compound>
  <compound kind="file">
    <name>CodeExporterTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/global-state/tests/</path>
    <filename>CodeExporterTest_8php</filename>
    <class kind="class">SebastianBergmann::GlobalState::CodeExporterTest</class>
    <namespace>SebastianBergmann::GlobalState</namespace>
  </compound>
  <compound kind="file">
    <name>RestorerTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/global-state/tests/</path>
    <filename>RestorerTest_8php</filename>
    <class kind="class">SebastianBergmann::GlobalState::RestorerTest</class>
    <namespace>SebastianBergmann::GlobalState</namespace>
  </compound>
  <compound kind="file">
    <name>SnapshotTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/global-state/tests/</path>
    <filename>SnapshotTest_8php</filename>
    <class kind="class">SebastianBergmann::GlobalState::SnapshotTest</class>
    <namespace>SebastianBergmann::GlobalState</namespace>
  </compound>
  <compound kind="file">
    <name>Enumerator.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/object-enumerator/src/</path>
    <filename>Enumerator_8php</filename>
    <class kind="class">SebastianBergmann::ObjectEnumerator::Enumerator</class>
    <namespace>SebastianBergmann::ObjectEnumerator</namespace>
  </compound>
  <compound kind="file">
    <name>ExceptionThrower.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/object-enumerator/tests/_fixture/</path>
    <filename>ExceptionThrower_8php</filename>
    <class kind="class">SebastianBergmann::ObjectEnumerator::Fixtures::ExceptionThrower</class>
    <namespace>SebastianBergmann::ObjectEnumerator::Fixtures</namespace>
  </compound>
  <compound kind="file">
    <name>EnumeratorTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/object-enumerator/tests/</path>
    <filename>EnumeratorTest_8php</filename>
    <class kind="class">SebastianBergmann::ObjectEnumerator::EnumeratorTest</class>
    <namespace>SebastianBergmann::ObjectEnumerator</namespace>
  </compound>
  <compound kind="file">
    <name>ObjectReflector.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/object-reflector/src/</path>
    <filename>ObjectReflector_8php</filename>
    <class kind="class">SebastianBergmann::ObjectReflector::ObjectReflector</class>
    <namespace>SebastianBergmann::ObjectReflector</namespace>
  </compound>
  <compound kind="file">
    <name>ClassWithIntegerAttributeName.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/object-reflector/tests/_fixture/</path>
    <filename>ClassWithIntegerAttributeName_8php</filename>
    <class kind="class">SebastianBergmann::ObjectReflector::TestFixture::ClassWithIntegerAttributeName</class>
    <namespace>SebastianBergmann::ObjectReflector::TestFixture</namespace>
  </compound>
  <compound kind="file">
    <name>ObjectReflectorTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/object-reflector/tests/</path>
    <filename>ObjectReflectorTest_8php</filename>
    <class kind="class">SebastianBergmann::ObjectReflector::ObjectReflectorTest</class>
    <namespace>SebastianBergmann::ObjectReflector</namespace>
  </compound>
  <compound kind="file">
    <name>generate.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/resource-operations/build/</path>
    <filename>generate_8php</filename>
    <member kind="variable">
      <type></type>
      <name>$functions</name>
      <anchorfile>generate_8php.html</anchorfile>
      <anchor>aa75daea491817f3b64daa2f51128bcdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$resourceFunctions</name>
      <anchorfile>generate_8php.html</anchorfile>
      <anchor>ae71c311d7b5d9517ed856aa11a44cde7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$buffer</name>
      <anchorfile>generate_8php.html</anchorfile>
      <anchor>a69d2dd75c0bcc25579e20b708d4a4b09</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ResourceOperations.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/resource-operations/src/</path>
    <filename>ResourceOperations_8php</filename>
    <class kind="class">SebastianBergmann::ResourceOperations::ResourceOperations</class>
    <namespace>SebastianBergmann::ResourceOperations</namespace>
  </compound>
  <compound kind="file">
    <name>ResourceOperationsTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/resource-operations/tests/</path>
    <filename>ResourceOperationsTest_8php</filename>
    <class kind="class">SebastianBergmann::ResourceOperations::ResourceOperationsTest</class>
    <namespace>SebastianBergmann::ResourceOperations</namespace>
  </compound>
  <compound kind="file">
    <name>CallableType.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/type/src/</path>
    <filename>CallableType_8php</filename>
    <class kind="class">SebastianBergmann::Type::CallableType</class>
    <namespace>SebastianBergmann::Type</namespace>
  </compound>
  <compound kind="file">
    <name>GenericObjectType.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/type/src/</path>
    <filename>GenericObjectType_8php</filename>
    <class kind="class">SebastianBergmann::Type::GenericObjectType</class>
    <namespace>SebastianBergmann::Type</namespace>
  </compound>
  <compound kind="file">
    <name>IterableType.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/type/src/</path>
    <filename>IterableType_8php</filename>
    <class kind="class">SebastianBergmann::Type::IterableType</class>
    <namespace>SebastianBergmann::Type</namespace>
  </compound>
  <compound kind="file">
    <name>NullType.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/type/src/</path>
    <filename>NullType_8php</filename>
    <class kind="class">SebastianBergmann::Type::NullType</class>
    <namespace>SebastianBergmann::Type</namespace>
  </compound>
  <compound kind="file">
    <name>ObjectType.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/type/src/</path>
    <filename>ObjectType_8php</filename>
    <class kind="class">SebastianBergmann::Type::ObjectType</class>
    <namespace>SebastianBergmann::Type</namespace>
  </compound>
  <compound kind="file">
    <name>SimpleType.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/type/src/</path>
    <filename>SimpleType_8php</filename>
    <class kind="class">SebastianBergmann::Type::SimpleType</class>
    <namespace>SebastianBergmann::Type</namespace>
  </compound>
  <compound kind="file">
    <name>TypeName.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/type/src/</path>
    <filename>TypeName_8php</filename>
    <class kind="class">SebastianBergmann::Type::TypeName</class>
    <namespace>SebastianBergmann::Type</namespace>
  </compound>
  <compound kind="file">
    <name>UnknownType.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/type/src/</path>
    <filename>UnknownType_8php</filename>
    <class kind="class">SebastianBergmann::Type::UnknownType</class>
    <namespace>SebastianBergmann::Type</namespace>
  </compound>
  <compound kind="file">
    <name>VoidType.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/type/src/</path>
    <filename>VoidType_8php</filename>
    <class kind="class">SebastianBergmann::Type::VoidType</class>
    <namespace>SebastianBergmann::Type</namespace>
  </compound>
  <compound kind="file">
    <name>callback_function.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/type/tests/_fixture/</path>
    <filename>callback__function_8php</filename>
    <namespace>SebastianBergmann::Type::TestFixture</namespace>
    <member kind="function">
      <type></type>
      <name>callback_function</name>
      <anchorfile>namespaceSebastianBergmann_1_1Type_1_1TestFixture.html</anchorfile>
      <anchor>ac23482e44011162845795c3186819cda</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ClassWithCallbackMethods.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/type/tests/_fixture/</path>
    <filename>ClassWithCallbackMethods_8php</filename>
    <class kind="class">SebastianBergmann::Type::TestFixture::ClassWithCallbackMethods</class>
    <namespace>SebastianBergmann::Type::TestFixture</namespace>
  </compound>
  <compound kind="file">
    <name>ClassWithInvokeMethod.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/type/tests/_fixture/</path>
    <filename>ClassWithInvokeMethod_8php</filename>
    <class kind="class">SebastianBergmann::Type::TestFixture::ClassWithInvokeMethod</class>
    <namespace>SebastianBergmann::Type::TestFixture</namespace>
  </compound>
  <compound kind="file">
    <name>CallableTypeTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/type/tests/unit/</path>
    <filename>CallableTypeTest_8php</filename>
    <class kind="class">SebastianBergmann::Type::CallableTypeTest</class>
    <namespace>SebastianBergmann::Type</namespace>
  </compound>
  <compound kind="file">
    <name>GenericObjectTypeTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/type/tests/unit/</path>
    <filename>GenericObjectTypeTest_8php</filename>
    <class kind="class">SebastianBergmann::Type::GenericObjectTypeTest</class>
    <namespace>SebastianBergmann::Type</namespace>
  </compound>
  <compound kind="file">
    <name>IterableTypeTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/type/tests/unit/</path>
    <filename>IterableTypeTest_8php</filename>
    <class kind="class">SebastianBergmann::Type::IterableTypeTest</class>
    <namespace>SebastianBergmann::Type</namespace>
  </compound>
  <compound kind="file">
    <name>NullTypeTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/type/tests/unit/</path>
    <filename>NullTypeTest_8php</filename>
    <class kind="class">SebastianBergmann::Type::NullTypeTest</class>
    <namespace>SebastianBergmann::Type</namespace>
  </compound>
  <compound kind="file">
    <name>ObjectTypeTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/type/tests/unit/</path>
    <filename>ObjectTypeTest_8php</filename>
    <class kind="class">SebastianBergmann::Type::ObjectTypeTest</class>
    <namespace>SebastianBergmann::Type</namespace>
  </compound>
  <compound kind="file">
    <name>SimpleTypeTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/type/tests/unit/</path>
    <filename>SimpleTypeTest_8php</filename>
    <class kind="class">SebastianBergmann::Type::SimpleTypeTest</class>
    <namespace>SebastianBergmann::Type</namespace>
  </compound>
  <compound kind="file">
    <name>TypeNameTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/type/tests/unit/</path>
    <filename>TypeNameTest_8php</filename>
    <class kind="class">SebastianBergmann::Type::TypeNameTest</class>
    <namespace>SebastianBergmann::Type</namespace>
  </compound>
  <compound kind="file">
    <name>TypeTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/type/tests/unit/</path>
    <filename>TypeTest_8php</filename>
    <class kind="class">SebastianBergmann::Type::TypeTest</class>
    <namespace>SebastianBergmann::Type</namespace>
  </compound>
  <compound kind="file">
    <name>UnknownTypeTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/type/tests/unit/</path>
    <filename>UnknownTypeTest_8php</filename>
    <class kind="class">SebastianBergmann::Type::UnknownTypeTest</class>
    <namespace>SebastianBergmann::Type</namespace>
  </compound>
  <compound kind="file">
    <name>VoidTypeTest.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/sebastian/type/tests/unit/</path>
    <filename>VoidTypeTest_8php</filename>
    <class kind="class">SebastianBergmann::Type::VoidTypeTest</class>
    <namespace>SebastianBergmann::Type</namespace>
  </compound>
  <compound kind="file">
    <name>Ctype.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/symfony/polyfill-ctype/</path>
    <filename>Ctype_8php</filename>
    <class kind="class">Symfony::Polyfill::Ctype::Ctype</class>
    <namespace>Symfony::Polyfill::Ctype</namespace>
  </compound>
  <compound kind="file">
    <name>NamespaceUri.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/theseer/tokenizer/src/</path>
    <filename>NamespaceUri_8php</filename>
    <class kind="class">TheSeer::Tokenizer::NamespaceUri</class>
    <namespace>TheSeer::Tokenizer</namespace>
  </compound>
  <compound kind="file">
    <name>NamespaceUriException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/theseer/tokenizer/src/</path>
    <filename>NamespaceUriException_8php</filename>
    <class kind="class">TheSeer::Tokenizer::NamespaceUriException</class>
    <namespace>TheSeer::Tokenizer</namespace>
  </compound>
  <compound kind="file">
    <name>TokenCollection.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/theseer/tokenizer/src/</path>
    <filename>TokenCollection_8php</filename>
    <class kind="class">TheSeer::Tokenizer::TokenCollection</class>
    <namespace>TheSeer::Tokenizer</namespace>
  </compound>
  <compound kind="file">
    <name>TokenCollectionException.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/theseer/tokenizer/src/</path>
    <filename>TokenCollectionException_8php</filename>
    <class kind="class">TheSeer::Tokenizer::TokenCollectionException</class>
    <namespace>TheSeer::Tokenizer</namespace>
  </compound>
  <compound kind="file">
    <name>Tokenizer.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/theseer/tokenizer/src/</path>
    <filename>Tokenizer_8php</filename>
    <class kind="class">TheSeer::Tokenizer::Tokenizer</class>
    <namespace>TheSeer::Tokenizer</namespace>
  </compound>
  <compound kind="file">
    <name>XMLSerializer.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/theseer/tokenizer/src/</path>
    <filename>XMLSerializer_8php</filename>
    <class kind="class">TheSeer::Tokenizer::XMLSerializer</class>
    <namespace>TheSeer::Tokenizer</namespace>
  </compound>
  <compound kind="file">
    <name>Mixin.php</name>
    <path>/home/fmizzell/Workspace/file-fetcher/vendor/webmozart/assert/src/</path>
    <filename>Mixin_8php</filename>
    <class kind="interface">Webmozart::Assert::Mixin</class>
    <namespace>Webmozart::Assert</namespace>
  </compound>
  <compound kind="class">
    <name>DeepCopy::f001::A</name>
    <filename>classDeepCopy_1_1f001_1_1A.html</filename>
    <member kind="function">
      <type></type>
      <name>getAProp</name>
      <anchorfile>classDeepCopy_1_1f001_1_1A.html</anchorfile>
      <anchor>ac6e37e9a8166a29119b0c317d584ec91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setAProp</name>
      <anchorfile>classDeepCopy_1_1f001_1_1A.html</anchorfile>
      <anchor>a1aad5b015fcbff5f4e040b01e2de0f77</anchor>
      <arglist>($prop)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeepCopy::f006::A</name>
    <filename>classDeepCopy_1_1f006_1_1A.html</filename>
    <member kind="function">
      <type></type>
      <name>getAProp</name>
      <anchorfile>classDeepCopy_1_1f006_1_1A.html</anchorfile>
      <anchor>a46665dbe060cb43b280fa34daa45fb72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setAProp</name>
      <anchorfile>classDeepCopy_1_1f006_1_1A.html</anchorfile>
      <anchor>aa01b6df842200b59ef682b94bcabe60d</anchor>
      <arglist>($prop)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__clone</name>
      <anchorfile>classDeepCopy_1_1f006_1_1A.html</anchorfile>
      <anchor>a4215ab3b425dea63a3fdfae303949350</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$cloned</name>
      <anchorfile>classDeepCopy_1_1f006_1_1A.html</anchorfile>
      <anchor>adf1b9caeba97d8516088cf21ae159caa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeepCopy::f008::A</name>
    <filename>classDeepCopy_1_1f008_1_1A.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classDeepCopy_1_1f008_1_1A.html</anchorfile>
      <anchor>a70997d0aeb2e2f3abdbda1ae0d7c36c7</anchor>
      <arglist>($foo)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getFoo</name>
      <anchorfile>classDeepCopy_1_1f008_1_1A.html</anchorfile>
      <anchor>a9a15cebaf284b9cb61e836048e22c2ac</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertNotInstanceOf::A</name>
    <filename>classPHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertNotInstanceOf_1_1A.html</filename>
  </compound>
  <compound kind="class">
    <name>DeepCopy::f002::A</name>
    <filename>classDeepCopy_1_1f002_1_1A.html</filename>
    <member kind="function">
      <type></type>
      <name>getProp1</name>
      <anchorfile>classDeepCopy_1_1f002_1_1A.html</anchorfile>
      <anchor>a7ff5a4e4c9475f4119a7955218126d04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setProp1</name>
      <anchorfile>classDeepCopy_1_1f002_1_1A.html</anchorfile>
      <anchor>aeb6da9e9c293f64fa89ed6fd3fa1bfab</anchor>
      <arglist>($prop)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getProp2</name>
      <anchorfile>classDeepCopy_1_1f002_1_1A.html</anchorfile>
      <anchor>ac9931e48ce0ea1e89ab3c367db809a15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setProp2</name>
      <anchorfile>classDeepCopy_1_1f002_1_1A.html</anchorfile>
      <anchor>a051e8e65d7d8f5c8121ec1e056781282</anchor>
      <arglist>($prop)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>A</name>
    <filename>classA.html</filename>
    <member kind="function" static="yes">
      <type>static</type>
      <name>method</name>
      <anchorfile>classA.html</anchorfile>
      <anchor>abc26c2c6a3bb8225d08cd06cdde8e863</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>a</name>
    <filename>interfacea.html</filename>
    <member kind="function">
      <type></type>
      <name>foo</name>
      <anchorfile>interfacea.html</anchorfile>
      <anchor>a0cbef6b8c5b1ba57dcdf015df62e6b3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>m</name>
      <anchorfile>interfacea.html</anchorfile>
      <anchor>a62acac1e3efc89391787d673ed3c86ec</anchor>
      <arglist>($a, array $b, array $c=array())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeepCopyTest::TypeMatcher::A</name>
    <filename>classDeepCopyTest_1_1TypeMatcher_1_1A.html</filename>
    <base>DeepCopyTest::TypeMatcher::IA</base>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Diff::Output::AbstractChunkOutputBuilder</name>
    <filename>classSebastianBergmann_1_1Diff_1_1Output_1_1AbstractChunkOutputBuilder.html</filename>
    <base>SebastianBergmann::Diff::Output::DiffOutputBuilderInterface</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>getCommonChunks</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Output_1_1AbstractChunkOutputBuilder.html</anchorfile>
      <anchor>a53d797738655696b5c1bf00be13ac93a</anchor>
      <arglist>(array $diff, int $lineThreshold=5)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Diff::Output::AbstractChunkOutputBuilderTest</name>
    <filename>classSebastianBergmann_1_1Diff_1_1Output_1_1AbstractChunkOutputBuilderTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testGetCommonChunks</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Output_1_1AbstractChunkOutputBuilderTest.html</anchorfile>
      <anchor>a0cedff92e48237ea8ae84817bcfa5a62</anchor>
      <arglist>(array $expected, string $from, string $to, int $lineThreshold=5)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>provideGetCommonChunks</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Output_1_1AbstractChunkOutputBuilderTest.html</anchorfile>
      <anchor>a50352c4371118a16d477d1a2393a3057</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DoctrineTest::InstantiatorTestAsset::AbstractClassAsset</name>
    <filename>classDoctrineTest_1_1InstantiatorTestAsset_1_1AbstractClassAsset.html</filename>
  </compound>
  <compound kind="class">
    <name>AbstractIssue3881Test</name>
    <filename>classAbstractIssue3881Test.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testOne</name>
      <anchorfile>classAbstractIssue3881Test.html</anchorfile>
      <anchor>aee518611c28f87e1ebee9cf7a65f87d1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::Types::AbstractList</name>
    <filename>classphpDocumentor_1_1Reflection_1_1Types_1_1AbstractList.html</filename>
    <base>phpDocumentor::Reflection::Type</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1AbstractList.html</anchorfile>
      <anchor>aa3c61aebcb1aaac71bd190f88a432d84</anchor>
      <arglist>(?Type $valueType=null, ?Type $keyType=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getKeyType</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1AbstractList.html</anchorfile>
      <anchor>a2b645b610f6ee3b9e29201a097ebcee5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getValueType</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1AbstractList.html</anchorfile>
      <anchor>a88d047d8687cb8152c80dbaf6ca3beb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1AbstractList.html</anchorfile>
      <anchor>a2e56030efc0ce293efca290e1199cf52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$valueType</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1AbstractList.html</anchorfile>
      <anchor>acc63911b6c8b886d27788b6894d1428e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$keyType</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1AbstractList.html</anchorfile>
      <anchor>aee9eb9c4ef598e1962b486c4fb59af79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$defaultKeyType</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1AbstractList.html</anchorfile>
      <anchor>a774897fb641e0c9692034dacd6110b15</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractMockTestClass</name>
    <filename>classAbstractMockTestClass.html</filename>
    <base>MockTestInterface</base>
    <member kind="function">
      <type></type>
      <name>doSomething</name>
      <anchorfile>classAbstractMockTestClass.html</anchorfile>
      <anchor>a6207420c27467a7c4832f8090d836725</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>returnAnything</name>
      <anchorfile>classAbstractMockTestClass.html</anchorfile>
      <anchor>a5713a8906d1aa13f2ebc79e6867dda9e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::CodeCoverage::Node::AbstractNode</name>
    <filename>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1AbstractNode.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1AbstractNode.html</anchorfile>
      <anchor>a5cde3dfcd5db2070b00d56b207728978</anchor>
      <arglist>(string $name, self $parent=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getName</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1AbstractNode.html</anchorfile>
      <anchor>a8dce684440726e83f98f4fb1ba4e8ceb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getId</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1AbstractNode.html</anchorfile>
      <anchor>a79b24fb3314016a97050ced6f6795a3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getPath</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1AbstractNode.html</anchorfile>
      <anchor>a936926cfc61366bd6672e71c8e1db659</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getPathAsArray</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1AbstractNode.html</anchorfile>
      <anchor>a76440ae4707ce99fb724a66931e7e7ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getParent</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1AbstractNode.html</anchorfile>
      <anchor>accad979fc676cc231cf7a35825f60344</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getTestedClassesPercent</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1AbstractNode.html</anchorfile>
      <anchor>a6d76f9d9a5b81e551036f31b1f272339</anchor>
      <arglist>(bool $asString=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getTestedTraitsPercent</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1AbstractNode.html</anchorfile>
      <anchor>ad0498ffdc903935f75d43fa796988518</anchor>
      <arglist>(bool $asString=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getTestedClassesAndTraitsPercent</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1AbstractNode.html</anchorfile>
      <anchor>a446229d9059a2471bfeb49e78756ccf7</anchor>
      <arglist>(bool $asString=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getTestedFunctionsPercent</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1AbstractNode.html</anchorfile>
      <anchor>ab7424e0be6866b845cec68b5dfda5e40</anchor>
      <arglist>(bool $asString=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getTestedMethodsPercent</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1AbstractNode.html</anchorfile>
      <anchor>ac26adf7fae46ac14249fc16bfe57ea4e</anchor>
      <arglist>(bool $asString=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getTestedFunctionsAndMethodsPercent</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1AbstractNode.html</anchorfile>
      <anchor>a63e1594b21bface2fa92c2e4499e2969</anchor>
      <arglist>(bool $asString=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getLineExecutedPercent</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1AbstractNode.html</anchorfile>
      <anchor>ae6d89548793018caa50d91aa1e0ce1e9</anchor>
      <arglist>(bool $asString=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getNumClassesAndTraits</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1AbstractNode.html</anchorfile>
      <anchor>a42d8c4097c5ba1a9fb19233ed05d5e26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getNumTestedClassesAndTraits</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1AbstractNode.html</anchorfile>
      <anchor>a9b9e299fe7083c6c330d81e3ff2a82c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getClassesAndTraits</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1AbstractNode.html</anchorfile>
      <anchor>a08b61250aeb5779d88a42f74fc700387</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getNumFunctionsAndMethods</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1AbstractNode.html</anchorfile>
      <anchor>afdf355dac48cf3048c28b76e23162cdd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getNumTestedFunctionsAndMethods</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1AbstractNode.html</anchorfile>
      <anchor>a8591fca7d1cc5ed3001f7495d872db99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getFunctionsAndMethods</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1AbstractNode.html</anchorfile>
      <anchor>a8c1b83d9569caba8ccd288c50502fbe0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getClasses</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1AbstractNode.html</anchorfile>
      <anchor>a81c14516266456e859d021d07cd1c248</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getTraits</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1AbstractNode.html</anchorfile>
      <anchor>a16260718c7f0abcc646455c44c4052b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getFunctions</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1AbstractNode.html</anchorfile>
      <anchor>a0310ee1dfb23d7a7d97d517db6cba607</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getLinesOfCode</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1AbstractNode.html</anchorfile>
      <anchor>a8cf55b3ebf0a14ab16fce12629d4d651</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getNumExecutableLines</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1AbstractNode.html</anchorfile>
      <anchor>a90f2b85f08845d7fa6ee6cda51185bcf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getNumExecutedLines</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1AbstractNode.html</anchorfile>
      <anchor>a3a869e7dc13e80281b6c12f538660ff5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getNumClasses</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1AbstractNode.html</anchorfile>
      <anchor>a488bace519f34ac96128295e0c2a3d98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getNumTestedClasses</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1AbstractNode.html</anchorfile>
      <anchor>a7dbb4f4fc89b1ee861a7c12d8199fb74</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getNumTraits</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1AbstractNode.html</anchorfile>
      <anchor>a4fca109a44ad797d29bb266467a7e5f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getNumTestedTraits</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1AbstractNode.html</anchorfile>
      <anchor>afe1260f064e46af49a0d8454ea796e35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getNumMethods</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1AbstractNode.html</anchorfile>
      <anchor>ac6cb1e312a8b031a9dfc93b93645ee23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getNumTestedMethods</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1AbstractNode.html</anchorfile>
      <anchor>ae7b066b649aa1374c410e49421345315</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getNumFunctions</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1AbstractNode.html</anchorfile>
      <anchor>a7cae0e39467760c23a2aad8e893cc960</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getNumTestedFunctions</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1AbstractNode.html</anchorfile>
      <anchor>ae14fd7a14cce03c3ee67a5c8831303d3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Procrastinator::Job::AbstractPersistentJob</name>
    <filename>classProcrastinator_1_1Job_1_1AbstractPersistentJob.html</filename>
    <base>Procrastinator::Job::Job</base>
    <base>Contracts::HydratableInterface</base>
    <member kind="function">
      <type></type>
      <name>run</name>
      <anchorfile>classProcrastinator_1_1Job_1_1AbstractPersistentJob.html</anchorfile>
      <anchor>a6c9479923daaf8449453d43a1ef5db6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setTimeLimit</name>
      <anchorfile>classProcrastinator_1_1Job_1_1AbstractPersistentJob.html</anchorfile>
      <anchor>af881dababae471bd746d21fc66b34d58</anchor>
      <arglist>(int $seconds)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>get</name>
      <anchorfile>classProcrastinator_1_1Job_1_1AbstractPersistentJob.html</anchorfile>
      <anchor>a904f9e208097fb6de98a7d56c01ee6e9</anchor>
      <arglist>(string $identifier, $storage, array $config=null)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>__construct</name>
      <anchorfile>classProcrastinator_1_1Job_1_1AbstractPersistentJob.html</anchorfile>
      <anchor>ab7f1ebf7eafd99f25fe2d20bbe005595</anchor>
      <arglist>(string $identifier, $storage, array $config=null)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setStatus</name>
      <anchorfile>classProcrastinator_1_1Job_1_1AbstractPersistentJob.html</anchorfile>
      <anchor>a983047b544a483f528ff73e65ebb9afa</anchor>
      <arglist>($status)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setError</name>
      <anchorfile>classProcrastinator_1_1Job_1_1AbstractPersistentJob.html</anchorfile>
      <anchor>aa02eaae6ec7604bce250898ec9f2f68f</anchor>
      <arglist>($message)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setState</name>
      <anchorfile>classProcrastinator_1_1Job_1_1AbstractPersistentJob.html</anchorfile>
      <anchor>aa2d8e17f16ab072feb9464db59f7ad36</anchor>
      <arglist>($state)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>serializeIgnoreProperties</name>
      <anchorfile>classProcrastinator_1_1Job_1_1AbstractPersistentJob.html</anchorfile>
      <anchor>adcaa9b686773c0815ef476fca719d779</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$identifier</name>
      <anchorfile>classProcrastinator_1_1Job_1_1AbstractPersistentJob.html</anchorfile>
      <anchor>aa4622b3b047ca1e7c1b0cae9d5076a9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$storage</name>
      <anchorfile>classProcrastinator_1_1Job_1_1AbstractPersistentJob.html</anchorfile>
      <anchor>acf663f86413a41d97d9be94383830810</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Util::PHP::AbstractPhpProcess</name>
    <filename>classPHPUnit_1_1Util_1_1PHP_1_1AbstractPhpProcess.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Util_1_1PHP_1_1AbstractPhpProcess.html</anchorfile>
      <anchor>a8cec959a1ceeca3aa4afb5bf28776d54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setUseStderrRedirection</name>
      <anchorfile>classPHPUnit_1_1Util_1_1PHP_1_1AbstractPhpProcess.html</anchorfile>
      <anchor>a356bad066fb68df587648273c2821082</anchor>
      <arglist>(bool $stderrRedirection)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>useStderrRedirection</name>
      <anchorfile>classPHPUnit_1_1Util_1_1PHP_1_1AbstractPhpProcess.html</anchorfile>
      <anchor>aadc3c6b61df3302d073f62ffcf6befe3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setStdin</name>
      <anchorfile>classPHPUnit_1_1Util_1_1PHP_1_1AbstractPhpProcess.html</anchorfile>
      <anchor>a5eafa8d8473451384b5e9669fc97d73e</anchor>
      <arglist>(string $stdin)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getStdin</name>
      <anchorfile>classPHPUnit_1_1Util_1_1PHP_1_1AbstractPhpProcess.html</anchorfile>
      <anchor>a1809b3077e7e4a97a8eb796772e1eade</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setArgs</name>
      <anchorfile>classPHPUnit_1_1Util_1_1PHP_1_1AbstractPhpProcess.html</anchorfile>
      <anchor>a96cbbaede767ae25317f8eb77ba0debc</anchor>
      <arglist>(string $args)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getArgs</name>
      <anchorfile>classPHPUnit_1_1Util_1_1PHP_1_1AbstractPhpProcess.html</anchorfile>
      <anchor>a5ebe4ec6c0cabfb87712afe8b84f8eb8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setEnv</name>
      <anchorfile>classPHPUnit_1_1Util_1_1PHP_1_1AbstractPhpProcess.html</anchorfile>
      <anchor>a0993e3e2bf7831e6f33c086fb4d1f5ef</anchor>
      <arglist>(array $env)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getEnv</name>
      <anchorfile>classPHPUnit_1_1Util_1_1PHP_1_1AbstractPhpProcess.html</anchorfile>
      <anchor>a3351d0b65142b3645f0acf0ac39f6233</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setTimeout</name>
      <anchorfile>classPHPUnit_1_1Util_1_1PHP_1_1AbstractPhpProcess.html</anchorfile>
      <anchor>a77a1688f5bcff2bf0014a2461158e233</anchor>
      <arglist>(int $timeout)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getTimeout</name>
      <anchorfile>classPHPUnit_1_1Util_1_1PHP_1_1AbstractPhpProcess.html</anchorfile>
      <anchor>a4950243e09235fde2415c26c347c6d32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>runTestJob</name>
      <anchorfile>classPHPUnit_1_1Util_1_1PHP_1_1AbstractPhpProcess.html</anchorfile>
      <anchor>abb4ac0b32fd5550298155cbe0476a215</anchor>
      <arglist>(string $job, Test $test, TestResult $result)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getCommand</name>
      <anchorfile>classPHPUnit_1_1Util_1_1PHP_1_1AbstractPhpProcess.html</anchorfile>
      <anchor>af2000a83d88c0e4c702b0282ab4dc00d</anchor>
      <arglist>(array $settings, string $file=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>runJob</name>
      <anchorfile>classPHPUnit_1_1Util_1_1PHP_1_1AbstractPhpProcess.html</anchorfile>
      <anchor>ad361622211cf93f6430740e0c862696a</anchor>
      <arglist>(string $job, array $settings=[])</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>factory</name>
      <anchorfile>classPHPUnit_1_1Util_1_1PHP_1_1AbstractPhpProcess.html</anchorfile>
      <anchor>a6a9923d874dd5497a6f28da619f45435</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>settingsToParameters</name>
      <anchorfile>classPHPUnit_1_1Util_1_1PHP_1_1AbstractPhpProcess.html</anchorfile>
      <anchor>aed7b7b6cc81c7f1a9bb0a92c5abda76d</anchor>
      <arglist>(array $settings)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$runtime</name>
      <anchorfile>classPHPUnit_1_1Util_1_1PHP_1_1AbstractPhpProcess.html</anchorfile>
      <anchor>aa618f7dbfdb8c1d00527f4b0df455636</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$stderrRedirection</name>
      <anchorfile>classPHPUnit_1_1Util_1_1PHP_1_1AbstractPhpProcess.html</anchorfile>
      <anchor>a293efc13865de8fd086eec8136d4065a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$stdin</name>
      <anchorfile>classPHPUnit_1_1Util_1_1PHP_1_1AbstractPhpProcess.html</anchorfile>
      <anchor>a204d60d4bf9470cda6715fc5ea13a80d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$args</name>
      <anchorfile>classPHPUnit_1_1Util_1_1PHP_1_1AbstractPhpProcess.html</anchorfile>
      <anchor>adec37b3e7eb79328fabf716401714666</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$env</name>
      <anchorfile>classPHPUnit_1_1Util_1_1PHP_1_1AbstractPhpProcess.html</anchorfile>
      <anchor>a75521043973d5a8294796f785e5c3a34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$timeout</name>
      <anchorfile>classPHPUnit_1_1Util_1_1PHP_1_1AbstractPhpProcess.html</anchorfile>
      <anchor>ac5019fde77117d1aeefdb46d777e5407</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Util::PHP::AbstractPhpProcessTest</name>
    <filename>classPHPUnit_1_1Util_1_1PHP_1_1AbstractPhpProcessTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testShouldNotUseStderrRedirectionByDefault</name>
      <anchorfile>classPHPUnit_1_1Util_1_1PHP_1_1AbstractPhpProcessTest.html</anchorfile>
      <anchor>a93ec9a08f5031e0c3ce393cdc369ab75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testShouldDefinedIfUseStderrRedirection</name>
      <anchorfile>classPHPUnit_1_1Util_1_1PHP_1_1AbstractPhpProcessTest.html</anchorfile>
      <anchor>a9bc15ab6184e1b216b8531ee9cbb9fbf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testShouldDefinedIfDoNotUseStderrRedirection</name>
      <anchorfile>classPHPUnit_1_1Util_1_1PHP_1_1AbstractPhpProcessTest.html</anchorfile>
      <anchor>ac06a524b2f4d5d4c04483c35c23cb9a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testShouldUseGivenSettingsToCreateCommand</name>
      <anchorfile>classPHPUnit_1_1Util_1_1PHP_1_1AbstractPhpProcessTest.html</anchorfile>
      <anchor>a4d6c17f0cdeefac6d02a76fe947c50aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testShouldRedirectStderrToStdoutWhenDefined</name>
      <anchorfile>classPHPUnit_1_1Util_1_1PHP_1_1AbstractPhpProcessTest.html</anchorfile>
      <anchor>a87e1790deeed51d9788ba9ec5152f42a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testShouldUseArgsToCreateCommand</name>
      <anchorfile>classPHPUnit_1_1Util_1_1PHP_1_1AbstractPhpProcessTest.html</anchorfile>
      <anchor>aa7e1e08066b1b04a34b8da25ba85d249</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testShouldHaveFileToCreateCommand</name>
      <anchorfile>classPHPUnit_1_1Util_1_1PHP_1_1AbstractPhpProcessTest.html</anchorfile>
      <anchor>aca05be486a2beaa35e1605f1da23df37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStdinGetterAndSetter</name>
      <anchorfile>classPHPUnit_1_1Util_1_1PHP_1_1AbstractPhpProcessTest.html</anchorfile>
      <anchor>a30c06beca2039a1223604ad2b3a330cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testArgsGetterAndSetter</name>
      <anchorfile>classPHPUnit_1_1Util_1_1PHP_1_1AbstractPhpProcessTest.html</anchorfile>
      <anchor>a46b4d5566f51c2e40dd4a66a145e17c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testEnvGetterAndSetter</name>
      <anchorfile>classPHPUnit_1_1Util_1_1PHP_1_1AbstractPhpProcessTest.html</anchorfile>
      <anchor>aa358a3d7e767440073ba8d551ead3dc6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTimeoutGetterAndSetter</name>
      <anchorfile>classPHPUnit_1_1Util_1_1PHP_1_1AbstractPhpProcessTest.html</anchorfile>
      <anchor>a6b585a6dd9da7ee851b45a13f38890f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classPHPUnit_1_1Util_1_1PHP_1_1AbstractPhpProcessTest.html</anchorfile>
      <anchor>ae2292f2422aea8459c1c58e6dcb94c04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>tearDown</name>
      <anchorfile>classPHPUnit_1_1Util_1_1PHP_1_1AbstractPhpProcessTest.html</anchorfile>
      <anchor>a6cc87d2ed8be270be58041e9525cd2ca</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractTest</name>
    <filename>classAbstractTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testOne</name>
      <anchorfile>classAbstractTest.html</anchorfile>
      <anchor>a17886d9ab9988f83557a1e2695fb356b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractVariousIterableDataProviderTest</name>
    <filename>classAbstractVariousIterableDataProviderTest.html</filename>
    <member kind="function">
      <type></type>
      <name>asArrayProvider</name>
      <anchorfile>classAbstractVariousIterableDataProviderTest.html</anchorfile>
      <anchor>a0e0d2f1f66c2e1707b2520c7e85bfb36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>asIteratorProvider</name>
      <anchorfile>classAbstractVariousIterableDataProviderTest.html</anchorfile>
      <anchor>aba9c7727bf81ab3010cd0433de5516a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>asTraversableProvider</name>
      <anchorfile>classAbstractVariousIterableDataProviderTest.html</anchorfile>
      <anchor>a8e6a08ccd80dc125af7bcf7eaacb8299</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>asArrayProviderInParent</name>
      <anchorfile>classAbstractVariousIterableDataProviderTest.html</anchorfile>
      <anchor>a20bbd009d0c9300b4bc0cc2687e84f45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>asIteratorProviderInParent</name>
      <anchorfile>classAbstractVariousIterableDataProviderTest.html</anchorfile>
      <anchor>a5ef9ed326bcc8423341dcae0ece00219</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>asTraversableProviderInParent</name>
      <anchorfile>classAbstractVariousIterableDataProviderTest.html</anchorfile>
      <anchor>a07d3cce39eb920353398a74f4c194c25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAbstract</name>
      <anchorfile>classAbstractVariousIterableDataProviderTest.html</anchorfile>
      <anchor>a7321a398101af175a22bc93eb6d65a72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testInParent</name>
      <anchorfile>classAbstractVariousIterableDataProviderTest.html</anchorfile>
      <anchor>a0ad7484e5721d9bcde7bf6bd4da381e9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Version::AbstractVersionConstraint</name>
    <filename>classPharIo_1_1Version_1_1AbstractVersionConstraint.html</filename>
    <base>PharIo::Version::VersionConstraint</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPharIo_1_1Version_1_1AbstractVersionConstraint.html</anchorfile>
      <anchor>ac53f2eb312b1afab9d006cfa9bbbf915</anchor>
      <arglist>($originalValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>asString</name>
      <anchorfile>classPharIo_1_1Version_1_1AbstractVersionConstraint.html</anchorfile>
      <anchor>a97d248828b5da1f4e0f7a9d9fcf9c64f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Version::AbstractVersionConstraintTest</name>
    <filename>classPharIo_1_1Version_1_1AbstractVersionConstraintTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
  </compound>
  <compound kind="class">
    <name>PHPUnit::TestFixture::ActualOutputTest</name>
    <filename>classPHPUnit_1_1TestFixture_1_1ActualOutputTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testOne</name>
      <anchorfile>classPHPUnit_1_1TestFixture_1_1ActualOutputTest.html</anchorfile>
      <anchor>a6e252f79ed8243d5386a1d2d16997ba7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>PHPUnit::Runner::AfterIncompleteTestHook</name>
    <filename>interfacePHPUnit_1_1Runner_1_1AfterIncompleteTestHook.html</filename>
    <base>PHPUnit::Runner::TestHook</base>
    <member kind="function">
      <type></type>
      <name>executeAfterIncompleteTest</name>
      <anchorfile>interfacePHPUnit_1_1Runner_1_1AfterIncompleteTestHook.html</anchorfile>
      <anchor>a843ea26cce551ab76601ba3bf8dc1c34</anchor>
      <arglist>(string $test, string $message, float $time)</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>PHPUnit::Runner::AfterLastTestHook</name>
    <filename>interfacePHPUnit_1_1Runner_1_1AfterLastTestHook.html</filename>
    <base>PHPUnit::Runner::Hook</base>
    <member kind="function">
      <type></type>
      <name>executeAfterLastTest</name>
      <anchorfile>interfacePHPUnit_1_1Runner_1_1AfterLastTestHook.html</anchorfile>
      <anchor>ac67120b5c36a58047ed19b87d86bc4aa</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>PHPUnit::Runner::AfterRiskyTestHook</name>
    <filename>interfacePHPUnit_1_1Runner_1_1AfterRiskyTestHook.html</filename>
    <base>PHPUnit::Runner::TestHook</base>
    <member kind="function">
      <type></type>
      <name>executeAfterRiskyTest</name>
      <anchorfile>interfacePHPUnit_1_1Runner_1_1AfterRiskyTestHook.html</anchorfile>
      <anchor>a5ef02a140bc24c8b570bea9bc0a1d432</anchor>
      <arglist>(string $test, string $message, float $time)</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>PHPUnit::Runner::AfterSkippedTestHook</name>
    <filename>interfacePHPUnit_1_1Runner_1_1AfterSkippedTestHook.html</filename>
    <base>PHPUnit::Runner::TestHook</base>
    <member kind="function">
      <type></type>
      <name>executeAfterSkippedTest</name>
      <anchorfile>interfacePHPUnit_1_1Runner_1_1AfterSkippedTestHook.html</anchorfile>
      <anchor>a69ba528ca189cc27a735a34714bd9f5f</anchor>
      <arglist>(string $test, string $message, float $time)</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>PHPUnit::Runner::AfterSuccessfulTestHook</name>
    <filename>interfacePHPUnit_1_1Runner_1_1AfterSuccessfulTestHook.html</filename>
    <base>PHPUnit::Runner::TestHook</base>
    <member kind="function">
      <type></type>
      <name>executeAfterSuccessfulTest</name>
      <anchorfile>interfacePHPUnit_1_1Runner_1_1AfterSuccessfulTestHook.html</anchorfile>
      <anchor>a92355f0fc0bb64685fe4a272354516bb</anchor>
      <arglist>(string $test, float $time)</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>PHPUnit::Runner::AfterTestErrorHook</name>
    <filename>interfacePHPUnit_1_1Runner_1_1AfterTestErrorHook.html</filename>
    <base>PHPUnit::Runner::TestHook</base>
    <member kind="function">
      <type></type>
      <name>executeAfterTestError</name>
      <anchorfile>interfacePHPUnit_1_1Runner_1_1AfterTestErrorHook.html</anchorfile>
      <anchor>a3c38ca58b4dcf38f733a2f10fe58d750</anchor>
      <arglist>(string $test, string $message, float $time)</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>PHPUnit::Runner::AfterTestFailureHook</name>
    <filename>interfacePHPUnit_1_1Runner_1_1AfterTestFailureHook.html</filename>
    <base>PHPUnit::Runner::TestHook</base>
    <member kind="function">
      <type></type>
      <name>executeAfterTestFailure</name>
      <anchorfile>interfacePHPUnit_1_1Runner_1_1AfterTestFailureHook.html</anchorfile>
      <anchor>a279699c07d95424f1d10a659274f17c1</anchor>
      <arglist>(string $test, string $message, float $time)</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>PHPUnit::Runner::AfterTestHook</name>
    <filename>interfacePHPUnit_1_1Runner_1_1AfterTestHook.html</filename>
    <base>PHPUnit::Runner::TestHook</base>
    <member kind="function">
      <type></type>
      <name>executeAfterTest</name>
      <anchorfile>interfacePHPUnit_1_1Runner_1_1AfterTestHook.html</anchorfile>
      <anchor>a46a44c9609230da854ffc6dd6858cec0</anchor>
      <arglist>(string $test, float $time)</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>PHPUnit::Runner::AfterTestWarningHook</name>
    <filename>interfacePHPUnit_1_1Runner_1_1AfterTestWarningHook.html</filename>
    <base>PHPUnit::Runner::TestHook</base>
    <member kind="function">
      <type></type>
      <name>executeAfterTestWarning</name>
      <anchorfile>interfacePHPUnit_1_1Runner_1_1AfterTestWarningHook.html</anchorfile>
      <anchor>ad6728fd86e6c60d6e358b6c795400c96</anchor>
      <arglist>(string $test, string $message, float $time)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::Types::AggregatedType</name>
    <filename>classphpDocumentor_1_1Reflection_1_1Types_1_1AggregatedType.html</filename>
    <base>phpDocumentor::Reflection::Type</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1AggregatedType.html</anchorfile>
      <anchor>a9d3a58688b1d158b309d58b89ab3783f</anchor>
      <arglist>(array $types, string $token)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>get</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1AggregatedType.html</anchorfile>
      <anchor>adad5811aea7b7e008037ecd05f2ebae9</anchor>
      <arglist>(int $index)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>has</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1AggregatedType.html</anchorfile>
      <anchor>a8e5829586eb9fe78f5ecf3427d60e45e</anchor>
      <arglist>(int $index)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>contains</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1AggregatedType.html</anchorfile>
      <anchor>aa7f382162fe398ffd33564651816ea7a</anchor>
      <arglist>(Type $type)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1AggregatedType.html</anchorfile>
      <anchor>acdc9ee318589925999965958b1a3397f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getIterator</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1AggregatedType.html</anchorfile>
      <anchor>ab6a004e277e446e4d44421b96593cb6b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Exception::Prediction::AggregateException</name>
    <filename>classProphecy_1_1Exception_1_1Prediction_1_1AggregateException.html</filename>
    <base>Prophecy::Exception::Prediction::PredictionException</base>
    <member kind="function">
      <type></type>
      <name>append</name>
      <anchorfile>classProphecy_1_1Exception_1_1Prediction_1_1AggregateException.html</anchorfile>
      <anchor>a892a0e9371e46a992ae102c0ee79bf9a</anchor>
      <arglist>(PredictionException $exception)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getExceptions</name>
      <anchorfile>classProphecy_1_1Exception_1_1Prediction_1_1AggregateException.html</anchorfile>
      <anchor>a06f46e7d06c4f2dbb927a01f3de90356</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setObjectProphecy</name>
      <anchorfile>classProphecy_1_1Exception_1_1Prediction_1_1AggregateException.html</anchorfile>
      <anchor>a904a65c6f280851f301c4493d8c53f9f</anchor>
      <arglist>(ObjectProphecy $objectProphecy)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getObjectProphecy</name>
      <anchorfile>classProphecy_1_1Exception_1_1Prediction_1_1AggregateException.html</anchorfile>
      <anchor>a88082236b7d76bbff914af208ed2464a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocBlock::Tags::Formatter::AlignFormatter</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Formatter_1_1AlignFormatter.html</filename>
    <base>phpDocumentor::Reflection::DocBlock::Tags::Formatter</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Formatter_1_1AlignFormatter.html</anchorfile>
      <anchor>ae29194071672f361a12bd7f2715683d4</anchor>
      <arglist>(array $tags)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>format</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Formatter_1_1AlignFormatter.html</anchorfile>
      <anchor>a0627a77097a0a524be832fb409a7705b</anchor>
      <arglist>(Tag $tag)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$maxLen</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Formatter_1_1AlignFormatter.html</anchorfile>
      <anchor>a20a1cd895c95e0412d52d4b37493f0cd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocBlock::Tags::Formatter::AlignFormatterTest</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Formatter_1_1AlignFormatterTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>tearDown</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Formatter_1_1AlignFormatterTest.html</anchorfile>
      <anchor>ac101327daf13f421bf81b0119d3d8eef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFormatterCallsToStringAndReturnsAStandardRepresentation</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Formatter_1_1AlignFormatterTest.html</anchorfile>
      <anchor>afaa7259585ab4ab32708f6713de57820</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Version::AndVersionConstraintGroup</name>
    <filename>classPharIo_1_1Version_1_1AndVersionConstraintGroup.html</filename>
    <base>PharIo::Version::AbstractVersionConstraint</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPharIo_1_1Version_1_1AndVersionConstraintGroup.html</anchorfile>
      <anchor>a461a952e9732f2652c0bcdbcee293278</anchor>
      <arglist>($originalValue, array $constraints)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>complies</name>
      <anchorfile>classPharIo_1_1Version_1_1AndVersionConstraintGroup.html</anchorfile>
      <anchor>a5908c726b752f1e4f41c2f03055db58e</anchor>
      <arglist>(Version $version)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Version::AndVersionConstraintGroupTest</name>
    <filename>classPharIo_1_1Version_1_1AndVersionConstraintGroupTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testReturnsFalseIfOneConstraintReturnsFalse</name>
      <anchorfile>classPharIo_1_1Version_1_1AndVersionConstraintGroupTest.html</anchorfile>
      <anchor>a1d787bcee445cf94ecc0dfde49a2eb98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testReturnsTrueIfAllConstraintsReturnsTrue</name>
      <anchorfile>classPharIo_1_1Version_1_1AndVersionConstraintGroupTest.html</anchorfile>
      <anchor>aacc9af2663ff995849a613abeb794e24</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>AnInterface</name>
    <filename>interfaceAnInterface.html</filename>
    <member kind="function">
      <type></type>
      <name>doSomething</name>
      <anchorfile>interfaceAnInterface.html</anchorfile>
      <anchor>a9d69ec1ada5ffde700dae5ef8a774af1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>AnInterfaceWithReturnType</name>
    <filename>interfaceAnInterfaceWithReturnType.html</filename>
    <member kind="function">
      <type></type>
      <name>returnAnArray</name>
      <anchorfile>interfaceAnInterfaceWithReturnType.html</anchorfile>
      <anchor>a852e8101453ccd838a7bf15087e8da08</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::TestFixture::MockObject::AnotherClassUsingConfigurableMethods</name>
    <filename>classPHPUnit_1_1TestFixture_1_1MockObject_1_1AnotherClassUsingConfigurableMethods.html</filename>
    <member kind="function" static="yes">
      <type>static</type>
      <name>getConfigurableMethods</name>
      <anchorfile>classPHPUnit_1_1TestFixture_1_1MockObject_1_1AnotherClassUsingConfigurableMethods.html</anchorfile>
      <anchor>a06858f51182b316928816b7fd68f3482</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>AnotherInterface</name>
    <filename>interfaceAnotherInterface.html</filename>
    <member kind="function">
      <type></type>
      <name>doSomethingElse</name>
      <anchorfile>interfaceAnotherInterface.html</anchorfile>
      <anchor>a9acb823203a8426f1519d7e41e44234f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::MockObject::Rule::AnyInvokedCount</name>
    <filename>classPHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1AnyInvokedCount.html</filename>
    <base>PHPUnit::Framework::MockObject::Rule::InvocationOrder</base>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1AnyInvokedCount.html</anchorfile>
      <anchor>a524d98c84390baa491a032440aef40dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>verify</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1AnyInvokedCount.html</anchorfile>
      <anchor>a830c39b82e2dbd2c34cc2c0e4ade4012</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>matches</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1AnyInvokedCount.html</anchorfile>
      <anchor>afba62371aa745a7534523f6ea34ebb3e</anchor>
      <arglist>(BaseInvocation $invocation)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>invokedDo</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1AnyInvokedCount.html</anchorfile>
      <anchor>ab191774df493f66cf1822ca7889e82f4</anchor>
      <arglist>(BaseInvocation $invocation)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::MockObject::Rule::AnyParameters</name>
    <filename>classPHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1AnyParameters.html</filename>
    <base>PHPUnit::Framework::MockObject::Rule::ParametersRule</base>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1AnyParameters.html</anchorfile>
      <anchor>a9ae0927a86d4546695be5c8d2e04f443</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>apply</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1AnyParameters.html</anchorfile>
      <anchor>a49dddb28f4727ca316912e5c57837ab5</anchor>
      <arglist>(BaseInvocation $invocation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>verify</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1AnyParameters.html</anchorfile>
      <anchor>a553be93e02d8fdf00c8e8c621145afda</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Argument::Token::AnyValuesToken</name>
    <filename>classProphecy_1_1Argument_1_1Token_1_1AnyValuesToken.html</filename>
    <base>Prophecy::Argument::Token::TokenInterface</base>
    <member kind="function">
      <type></type>
      <name>scoreArgument</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1AnyValuesToken.html</anchorfile>
      <anchor>a2aa283464db803b8dca2b3051fcf41be</anchor>
      <arglist>($argument)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isLast</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1AnyValuesToken.html</anchorfile>
      <anchor>aa31130b01b866ddd8e557b6c8603f04b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1AnyValuesToken.html</anchorfile>
      <anchor>a93447f64974e24ba50027dcce01ff9c5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Argument::Token::AnyValueToken</name>
    <filename>classProphecy_1_1Argument_1_1Token_1_1AnyValueToken.html</filename>
    <base>Prophecy::Argument::Token::TokenInterface</base>
    <member kind="function">
      <type></type>
      <name>scoreArgument</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1AnyValueToken.html</anchorfile>
      <anchor>a53abef6d77bbaa0879313faf3d9f7352</anchor>
      <arglist>($argument)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isLast</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1AnyValueToken.html</anchorfile>
      <anchor>a56a563180ec5fc0f78b729fccd502888</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1AnyValueToken.html</anchorfile>
      <anchor>abeb33925c24783ebc82f4e94c7a650fb</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Version::AnyVersionConstraint</name>
    <filename>classPharIo_1_1Version_1_1AnyVersionConstraint.html</filename>
    <base>PharIo::Version::VersionConstraint</base>
    <member kind="function">
      <type></type>
      <name>complies</name>
      <anchorfile>classPharIo_1_1Version_1_1AnyVersionConstraint.html</anchorfile>
      <anchor>aa0852df1b9baee91a9fbcc1247e4f383</anchor>
      <arglist>(Version $version)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>asString</name>
      <anchorfile>classPharIo_1_1Version_1_1AnyVersionConstraint.html</anchorfile>
      <anchor>ae9ec64a8581026500fbde8c5cecf86cb</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Version::AnyVersionConstraintTest</name>
    <filename>classPharIo_1_1Version_1_1AnyVersionConstraintTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>versionProvider</name>
      <anchorfile>classPharIo_1_1Version_1_1AnyVersionConstraintTest.html</anchorfile>
      <anchor>a09accfa79299f817cac5eec54d4ff123</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testReturnsTrue</name>
      <anchorfile>classPharIo_1_1Version_1_1AnyVersionConstraintTest.html</anchorfile>
      <anchor>a59d2563cb0bc43f25f37b629ed487ff5</anchor>
      <arglist>(Version $version)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAsString</name>
      <anchorfile>classPharIo_1_1Version_1_1AnyVersionConstraintTest.html</anchorfile>
      <anchor>ab67ee5ab22e1ec3c60328afa0b0a3bbb</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::Application</name>
    <filename>classPharIo_1_1Manifest_1_1Application.html</filename>
    <base>PharIo::Manifest::Type</base>
    <member kind="function">
      <type></type>
      <name>isApplication</name>
      <anchorfile>classPharIo_1_1Manifest_1_1Application.html</anchorfile>
      <anchor>a10f62750001b5e559332ebb455150270</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::ApplicationName</name>
    <filename>classPharIo_1_1Manifest_1_1ApplicationName.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ApplicationName.html</anchorfile>
      <anchor>ad1674713b4d60bf66e787cac4732161d</anchor>
      <arglist>($name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ApplicationName.html</anchorfile>
      <anchor>a4e0694c20b8ca77cb724f1d0c7e1b32a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isEqual</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ApplicationName.html</anchorfile>
      <anchor>aa5d442a147c9920011bf52aa27906148</anchor>
      <arglist>(ApplicationName $name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::ApplicationNameTest</name>
    <filename>classPharIo_1_1Manifest_1_1ApplicationNameTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testCanBeCreatedWithValidName</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ApplicationNameTest.html</anchorfile>
      <anchor>ae16a9f3ce487449b293fcd750056f424</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testUsingInvalidFormatForNameThrowsException</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ApplicationNameTest.html</anchorfile>
      <anchor>a3c4bfb5694873025b347702186a05fd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testUsingWrongTypeForNameThrowsException</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ApplicationNameTest.html</anchorfile>
      <anchor>a992a56ab408808246f917c453a7b49c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testReturnsTrueForEqualNamesWhenCompared</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ApplicationNameTest.html</anchorfile>
      <anchor>a9ce3b268051e92e5ae4b423b3ab40def</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testReturnsFalseForNonEqualNamesWhenCompared</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ApplicationNameTest.html</anchorfile>
      <anchor>a448c31df16ef5a979d0ae1d7c5d3b281</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCanBeConvertedToString</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ApplicationNameTest.html</anchorfile>
      <anchor>aa1c7a95aff79e8a9a904436e13200315</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::ApplicationTest</name>
    <filename>classPharIo_1_1Manifest_1_1ApplicationTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testCanBeCreated</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ApplicationTest.html</anchorfile>
      <anchor>a6b7f353315d37333537edf72669d5f92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIsApplication</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ApplicationTest.html</anchorfile>
      <anchor>aa1d0cf0481c6650182500369d9486cd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIsNotLibrary</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ApplicationTest.html</anchorfile>
      <anchor>a20d33b6fe8f0ee5910a3334623f910f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIsNotExtension</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ApplicationTest.html</anchorfile>
      <anchor>ae1052fc7b37d5e4d474af473ea60f91e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ApplicationTest.html</anchorfile>
      <anchor>a31d29f9b098bca46916cb4813244510c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Argument::Token::ApproximateValueToken</name>
    <filename>classProphecy_1_1Argument_1_1Token_1_1ApproximateValueToken.html</filename>
    <base>Prophecy::Argument::Token::TokenInterface</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1ApproximateValueToken.html</anchorfile>
      <anchor>a773ef179c45a91739d5f48f2e536749f</anchor>
      <arglist>($value, $precision=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>scoreArgument</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1ApproximateValueToken.html</anchorfile>
      <anchor>a7ffcaa4e03b94129709eb31af7fb2b41</anchor>
      <arglist>($argument)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isLast</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1ApproximateValueToken.html</anchorfile>
      <anchor>afd22d77c3c6ff67988d14002d8afc722</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1ApproximateValueToken.html</anchorfile>
      <anchor>a4b7e2ca98fd4565ff2e2893056a5eaef</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Argument</name>
    <filename>classProphecy_1_1Argument.html</filename>
    <member kind="function">
      <type></type>
      <name>in</name>
      <anchorfile>classProphecy_1_1Argument.html</anchorfile>
      <anchor>a865f73eb2efeee5145440935d82f508a</anchor>
      <arglist>($value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>notIn</name>
      <anchorfile>classProphecy_1_1Argument.html</anchorfile>
      <anchor>a3de238526d7910181c639ee3ff95e8fe</anchor>
      <arglist>($value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>exact</name>
      <anchorfile>classProphecy_1_1Argument.html</anchorfile>
      <anchor>a206a99c30d96f8a4130944d906c00dae</anchor>
      <arglist>($value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>type</name>
      <anchorfile>classProphecy_1_1Argument.html</anchorfile>
      <anchor>add4767866418eb91b93ab222b3bfb20c</anchor>
      <arglist>($type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>which</name>
      <anchorfile>classProphecy_1_1Argument.html</anchorfile>
      <anchor>a072156b7d6a30303f9cf24073cae5436</anchor>
      <arglist>($methodName, $value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>that</name>
      <anchorfile>classProphecy_1_1Argument.html</anchorfile>
      <anchor>a0aa1e40571b455031d2cd62415b9efab</anchor>
      <arglist>($callback)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>any</name>
      <anchorfile>classProphecy_1_1Argument.html</anchorfile>
      <anchor>aa98e684bb643ccff3fe285071fd7c9f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>cetera</name>
      <anchorfile>classProphecy_1_1Argument.html</anchorfile>
      <anchor>ab8f3b0a1b2c459dc6ebf3d188334e54c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allOf</name>
      <anchorfile>classProphecy_1_1Argument.html</anchorfile>
      <anchor>a9f501be7e4040bebad664e326d1f1591</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>size</name>
      <anchorfile>classProphecy_1_1Argument.html</anchorfile>
      <anchor>a8db2683bdf42625212185534abb36ccc</anchor>
      <arglist>($value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>withEntry</name>
      <anchorfile>classProphecy_1_1Argument.html</anchorfile>
      <anchor>aa95d8dbecb619af488618c62eb4837f4</anchor>
      <arglist>($key, $value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>withEveryEntry</name>
      <anchorfile>classProphecy_1_1Argument.html</anchorfile>
      <anchor>a84701cb723201f33b69cbbcd01d34749</anchor>
      <arglist>($value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>containing</name>
      <anchorfile>classProphecy_1_1Argument.html</anchorfile>
      <anchor>a7fba5e693394d6f3a1170275326bc7ea</anchor>
      <arglist>($value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>withKey</name>
      <anchorfile>classProphecy_1_1Argument.html</anchorfile>
      <anchor>a8219c60887f2911a44758bf421801f1a</anchor>
      <arglist>($key)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>not</name>
      <anchorfile>classProphecy_1_1Argument.html</anchorfile>
      <anchor>a30f1aa3f00af5b68b7155551eca66901</anchor>
      <arglist>($value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>containingString</name>
      <anchorfile>classProphecy_1_1Argument.html</anchorfile>
      <anchor>a214cb1c39ef914753711542533fa7408</anchor>
      <arglist>($value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>is</name>
      <anchorfile>classProphecy_1_1Argument.html</anchorfile>
      <anchor>a52b129d81f40501cc2fa1951423b40c5</anchor>
      <arglist>($value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>approximate</name>
      <anchorfile>classProphecy_1_1Argument.html</anchorfile>
      <anchor>a9226b3f63f653889277673a32ec9fb67</anchor>
      <arglist>($value, $precision=0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Doubler::Generator::Node::ArgumentNode</name>
    <filename>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1ArgumentNode.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1ArgumentNode.html</anchorfile>
      <anchor>ac5e01126db9b8b77388476b25be0b190</anchor>
      <arglist>($name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getName</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1ArgumentNode.html</anchorfile>
      <anchor>a11262d6271208203c23dea0d53cc2a71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setTypeNode</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1ArgumentNode.html</anchorfile>
      <anchor>a1da6d22b53e8c64e1a95e4d68b50c506</anchor>
      <arglist>(ArgumentTypeNode $typeNode)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getTypeNode</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1ArgumentNode.html</anchorfile>
      <anchor>a4ced4a521c803b515ab1ce3a1a7a83fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>hasDefault</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1ArgumentNode.html</anchorfile>
      <anchor>af816239318f90d608470ca87061b950e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getDefault</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1ArgumentNode.html</anchorfile>
      <anchor>af184e0c3654b8c249c8913a6c9d57616</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setDefault</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1ArgumentNode.html</anchorfile>
      <anchor>ad11d4981e5019ba62a90a66713757fc3</anchor>
      <arglist>($default=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isOptional</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1ArgumentNode.html</anchorfile>
      <anchor>a480a4e37a1fe2b6fccd4ce035efa59c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setAsPassedByReference</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1ArgumentNode.html</anchorfile>
      <anchor>aeb67a8ab404220fac3ebbe23b5e284e5</anchor>
      <arglist>($byReference=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isPassedByReference</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1ArgumentNode.html</anchorfile>
      <anchor>a0d790dbea7b152e44608f08b8e30dde5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setAsVariadic</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1ArgumentNode.html</anchorfile>
      <anchor>aca6d2b524fc6debb8953748c33387534</anchor>
      <arglist>($isVariadic=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isVariadic</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1ArgumentNode.html</anchorfile>
      <anchor>aa6fd118b6c19f16456df751b39eb4b20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getTypeHint</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1ArgumentNode.html</anchorfile>
      <anchor>a7b23d54b35fbdccefa4e1fe9ff2d0b97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setTypeHint</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1ArgumentNode.html</anchorfile>
      <anchor>ae2afde2d8daa79a2dca7cf3997fc0f0d</anchor>
      <arglist>($typeHint=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isNullable</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1ArgumentNode.html</anchorfile>
      <anchor>a5b5139784879c331286c4d26799b444d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setAsNullable</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1ArgumentNode.html</anchorfile>
      <anchor>aac0b065d957c04342d248fb415580489</anchor>
      <arglist>($isNullable=true)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Argument::ArgumentsWildcard</name>
    <filename>classProphecy_1_1Argument_1_1ArgumentsWildcard.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classProphecy_1_1Argument_1_1ArgumentsWildcard.html</anchorfile>
      <anchor>a1e58d98b12d8b85011b56198eab8bf7c</anchor>
      <arglist>(array $arguments)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>scoreArguments</name>
      <anchorfile>classProphecy_1_1Argument_1_1ArgumentsWildcard.html</anchorfile>
      <anchor>a48032294f2bedc341efda682f05f7cf3</anchor>
      <arglist>(array $arguments)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classProphecy_1_1Argument_1_1ArgumentsWildcard.html</anchorfile>
      <anchor>a0ee7f08e9e6c2d6322041132b1e16db7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getTokens</name>
      <anchorfile>classProphecy_1_1Argument_1_1ArgumentsWildcard.html</anchorfile>
      <anchor>a3e117311d1e4d004ac0cec106d220a9d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Doubler::Generator::Node::ArgumentTypeNode</name>
    <filename>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1ArgumentTypeNode.html</filename>
    <base>Prophecy::Doubler::Generator::Node::TypeNodeAbstract</base>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::Types::Array_</name>
    <filename>classphpDocumentor_1_1Reflection_1_1Types_1_1Array__.html</filename>
    <base>phpDocumentor::Reflection::Types::AbstractList</base>
  </compound>
  <compound kind="class">
    <name>ArrayAccessible</name>
    <filename>classArrayAccessible.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classArrayAccessible.html</anchorfile>
      <anchor>a2391b5b544b24f50e075567c3503963e</anchor>
      <arglist>(array $array=[])</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>offsetExists</name>
      <anchorfile>classArrayAccessible.html</anchorfile>
      <anchor>a8a50c0d4705e08af24a5efed5e257b57</anchor>
      <arglist>($offset)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>offsetGet</name>
      <anchorfile>classArrayAccessible.html</anchorfile>
      <anchor>a178d7cecbe1ddf28e9ceb164355011e8</anchor>
      <arglist>($offset)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>offsetSet</name>
      <anchorfile>classArrayAccessible.html</anchorfile>
      <anchor>a3ab0959a031e2f073438d3178eb889f1</anchor>
      <arglist>($offset, $value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>offsetUnset</name>
      <anchorfile>classArrayAccessible.html</anchorfile>
      <anchor>a763fb5b3df8e652d5bf31b2d69512b1e</anchor>
      <arglist>($offset)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getIterator</name>
      <anchorfile>classArrayAccessible.html</anchorfile>
      <anchor>a30a8f59ab150ad398f8f6fa6ecc0fd77</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Comparator::ArrayComparator</name>
    <filename>classSebastianBergmann_1_1Comparator_1_1ArrayComparator.html</filename>
    <base>SebastianBergmann::Comparator::Comparator</base>
    <member kind="function">
      <type></type>
      <name>accepts</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ArrayComparator.html</anchorfile>
      <anchor>a84ad9f71096c9a1872cfe93b8d5ec519</anchor>
      <arglist>($expected, $actual)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>assertEquals</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ArrayComparator.html</anchorfile>
      <anchor>a45a9757ae61d6f456f512cea99aa5af2</anchor>
      <arglist>($expected, $actual, $delta=0.0, $canonicalize=false, $ignoreCase=false, array &amp;$processed=[])</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>indent</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ArrayComparator.html</anchorfile>
      <anchor>a92bd2d880c0828ba27c581000ec03521</anchor>
      <arglist>($lines)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Comparator::ArrayComparatorTest</name>
    <filename>classSebastianBergmann_1_1Comparator_1_1ArrayComparatorTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>acceptsFailsProvider</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ArrayComparatorTest.html</anchorfile>
      <anchor>aab88a37e26bdc10ab2e06d2e3a42898d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>assertEqualsSucceedsProvider</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ArrayComparatorTest.html</anchorfile>
      <anchor>a4fa28d15a6d92d3455ba4a463b43c536</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>assertEqualsFailsProvider</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ArrayComparatorTest.html</anchorfile>
      <anchor>a66e5f3068344f8fa26d15cb051a389c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAcceptsSucceeds</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ArrayComparatorTest.html</anchorfile>
      <anchor>ae616c97eae2522346263b9d28d9aa686</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAcceptsFails</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ArrayComparatorTest.html</anchorfile>
      <anchor>ae7dc21b5b977d97c255f73990d9a2f95</anchor>
      <arglist>($expected, $actual)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertEqualsSucceeds</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ArrayComparatorTest.html</anchorfile>
      <anchor>ab47a346b31681d9a4b07df70afad4efb</anchor>
      <arglist>($expected, $actual, $delta=0.0, $canonicalize=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertEqualsFails</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ArrayComparatorTest.html</anchorfile>
      <anchor>a70f9f838fa9173e45f818257eedb26c1</anchor>
      <arglist>($expected, $actual, $delta=0.0, $canonicalize=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ArrayComparatorTest.html</anchorfile>
      <anchor>adc1a66e30118be86b10cc5a1ad500b26</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Argument::Token::ArrayCountToken</name>
    <filename>classProphecy_1_1Argument_1_1Token_1_1ArrayCountToken.html</filename>
    <base>Prophecy::Argument::Token::TokenInterface</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1ArrayCountToken.html</anchorfile>
      <anchor>ab9b008ebff09d9039d2e6984f6f2edb5</anchor>
      <arglist>($value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>scoreArgument</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1ArrayCountToken.html</anchorfile>
      <anchor>a312edffe72db899389b920d3051f01a9</anchor>
      <arglist>($argument)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isLast</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1ArrayCountToken.html</anchorfile>
      <anchor>ab405cdd4b518f7c6c654a14277ba1b4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1ArrayCountToken.html</anchorfile>
      <anchor>a04e02f499fac2f9438c152133260d1fc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Argument::Token::ArrayEntryToken</name>
    <filename>classProphecy_1_1Argument_1_1Token_1_1ArrayEntryToken.html</filename>
    <base>Prophecy::Argument::Token::TokenInterface</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1ArrayEntryToken.html</anchorfile>
      <anchor>af54d364ea5f8c828b77b83113483cdce</anchor>
      <arglist>($key, $value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>scoreArgument</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1ArrayEntryToken.html</anchorfile>
      <anchor>a4454069fbae7a369ae10565a036564c3</anchor>
      <arglist>($argument)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isLast</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1ArrayEntryToken.html</anchorfile>
      <anchor>afdbe218230a824f5bb06f80912d997fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1ArrayEntryToken.html</anchorfile>
      <anchor>ad789a4bddf8186d962c474554bc7f80d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getKey</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1ArrayEntryToken.html</anchorfile>
      <anchor>a07ec71176512f085ccbd5dd6b7cc35f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getValue</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1ArrayEntryToken.html</anchorfile>
      <anchor>aadc11248b9c4dd2228ebb5e30e6c8557</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Argument::Token::ArrayEveryEntryToken</name>
    <filename>classProphecy_1_1Argument_1_1Token_1_1ArrayEveryEntryToken.html</filename>
    <base>Prophecy::Argument::Token::TokenInterface</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1ArrayEveryEntryToken.html</anchorfile>
      <anchor>a984fa8a45eaa71070bf0bba080468038</anchor>
      <arglist>($value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>scoreArgument</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1ArrayEveryEntryToken.html</anchorfile>
      <anchor>adb56f51d59543fff59bce728c0cec78c</anchor>
      <arglist>($argument)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isLast</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1ArrayEveryEntryToken.html</anchorfile>
      <anchor>aee1ed1a4bc0475d254e79a6cdda630e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1ArrayEveryEntryToken.html</anchorfile>
      <anchor>aca4f41768b5347313e6359a058f78a24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getValue</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1ArrayEveryEntryToken.html</anchorfile>
      <anchor>a4f98f57e27d11c3fa84f4833a7e1095b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::ArrayHasKey</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1ArrayHasKey.html</filename>
    <base>PHPUnit::Framework::Constraint::Constraint</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1ArrayHasKey.html</anchorfile>
      <anchor>a7cdef0df83fcc0206bacd0cb5f194acf</anchor>
      <arglist>($key)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1ArrayHasKey.html</anchorfile>
      <anchor>afa8b1c0d4a5ceefe3346b48ec3825dea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>matches</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1ArrayHasKey.html</anchorfile>
      <anchor>a73469c9abf47c927fbfe71a93c254cdc</anchor>
      <arglist>($other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>failureDescription</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1ArrayHasKey.html</anchorfile>
      <anchor>a46b612be2bac9618b2ee6f8a855548ae</anchor>
      <arglist>($other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::ArrayHasKeyTest</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1ArrayHasKeyTest.html</filename>
    <base>PHPUnit::Framework::Constraint::ConstraintTestCase</base>
    <member kind="function">
      <type></type>
      <name>testConstraintArrayHasKey</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1ArrayHasKeyTest.html</anchorfile>
      <anchor>a28e5bcef205643f1f8a89a51f3fde7e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintArrayHasKey2</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1ArrayHasKeyTest.html</anchorfile>
      <anchor>a2ca9250c7981e33f3f7cb386d0cd33be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintArrayHasKey0</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1ArrayHasKeyTest.html</anchorfile>
      <anchor>ab059df888e3ac0da2ee07674a0d4db91</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DoctrineTest::InstantiatorTestAsset::ArrayObjectAsset</name>
    <filename>classDoctrineTest_1_1InstantiatorTestAsset_1_1ArrayObjectAsset.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classDoctrineTest_1_1InstantiatorTestAsset_1_1ArrayObjectAsset.html</anchorfile>
      <anchor>a0aec04faa71b06f200519c1b7029d673</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeepCopy::f011::ArrayObjectExtended</name>
    <filename>classDeepCopy_1_1f011_1_1ArrayObjectExtended.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classDeepCopy_1_1f011_1_1ArrayObjectExtended.html</anchorfile>
      <anchor>ad622639c8d1d05aadacf40632a41f7a4</anchor>
      <arglist>($x)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$x</name>
      <anchorfile>classDeepCopy_1_1f011_1_1ArrayObjectExtended.html</anchorfile>
      <anchor>a656e6ab58360672e3fd5a2f333b390c8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeepCopy::TypeFilter::Spl::ArrayObjectFilter</name>
    <filename>classDeepCopy_1_1TypeFilter_1_1Spl_1_1ArrayObjectFilter.html</filename>
    <base>DeepCopy::TypeFilter::TypeFilter</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classDeepCopy_1_1TypeFilter_1_1Spl_1_1ArrayObjectFilter.html</anchorfile>
      <anchor>af0f03982bf05e017eb88cecd9a67c56e</anchor>
      <arglist>(DeepCopy $copier)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>apply</name>
      <anchorfile>classDeepCopy_1_1TypeFilter_1_1Spl_1_1ArrayObjectFilter.html</anchorfile>
      <anchor>a34f38d8a7cd467f2838df7cc8a029d18</anchor>
      <arglist>($arrayObject)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeepCopyTest::TypeFilter::Spl::ArrayObjectFilterTest</name>
    <filename>classDeepCopyTest_1_1TypeFilter_1_1Spl_1_1ArrayObjectFilterTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classDeepCopyTest_1_1TypeFilter_1_1Spl_1_1ArrayObjectFilterTest.html</anchorfile>
      <anchor>a81c6f00f9f818886491e0ae271826ec6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::ArraySubset</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1ArraySubset.html</filename>
    <base>PHPUnit::Framework::Constraint::Constraint</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1ArraySubset.html</anchorfile>
      <anchor>abe7dd47b940542a2658c55a81f21e3a8</anchor>
      <arglist>(iterable $subset, bool $strict=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>evaluate</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1ArraySubset.html</anchorfile>
      <anchor>a78632792e766adeb0e7a288e03f59c69</anchor>
      <arglist>($other, string $description=&apos;&apos;, bool $returnResult=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1ArraySubset.html</anchorfile>
      <anchor>a7ad5436220135ed2a0e3b7898cb8a01f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>failureDescription</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1ArraySubset.html</anchorfile>
      <anchor>a3751c8ad949e5826d1e490a82f2a077b</anchor>
      <arglist>($other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::ArraySubsetTest</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1ArraySubsetTest.html</filename>
    <base>PHPUnit::Framework::Constraint::ConstraintTestCase</base>
    <member kind="function">
      <type></type>
      <name>testEvaluate</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1ArraySubsetTest.html</anchorfile>
      <anchor>a6b0c7736c8500e67dabc5442ffb6884a</anchor>
      <arglist>($expected, $subset, $other, $strict)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testEvaluateWithArrayAccess</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1ArraySubsetTest.html</anchorfile>
      <anchor>a5717ccad656dbaabc4c64d903bb339be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testEvaluateFailMessage</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1ArraySubsetTest.html</anchorfile>
      <anchor>ac97ccad3e9d61856fac7d9eb0ab1b9c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>evaluateDataProvider</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1ArraySubsetTest.html</anchorfile>
      <anchor>aa2d1c5351aebafd542f5a35efb0f77bd</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::Types::ArrayTest</name>
    <filename>classphpDocumentor_1_1Reflection_1_1Types_1_1ArrayTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testArrayStringifyCorrectly</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1ArrayTest.html</anchorfile>
      <anchor>a79ef40928df229c4d19bedbf383cf8ef</anchor>
      <arglist>(Array_ $array, string $expectedString)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>provideArrays</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1ArrayTest.html</anchorfile>
      <anchor>ae54076e5464a7b76c0085daf0b3b2971</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Webmozart::Assert::Assert</name>
    <filename>classWebmozart_1_1Assert_1_1Assert.html</filename>
    <member kind="function" static="yes">
      <type>static</type>
      <name>string</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>af9e2e2a845cdee28dd1e2f6569b42fde</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>stringNotEmpty</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a3bdfc9d5bde10507531d03f22a6c93fd</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>integer</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>aa611451347350e051f2c26084a3cd8ac</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>integerish</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a64b1c1d92204509126583d3976d46254</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>float</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>ac1ea4e4b8f76f6e497b48252927bbd48</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>numeric</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a3d36fe4bfa2622de0b0aac81a9971b2c</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>natural</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>abdbcf6d9f0cb589a8366ac203ab893dd</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>boolean</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>aaf63dc8b4e2657161f9c7c0a429a49c2</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>scalar</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a460aa2c28eb8018ccfcfe1f92e2e0007</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>object</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>ab185e24927d129af24f35a8b6cf2c803</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>resource</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a42073972f6833f47219fa69fbe0e1cbb</anchor>
      <arglist>($value, $type=null, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>isCallable</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>aa3a30361650c0d8340d8ac7df1c2823c</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>isArray</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a952181592ac1866f310bdcc5455fc08b</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>isTraversable</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>aac9aaa558039d9aca9599bd79a353be8</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>isArrayAccessible</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a06514fe473d58ca2bcc0d09b5ca13f8f</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>isCountable</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a4f6dbd9fc12896903bee6d8f9fa58f4b</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>isIterable</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a93d887bdf3ce6eff529c2a3850270194</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>isInstanceOf</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a023a6702c3820d297a3aba7eb35e571f</anchor>
      <arglist>($value, $class, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>notInstanceOf</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a9e18a707c416c83aa0cd7e335b2c11e3</anchor>
      <arglist>($value, $class, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>isInstanceOfAny</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a36b8f13f10a1ca3ed0ff1663dbabef2f</anchor>
      <arglist>($value, array $classes, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>isAOf</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a4e4631af54be0b0de2154d503f887286</anchor>
      <arglist>($value, $class, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>isNotA</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a2f0ee79d7a67e6730acd514fa226bd35</anchor>
      <arglist>($value, $class, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>isAnyOf</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>ad422074d674bd29aa3189b5a4039d17a</anchor>
      <arglist>($value, array $classes, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>isEmpty</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a72443f07cc13f13d127012369602258c</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>notEmpty</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a84c2227dbb1492c787f27702447d05f2</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>null</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a72a1edcda22c724b3b1582be536a1be4</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>notNull</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>acb960966b4b428795961c703edb954be</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>true</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a00298e8628f6a1de268f9f0a87656c51</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>false</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a8e0efa6927166f6f6aae1d5cb9e16a99</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>notFalse</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>ab10bbaa57dfd929cc7387cc2a85bc6f2</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>ip</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>ac9e913e289c538ac63fd22d4efc04d32</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>ipv4</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a34d1beb26c08d60b8406b337844fe351</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>ipv6</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>ac761a845b83efa69c8cbbd0cc2c1a12e</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>email</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a170841abc56545181056b2892ace2346</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>uniqueValues</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a466b3df1c1a8170b2315204c92d31ef7</anchor>
      <arglist>(array $values, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>eq</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a1f28f67d375616254e7ebef0ea1a9232</anchor>
      <arglist>($value, $expect, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>notEq</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a262e487ee3dba0d768922ae1dfb4177a</anchor>
      <arglist>($value, $expect, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>same</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a9d97024ffeceff29b6d021db7ebf5d4b</anchor>
      <arglist>($value, $expect, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>notSame</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a5bbff91f9e6b8776806275e41776d7f9</anchor>
      <arglist>($value, $expect, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>greaterThan</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a3e2c2c86984234a44d35a5ec016055f1</anchor>
      <arglist>($value, $limit, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>greaterThanEq</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a57cde14f7c7e2c70e58fb976d1492011</anchor>
      <arglist>($value, $limit, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>lessThan</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a72d261fd4ed236cf325f1098744e278a</anchor>
      <arglist>($value, $limit, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>lessThanEq</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>aaa8f6f06ad645939855054997f33c226</anchor>
      <arglist>($value, $limit, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>range</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>ac905e3cb82d746897ec932631d982b6b</anchor>
      <arglist>($value, $min, $max, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>oneOf</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a6d6e4c493d385620ad7973d46e9fe0f8</anchor>
      <arglist>($value, array $values, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>inArray</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a97a5bc9a1d2f068de220fe5cf5b477fd</anchor>
      <arglist>($value, array $values, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>contains</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>af7776fc92d430c726995db1bc35bad99</anchor>
      <arglist>($value, $subString, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>notContains</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a061e4413cf6e18d184d09e83f89ddbbf</anchor>
      <arglist>($value, $subString, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>notWhitespaceOnly</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a31295ef18ba37aa7ee5c8b3c8967493a</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>startsWith</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>af80c9c3ab29e9a043c60caa00fe15ee0</anchor>
      <arglist>($value, $prefix, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>notStartsWith</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a183b97e07771caed5b8511e38f13e757</anchor>
      <arglist>($value, $prefix, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>startsWithLetter</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a53b601325c940721b680f135959475c0</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>endsWith</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a628049dd43870deb2700c61fdc160937</anchor>
      <arglist>($value, $suffix, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>notEndsWith</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>ae319842a7bfd2ee669908be814b16ef5</anchor>
      <arglist>($value, $suffix, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>regex</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a31c87ab8d651625b45c9d6fb83f355a8</anchor>
      <arglist>($value, $pattern, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>notRegex</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>acdd03cc6fb38ef1d9ce37acf8979d5cd</anchor>
      <arglist>($value, $pattern, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>unicodeLetters</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a2dae8877d6aa41060bf94e86754123f6</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>alpha</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>ae3e25e1b3583227f69ab914b61ce7098</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>digits</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a3a9db58463d57ad1ad83b68daa6b8c9e</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>alnum</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>ab7fd55d1ce8e8ffe95f4afce729c88b1</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>lower</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a221252136d1c0c9afbfb1317ba8ed208</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>upper</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a3764b8cc467c66fbad705cacf6634fac</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>length</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a4f8b1431b09a60da71bf59a4f51782a7</anchor>
      <arglist>($value, $length, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>minLength</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a2d88e9971122892240e64b68042f6108</anchor>
      <arglist>($value, $min, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>maxLength</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>abf51679444add4e588e82963e61e72d6</anchor>
      <arglist>($value, $max, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>lengthBetween</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a8d416653648ddb848c01772c3978f785</anchor>
      <arglist>($value, $min, $max, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>fileExists</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>ae7e3aeda93ca221fb3e74cadd87098db</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>file</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>ad04f4b861b863b1c40fcd8401e97a340</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>directory</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a56a03e3e6292a9c411860353474d29ce</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>readable</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a1e97fa7c14dfe4a0d60936459412ece5</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>writable</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>aa90fd512d219f9b9201e58d33130de45</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>classExists</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>aab20ac545f33f4849665beb40eea89d3</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>subclassOf</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a8506e40ffb400b251d079655e4f8ba4b</anchor>
      <arglist>($value, $class, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>interfaceExists</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>aadf1aad22add6f15c2eddc2ab1553394</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>implementsInterface</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a00d790254be92f3f7d00e516ced81ddb</anchor>
      <arglist>($value, $interface, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>propertyExists</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a14590c00fe3b2ee80890f037e4905992</anchor>
      <arglist>($classOrObject, $property, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>propertyNotExists</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>aaf5331b50f6c9d8082fcf206710c83f7</anchor>
      <arglist>($classOrObject, $property, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>methodExists</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>aa061109dbb161c1f0744e89c389f4b08</anchor>
      <arglist>($classOrObject, $method, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>methodNotExists</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a9e452837817824cd9deaea06740cbff5</anchor>
      <arglist>($classOrObject, $method, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>keyExists</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a5b6d81b277b85a7028817102088a6571</anchor>
      <arglist>($array, $key, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>keyNotExists</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>ab812d5814939e35687738d6c9d7f422f</anchor>
      <arglist>($array, $key, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>validArrayKey</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a4a64f7de09b8b1109e5cd884ea643ece</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>count</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>aed1c06d741b5ea4954c82c44c0714d33</anchor>
      <arglist>($array, $number, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>minCount</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a6cb68077643bdda0ed973a6be916ef55</anchor>
      <arglist>($array, $min, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>maxCount</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a411bbada544a41d5e8fde50f66b12595</anchor>
      <arglist>($array, $max, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>countBetween</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>aa0edf49fc17a041b943e3d95f1544b36</anchor>
      <arglist>($array, $min, $max, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>isList</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a727890e6c14b04f5940a02c5e84543ad</anchor>
      <arglist>($array, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>isNonEmptyList</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a32efbfa82404fb49a863d26374f3af5f</anchor>
      <arglist>($array, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>isMap</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a726a3ac1c3c5f73e03e692e0f5d3d78d</anchor>
      <arglist>($array, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>isNonEmptyMap</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a30b373a5cd51d5965ef24f6f4e40bccf</anchor>
      <arglist>($array, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>uuid</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>ac71eb1c8032d6fc19de56c052f425039</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>throws</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a4a62cf8836249f6155c2fa985ed6e5a3</anchor>
      <arglist>(Closure $expression, $class=&apos;Exception&apos;, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>__callStatic</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a6e785c75f3a86cef5dbfb70efe4e6054</anchor>
      <arglist>($name, $arguments)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static</type>
      <name>valueToString</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a6e39018c75054a2d286bf3d17c1e59e8</anchor>
      <arglist>($value)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static</type>
      <name>typeToString</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a9e3bf79dd614f696e9b26ccc932ccdb5</anchor>
      <arglist>($value)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static</type>
      <name>strlen</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a93dfbf3131fabac78fb3820d97b1739c</anchor>
      <arglist>($value)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static</type>
      <name>reportInvalidArgument</name>
      <anchorfile>classWebmozart_1_1Assert_1_1Assert.html</anchorfile>
      <anchor>a75205bfb6d73b71dab56b8d44796a17f</anchor>
      <arglist>($message)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Assert</name>
    <filename>classPHPUnit_1_1Framework_1_1Assert.html</filename>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertArrayHasKey</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a03da2075fadec6d8ed56a6494f18d3e5</anchor>
      <arglist>($key, $array, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertArraySubset</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a6fb2491cc7f44b0693551f2de42535b3</anchor>
      <arglist>($subset, $array, bool $checkForObjectIdentity=false, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertArrayNotHasKey</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a23104628d48ee809b0f8a7d8161eed11</anchor>
      <arglist>($key, $array, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertContains</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>ad49b4d10ef2fb8f3002226a4e67d275c</anchor>
      <arglist>($needle, $haystack, string $message=&apos;&apos;, bool $ignoreCase=false, bool $checkForObjectIdentity=true, bool $checkForNonObjectIdentity=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertContainsEquals</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>aa7b10538dabe081f591230434c22ae69</anchor>
      <arglist>($needle, iterable $haystack, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertAttributeContains</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a252e8009d3181a225b1e0efe31eaed0e</anchor>
      <arglist>($needle, string $haystackAttributeName, $haystackClassOrObject, string $message=&apos;&apos;, bool $ignoreCase=false, bool $checkForObjectIdentity=true, bool $checkForNonObjectIdentity=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertNotContains</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a67aafb4ad65675e71123988427419b89</anchor>
      <arglist>($needle, $haystack, string $message=&apos;&apos;, bool $ignoreCase=false, bool $checkForObjectIdentity=true, bool $checkForNonObjectIdentity=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertNotContainsEquals</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a9675e70613ea4188a9db33291a699bf8</anchor>
      <arglist>($needle, iterable $haystack, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertAttributeNotContains</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a2893b65802db5e508864cfafc595d786</anchor>
      <arglist>($needle, string $haystackAttributeName, $haystackClassOrObject, string $message=&apos;&apos;, bool $ignoreCase=false, bool $checkForObjectIdentity=true, bool $checkForNonObjectIdentity=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertContainsOnly</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a992f174395bd518b06a0c81241b520e0</anchor>
      <arglist>(string $type, iterable $haystack, ?bool $isNativeType=null, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertContainsOnlyInstancesOf</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>aeb5f38e30822ddf92022b674641df3c0</anchor>
      <arglist>(string $className, iterable $haystack, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertAttributeContainsOnly</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a6bb4441ec8e6847d524489b63b60f018</anchor>
      <arglist>(string $type, string $haystackAttributeName, $haystackClassOrObject, ?bool $isNativeType=null, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertNotContainsOnly</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>ae462d8c7841b7f7426fdc5d7ac7622d7</anchor>
      <arglist>(string $type, iterable $haystack, ?bool $isNativeType=null, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertAttributeNotContainsOnly</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>ae6026d3bae73848cbdc95a60854cae6d</anchor>
      <arglist>(string $type, string $haystackAttributeName, $haystackClassOrObject, ?bool $isNativeType=null, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertCount</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a24e19d9b0c53e2af08df15debe544c12</anchor>
      <arglist>(int $expectedCount, $haystack, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertAttributeCount</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a5150d39c2d512e984326ba8d7fe15263</anchor>
      <arglist>(int $expectedCount, string $haystackAttributeName, $haystackClassOrObject, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertNotCount</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a0de43a8068b661d885cfa5834bcccc97</anchor>
      <arglist>(int $expectedCount, $haystack, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertAttributeNotCount</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a47b61c3bc064f74051377ad1f938037b</anchor>
      <arglist>(int $expectedCount, string $haystackAttributeName, $haystackClassOrObject, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertEquals</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a4dc4d8cdc5b602df28efadf5a69d0640</anchor>
      <arglist>($expected, $actual, string $message=&apos;&apos;, float $delta=0.0, int $maxDepth=10, bool $canonicalize=false, bool $ignoreCase=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertEqualsCanonicalizing</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>ae8845806ee590c73305c251c905c85d3</anchor>
      <arglist>($expected, $actual, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertEqualsIgnoringCase</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>abd6fca574622e0cb2d61152b04716de4</anchor>
      <arglist>($expected, $actual, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertEqualsWithDelta</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a0f7c7a7aa3233e073a091a09fe9fd1ea</anchor>
      <arglist>($expected, $actual, float $delta, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertAttributeEquals</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>af764ae7f75c8dceacd1cb2dc71fa38fb</anchor>
      <arglist>($expected, string $actualAttributeName, $actualClassOrObject, string $message=&apos;&apos;, float $delta=0.0, int $maxDepth=10, bool $canonicalize=false, bool $ignoreCase=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertNotEquals</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a8b8a3e0d396bfe65fbba2ec9b9692602</anchor>
      <arglist>($expected, $actual, string $message=&apos;&apos;, $delta=0.0, $maxDepth=10, $canonicalize=false, $ignoreCase=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertNotEqualsCanonicalizing</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a4dc7d65ee2825919a37ee522fb42ce55</anchor>
      <arglist>($expected, $actual, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertNotEqualsIgnoringCase</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>ac21b6601da973f059e254c7c0a8a6b64</anchor>
      <arglist>($expected, $actual, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertNotEqualsWithDelta</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a5640d42061587423c52b2dedb23f9c8f</anchor>
      <arglist>($expected, $actual, float $delta, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertAttributeNotEquals</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a0039e61c2f4f31abdf954e96587f4cca</anchor>
      <arglist>($expected, string $actualAttributeName, $actualClassOrObject, string $message=&apos;&apos;, float $delta=0.0, int $maxDepth=10, bool $canonicalize=false, bool $ignoreCase=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertEmpty</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a6c6c48b5af5111926b00201c63ca98a0</anchor>
      <arglist>($actual, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertAttributeEmpty</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a36f5a838cd42a1a531e0f9abeb0b6797</anchor>
      <arglist>(string $haystackAttributeName, $haystackClassOrObject, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertNotEmpty</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a88d937d1e9b362b11d55a694a7e4407b</anchor>
      <arglist>($actual, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertAttributeNotEmpty</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a93d610559c66da5a94a0368fec60f957</anchor>
      <arglist>(string $haystackAttributeName, $haystackClassOrObject, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertGreaterThan</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>ac5418c555a45e178dab0d95982f05f24</anchor>
      <arglist>($expected, $actual, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertAttributeGreaterThan</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>adab7af372671269845de7c755f31876d</anchor>
      <arglist>($expected, string $actualAttributeName, $actualClassOrObject, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertGreaterThanOrEqual</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a23077057224cf006d6bf4e15d848a12b</anchor>
      <arglist>($expected, $actual, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertAttributeGreaterThanOrEqual</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a97a7a0128c286a6d89a9726f84595100</anchor>
      <arglist>($expected, string $actualAttributeName, $actualClassOrObject, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertLessThan</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a188af1e1a23bd00fef20a88be9a89493</anchor>
      <arglist>($expected, $actual, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertAttributeLessThan</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a524675164e4a7a38da092134eb6b4319</anchor>
      <arglist>($expected, string $actualAttributeName, $actualClassOrObject, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertLessThanOrEqual</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a767b278a6301ea6744a6c626cfe6c6c6</anchor>
      <arglist>($expected, $actual, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertAttributeLessThanOrEqual</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>aaf01a6dbd184056df86312c1af3675db</anchor>
      <arglist>($expected, string $actualAttributeName, $actualClassOrObject, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertFileEquals</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>aa94a127194d58424b682565c643ae10f</anchor>
      <arglist>(string $expected, string $actual, string $message=&apos;&apos;, bool $canonicalize=false, bool $ignoreCase=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertFileEqualsCanonicalizing</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a667d5959588175ca76ef6311ed6a0c01</anchor>
      <arglist>(string $expected, string $actual, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertFileEqualsIgnoringCase</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>abf4b8ff6ac201682b6aacc41ced0a6a6</anchor>
      <arglist>(string $expected, string $actual, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertFileNotEquals</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a77eb190b1946096abf1209dbf36d3add</anchor>
      <arglist>(string $expected, string $actual, string $message=&apos;&apos;, bool $canonicalize=false, bool $ignoreCase=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertFileNotEqualsCanonicalizing</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a8f0d4d9abd3b733e094d86c0bb5d429f</anchor>
      <arglist>(string $expected, string $actual, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertFileNotEqualsIgnoringCase</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a48886998a3370263f70401fe705c8058</anchor>
      <arglist>(string $expected, string $actual, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertStringEqualsFile</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a9127965bbd83f17a1e83816efdf332f6</anchor>
      <arglist>(string $expectedFile, string $actualString, string $message=&apos;&apos;, bool $canonicalize=false, bool $ignoreCase=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertStringEqualsFileCanonicalizing</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>aa45339e849c44bf6d43f5a2a24e386e3</anchor>
      <arglist>(string $expectedFile, string $actualString, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertStringEqualsFileIgnoringCase</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>ae5bc639d58919ed478e99a4fcba77464</anchor>
      <arglist>(string $expectedFile, string $actualString, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertStringNotEqualsFile</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>acae3a385762abae3847e28052dca3672</anchor>
      <arglist>(string $expectedFile, string $actualString, string $message=&apos;&apos;, bool $canonicalize=false, bool $ignoreCase=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertStringNotEqualsFileCanonicalizing</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a7689d6136cd8ae27410fe659f70d6dcd</anchor>
      <arglist>(string $expectedFile, string $actualString, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertStringNotEqualsFileIgnoringCase</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a39d693079ae345d8f737eb311fca27ef</anchor>
      <arglist>(string $expectedFile, string $actualString, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertIsReadable</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a07c5733fa1f7c01976fe902a36e8371c</anchor>
      <arglist>(string $filename, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertNotIsReadable</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a649424b79862358eb455aecb42b42650</anchor>
      <arglist>(string $filename, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertIsWritable</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>ade8206f25ec7b237792312b6897c9e25</anchor>
      <arglist>(string $filename, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertNotIsWritable</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>aeaaaa155f0a9041386f81b803df8e7d8</anchor>
      <arglist>(string $filename, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertDirectoryExists</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a2b983b76469d9809a3e620e07498009e</anchor>
      <arglist>(string $directory, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertDirectoryNotExists</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a5d235213be069ae912e0dfb72a9099e1</anchor>
      <arglist>(string $directory, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertDirectoryIsReadable</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a4e3c6477d043146d9da250570ab99ced</anchor>
      <arglist>(string $directory, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertDirectoryNotIsReadable</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a24f5b7d4023f6cac5a1b1e36f22ff7f9</anchor>
      <arglist>(string $directory, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertDirectoryIsWritable</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a92b0ef3aca0118ef13616965b2abcfdc</anchor>
      <arglist>(string $directory, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertDirectoryNotIsWritable</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a35daaf4f5a42abed8247452fa86571b7</anchor>
      <arglist>(string $directory, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertFileExists</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a4bc7966c870d8736db91094378ec4145</anchor>
      <arglist>(string $filename, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertFileNotExists</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a866efc4aaa05df2cbb4325f92e6c336b</anchor>
      <arglist>(string $filename, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertFileIsReadable</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>aff60c64f4bdab687e92dcade390dc452</anchor>
      <arglist>(string $file, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertFileNotIsReadable</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>abfe7acf47a48a64f806f9bf495dd29c3</anchor>
      <arglist>(string $file, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertFileIsWritable</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a271b4746afb89cf73a5eeb767f5ee0cb</anchor>
      <arglist>(string $file, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertFileNotIsWritable</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>ac22a0b3a15fc706f02f0f6e6878d5cba</anchor>
      <arglist>(string $file, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertTrue</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a57134832255a7c6976f7ef26f47bd2b5</anchor>
      <arglist>($condition, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertNotTrue</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a69dad8d2ee803c543999fcfe6c2bfc8b</anchor>
      <arglist>($condition, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertFalse</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a7baf62ec278a0aa821f8fb8d3e022264</anchor>
      <arglist>($condition, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertNotFalse</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>aee21838157549c7569958d778c0bdeae</anchor>
      <arglist>($condition, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertNull</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a1abfb957d62e90c4988aaf52f2243d10</anchor>
      <arglist>($actual, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertNotNull</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>af51b1cfffe55662ec2e429f2594f350d</anchor>
      <arglist>($actual, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertFinite</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a5bcc129e256cc20cde6095becf5c9824</anchor>
      <arglist>($actual, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertInfinite</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>ae257984a6f4f22e45e9784da3ee78388</anchor>
      <arglist>($actual, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertNan</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>ad5468c06e6c73fb91688b4748dff69f4</anchor>
      <arglist>($actual, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertClassHasAttribute</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a020e9cf0e3de574acc0e9d067d133bcb</anchor>
      <arglist>(string $attributeName, string $className, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertClassNotHasAttribute</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>af1b308c27dba5d524c57157c553c9baa</anchor>
      <arglist>(string $attributeName, string $className, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertClassHasStaticAttribute</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a47ae26a1bb19a05c981c4f4c0a735e33</anchor>
      <arglist>(string $attributeName, string $className, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertClassNotHasStaticAttribute</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a7f7ffca79d79ff4d9e5691cf31dc8ada</anchor>
      <arglist>(string $attributeName, string $className, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertObjectHasAttribute</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a496168edd28e71853a1035cdacdcc96b</anchor>
      <arglist>(string $attributeName, $object, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertObjectNotHasAttribute</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>aefda7afebf15b7085c8739c36929860f</anchor>
      <arglist>(string $attributeName, $object, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertSame</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>afaceb006ba7a6bacf9eee5e7a7a2f5cf</anchor>
      <arglist>($expected, $actual, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertAttributeSame</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a13812e23a605b7c7e01e30898209cfc2</anchor>
      <arglist>($expected, string $actualAttributeName, $actualClassOrObject, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertNotSame</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>ad6235ca1a755ac2f8ad5cf75f4cf8d97</anchor>
      <arglist>($expected, $actual, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertAttributeNotSame</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>abc9be7378bf73badaf8829217d490486</anchor>
      <arglist>($expected, string $actualAttributeName, $actualClassOrObject, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertInstanceOf</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a4dddcb75637db0a8e702900b48048a07</anchor>
      <arglist>(string $expected, $actual, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertAttributeInstanceOf</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a2f2cf6e6e0868550022f3075540e43f9</anchor>
      <arglist>(string $expected, string $attributeName, $classOrObject, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertNotInstanceOf</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a690f8cf77f9be77b63057afd8b13632f</anchor>
      <arglist>(string $expected, $actual, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertAttributeNotInstanceOf</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a9d288043b6bac9837e2998d7637851cc</anchor>
      <arglist>(string $expected, string $attributeName, $classOrObject, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertInternalType</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a5db78415f1b55682a9689caa16fee0a5</anchor>
      <arglist>(string $expected, $actual, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertAttributeInternalType</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a9f06ccab1e27c0fbf1fdad86d30e8231</anchor>
      <arglist>(string $expected, string $attributeName, $classOrObject, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertIsArray</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a5ae4d2be4a2c928886c3c841673f7d82</anchor>
      <arglist>($actual, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertIsBool</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>aa49e2bccec939a33e93196982c89a736</anchor>
      <arglist>($actual, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertIsFloat</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>ad65a267b18c61bff80251ad657b42a74</anchor>
      <arglist>($actual, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertIsInt</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>af5f7a04df9275d8d3157cf08ba5ac339</anchor>
      <arglist>($actual, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertIsNumeric</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>afd41472ea2d0ad9e45d8e98606044f4b</anchor>
      <arglist>($actual, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertIsObject</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a50490885116a39ace8ec87d1babaee11</anchor>
      <arglist>($actual, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertIsResource</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>aff03cb39fa34a0bf886fe6e431f6b643</anchor>
      <arglist>($actual, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertIsString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>af183e2bd79df80c008d2b085671fef00</anchor>
      <arglist>($actual, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertIsScalar</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>af9a9ea237b370eb63a14037a956317d0</anchor>
      <arglist>($actual, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertIsCallable</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a8b9d54621ea33c67949bedcdc959772b</anchor>
      <arglist>($actual, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertIsIterable</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>af4c2de0990d6051c1aa845c8efb53d77</anchor>
      <arglist>($actual, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertNotInternalType</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>ad7367177f3a1d58fe8c43ffd71049d09</anchor>
      <arglist>(string $expected, $actual, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertIsNotArray</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>ab16f35236049d6ba156a0b0e7a5fc0f4</anchor>
      <arglist>($actual, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertIsNotBool</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a6b4719603063a2c5d2b09da3ba59886c</anchor>
      <arglist>($actual, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertIsNotFloat</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>ad3291d8c7b6f72912f9cbcbadbc65519</anchor>
      <arglist>($actual, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertIsNotInt</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a697f5bd7367e0cf030490de4dce17d64</anchor>
      <arglist>($actual, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertIsNotNumeric</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a6f5944a2d53fd5e0def8a99fcfe3b259</anchor>
      <arglist>($actual, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertIsNotObject</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a950cc88a469d9342430e0db2e00c227f</anchor>
      <arglist>($actual, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertIsNotResource</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>af79cdf25ffcb12c90caee2421a728337</anchor>
      <arglist>($actual, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertIsNotString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a3571d4d2904b10f483e6e1c6942f43f9</anchor>
      <arglist>($actual, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertIsNotScalar</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a10e70e36ddebec7b40aecbbdfeab0cb7</anchor>
      <arglist>($actual, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertIsNotCallable</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a6548b7e64fca3e8085f4b24a769fec41</anchor>
      <arglist>($actual, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertIsNotIterable</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>adf13073f7c7f397b75eacc3094c0f612</anchor>
      <arglist>($actual, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertAttributeNotInternalType</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a085ffd273433cb31ebadffd6271f5359</anchor>
      <arglist>(string $expected, string $attributeName, $classOrObject, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertRegExp</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a395b11d084296d33a15642e32894275e</anchor>
      <arglist>(string $pattern, string $string, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertNotRegExp</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a784026d8467fb3b5ddb9b11ca8fa853b</anchor>
      <arglist>(string $pattern, string $string, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertSameSize</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a12100d7fe2783bd3453f69e375fcd6e5</anchor>
      <arglist>($expected, $actual, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertNotSameSize</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>ad5dc6eb115a6c85726a1343ca0016f24</anchor>
      <arglist>($expected, $actual, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertStringMatchesFormat</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a98a4b066bb084961c55f70d1603f0d5d</anchor>
      <arglist>(string $format, string $string, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertStringNotMatchesFormat</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>ad1e63cd4b4f1ca91debd98cb59a46b9a</anchor>
      <arglist>(string $format, string $string, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertStringMatchesFormatFile</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>ade2f5b05766d205bacb05366b3e94829</anchor>
      <arglist>(string $formatFile, string $string, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertStringNotMatchesFormatFile</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a7fc6ccd922838b7e480bfa75d8d2d9b0</anchor>
      <arglist>(string $formatFile, string $string, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertStringStartsWith</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a82410405bb8b03bf5b83371daca1ef11</anchor>
      <arglist>(string $prefix, string $string, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertStringStartsNotWith</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a1c33a7324227a9e40fdf3c78220d119b</anchor>
      <arglist>($prefix, $string, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertStringContainsString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a9bc74a332217b4889d9f78ee5c669db6</anchor>
      <arglist>(string $needle, string $haystack, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertStringContainsStringIgnoringCase</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>ab1ffa9e770866fc9f20013d760b5f9ad</anchor>
      <arglist>(string $needle, string $haystack, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertStringNotContainsString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a64aa8fcec139464ca83f7fc79ed4a054</anchor>
      <arglist>(string $needle, string $haystack, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertStringNotContainsStringIgnoringCase</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>aab1eceaae80345c61e8e0d449bfb35cb</anchor>
      <arglist>(string $needle, string $haystack, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertStringEndsWith</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>ae960e2f0100139a0b2b75ab5c95a6474</anchor>
      <arglist>(string $suffix, string $string, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertStringEndsNotWith</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a7853fb5687e37c5dbbd3142b691d732c</anchor>
      <arglist>(string $suffix, string $string, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertXmlFileEqualsXmlFile</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>aa05803fda1f4693232b63addff5a204e</anchor>
      <arglist>(string $expectedFile, string $actualFile, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertXmlFileNotEqualsXmlFile</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a1038bd19a6573de38d6ee522419e153a</anchor>
      <arglist>(string $expectedFile, string $actualFile, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertXmlStringEqualsXmlFile</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a1cae247b756ac7aa03a985f6fb36c51d</anchor>
      <arglist>(string $expectedFile, $actualXml, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertXmlStringNotEqualsXmlFile</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a41200fab857fdcb3f04b0cf3171379b9</anchor>
      <arglist>(string $expectedFile, $actualXml, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertXmlStringEqualsXmlString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a8976ee62b8bd628d3c96e563ac99aa59</anchor>
      <arglist>($expectedXml, $actualXml, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertXmlStringNotEqualsXmlString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>ae579502a1250255c31620e9a27f63a4e</anchor>
      <arglist>($expectedXml, $actualXml, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertEqualXMLStructure</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a5d5ef6348fdf3f3ff54aa09de5bf3b4a</anchor>
      <arglist>(DOMElement $expectedElement, DOMElement $actualElement, bool $checkAttributes=false, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertThat</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a926fbf9f74ca8c69bdd11670fb6bd3e1</anchor>
      <arglist>($value, Constraint $constraint, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertJson</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>aedb4cc718c64c07d3fa789b9ca4b179c</anchor>
      <arglist>(string $actualJson, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertJsonStringEqualsJsonString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>ad87ae71de340b4552c6122e92139251f</anchor>
      <arglist>(string $expectedJson, string $actualJson, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertJsonStringNotEqualsJsonString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a511d900cf6822d17b6b2d85dcfebfa64</anchor>
      <arglist>($expectedJson, $actualJson, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertJsonStringEqualsJsonFile</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a6897f5cd16d722ef4182671bc37441fd</anchor>
      <arglist>(string $expectedFile, string $actualJson, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertJsonStringNotEqualsJsonFile</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a258e68d393325ee417c322cca94f9cb3</anchor>
      <arglist>(string $expectedFile, string $actualJson, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertJsonFileEqualsJsonFile</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>ac98ddbccb102abb23e0acf30be7e1284</anchor>
      <arglist>(string $expectedFile, string $actualFile, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>assertJsonFileNotEqualsJsonFile</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a4c6ef0f963b7e6131ab3a2d156f505cf</anchor>
      <arglist>(string $expectedFile, string $actualFile, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>logicalAnd</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a2ebf7fdb6bd03575106315e5571cf296</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>logicalOr</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a4c59763205b6b459a75e30928557f569</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>logicalNot</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>adfe4a8887758812ef5543b31f1e7f31d</anchor>
      <arglist>(Constraint $constraint)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>logicalXor</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>aee06b888eb906055cde4b1267ee51f64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>anything</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a8f0316090e499c0e9a4704b5b2e0b5d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>isTrue</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a92e239cf302efb403e8d39202bbd2a4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>callback</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a681ed08f8243ca22c5b4767b9691e4f3</anchor>
      <arglist>(callable $callback)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>isFalse</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>aff698467f71966018ec8024b25e87c6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>isJson</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>aa4d1b30427ee5501ff43f891826bf6dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>isNull</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>aca5436d5646a9e33088136d7a3318399</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>isFinite</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>ac46f1e7aea96714d156d1d13ded71bd3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>isInfinite</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>aacf0c69af0fa328420db955b58273f2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>isNan</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>ac7345077abda53ca5e24608b5d0282c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>attribute</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a213d4e36c350c7da59e8deb2b7af9fe1</anchor>
      <arglist>(Constraint $constraint, string $attributeName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>contains</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a99aa00cd6f4184e65aba18780b54067c</anchor>
      <arglist>($value, bool $checkForObjectIdentity=true, bool $checkForNonObjectIdentity=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>containsEqual</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>af2da434ec044cc2c89d8cba5ca7c6203</anchor>
      <arglist>($value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>containsIdentical</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a217f27d2f8f5ca59c9d42586d9fa401f</anchor>
      <arglist>($value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>containsOnly</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>aa689a5910cfcb1e9647a53e4184b9f47</anchor>
      <arglist>(string $type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>containsOnlyInstancesOf</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>adee6e2ce108fe63e747d175629d9059b</anchor>
      <arglist>(string $className)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>arrayHasKey</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a9d9af06698f34d0f004dc68487958229</anchor>
      <arglist>($key)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>equalTo</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a5d549158adffd328bb6765f05b82ce7f</anchor>
      <arglist>($value, float $delta=0.0, int $maxDepth=10, bool $canonicalize=false, bool $ignoreCase=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>attributeEqualTo</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>aaaecf68e2f8c0d3a2357754188c9b217</anchor>
      <arglist>(string $attributeName, $value, float $delta=0.0, int $maxDepth=10, bool $canonicalize=false, bool $ignoreCase=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>isEmpty</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>aa5c115cd4847bd735c12d3dce7460aa7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>isWritable</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a41eddbd3cd8d95c60539c64bd48091eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>isReadable</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a0b1ed46ba884a54624734cf332aaac13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>directoryExists</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a00ee9be08ef807906254219c6117c8f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>fileExists</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>aa14ff8494ea01f024b075b6841967cf3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>greaterThan</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a4eed9fe4e179213f848ab300e3bf746f</anchor>
      <arglist>($value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>greaterThanOrEqual</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a8ec40a7eb34f61b44ffe5a3e80244d38</anchor>
      <arglist>($value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>classHasAttribute</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>abc2f006349ac2b56cb5a0514cfa5cd10</anchor>
      <arglist>(string $attributeName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>classHasStaticAttribute</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a82e897d2423539b04ee2e4891776c33b</anchor>
      <arglist>(string $attributeName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>objectHasAttribute</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a08129178a9e81ae7b024bb9b352d4421</anchor>
      <arglist>($attributeName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>identicalTo</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>ab97904e2dfdb4f966ba8f0eadea9fbaa</anchor>
      <arglist>($value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>isInstanceOf</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>af3edc8ef46a56b02e3b3f62c1280409f</anchor>
      <arglist>(string $className)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>isType</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>ac6e832ef7f24f47f9b145e1734f45980</anchor>
      <arglist>(string $type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>lessThan</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a49c00804769665eea93475b72b3a7bc3</anchor>
      <arglist>($value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>lessThanOrEqual</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a3cb58c6e3044142ac9f7cef94899ce37</anchor>
      <arglist>($value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>matchesRegularExpression</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a177cf814d5c070ce89e357b5255c94f6</anchor>
      <arglist>(string $pattern)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>matches</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a2092544c311322a9e2a70bf5b4b61a22</anchor>
      <arglist>(string $string)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>stringStartsWith</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a59b1e7eacb5fd43abc422747bb8cf8f6</anchor>
      <arglist>($prefix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>stringContains</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>ad095a6b3481138c2248838927fc375b9</anchor>
      <arglist>(string $string, bool $case=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>stringEndsWith</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a140d3a7cfa74127bfeb81ed62a33d169</anchor>
      <arglist>(string $suffix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>countOf</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a638c1cb92f49bfa5c13d542860281b4d</anchor>
      <arglist>(int $count)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>fail</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a4a4d64d6ac459689d64aad8bb1528783</anchor>
      <arglist>(string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>readAttribute</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>afc3fbb03f65dbb864eb9b2eca459d371</anchor>
      <arglist>($classOrObject, string $attributeName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>getStaticAttribute</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>aee96f1d06272320543ea1a96c3dfce24</anchor>
      <arglist>(string $className, string $attributeName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>getObjectAttribute</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>aea2f6ccb3f5cc43bd8ced2f6e71d7f84</anchor>
      <arglist>($object, string $attributeName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>markTestIncomplete</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a48ccd8c56547a01337a0a3762f9c6a76</anchor>
      <arglist>(string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>markTestSkipped</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a6f96744e410c8624cb4bedb6605cf4a5</anchor>
      <arglist>(string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>getCount</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>a0691f47160faa092dcb00fa3aa6ef90f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>resetCount</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Assert.html</anchorfile>
      <anchor>acf77522179e89530c235d7efc8b1b4ee</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AssertionExample</name>
    <filename>classAssertionExample.html</filename>
    <member kind="function">
      <type></type>
      <name>doSomething</name>
      <anchorfile>classAssertionExample.html</anchorfile>
      <anchor>abd616ad40be215c3e8fe71495828e66d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AssertionExampleTest</name>
    <filename>classAssertionExampleTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testOne</name>
      <anchorfile>classAssertionExampleTest.html</anchorfile>
      <anchor>a811a26d72475d1ea12a65f4a7a549afe</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::AssertionFailedError</name>
    <filename>classPHPUnit_1_1Framework_1_1AssertionFailedError.html</filename>
    <base>PHPUnit::Framework::Exception</base>
    <base>PHPUnit::Framework::SelfDescribing</base>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertionFailedError.html</anchorfile>
      <anchor>a0c5882e4237e6edfd2d48897a6dfb615</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::AssertTest</name>
    <filename>classPHPUnit_1_1Framework_1_1AssertTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testFail</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a0b28f85f204a96b593dfeb550b5d8d32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertContainsOnlyInstancesOf</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>aef77184512947982b8158c489b18beb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertArrayHasKeyThrowsExceptionForInvalidFirstArgument</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a806f70f625e97c5ca7692cd59ce19d1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertArrayHasKeyThrowsExceptionForInvalidSecondArgument</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a5fccdba6dc1eae0017681460de0dfee1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertArrayHasIntegerKey</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>ab6af91de86d970b183b8817e9710c9fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertArrayNotHasKeyThrowsExceptionForInvalidFirstArgument</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>ab584272024c1bf36cc1c3551cbd4b175</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertArrayNotHasKeyThrowsExceptionForInvalidSecondArgument</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>acf86a0707ca6030693328db4038c17ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertArrayNotHasIntegerKey</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>ae6e51c3baa837553b9219c496801c9ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertArrayHasStringKey</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>ad6d49b80d8d3c5519f97e10f9eaa5f88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertArrayNotHasStringKey</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>ab2c3e0d64282c5453235b0fc763b01e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertArrayHasKeyAcceptsArrayObjectValue</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a80bfc83297e670fa991df97e0bfd9a0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertArrayHasKeyProperlyFailsWithArrayObjectValue</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a96bde9814cbb98f9825e2f067b77e337</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertArrayHasKeyAcceptsArrayAccessValue</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a2666ccc4e38a4c5e8e2d818cede33126</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertArrayHasKeyProperlyFailsWithArrayAccessValue</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a83d5e67c1cbff359a29d83d0b66348ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertArrayNotHasKeyAcceptsArrayAccessValue</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a5665b2c7cf0460706cc69289ffc46794</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertArrayNotHasKeyPropertlyFailsWithArrayAccessValue</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>ab79f19f4de5cbdcc43aa6d8edc3cd6f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertArrayContainsOnlyIntegers</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>af7fa4915b00ee4e722d5dfdcfb01cccc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertArrayNotContainsOnlyIntegers</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a626a16e4d1fed00d6e083fcb4d40e990</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertArrayContainsOnlyStdClass</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>abc0d2b2ba770b52c7c4bae5f75555d7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertArrayNotContainsOnlyStdClass</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>ad93a29d9abe0e54c7d88c90c897d1d0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>equalProvider</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a2bb04a9a7fe4f646d3230dbff14bee16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>notEqualProvider</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>aeedadbe3865bd39ad98791960dfba3a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sameProvider</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a44549bec0b814de3c64cdd6f7a2fdda1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>notSameProvider</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a1922781b2231be1f14107c0013241495</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertEqualsSucceeds</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>af5f5f3ca648666d9f3405367ad8f1861</anchor>
      <arglist>($a, $b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertEqualsFails</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a90b574c201f26c52d0573e31b8add57c</anchor>
      <arglist>($a, $b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertNotEqualsSucceeds</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>aacafbac2e61bff2c984602628dc53d7d</anchor>
      <arglist>($a, $b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertNotEqualsFails</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>ad1ea90e245cdcdf5caf6601c4c9b2066</anchor>
      <arglist>($a, $b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertSameSucceeds</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a8f226024e71a9b36e084b9d951fd8110</anchor>
      <arglist>($a, $b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertSameFails</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a9eaa1ab5578bd7f16cd67fe818f18c6f</anchor>
      <arglist>($a, $b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertNotSameSucceeds</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a4ac45a5f65d46d469ec629af3958d38d</anchor>
      <arglist>($a, $b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertNotSameFails</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>aa6119d877f2b8830209c2be06c8b8236</anchor>
      <arglist>($a, $b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertXmlFileEqualsXmlFile</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a3100d0823f8bbdb333a2eb717251b4ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertXmlFileNotEqualsXmlFile</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>abf0cc1aa0029b00d39a9246819f30295</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertXmlStringEqualsXmlFile</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>aa60c4caf3e2c3bbe6839417182c2ad7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testXmlStringNotEqualsXmlFile</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>aba94acf27542d9c00910a47eaf5557d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertXmlStringEqualsXmlString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>aa4d2b957ec0dea419c161312c04edf3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertXmlStringEqualsXmlString2</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>ad58fa6065ae0df12690bf892e01056de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertXmlStringEqualsXmlString3</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>acd978d7d2694feefb2d5cce435ef75e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertXmlStringNotEqualsXmlString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a2e3cfa984a5526a855b345e1bfd9fcc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testXMLStructureIsSame</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a0429e5e2aec06ca7df5a4db83b039ea7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testXMLStructureWrongNumberOfAttributes</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a427c72dd61e21544feb14d80d902116a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testXMLStructureWrongNumberOfNodes</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a7d2454d5943b1ef9c51dac6a32bb6056</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testXMLStructureIsSameButDataIsNot</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a11cb2b6330bb5b6d71b46d9a45096a03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testXMLStructureAttributesAreSameButValuesAreNot</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a50dc67e40082d92b4600a8a50a3a0fdd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testXMLStructureIgnoreTextNodes</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>afba00a9e8ab413c4d438bfce5443d5ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertStringEqualsNumeric</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>ac85861a9fbe11243d72bf8e7f581723a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertStringEqualsNumeric2</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a85408cc69ae7afaa89f9a25db7b7a4df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertIsReadable</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a9a1bcfceae4a6e2a116bb732a50b20b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertNotIsReadable</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a11f8a67da7b0fb784379c39a463fcfca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertIsWritable</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>ac63bd7554523c7406d53890c04c8b159</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertNotIsWritable</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a83665f9e778d5113126591686b0743f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertDirectoryExists</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a6f462dd4afbebcb4a9bf5a4a59e6ba15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertDirectoryNotExists</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>ac1a681ab3b546467db0c0035dbdb7227</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertDirectoryIsReadable</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a6d15e13ebb84ee105406298595f7cad9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertDirectoryIsWritable</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>acd97362c41e20db4b8e96773145b9cfd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertFileExists</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a8e83ffebac5c82e7f911537d8fc0c00d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertFileNotExists</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>adaf72e7d148ffddd44fbc61b52a26c8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertFileIsReadable</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a34d1e79ef23370f1d4b71f4e5ae82ecb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertFileIsNotReadable</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>afef1734533a2dcfdd7b3e9d9a1c3868a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertFileIsWritable</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>acf1a50e37f403ca0d826cb39f7dd35df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertObjectHasAttribute</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a403a02e53aace7117b49841a4c8e6b37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertObjectHasAttributeNumericAttribute</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>ac9a36d8ecb3b41726350eaf7bc1fb36a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertObjectHasAttributeMultiByteAttribute</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a873012ee639baba91842ea59bf603a78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertObjectNotHasAttribute</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a3f83a321835b1b08701fc016d390bcc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertObjectNotHasAttributeNumericAttribute</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a673ee4e323afd4e1fcf5db5fa06295f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertObjectNotHasAttributeMultiByteAttribute</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>ae65dc60a6551d1c4680923fd53a6041c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertFinite</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>aa7b204be974e81e187ecc75f2ef26a8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertInfinite</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a424d0e7982e15d19b9b0cc2ce1cf00e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertNan</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a24ef6fb94629847310f0007d2ad9acff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertNull</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a75ba5515b49430b33aa81f984782d3c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertNotNull</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a786d1817599fe0e5fc41f128e088b75f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertTrue</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a126eea7cb3343d40ff478be5d01e91bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertNotTrue</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a43c5ccf13bbad056c42439cb337b8feb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertFalse</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a80316c5f4d7ada16bf3c5f7493f876ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertNotFalse</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>ae6acf899d86d8e626e775b5b568a332d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertRegExp</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a13a4e8740a8636f21501526d6959097c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertNotRegExp</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>ace8d7c0bd2296a387569ba6937af5d64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertSame</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a4dd7280d85c94c27a1ba33fdfd2d6742</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertSame2</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a06b83e5601988660a22275efa6fa0de0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertNotSame</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a626ca0e088b56d22259c2e2fa975ed8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertNotSame2</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a3a9cc477ae78601282323019b87b463a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertNotSameFailsNull</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>ae77c5182305bec17ffdc955370d137c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGreaterThan</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a1b7d8645c84854e5f037f83ab68eb13a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGreaterThanOrEqual</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a454f2e95cd2c63d435923af5c8f2651d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testLessThan</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a24dcb2a3d6ab6705a92c181eda0a5a60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testLessThanOrEqual</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a8b3dff74a2a2c36f8dce85beb8293754</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertClassHasAttributeThrowsExceptionIfAttributeNameIsNotValid</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a82fdc9d18ef7cde95abd91b1becd860f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertClassHasAttributeThrowsExceptionIfClassDoesNotExist</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>ad34e63ebd0cfe937e3603331dd401780</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertClassNotHasAttributeThrowsExceptionIfAttributeNameIsNotValid</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>ab91788ad576633c3758a1e2bf9f8130f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertClassNotHasAttributeThrowsExceptionIfClassDoesNotExist</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>abee0e340ee74116394e435fa289850a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertClassHasStaticAttributeThrowsExceptionIfAttributeNameIsNotValid</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a58f11b7ca1b8288e339f3894259928f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertClassHasStaticAttributeThrowsExceptionIfClassDoesNotExist</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a4b0df77dfa1aaa5aeb71511480e6e8bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertClassNotHasStaticAttributeThrowsExceptionIfAttributeNameIsNotValid</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>aa2d874ef1dfc5deffb675b17e7978163</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertClassNotHasStaticAttributeThrowsExceptionIfClassDoesNotExist</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a4d17927a850d9493efdf44cb7f019b60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertObjectHasAttributeThrowsException2</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a0c8c49e51d8a70793526aaeb5bcc062b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertObjectHasAttributeThrowsExceptionIfAttributeNameIsNotValid</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a12d6636fc8b95c2788d8e3e3ddf5f38d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertObjectNotHasAttributeThrowsException2</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a2e81f537887112f42520562cc3c12396</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertObjectNotHasAttributeThrowsExceptionIfAttributeNameIsNotValid</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a39c0998c0297664b86805e3f0ffb0ecd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testClassHasPublicAttribute</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a8d43fc803a59b22f418eae7f469afb5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testClassNotHasPublicAttribute</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a71d0300f9a83e98116122d9c82f9698f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testClassHasPublicStaticAttribute</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>afaf074ac46416fa1b97c9040ef8f0fdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testClassNotHasPublicStaticAttribute</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a8aa457dd2e0edc9b509db51da82b68be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testObjectHasPublicAttribute</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>aaee3c0ca082dff299c818f711c9f4431</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testObjectNotHasPublicAttribute</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a0c6ea990eb1d72b14b37d35532160d40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testObjectHasOnTheFlyAttribute</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a3132ab2bab5f164eb35aa9952afcbf04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testObjectNotHasOnTheFlyAttribute</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>abf6d29f07ff52e2cbc3c392ba9e2722f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testObjectHasProtectedAttribute</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a32f6aa827ab6d9e786e786d2409abf7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testObjectNotHasProtectedAttribute</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a28bfcc1844f6dc802c408d1fb027a059</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testObjectHasPrivateAttribute</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>aa5e4ea7b0dd1caf999e2eec793cff0e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testObjectNotHasPrivateAttribute</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a68300d7105d549ca57bd5dae6ebddab7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertThatAnything</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a0dabda9383b5aaa02d453dd604ce30e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertThatIsTrue</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a53f3068359225b8acdbd8ff70c8c4a17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertThatIsFalse</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>acd1b43345bde0fe0578e990bbf9cd35c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertThatIsJson</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a5203f8cdb16b7dcf4405f57da8fa495c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertThatAnythingAndAnything</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a58c8e1708fb10c85d0f402c3f0fd70b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertThatAnythingOrAnything</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a55dc5ae879a7a8a04df3ee3e35c4dcfb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertThatAnythingXorNotAnything</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>ad221b4babb0f8e72b3c3979d471ceb4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertThatContains</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a007dbb37a63e32620c0c34023e4cbf46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertThatStringContains</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>ac24f108d3bfd7b24e6846e424b291128</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertThatContainsOnly</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>abf1994013ab8bda8537a2b510258cdb7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertThatContainsOnlyInstancesOf</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a9a2ce336e1e537a6e7441eaa629c197e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertThatArrayHasKey</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>ab1ba57b24f7593b9a2d490eb689cadf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertThatClassHasAttribute</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>ad10a0ded83a9994221829974c3ad0815</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertThatClassHasStaticAttribute</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a5d9cdd80bc6574b9363991bd986599a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertThatObjectHasAttribute</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>ad1d5dfac1ecd400d04c22e68dad85840</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertThatEqualTo</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a5965f53c370e80d3886d8dcb1a428ae9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertThatIdenticalTo</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>ac599b16a2c3db5a527d3b6d2cd987231</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertThatIsInstanceOf</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a4b6a5866e921f95702d25509db741937</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertThatIsType</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a9d9095c7eca5bfaff4033a81d9fc8c79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertThatIsEmpty</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>afe3030d8f30f4fa06f289a1e9cb43c51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertThatFileExists</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a7404e1b5278e06242eb5f7d58ee445b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertThatGreaterThan</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a99ad418de60555cffbf6d5d22a33d745</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertThatGreaterThanOrEqual</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>aaf1db7a3a5bb78d07a56444e1bcb03f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertThatLessThan</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a7cd094f85c26b71c506271fbb245048e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertThatLessThanOrEqual</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a9ed1e450090ac65b29d408811fb8b1f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertThatMatchesRegularExpression</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a16eca6200229d18a730b16945b487f91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertThatCallback</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>aad3db7f59540271657396a42d7389646</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertThatCountOf</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a945a5ee1b5a81425fbabfbf513006c36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertFileEquals</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a46aede8205a86656f90ea398484cd03f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertFileNotEquals</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a025df48e642202ae2e03f20d65a563ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertStringEqualsFile</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>af408ea69925614f9ac4dd81f60c66cad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertStringEqualsFileIgnoringCase</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a05f145742710833da8c560906a971677</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertStringNotEqualsFile</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a8e3a11663181bce16b7a3da3138bfaa5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertStringNotEqualsFileIgnoringCase</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a09a53a4e189d8797024abae34b6199a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertFileEqualsIgnoringCase</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>ab0bce9b0b7cfb7692ad2a565e1ed8f4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertFileNotEqualsIgnoringCase</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>ae97d71a5b6be82711307fd34f314927c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertStringStartsNotWithThrowsException2</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>ae5139f64e3bc3632eefbdff10e190f00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertStringStartsWith</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a5a133194f0c83906fca5af33c58d0c88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertStringStartsNotWith</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a272b1a1458f814a7823025d54074b5bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertStringEndsWith</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a7521302e6ae05e1e6406f92719b50dda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertStringEndsNotWith</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a30ba6dd676c6687b13c4b8e5ddfde113</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertStringMatchesFormat</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a8e84e29f52b80bcda66ea197c3ddf255</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertStringMatchesFormatFailure</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a52adf4393d1f4fc694f313c0057c9e84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertStringNotMatchesFormat</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a92cd650459e01ec65c90d6f53cf01214</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertEmpty</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>acabe5e671050037f79938d580e3fba18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertNotEmpty</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a88d0226b95db2a1e0adcbad515b93e20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testMarkTestIncomplete</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a04a9493b04054554a21575566dc45d1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testMarkTestSkipped</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a1bb1da3cc30fc67b5928265a472d5bdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertCount</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a4fc86a38f122c7184b9d0c9c728ddc13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertCountTraversable</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>ad61725d5c5c19d8ff46987f1dee036e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertCountThrowsExceptionIfElementIsNotCountable</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a6659bf7ad736370c9d37cf54d5ff916d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertNotCount</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>ae39eeec65ee32f80f390a4d6fa013c2e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertNotCountThrowsExceptionIfElementIsNotCountable</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a15938aeca03c9ef2fedc2378479c9f63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertSameSize</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a4bca9c984a7a5dcd233bcf96d99030a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertSameSizeThrowsExceptionIfExpectedIsNotCountable</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a2879ff0c73b16735fbe917fa4345c027</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertSameSizeThrowsExceptionIfActualIsNotCountable</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a8928ebf64fa7c8615e45dcaaf92c2483</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertNotSameSize</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a212960520a259118b4d17f2ef3c27378</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertNotSameSizeThrowsExceptionIfExpectedIsNotCountable</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>af78042709736f524ca4ee96a8b809a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertNotSameSizeThrowsExceptionIfActualIsNotCountable</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a3617cf108478b667e20a53910b4b58ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertJson</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>ab8498471ca525e0727f4e0cbc60e4c7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertJsonStringEqualsJsonString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a2f8d1519b0b4ccf069d5395d394dffe2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertJsonStringEqualsJsonStringErrorRaised</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>adbce13e8475c9371151fe3467c8f1062</anchor>
      <arglist>($expected, $actual)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertJsonStringNotEqualsJsonString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a149265a00bc473f77d807f2de26cae50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertJsonStringNotEqualsJsonStringErrorRaised</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a12c79cac6caef6ec17354d25891adccf</anchor>
      <arglist>($expected, $actual)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertJsonStringEqualsJsonFile</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a95dfebc11a963845deaa4abd6d21621b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertJsonStringEqualsJsonFileExpectingExpectationFailedException</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a49edd9bbe347f063ed49118fe3f138da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertJsonStringNotEqualsJsonFile</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>aaffe44eb49e50bd63553854115b3357c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertJsonFileNotEqualsJsonFile</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a68b0f7d966b1ad20679c0e0d1f82ef3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertJsonFileEqualsJsonFile</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a0f897daa8cd014f57e10eafd72de9d54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertInstanceOfThrowsExceptionIfTypeDoesNotExist</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>ac0d738dc4a0452bcee532c6dd79df95f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertInstanceOf</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a30b2e90e81c47436ba1b00b0a4c482f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertNotInstanceOfThrowsExceptionIfTypeDoesNotExist</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a3339ce154e209637f73722ecc87f0376</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertNotInstanceOf</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>aeeb6d9f934dfe6d2fb66ea2e2678f969</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertStringMatchesFormatFileThrowsExceptionForInvalidArgument</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a5a82d4ea7b2e8239f83cae166b998ffb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertStringMatchesFormatFile</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>adbbdae749ab254ef65c7afb69e2bdfbb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertStringNotMatchesFormatFileThrowsExceptionForInvalidArgument</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>ae43ebc08cafcd9354439d9bec67ec168</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertStringNotMatchesFormatFile</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a0ecf1a90245a1beb6bb90f7067becd69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStringsCanBeComparedForEqualityIgnoringCase</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a073da2511cc05c6bbee3da190d893d41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testArraysOfStringsCanBeComparedForEqualityIgnoringCase</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a35e3d6026aa3f1fba7303c28641221ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStringsCanBeComparedForEqualityWithDelta</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a7c382c0673f64690d1fb216e07302227</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testArraysOfStringsCanBeComparedForEqualityWithDelta</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>ad963b2633fac44ff9153ecfeb1f8c204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testArraysCanBeComparedForEqualityWithCanonicalization</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a9dc961afea9dc46dc914b9d9ab395ab4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testArrayTypeCanBeAsserted</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>afd17bcd98dfc69a851ee33649a0a154f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testBoolTypeCanBeAsserted</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a18af301aa967c7091bb9ce72ef240397</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFloatTypeCanBeAsserted</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a27be6d4b6e85a8abd72203bf9af92fcc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIntTypeCanBeAsserted</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a197986934fe890406fc61e1f58220458</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testNumericTypeCanBeAsserted</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>ab1acf3640f37badac8bb5ccfab58b053</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testObjectTypeCanBeAsserted</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a7015c3a514df80ff1069844fde397c0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testResourceTypeCanBeAsserted</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>adc1f0f487cb1943d6ac8ec3f76b4bbb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStringTypeCanBeAsserted</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>ace7f5e1b5677af1d85f3b9e0d3783b47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testScalarTypeCanBeAsserted</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a5c966437e9b4d1d727f20932f25d05bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCallableTypeCanBeAsserted</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a07a0bc2840ea875c4c4e1aeb5396688e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIterableTypeCanBeAsserted</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a3ca6677656bc5206c8460608e21ccba0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testNotArrayTypeCanBeAsserted</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a16089e97a3c3bf3017cafa985ed20d84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testNotBoolTypeCanBeAsserted</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a64cf94b293a347a9b5f3b365e8a5893a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testNotFloatTypeCanBeAsserted</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>abff85496e5d009c346eb5d88cfc65529</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testNotIntTypeCanBeAsserted</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>ae9f2d292a12bea7a63e7e515ddb052c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testNotNumericTypeCanBeAsserted</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a7dd8434ee0231656683053ccec38bfe7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testNotObjectTypeCanBeAsserted</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a9f2c63514e067cacc0c46b336be298e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testNotResourceTypeCanBeAsserted</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a9c99c03d0c5e31e7248997621559992b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testNotScalarTypeCanBeAsserted</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>ac5e90bb71dbd07e7056d691aa238e8f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testNotStringTypeCanBeAsserted</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a8562889ce15189f39b312b6a4812df75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testNotCallableTypeCanBeAsserted</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a3a542beadcd04baeccf46166f93b5b4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testNotIterableTypeCanBeAsserted</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a24415863a623191a147344b8a930e38b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testLogicalAnd</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>abeba0a091e7b1b46c352e09af1833fb9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testLogicalOr</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a4b403ce6c211c134ddbff78a3ef42294</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testLogicalXor</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>ac3a296bda3fcadc370b79b15dc5bd15f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStringContainsStringCanBeAsserted</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a154c837e379dac71c68c3382e47a6d4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStringNotContainsStringCanBeAsserted</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a42c68553cf839c5b5cfcd2df6a102b01</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStringContainsStringCanBeAssertedIgnoringCase</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>ae882da2bb1eaa0c9afea6a64d36f4da4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStringNotContainsStringCanBeAssertedIgnoringCase</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a0dcb7463fda2302316eb45db7b885ca0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIterableContainsSameObjectCanBeAsserted</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a1cc755e8e9903859f639bbc4d7e07b29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIterableNotContainsSameObjectCanBeAsserted</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a62406e86a84fedec505cb922e6ae315e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIterableContainsEqualObjectCanBeAsserted</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a00b27e7f2e4dfb53abcbefdf5070ee97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIterableNotContainsEqualObjectCanBeAsserted</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a1af6ac3f1d798c82b05942cec22e99fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>validInvalidJsonDataprovider</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a214b2dd747bd7a2101c7a3b1c2ba05ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sameValues</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a14adca7a3b4d8047f9cf7f03b6d1fa7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>notEqualValues</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>a128ddc1c8d200ce22aee6dd23b54dce4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>equalValues</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1AssertTest.html</anchorfile>
      <anchor>ad9ebc6a5a2039bce4a4ed33f52545b11</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::Attribute</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1Attribute.html</filename>
    <base>PHPUnit::Framework::Constraint::Composite</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1Attribute.html</anchorfile>
      <anchor>a65d71106a4ecaf77f60157687cb5d152</anchor>
      <arglist>(Constraint $constraint, string $attributeName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>evaluate</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1Attribute.html</anchorfile>
      <anchor>af7f03bffd2302a642e705730bae99eec</anchor>
      <arglist>($other, string $description=&apos;&apos;, bool $returnResult=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1Attribute.html</anchorfile>
      <anchor>a9e857a5e0f78b3fd5169dab0ec9e8570</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>failureDescription</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1Attribute.html</anchorfile>
      <anchor>a1c24f50e1f4679e82bba295015d0024b</anchor>
      <arglist>($other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::Author</name>
    <filename>classPharIo_1_1Manifest_1_1Author.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPharIo_1_1Manifest_1_1Author.html</anchorfile>
      <anchor>a8004b7795825e9b682acebfb58dea45b</anchor>
      <arglist>($name, Email $email)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getName</name>
      <anchorfile>classPharIo_1_1Manifest_1_1Author.html</anchorfile>
      <anchor>ad1149b53b0aad4726f014441b309aa11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getEmail</name>
      <anchorfile>classPharIo_1_1Manifest_1_1Author.html</anchorfile>
      <anchor>a21adfe0e067bbcce3419f21e1b2e2983</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classPharIo_1_1Manifest_1_1Author.html</anchorfile>
      <anchor>a12ae04c738023829ab0ca5b6d2ac888a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Comparator::Author</name>
    <filename>classSebastianBergmann_1_1Comparator_1_1Author.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1Author.html</anchorfile>
      <anchor>a883f24597971b729cc141e82b2a76eae</anchor>
      <arglist>($name)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$books</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1Author.html</anchorfile>
      <anchor>ae36fc33576bfbc0bd3576eabc61e4417</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Author</name>
    <filename>classAuthor.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classAuthor.html</anchorfile>
      <anchor>a31aedaf1a3c974587142c690be45d190</anchor>
      <arglist>($name)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$books</name>
      <anchorfile>classAuthor.html</anchorfile>
      <anchor>a84faf0690be9d14ec6a3016c4c064264</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocBlock::Tags::Author</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Author.html</filename>
    <base>phpDocumentor::Reflection::DocBlock::Tags::BaseTag</base>
    <base>phpDocumentor::Reflection::DocBlock::Tags::Factory::StaticMethod</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Author.html</anchorfile>
      <anchor>a7cbbe75f5c358fbe4c773f8de19d3a7a</anchor>
      <arglist>(string $authorName, string $authorEmail)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getAuthorName</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Author.html</anchorfile>
      <anchor>af7f5af268e339fd38cba9962781eef1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getEmail</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Author.html</anchorfile>
      <anchor>a6bd662271b5d9ed030c703713805cd92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Author.html</anchorfile>
      <anchor>afd694b82b118a4c743a718eaa8e2ef91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>create</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Author.html</anchorfile>
      <anchor>abc1906470fb1b49a9ca3a5bcfd298fb8</anchor>
      <arglist>(string $body)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$name</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Author.html</anchorfile>
      <anchor>a5e403559c43e95a66e92ae14b19c8d3c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::AuthorCollection</name>
    <filename>classPharIo_1_1Manifest_1_1AuthorCollection.html</filename>
    <member kind="function">
      <type></type>
      <name>add</name>
      <anchorfile>classPharIo_1_1Manifest_1_1AuthorCollection.html</anchorfile>
      <anchor>a16f48d8256f597489c32f072340d95f6</anchor>
      <arglist>(Author $author)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getAuthors</name>
      <anchorfile>classPharIo_1_1Manifest_1_1AuthorCollection.html</anchorfile>
      <anchor>a17c4863ee1ed756835acf0391ab087d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>count</name>
      <anchorfile>classPharIo_1_1Manifest_1_1AuthorCollection.html</anchorfile>
      <anchor>abf75fb307d90d8824b7becb427f66260</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getIterator</name>
      <anchorfile>classPharIo_1_1Manifest_1_1AuthorCollection.html</anchorfile>
      <anchor>afe2d3803f8beb4a9ccba1e00b051a8cc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::AuthorCollectionIterator</name>
    <filename>classPharIo_1_1Manifest_1_1AuthorCollectionIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPharIo_1_1Manifest_1_1AuthorCollectionIterator.html</anchorfile>
      <anchor>a6a32d9d2a4f355974acce5dbb3c6a980</anchor>
      <arglist>(AuthorCollection $authors)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>rewind</name>
      <anchorfile>classPharIo_1_1Manifest_1_1AuthorCollectionIterator.html</anchorfile>
      <anchor>a412041b3a5157d95fcc3acc47f6d99b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>valid</name>
      <anchorfile>classPharIo_1_1Manifest_1_1AuthorCollectionIterator.html</anchorfile>
      <anchor>a30bc02d33ae317d7df93ae647b19c8b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>key</name>
      <anchorfile>classPharIo_1_1Manifest_1_1AuthorCollectionIterator.html</anchorfile>
      <anchor>a5240a8dec152dcd69349415f18251056</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>current</name>
      <anchorfile>classPharIo_1_1Manifest_1_1AuthorCollectionIterator.html</anchorfile>
      <anchor>a0ee02e66921df4ed25d5c40505717178</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>next</name>
      <anchorfile>classPharIo_1_1Manifest_1_1AuthorCollectionIterator.html</anchorfile>
      <anchor>a5c5461106f512cce32773c0177ef6256</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::AuthorCollectionTest</name>
    <filename>classPharIo_1_1Manifest_1_1AuthorCollectionTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testCanBeCreated</name>
      <anchorfile>classPharIo_1_1Manifest_1_1AuthorCollectionTest.html</anchorfile>
      <anchor>ac1d609e53f272717ce0e8ab3342a7a29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCanBeCounted</name>
      <anchorfile>classPharIo_1_1Manifest_1_1AuthorCollectionTest.html</anchorfile>
      <anchor>abb8865dbc42c9d1dd8a8fb6327aebfe6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCanBeIterated</name>
      <anchorfile>classPharIo_1_1Manifest_1_1AuthorCollectionTest.html</anchorfile>
      <anchor>aafd59a29d97d90fef960beb7237ee42e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testKeyPositionCanBeRetreived</name>
      <anchorfile>classPharIo_1_1Manifest_1_1AuthorCollectionTest.html</anchorfile>
      <anchor>a3e0a572abfb1ff99e337b969edc19307</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classPharIo_1_1Manifest_1_1AuthorCollectionTest.html</anchorfile>
      <anchor>a48e56fb59b87af04afae4d3aebf743d9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::AuthorElement</name>
    <filename>classPharIo_1_1Manifest_1_1AuthorElement.html</filename>
    <base>PharIo::Manifest::ManifestElement</base>
    <member kind="function">
      <type></type>
      <name>getName</name>
      <anchorfile>classPharIo_1_1Manifest_1_1AuthorElement.html</anchorfile>
      <anchor>a549ff0ec769645288d37ea0e5a337b2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getEmail</name>
      <anchorfile>classPharIo_1_1Manifest_1_1AuthorElement.html</anchorfile>
      <anchor>a152f976850b9fbba98d94fd9cb35dd60</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::AuthorElementCollection</name>
    <filename>classPharIo_1_1Manifest_1_1AuthorElementCollection.html</filename>
    <base>PharIo::Manifest::ElementCollection</base>
    <member kind="function">
      <type></type>
      <name>current</name>
      <anchorfile>classPharIo_1_1Manifest_1_1AuthorElementCollection.html</anchorfile>
      <anchor>a7b623e525872d598378f3f4f8ad80cf5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::AuthorElementCollectionTest</name>
    <filename>classPharIo_1_1Manifest_1_1AuthorElementCollectionTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testAuthorElementCanBeRetrievedFromCollection</name>
      <anchorfile>classPharIo_1_1Manifest_1_1AuthorElementCollectionTest.html</anchorfile>
      <anchor>ad6e6030844ba7ebabd9e8328f9f20125</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::AuthorElementTest</name>
    <filename>classPharIo_1_1Manifest_1_1AuthorElementTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testNameCanBeRetrieved</name>
      <anchorfile>classPharIo_1_1Manifest_1_1AuthorElementTest.html</anchorfile>
      <anchor>abd4679e80cd02bbd68093ef9d0278e01</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testEmailCanBeRetrieved</name>
      <anchorfile>classPharIo_1_1Manifest_1_1AuthorElementTest.html</anchorfile>
      <anchor>ab2a8809fa79d64dca2b2060b572c6d3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classPharIo_1_1Manifest_1_1AuthorElementTest.html</anchorfile>
      <anchor>a83597a282102ec9c184022f7980231ed</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocBlock::Tags::AuthorTest</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1AuthorTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>tearDown</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1AuthorTest.html</anchorfile>
      <anchor>a8cc95461b16b9d229e8f36e1913de0a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIfCorrectTagNameIsReturned</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1AuthorTest.html</anchorfile>
      <anchor>acdbf96410ce9481db3a3fb22a6f697fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIfTagCanBeRenderedUsingDefaultFormatter</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1AuthorTest.html</anchorfile>
      <anchor>a35acabc7b62fc9bc62b094398d4cbc9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIfTagCanBeRenderedUsingSpecificFormatter</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1AuthorTest.html</anchorfile>
      <anchor>a8e9e84e1f0fb2839879593e017b6210a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasTheAuthorName</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1AuthorTest.html</anchorfile>
      <anchor>a8d228aa9051a28182e714a765c198b10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasTheAuthorMailAddress</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1AuthorTest.html</anchorfile>
      <anchor>aa6280e73eefde73b1f26806ed1682ac1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testInitializationFailsIfEmailIsNotValid</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1AuthorTest.html</anchorfile>
      <anchor>adc1316d8b3738e388f1894ecb553d559</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStringRepresentationIsReturned</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1AuthorTest.html</anchorfile>
      <anchor>a6de35a92ceaa87783027a152463d90f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStringRepresentationIsReturnedWithoutName</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1AuthorTest.html</anchorfile>
      <anchor>ab4315fe88b835212ca66cfb5fc8624fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStringRepresentationWithEmtpyEmail</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1AuthorTest.html</anchorfile>
      <anchor>a1bef5af788ff405dfaea0b0c3c4f2396</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethod</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1AuthorTest.html</anchorfile>
      <anchor>afb3d6fa6ba5173f00358d932190ae148</anchor>
      <arglist>(string $input, string $output, string $name, string $email)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>authorTagProvider</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1AuthorTest.html</anchorfile>
      <anchor>a03831e94aa26576b107874039a96e0cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodReturnsNullIfItCouldNotReadBody</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1AuthorTest.html</anchorfile>
      <anchor>a4b888611b8179084f63019632032f660</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::AuthorTest</name>
    <filename>classPharIo_1_1Manifest_1_1AuthorTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testCanBeCreated</name>
      <anchorfile>classPharIo_1_1Manifest_1_1AuthorTest.html</anchorfile>
      <anchor>a980f7c9d29cd603c6bea32ddc3d466a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testNameCanBeRetrieved</name>
      <anchorfile>classPharIo_1_1Manifest_1_1AuthorTest.html</anchorfile>
      <anchor>ab8b1e992086f45edb522d9ea873e254c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testEmailCanBeRetrieved</name>
      <anchorfile>classPharIo_1_1Manifest_1_1AuthorTest.html</anchorfile>
      <anchor>ae80b33359300ede46905181adcad036e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCanBeUsedAsString</name>
      <anchorfile>classPharIo_1_1Manifest_1_1AuthorTest.html</anchorfile>
      <anchor>a08823088bf1e856c82c76c4d13adf4f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classPharIo_1_1Manifest_1_1AuthorTest.html</anchorfile>
      <anchor>a16fd81bfda2d22b6ca1f26fa81eceaa5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeepCopy::f006::B</name>
    <filename>classDeepCopy_1_1f006_1_1B.html</filename>
    <member kind="function">
      <type></type>
      <name>getBProp</name>
      <anchorfile>classDeepCopy_1_1f006_1_1B.html</anchorfile>
      <anchor>a6f2b13de804020fc4699d4e9b05de43e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setBProp</name>
      <anchorfile>classDeepCopy_1_1f006_1_1B.html</anchorfile>
      <anchor>ab225459a4b7810c1648fd2284bf30a72</anchor>
      <arglist>($prop)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__clone</name>
      <anchorfile>classDeepCopy_1_1f006_1_1B.html</anchorfile>
      <anchor>a3942b7d880b3945a6e69bbfb27f30fea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$cloned</name>
      <anchorfile>classDeepCopy_1_1f006_1_1B.html</anchorfile>
      <anchor>adcc3444877ab1b2ede7acfef1e33d5ba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeepCopy::f008::B</name>
    <filename>classDeepCopy_1_1f008_1_1B.html</filename>
    <base>DeepCopy::f008::A</base>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertNotInstanceOf::B</name>
    <filename>classPHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertNotInstanceOf_1_1B.html</filename>
  </compound>
  <compound kind="interface">
    <name>b</name>
    <filename>interfaceb.html</filename>
    <base>a</base>
    <member kind="function">
      <type></type>
      <name>baz</name>
      <anchorfile>interfaceb.html</anchorfile>
      <anchor>a1e4c9d678ccf29c7d43699c4509faa3f</anchor>
      <arglist>(Baz $baz)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeepCopy::f001::B</name>
    <filename>classDeepCopy_1_1f001_1_1B.html</filename>
    <base>DeepCopy::f001::A</base>
    <member kind="function">
      <type></type>
      <name>getBProp</name>
      <anchorfile>classDeepCopy_1_1f001_1_1B.html</anchorfile>
      <anchor>ad7f57fe0b78ba4a4ce17d32aad55f19d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setBProp</name>
      <anchorfile>classDeepCopy_1_1f001_1_1B.html</anchorfile>
      <anchor>a27e536bd94721f8033a6c312657340e1</anchor>
      <arglist>($prop)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::MockObject::BadMethodCallException</name>
    <filename>classPHPUnit_1_1Framework_1_1MockObject_1_1BadMethodCallException.html</filename>
    <base>PHPUnit::Framework::MockObject::Exception</base>
  </compound>
  <compound kind="class">
    <name>BankAccount</name>
    <filename>classBankAccount.html</filename>
    <member kind="function">
      <type></type>
      <name>getBalance</name>
      <anchorfile>classBankAccount.html</anchorfile>
      <anchor>a6500f525a8be5c8f19b64d58a7242420</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>depositMoney</name>
      <anchorfile>classBankAccount.html</anchorfile>
      <anchor>ad2366ad7bbdfeaf80c3685102f036245</anchor>
      <arglist>($balance)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>withdrawMoney</name>
      <anchorfile>classBankAccount.html</anchorfile>
      <anchor>a085ac8254853f2edc652df85668d9b36</anchor>
      <arglist>($balance)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getBalance</name>
      <anchorfile>classBankAccount.html</anchorfile>
      <anchor>a6500f525a8be5c8f19b64d58a7242420</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>depositMoney</name>
      <anchorfile>classBankAccount.html</anchorfile>
      <anchor>ad2366ad7bbdfeaf80c3685102f036245</anchor>
      <arglist>($balance)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>withdrawMoney</name>
      <anchorfile>classBankAccount.html</anchorfile>
      <anchor>a085ac8254853f2edc652df85668d9b36</anchor>
      <arglist>($balance)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setBalance</name>
      <anchorfile>classBankAccount.html</anchorfile>
      <anchor>af39841a738caaa82bc481bf218f88a15</anchor>
      <arglist>($balance)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setBalance</name>
      <anchorfile>classBankAccount.html</anchorfile>
      <anchor>af39841a738caaa82bc481bf218f88a15</anchor>
      <arglist>($balance)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$balance</name>
      <anchorfile>classBankAccount.html</anchorfile>
      <anchor>aa102912f4d421ae9684e59a137ca63a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BankAccountException</name>
    <filename>classBankAccountException.html</filename>
  </compound>
  <compound kind="class">
    <name>BankAccountTest</name>
    <filename>classBankAccountTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <base>PHPUnit::Framework::TestCase</base>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testBalanceIsInitiallyZero</name>
      <anchorfile>classBankAccountTest.html</anchorfile>
      <anchor>ad9b248c7d44f618674a31f56cbccfefc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testBalanceCannotBecomeNegative</name>
      <anchorfile>classBankAccountTest.html</anchorfile>
      <anchor>aa079f87d8b8e7f906f2061b7a0c556d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testBalanceCannotBecomeNegative2</name>
      <anchorfile>classBankAccountTest.html</anchorfile>
      <anchor>a3eb89544e4fe575481a98df2443a73b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testDepositWithdrawMoney</name>
      <anchorfile>classBankAccountTest.html</anchorfile>
      <anchor>af8b965ca93fad5de885736d3716ea1fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testBalanceIsInitiallyZero</name>
      <anchorfile>classBankAccountTest.html</anchorfile>
      <anchor>ad9b248c7d44f618674a31f56cbccfefc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testBalanceCannotBecomeNegative</name>
      <anchorfile>classBankAccountTest.html</anchorfile>
      <anchor>aa079f87d8b8e7f906f2061b7a0c556d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testBalanceCannotBecomeNegative2</name>
      <anchorfile>classBankAccountTest.html</anchorfile>
      <anchor>a3eb89544e4fe575481a98df2443a73b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testBalanceIsInitiallyZero</name>
      <anchorfile>classBankAccountTest.html</anchorfile>
      <anchor>ad9b248c7d44f618674a31f56cbccfefc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testBalanceCannotBecomeNegative</name>
      <anchorfile>classBankAccountTest.html</anchorfile>
      <anchor>aa079f87d8b8e7f906f2061b7a0c556d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testBalanceCannotBecomeNegative2</name>
      <anchorfile>classBankAccountTest.html</anchorfile>
      <anchor>a3eb89544e4fe575481a98df2443a73b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classBankAccountTest.html</anchorfile>
      <anchor>a616bbcfc82d3b951384219160d01707b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classBankAccountTest.html</anchorfile>
      <anchor>a616bbcfc82d3b951384219160d01707b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classBankAccountTest.html</anchorfile>
      <anchor>a616bbcfc82d3b951384219160d01707b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$ba</name>
      <anchorfile>classBankAccountTest.html</anchorfile>
      <anchor>abeaee73efcf48e78b2b9708f410b03c6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BankAccountWithCustomExtensionTest</name>
    <filename>classBankAccountWithCustomExtensionTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testBalanceIsInitiallyZero</name>
      <anchorfile>classBankAccountWithCustomExtensionTest.html</anchorfile>
      <anchor>a9215c581501300f5728002e706b6266f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testBalanceCannotBecomeNegative</name>
      <anchorfile>classBankAccountWithCustomExtensionTest.html</anchorfile>
      <anchor>a103fae8a8767d6af56b101be650e62d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testBalanceCannotBecomeNegative2</name>
      <anchorfile>classBankAccountWithCustomExtensionTest.html</anchorfile>
      <anchor>aa44729027fc85332b852977e0db74769</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classBankAccountWithCustomExtensionTest.html</anchorfile>
      <anchor>acd8fefc728c438589f2c1841f87068f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$ba</name>
      <anchorfile>classBankAccountWithCustomExtensionTest.html</anchorfile>
      <anchor>a9a8a09ff83852bad02569687ba5b02e7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Bar</name>
    <filename>classBar.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>foo</name>
      <anchorfile>classBar.html</anchorfile>
      <anchor>a9527a5218984b1aff7ed907cbb4696c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>doSomethingElse</name>
      <anchorfile>classBar.html</anchorfile>
      <anchor>a780820c4218a379ca9d1531c70923d91</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeepCopyTest::TypeMatcher::Bar</name>
    <filename>classDeepCopyTest_1_1TypeMatcher_1_1Bar.html</filename>
    <base>DeepCopyTest::TypeMatcher::Foo</base>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocBlock::Tags::BaseTag</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1BaseTag.html</filename>
    <base>phpDocumentor::Reflection::DocBlock::Tag</base>
    <member kind="function">
      <type></type>
      <name>getName</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1BaseTag.html</anchorfile>
      <anchor>a89cfd7f72c912b5821fd727c500ef87e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getDescription</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1BaseTag.html</anchorfile>
      <anchor>a6c925cc856d9ad111413b6d06f3dd879</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>render</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1BaseTag.html</anchorfile>
      <anchor>a6141fe0a99653ff71e2ce661ae26f7bf</anchor>
      <arglist>(?Formatter $formatter=null)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$name</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1BaseTag.html</anchorfile>
      <anchor>af253cae5f8be474bba1620d88cdba9d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$description</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1BaseTag.html</anchorfile>
      <anchor>a146331f1424ba3bc48c6087f2db6a4c3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Runner::BaseTestRunner</name>
    <filename>classPHPUnit_1_1Runner_1_1BaseTestRunner.html</filename>
    <member kind="function">
      <type></type>
      <name>getLoader</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1BaseTestRunner.html</anchorfile>
      <anchor>abdd909453bded3ee053d66964a2816e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>STATUS_UNKNOWN</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1BaseTestRunner.html</anchorfile>
      <anchor>ab82f4e7316e4051bddaff1e9e29be961</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>STATUS_PASSED</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1BaseTestRunner.html</anchorfile>
      <anchor>abedd16951dcc47a9793dde2aef6d3084</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>STATUS_SKIPPED</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1BaseTestRunner.html</anchorfile>
      <anchor>a3c3eb2b679a1502831788a673a119454</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>STATUS_INCOMPLETE</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1BaseTestRunner.html</anchorfile>
      <anchor>ad3a7ff09dbba34d7e5c7d909a87db67c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>STATUS_FAILURE</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1BaseTestRunner.html</anchorfile>
      <anchor>ab79e7e55320df3fe040777186aa2c255</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>STATUS_ERROR</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1BaseTestRunner.html</anchorfile>
      <anchor>a4bc4bce01bfdc3e47cfc1a94b41ef8cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>STATUS_RISKY</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1BaseTestRunner.html</anchorfile>
      <anchor>a0e4d61efc49640b0dc1462765055f753</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>STATUS_WARNING</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1BaseTestRunner.html</anchorfile>
      <anchor>aeab865aefdcad423207aad93b55b82ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>SUITE_METHODNAME</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1BaseTestRunner.html</anchorfile>
      <anchor>ad3371616b24a476a64e4e9fda2d0717a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>loadSuiteClass</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1BaseTestRunner.html</anchorfile>
      <anchor>a32c595ad296aef93df20d1486ae18ad3</anchor>
      <arglist>(string $suiteClassName, string $suiteClassFile=&apos;&apos;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>clearStatus</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1BaseTestRunner.html</anchorfile>
      <anchor>a233e58cad31c7d6d932906ff9768cf1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>runFailed</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1BaseTestRunner.html</anchorfile>
      <anchor>a1e1b33f24ac46723060791775f1d40b3</anchor>
      <arglist>(string $message)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foo::Bar::Baz</name>
    <filename>classFoo_1_1Bar_1_1Baz.html</filename>
  </compound>
  <compound kind="class">
    <name>Issue2725::BeforeAfterClassPidTest</name>
    <filename>classIssue2725_1_1BeforeAfterClassPidTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testMethod1WithItsBeforeAndAfter</name>
      <anchorfile>classIssue2725_1_1BeforeAfterClassPidTest.html</anchorfile>
      <anchor>a3224b64e199e873c3d876749b8c0e874</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testMethod2WithItsBeforeAndAfter</name>
      <anchorfile>classIssue2725_1_1BeforeAfterClassPidTest.html</anchorfile>
      <anchor>ab7729bd7a86f3b2258089583361f6cd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>showPidBefore</name>
      <anchorfile>classIssue2725_1_1BeforeAfterClassPidTest.html</anchorfile>
      <anchor>aa2197c9ded4f3b5e6acdcade690c0cb2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>showPidAfter</name>
      <anchorfile>classIssue2725_1_1BeforeAfterClassPidTest.html</anchorfile>
      <anchor>aa0c6b5f951ee595e5aaef9de92e4dc88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>PID_VARIABLE</name>
      <anchorfile>classIssue2725_1_1BeforeAfterClassPidTest.html</anchorfile>
      <anchor>af5d6a98a214c4a4c953fe3e5734fec5a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BeforeAndAfterTest</name>
    <filename>classBeforeAndAfterTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>initialSetup</name>
      <anchorfile>classBeforeAndAfterTest.html</anchorfile>
      <anchor>a296adf13b261454f407ab0b6dc42dc66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>finalTeardown</name>
      <anchorfile>classBeforeAndAfterTest.html</anchorfile>
      <anchor>a4560bdb29e9966e4ba5f04f02a38af1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>test1</name>
      <anchorfile>classBeforeAndAfterTest.html</anchorfile>
      <anchor>a15ede21accc0d99b843d202b2a9e530f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>test2</name>
      <anchorfile>classBeforeAndAfterTest.html</anchorfile>
      <anchor>a1d1bb47aa80fd7a5f79401467bbd9697</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>resetProperties</name>
      <anchorfile>classBeforeAndAfterTest.html</anchorfile>
      <anchor>a6ed91801c5e47b7c904342a57072b2e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static</type>
      <name>$beforeWasRun</name>
      <anchorfile>classBeforeAndAfterTest.html</anchorfile>
      <anchor>ac27ae1ce4bb844df56af6b17fdc4e395</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static</type>
      <name>$afterWasRun</name>
      <anchorfile>classBeforeAndAfterTest.html</anchorfile>
      <anchor>a923c45db1d58f5e94bc98beeca34b345</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BeforeClassAndAfterClassTest</name>
    <filename>classBeforeClassAndAfterClassTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>test1</name>
      <anchorfile>classBeforeClassAndAfterClassTest.html</anchorfile>
      <anchor>ae7a3a4bbb061f7f8953c3863b34c2fe0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>test2</name>
      <anchorfile>classBeforeClassAndAfterClassTest.html</anchorfile>
      <anchor>ac20126d4f76c755bff279e12f9a6cdcb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>resetProperties</name>
      <anchorfile>classBeforeClassAndAfterClassTest.html</anchorfile>
      <anchor>ab89e7cc08a157268602a0044f297105b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>initialClassSetup</name>
      <anchorfile>classBeforeClassAndAfterClassTest.html</anchorfile>
      <anchor>a097ae5567f27a88ea387cb69029408b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>finalClassTeardown</name>
      <anchorfile>classBeforeClassAndAfterClassTest.html</anchorfile>
      <anchor>a7e1e8fa8659b749ab55a2b225c9d9e4a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static</type>
      <name>$beforeClassWasRun</name>
      <anchorfile>classBeforeClassAndAfterClassTest.html</anchorfile>
      <anchor>a9c1a747cde56daa2241ba5d9b9c34e14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static</type>
      <name>$afterClassWasRun</name>
      <anchorfile>classBeforeClassAndAfterClassTest.html</anchorfile>
      <anchor>a75d3c5763fd1f649db5e72745dff48fd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BeforeClassWithOnlyDataProviderTest</name>
    <filename>classBeforeClassWithOnlyDataProviderTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>dummyProvider</name>
      <anchorfile>classBeforeClassWithOnlyDataProviderTest.html</anchorfile>
      <anchor>a8ac40055776e303146e39ef469abc616</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testDummy</name>
      <anchorfile>classBeforeClassWithOnlyDataProviderTest.html</anchorfile>
      <anchor>ac4257fb8cf325514e8ef39c2dfd07da9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>resetProperties</name>
      <anchorfile>classBeforeClassWithOnlyDataProviderTest.html</anchorfile>
      <anchor>abf6867d85776c6222750aefa893c7ce8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>someAnnotatedSetupMethod</name>
      <anchorfile>classBeforeClassWithOnlyDataProviderTest.html</anchorfile>
      <anchor>ac2fa8e5e7e685947ef4a6299f50dd3b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>setUpBeforeClass</name>
      <anchorfile>classBeforeClassWithOnlyDataProviderTest.html</anchorfile>
      <anchor>a71e7b79f99a33f6a64c0c53e3bd0497c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static</type>
      <name>$setUpBeforeClassWasCalled</name>
      <anchorfile>classBeforeClassWithOnlyDataProviderTest.html</anchorfile>
      <anchor>aeca821ea7551d515bbc1d28a4659d728</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static</type>
      <name>$beforeClassWasCalled</name>
      <anchorfile>classBeforeClassWithOnlyDataProviderTest.html</anchorfile>
      <anchor>a749e66a57e98f39b5699aaa4d906bbf0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>PHPUnit::Runner::BeforeFirstTestHook</name>
    <filename>interfacePHPUnit_1_1Runner_1_1BeforeFirstTestHook.html</filename>
    <base>PHPUnit::Runner::Hook</base>
    <member kind="function">
      <type></type>
      <name>executeBeforeFirstTest</name>
      <anchorfile>interfacePHPUnit_1_1Runner_1_1BeforeFirstTestHook.html</anchorfile>
      <anchor>ae341609be4304d28c1030f39f95b44d6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>PHPUnit::Runner::BeforeTestHook</name>
    <filename>interfacePHPUnit_1_1Runner_1_1BeforeTestHook.html</filename>
    <base>PHPUnit::Runner::TestHook</base>
    <member kind="function">
      <type></type>
      <name>executeBeforeTest</name>
      <anchorfile>interfacePHPUnit_1_1Runner_1_1BeforeTestHook.html</anchorfile>
      <anchor>abcbf98c9a0b98e792d37e55b6387f5e0</anchor>
      <arglist>(string $test)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::GlobalState::Blacklist</name>
    <filename>classSebastianBergmann_1_1GlobalState_1_1Blacklist.html</filename>
    <member kind="function">
      <type></type>
      <name>addGlobalVariable</name>
      <anchorfile>classSebastianBergmann_1_1GlobalState_1_1Blacklist.html</anchorfile>
      <anchor>af2de29a232cd8ec68a6902579909a50d</anchor>
      <arglist>(string $variableName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addClass</name>
      <anchorfile>classSebastianBergmann_1_1GlobalState_1_1Blacklist.html</anchorfile>
      <anchor>a575c4a69663872560cf47d8242441a67</anchor>
      <arglist>(string $className)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addSubclassesOf</name>
      <anchorfile>classSebastianBergmann_1_1GlobalState_1_1Blacklist.html</anchorfile>
      <anchor>acf104b655e5ae769822b4c8dff7c96cd</anchor>
      <arglist>(string $className)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addImplementorsOf</name>
      <anchorfile>classSebastianBergmann_1_1GlobalState_1_1Blacklist.html</anchorfile>
      <anchor>a598e50581293e9b3cea8c34ea35e8d5c</anchor>
      <arglist>(string $interfaceName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addClassNamePrefix</name>
      <anchorfile>classSebastianBergmann_1_1GlobalState_1_1Blacklist.html</anchorfile>
      <anchor>a3b01385c0e1688d0a29ec2e214657041</anchor>
      <arglist>(string $classNamePrefix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addStaticAttribute</name>
      <anchorfile>classSebastianBergmann_1_1GlobalState_1_1Blacklist.html</anchorfile>
      <anchor>a925e61926d168d81e2301466725480cc</anchor>
      <arglist>(string $className, string $attributeName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isGlobalVariableBlacklisted</name>
      <anchorfile>classSebastianBergmann_1_1GlobalState_1_1Blacklist.html</anchorfile>
      <anchor>a9499ca86cf5e78664c72ab017a59aa21</anchor>
      <arglist>(string $variableName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isStaticAttributeBlacklisted</name>
      <anchorfile>classSebastianBergmann_1_1GlobalState_1_1Blacklist.html</anchorfile>
      <anchor>a4404cbe6a2a12f151bdde046854d7510</anchor>
      <arglist>(string $className, string $attributeName)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Util::Blacklist</name>
    <filename>classPHPUnit_1_1Util_1_1Blacklist.html</filename>
    <member kind="function">
      <type></type>
      <name>getBlacklistedDirectories</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Blacklist.html</anchorfile>
      <anchor>a1434c5a66b143801ec2aa7b088ecbf3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isBlacklisted</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Blacklist.html</anchorfile>
      <anchor>abfd4fb003e03e7f305e7d6680973efb3</anchor>
      <arglist>(string $file)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static</type>
      <name>$blacklistedClassNames</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Blacklist.html</anchorfile>
      <anchor>a107f8a62cce2807dff59b24da1940619</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::GlobalState::TestFixture::BlacklistedChildClass</name>
    <filename>classSebastianBergmann_1_1GlobalState_1_1TestFixture_1_1BlacklistedChildClass.html</filename>
    <base>SebastianBergmann::GlobalState::TestFixture::BlacklistedClass</base>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::GlobalState::TestFixture::BlacklistedClass</name>
    <filename>classSebastianBergmann_1_1GlobalState_1_1TestFixture_1_1BlacklistedClass.html</filename>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::GlobalState::TestFixture::BlacklistedImplementor</name>
    <filename>classSebastianBergmann_1_1GlobalState_1_1TestFixture_1_1BlacklistedImplementor.html</filename>
    <base>SebastianBergmann::GlobalState::TestFixture::BlacklistedInterface</base>
  </compound>
  <compound kind="interface">
    <name>SebastianBergmann::GlobalState::TestFixture::BlacklistedInterface</name>
    <filename>interfaceSebastianBergmann_1_1GlobalState_1_1TestFixture_1_1BlacklistedInterface.html</filename>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::GlobalState::BlacklistTest</name>
    <filename>classSebastianBergmann_1_1GlobalState_1_1BlacklistTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testGlobalVariableThatIsNotBlacklistedIsNotTreatedAsBlacklisted</name>
      <anchorfile>classSebastianBergmann_1_1GlobalState_1_1BlacklistTest.html</anchorfile>
      <anchor>ac901c8e15eaf795ebb820a3ed14de6f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGlobalVariableCanBeBlacklisted</name>
      <anchorfile>classSebastianBergmann_1_1GlobalState_1_1BlacklistTest.html</anchorfile>
      <anchor>a27910676ecee647e598711c58d37683d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStaticAttributeThatIsNotBlacklistedIsNotTreatedAsBlacklisted</name>
      <anchorfile>classSebastianBergmann_1_1GlobalState_1_1BlacklistTest.html</anchorfile>
      <anchor>a37ea893c1f9d01ae1865ecdc043df859</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testClassCanBeBlacklisted</name>
      <anchorfile>classSebastianBergmann_1_1GlobalState_1_1BlacklistTest.html</anchorfile>
      <anchor>ae1e19711666dec3d073794a422ab8e0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSubclassesCanBeBlacklisted</name>
      <anchorfile>classSebastianBergmann_1_1GlobalState_1_1BlacklistTest.html</anchorfile>
      <anchor>ad755239dd6c5796934f686132188a653</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testImplementorsCanBeBlacklisted</name>
      <anchorfile>classSebastianBergmann_1_1GlobalState_1_1BlacklistTest.html</anchorfile>
      <anchor>ad5957c983576f8d086ab1db3ea0c1781</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testClassNamePrefixesCanBeBlacklisted</name>
      <anchorfile>classSebastianBergmann_1_1GlobalState_1_1BlacklistTest.html</anchorfile>
      <anchor>a0befa026c9d4037a58cbcda768acbde5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStaticAttributeCanBeBlacklisted</name>
      <anchorfile>classSebastianBergmann_1_1GlobalState_1_1BlacklistTest.html</anchorfile>
      <anchor>a6a4f8d762b318e84d20393a8ea59bc61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classSebastianBergmann_1_1GlobalState_1_1BlacklistTest.html</anchorfile>
      <anchor>a2f4a34fe426e734971cb217b80ebe729</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Comparator::Book</name>
    <filename>classSebastianBergmann_1_1Comparator_1_1Book.html</filename>
    <member kind="variable">
      <type></type>
      <name>$author</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1Book.html</anchorfile>
      <anchor>afef7ab05e8904b75d4dd968d4811f817</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Book</name>
    <filename>classBook.html</filename>
    <member kind="variable">
      <type></type>
      <name>$author</name>
      <anchorfile>classBook.html</anchorfile>
      <anchor>a9f78f5cf4e4c5878fa7457f52a778404</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::Types::Boolean</name>
    <filename>classphpDocumentor_1_1Reflection_1_1Types_1_1Boolean.html</filename>
    <base>phpDocumentor::Reflection::Type</base>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1Boolean.html</anchorfile>
      <anchor>a177a2fef88cd448b74f81c7732dc6d26</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::Types::BooleanTest</name>
    <filename>classphpDocumentor_1_1Reflection_1_1Types_1_1BooleanTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testBooleanStringifyCorrectly</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1BooleanTest.html</anchorfile>
      <anchor>acb31379342b85b664eb6708d2c6732b6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>Bor</name>
    <filename>interfaceBor.html</filename>
    <member kind="function">
      <type></type>
      <name>foo</name>
      <anchorfile>interfaceBor.html</anchorfile>
      <anchor>a9a19e7055f21dee04ed40693b2419c22</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::CodeCoverage::Node::Builder</name>
    <filename>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1Builder.html</filename>
    <member kind="function">
      <type></type>
      <name>build</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1Builder.html</anchorfile>
      <anchor>a80f30fc3e9ffb34661024d097159d610</anchor>
      <arglist>(CodeCoverage $coverage)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::CodeCoverage::Report::BuilderTest</name>
    <filename>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1BuilderTest.html</filename>
    <base>SebastianBergmann::CodeCoverage::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1BuilderTest.html</anchorfile>
      <anchor>ad3b82143523444ef6ba16da6efd71b14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testNotCrashParsing</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1BuilderTest.html</anchorfile>
      <anchor>a62ea196e25105477e22d46ed19df14aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testBuildDirectoryStructure</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1BuilderTest.html</anchorfile>
      <anchor>a283ce6aaef2e4b5cd588254bbc562b5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testReducePaths</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1BuilderTest.html</anchorfile>
      <anchor>a0fbc00f244588cdfdb554fc9b03ecaaf</anchor>
      <arglist>($reducedPaths, $commonPath, $paths)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>reducePathsProvider</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1BuilderTest.html</anchorfile>
      <anchor>a6f6c39c7b006b40447b381b179df8ac3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1BuilderTest.html</anchorfile>
      <anchor>a73aa6a5f226d386b95e36fad51670172</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$factory</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1BuilderTest.html</anchorfile>
      <anchor>a1fda2937fdb7313211ce48d8b5b0c984</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::CodeCoverage::Report::Xml::BuildInformation</name>
    <filename>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1BuildInformation.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1BuildInformation.html</anchorfile>
      <anchor>a675486bd33337617c277003aabcc082d</anchor>
      <arglist>(\DOMElement $contextNode)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setRuntimeInformation</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1BuildInformation.html</anchorfile>
      <anchor>a8a3160a0c1fbc80c06e281232adb3902</anchor>
      <arglist>(Runtime $runtime)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setBuildTime</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1BuildInformation.html</anchorfile>
      <anchor>a1a0d59f0f14a9e35544105af1c783945</anchor>
      <arglist>(\DateTime $date)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setGeneratorVersions</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1BuildInformation.html</anchorfile>
      <anchor>a5df886108cffeb3648ed15b09ae66fda</anchor>
      <arglist>(string $phpUnitVersion, string $coverageVersion)</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>Contracts::BulkRetrieverInterface</name>
    <filename>interfaceContracts_1_1BulkRetrieverInterface.html</filename>
    <member kind="function">
      <type></type>
      <name>retrieveAll</name>
      <anchorfile>interfaceContracts_1_1BulkRetrieverInterface.html</anchorfile>
      <anchor>a8fe7e8f11417ada8d041535c20043e7b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>Contracts::BulkStorerInterface</name>
    <filename>interfaceContracts_1_1BulkStorerInterface.html</filename>
    <member kind="function">
      <type></type>
      <name>storeMultiple</name>
      <anchorfile>interfaceContracts_1_1BulkStorerInterface.html</anchorfile>
      <anchor>a8460092014ff4e91ddf1e0e565faa3d3</anchor>
      <arglist>(array $data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::BundledComponent</name>
    <filename>classPharIo_1_1Manifest_1_1BundledComponent.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPharIo_1_1Manifest_1_1BundledComponent.html</anchorfile>
      <anchor>a292dfb18d5c8a30f6c2a4335db47047a</anchor>
      <arglist>($name, Version $version)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getName</name>
      <anchorfile>classPharIo_1_1Manifest_1_1BundledComponent.html</anchorfile>
      <anchor>ae75586288bc4776b666103d76dcf43b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getVersion</name>
      <anchorfile>classPharIo_1_1Manifest_1_1BundledComponent.html</anchorfile>
      <anchor>aa5ff1bb4f84391d8ef3c7565a491c36e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::BundledComponentCollection</name>
    <filename>classPharIo_1_1Manifest_1_1BundledComponentCollection.html</filename>
    <member kind="function">
      <type></type>
      <name>add</name>
      <anchorfile>classPharIo_1_1Manifest_1_1BundledComponentCollection.html</anchorfile>
      <anchor>a54a10c40cb65bef71ddc4d4fc6ffe6bf</anchor>
      <arglist>(BundledComponent $bundledComponent)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getBundledComponents</name>
      <anchorfile>classPharIo_1_1Manifest_1_1BundledComponentCollection.html</anchorfile>
      <anchor>a9e4fde167935a28b6bf8f5026b79dfdd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>count</name>
      <anchorfile>classPharIo_1_1Manifest_1_1BundledComponentCollection.html</anchorfile>
      <anchor>aec15c96932371c3ba3db4f1e0f101c0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getIterator</name>
      <anchorfile>classPharIo_1_1Manifest_1_1BundledComponentCollection.html</anchorfile>
      <anchor>a12a93da2db4034c553115ffa2033ba7b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::BundledComponentCollectionIterator</name>
    <filename>classPharIo_1_1Manifest_1_1BundledComponentCollectionIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPharIo_1_1Manifest_1_1BundledComponentCollectionIterator.html</anchorfile>
      <anchor>a686b2b46d8558449d24f75c9ff0a418e</anchor>
      <arglist>(BundledComponentCollection $bundledComponents)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>rewind</name>
      <anchorfile>classPharIo_1_1Manifest_1_1BundledComponentCollectionIterator.html</anchorfile>
      <anchor>a010498b75f77b7c1b2f117180bd18f4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>valid</name>
      <anchorfile>classPharIo_1_1Manifest_1_1BundledComponentCollectionIterator.html</anchorfile>
      <anchor>a1da95df49dfa57dfc5bf7cb918f8f59b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>key</name>
      <anchorfile>classPharIo_1_1Manifest_1_1BundledComponentCollectionIterator.html</anchorfile>
      <anchor>a86516e87abd9137f5afc035156402cf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>current</name>
      <anchorfile>classPharIo_1_1Manifest_1_1BundledComponentCollectionIterator.html</anchorfile>
      <anchor>a59575c2e36ec27f1456948e42d4c5525</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>next</name>
      <anchorfile>classPharIo_1_1Manifest_1_1BundledComponentCollectionIterator.html</anchorfile>
      <anchor>a49848f68df628064edfe29bb1df034ee</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::BundledComponentCollectionTest</name>
    <filename>classPharIo_1_1Manifest_1_1BundledComponentCollectionTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testCanBeCreated</name>
      <anchorfile>classPharIo_1_1Manifest_1_1BundledComponentCollectionTest.html</anchorfile>
      <anchor>a75bdf2e9ca4139984b74019ce0b4cc71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCanBeCounted</name>
      <anchorfile>classPharIo_1_1Manifest_1_1BundledComponentCollectionTest.html</anchorfile>
      <anchor>a189ec8847e4407f942c356203ae42671</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCanBeIterated</name>
      <anchorfile>classPharIo_1_1Manifest_1_1BundledComponentCollectionTest.html</anchorfile>
      <anchor>a8310c2ec57f24ed409172b4690d60653</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testKeyPositionCanBeRetreived</name>
      <anchorfile>classPharIo_1_1Manifest_1_1BundledComponentCollectionTest.html</anchorfile>
      <anchor>a689056fcd94247aabfbb6aedfd39c4e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classPharIo_1_1Manifest_1_1BundledComponentCollectionTest.html</anchorfile>
      <anchor>aa1241c457cc865d796ceef4f0d776fba</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::BundledComponentTest</name>
    <filename>classPharIo_1_1Manifest_1_1BundledComponentTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testCanBeCreated</name>
      <anchorfile>classPharIo_1_1Manifest_1_1BundledComponentTest.html</anchorfile>
      <anchor>a4cf1357f513240798d32f1b1478682c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testNameCanBeRetrieved</name>
      <anchorfile>classPharIo_1_1Manifest_1_1BundledComponentTest.html</anchorfile>
      <anchor>a2e49960a2b940c15cb652918dc903f13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testVersionCanBeRetrieved</name>
      <anchorfile>classPharIo_1_1Manifest_1_1BundledComponentTest.html</anchorfile>
      <anchor>ad11bf220b1b6b262969aded38f8e2425</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classPharIo_1_1Manifest_1_1BundledComponentTest.html</anchorfile>
      <anchor>a5c977160402fa638b59b7958097c21c2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::BundlesElement</name>
    <filename>classPharIo_1_1Manifest_1_1BundlesElement.html</filename>
    <base>PharIo::Manifest::ManifestElement</base>
    <member kind="function">
      <type></type>
      <name>getComponentElements</name>
      <anchorfile>classPharIo_1_1Manifest_1_1BundlesElement.html</anchorfile>
      <anchor>ad2422ee00fd36be33a7a9dde8150a696</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::BundlesElementTest</name>
    <filename>classPharIo_1_1Manifest_1_1BundlesElementTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testThrowsExceptionWhenGetComponentElementsIsCalledButNodesAreMissing</name>
      <anchorfile>classPharIo_1_1Manifest_1_1BundlesElementTest.html</anchorfile>
      <anchor>ad863164b0665a83820bb673543c62040</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetComponentElementsReturnsComponentElementCollection</name>
      <anchorfile>classPharIo_1_1Manifest_1_1BundlesElementTest.html</anchorfile>
      <anchor>aa5543d28369b314257ae28f37401f7bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classPharIo_1_1Manifest_1_1BundlesElementTest.html</anchorfile>
      <anchor>a7fea7642226553c9a19d230f148ed5db</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::CodeCoverage::TestFixture::C</name>
    <filename>classSebastianBergmann_1_1CodeCoverage_1_1TestFixture_1_1C.html</filename>
    <member kind="function">
      <type></type>
      <name>m</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1TestFixture_1_1C.html</anchorfile>
      <anchor>a5cdb9eaa80c03486e3f1f4921e31185d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>c</name>
    <filename>classc.html</filename>
    <base>b</base>
    <member kind="function">
      <type></type>
      <name>foo</name>
      <anchorfile>classc.html</anchorfile>
      <anchor>ace60a2226e5968f651ea1aa9787b333c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>baz</name>
      <anchorfile>classc.html</anchorfile>
      <anchor>a68f144f0b56cdd01788d5e37a819ad03</anchor>
      <arglist>(Baz $baz)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>m</name>
      <anchorfile>classc.html</anchorfile>
      <anchor>a4ea2eda60d8cbdefe60045ec3b5888cd</anchor>
      <arglist>($a, array $b, array $c=array())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Doubler::CachedDoubler</name>
    <filename>classProphecy_1_1Doubler_1_1CachedDoubler.html</filename>
    <base>Prophecy::Doubler::Doubler</base>
    <member kind="function">
      <type></type>
      <name>resetCache</name>
      <anchorfile>classProphecy_1_1Doubler_1_1CachedDoubler.html</anchorfile>
      <anchor>a2c961b941d29d726d425c95068e07233</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>createDoubleClass</name>
      <anchorfile>classProphecy_1_1Doubler_1_1CachedDoubler.html</anchorfile>
      <anchor>a2dec42b0b26e37d27a9f81d8c6e57e3b</anchor>
      <arglist>(ReflectionClass $class=null, array $interfaces)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Calculator</name>
    <filename>classCalculator.html</filename>
    <member kind="function">
      <type></type>
      <name>add</name>
      <anchorfile>classCalculator.html</anchorfile>
      <anchor>a42ff1f484c50910183c14e19798441d4</anchor>
      <arglist>($a, $b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Call::Call</name>
    <filename>classProphecy_1_1Call_1_1Call.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classProphecy_1_1Call_1_1Call.html</anchorfile>
      <anchor>af8066f870607473ee1a9ecd45245d53a</anchor>
      <arglist>($methodName, array $arguments, $returnValue, Exception $exception=null, $file, $line)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getMethodName</name>
      <anchorfile>classProphecy_1_1Call_1_1Call.html</anchorfile>
      <anchor>ad928b525ca67d1c77975e8210a8a1d45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getArguments</name>
      <anchorfile>classProphecy_1_1Call_1_1Call.html</anchorfile>
      <anchor>a677799c480df45c7ef71b89264a98438</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getReturnValue</name>
      <anchorfile>classProphecy_1_1Call_1_1Call.html</anchorfile>
      <anchor>a84a81f9bb9390bea3d0138dcf320922c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getException</name>
      <anchorfile>classProphecy_1_1Call_1_1Call.html</anchorfile>
      <anchor>ab946f31f2119711019b14a4bd3fb8470</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getFile</name>
      <anchorfile>classProphecy_1_1Call_1_1Call.html</anchorfile>
      <anchor>add8be1dcf26f46108423fd91b50c42df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getLine</name>
      <anchorfile>classProphecy_1_1Call_1_1Call.html</anchorfile>
      <anchor>a2074124c973c44bb437f58c9c95df5da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getCallPlace</name>
      <anchorfile>classProphecy_1_1Call_1_1Call.html</anchorfile>
      <anchor>adc7de79801e15038b4a2207d89cfa554</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addScore</name>
      <anchorfile>classProphecy_1_1Call_1_1Call.html</anchorfile>
      <anchor>a3b45bc61fc6cb9b076e7ecc8b07e3ccb</anchor>
      <arglist>(ArgumentsWildcard $wildcard, $score)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getScore</name>
      <anchorfile>classProphecy_1_1Call_1_1Call.html</anchorfile>
      <anchor>a16d3857efca657406d8c759a768b99f0</anchor>
      <arglist>(ArgumentsWildcard $wildcard)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::Types::Callable_</name>
    <filename>classphpDocumentor_1_1Reflection_1_1Types_1_1Callable__.html</filename>
    <base>phpDocumentor::Reflection::Type</base>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1Callable__.html</anchorfile>
      <anchor>a436d13689ebc1d62eddd3657d9fbd07e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Type::CallableType</name>
    <filename>classSebastianBergmann_1_1Type_1_1CallableType.html</filename>
    <base>SebastianBergmann::Type::Type</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1CallableType.html</anchorfile>
      <anchor>afd5f03c857d4973d90a136dba95cb59d</anchor>
      <arglist>(bool $nullable)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isAssignable</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1CallableType.html</anchorfile>
      <anchor>a2f7fab2982d321aa3d8c6ce3755a7336</anchor>
      <arglist>(Type $other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getReturnTypeDeclaration</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1CallableType.html</anchorfile>
      <anchor>a836d7c34baf821c5432cf9cb7340c4be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>allowsNull</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1CallableType.html</anchorfile>
      <anchor>a97e64ee26ca065780713ba8becff81d0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Type::CallableTypeTest</name>
    <filename>classSebastianBergmann_1_1Type_1_1CallableTypeTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testMayDisallowNull</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1CallableTypeTest.html</anchorfile>
      <anchor>a10fa9dbc00f9317d44f41f183e61d7f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCanGenerateReturnTypeDeclaration</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1CallableTypeTest.html</anchorfile>
      <anchor>a3496d50b7861c66805dab1c63cf95d02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testMayAllowNull</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1CallableTypeTest.html</anchorfile>
      <anchor>addf4ccdfb142763c225f11da8bfa3a69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCanGenerateNullableReturnTypeDeclaration</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1CallableTypeTest.html</anchorfile>
      <anchor>a570f12f0ff9dd8db20a3c69830284436</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testNullCanBeAssignedToNullableCallable</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1CallableTypeTest.html</anchorfile>
      <anchor>a7c4af22712ad733770d571db2547798b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCallableCanBeAssignedToCallable</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1CallableTypeTest.html</anchorfile>
      <anchor>a80f1a47e0015f0b5be40267fea72c482</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testClosureCanBeAssignedToCallable</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1CallableTypeTest.html</anchorfile>
      <anchor>aeaa9c20803ba9066c30ffd80995310b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testInvokableCanBeAssignedToCallable</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1CallableTypeTest.html</anchorfile>
      <anchor>a449aeb64900954e09afb8ff123090421</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStringWithFunctionNameCanBeAssignedToCallable</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1CallableTypeTest.html</anchorfile>
      <anchor>a31ccb530632a0a43e1dc8d9c6ba872d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStringWithClassNameAndStaticMethodNameCanBeAssignedToCallable</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1CallableTypeTest.html</anchorfile>
      <anchor>a9576d5608055c3f51f3970662582a27e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testArrayWithClassNameAndStaticMethodNameCanBeAssignedToCallable</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1CallableTypeTest.html</anchorfile>
      <anchor>a45dd8553c0907c6ea310d9637fed2aed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testArrayWithClassNameAndInstanceMethodNameCanBeAssignedToCallable</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1CallableTypeTest.html</anchorfile>
      <anchor>ab1825540e32aa38de1a228f6a82fe4a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSomethingThatIsNotCallableCannotBeAssignedToCallable</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1CallableTypeTest.html</anchorfile>
      <anchor>ab03b50e3356fa8931cc1ec9b394ca951</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testObjectWithoutInvokeMethodCannotBeAssignedToCallable</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1CallableTypeTest.html</anchorfile>
      <anchor>a2e4960702f4146cb485b008ca9e065a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1CallableTypeTest.html</anchorfile>
      <anchor>aa65f1dc70db5542c160b6603b52080c9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::Callback</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1Callback.html</filename>
    <base>PHPUnit::Framework::Constraint::Constraint</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1Callback.html</anchorfile>
      <anchor>a61b68793b5b354ddc08ae2a0b7fa8bb3</anchor>
      <arglist>(callable $callback)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1Callback.html</anchorfile>
      <anchor>a1ba38167147b396adfb71a848a72d113</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>matches</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1Callback.html</anchorfile>
      <anchor>ab0660f430c473ac05e691ab99d3e7545</anchor>
      <arglist>($other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Prediction::CallbackPrediction</name>
    <filename>classProphecy_1_1Prediction_1_1CallbackPrediction.html</filename>
    <base>Prophecy::Prediction::PredictionInterface</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classProphecy_1_1Prediction_1_1CallbackPrediction.html</anchorfile>
      <anchor>ac7130cae02f636cb27a2e5e7092a28ca</anchor>
      <arglist>($callback)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>check</name>
      <anchorfile>classProphecy_1_1Prediction_1_1CallbackPrediction.html</anchorfile>
      <anchor>ab510d4dd91ed14857705da9310534297</anchor>
      <arglist>(array $calls, ObjectProphecy $object, MethodProphecy $method)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Promise::CallbackPromise</name>
    <filename>classProphecy_1_1Promise_1_1CallbackPromise.html</filename>
    <base>Prophecy::Promise::PromiseInterface</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classProphecy_1_1Promise_1_1CallbackPromise.html</anchorfile>
      <anchor>a1d19a66e51fb1922fd21882dc15b51f8</anchor>
      <arglist>($callback)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>execute</name>
      <anchorfile>classProphecy_1_1Promise_1_1CallbackPromise.html</anchorfile>
      <anchor>aeb208e00683b1dff9685fdcf2d15a49b</anchor>
      <arglist>(array $args, ObjectProphecy $object, MethodProphecy $method)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::CallbackTest</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1CallbackTest.html</filename>
    <base>PHPUnit::Framework::Constraint::ConstraintTestCase</base>
    <member kind="function">
      <type></type>
      <name>callbackReturningTrue</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1CallbackTest.html</anchorfile>
      <anchor>a3876f36bbbe1480a3aabde2abe087c34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintCallback</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1CallbackTest.html</anchorfile>
      <anchor>a9d25ba1b7992c70115ed8c060277f47c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintCallbackFailure</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1CallbackTest.html</anchorfile>
      <anchor>aa1d8d260c348639edaff2d7cb2a1a7d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>staticCallbackReturningTrue</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1CallbackTest.html</anchorfile>
      <anchor>aaca3d839aff9923b5ec077cd4370f740</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Argument::Token::CallbackToken</name>
    <filename>classProphecy_1_1Argument_1_1Token_1_1CallbackToken.html</filename>
    <base>Prophecy::Argument::Token::TokenInterface</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1CallbackToken.html</anchorfile>
      <anchor>a455043ed694e7b3dc1296d4337241f09</anchor>
      <arglist>($callback)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>scoreArgument</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1CallbackToken.html</anchorfile>
      <anchor>a00d596c7294931797f7ced0a443228a9</anchor>
      <arglist>($argument)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isLast</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1CallbackToken.html</anchorfile>
      <anchor>a28ed1c3cb110df8e9c3f17a2ca1029fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1CallbackToken.html</anchorfile>
      <anchor>aab4800eea35c41b9a99402014e7ba1b7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Call::CallCenter</name>
    <filename>classProphecy_1_1Call_1_1CallCenter.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classProphecy_1_1Call_1_1CallCenter.html</anchorfile>
      <anchor>a4e31d3e5310a943e111f2c77718676a2</anchor>
      <arglist>(StringUtil $util=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>makeCall</name>
      <anchorfile>classProphecy_1_1Call_1_1CallCenter.html</anchorfile>
      <anchor>a0bf6387086a8c5182cace49cea299489</anchor>
      <arglist>(ObjectProphecy $prophecy, $methodName, array $arguments)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>findCalls</name>
      <anchorfile>classProphecy_1_1Call_1_1CallCenter.html</anchorfile>
      <anchor>a3284cd01587b554b64972aa51d4e51a9</anchor>
      <arglist>($methodName, ArgumentsWildcard $wildcard)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Prediction::CallPrediction</name>
    <filename>classProphecy_1_1Prediction_1_1CallPrediction.html</filename>
    <base>Prophecy::Prediction::PredictionInterface</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classProphecy_1_1Prediction_1_1CallPrediction.html</anchorfile>
      <anchor>acc602432880701012228a1edf31bda3a</anchor>
      <arglist>(StringUtil $util=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>check</name>
      <anchorfile>classProphecy_1_1Prediction_1_1CallPrediction.html</anchorfile>
      <anchor>a912d86541656d8fa57f2d339186c9523</anchor>
      <arglist>(array $calls, ObjectProphecy $object, MethodProphecy $method)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Prediction::CallTimesPrediction</name>
    <filename>classProphecy_1_1Prediction_1_1CallTimesPrediction.html</filename>
    <base>Prophecy::Prediction::PredictionInterface</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classProphecy_1_1Prediction_1_1CallTimesPrediction.html</anchorfile>
      <anchor>afecd4722ebf1cca625554998c00d96fb</anchor>
      <arglist>($times, StringUtil $util=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>check</name>
      <anchorfile>classProphecy_1_1Prediction_1_1CallTimesPrediction.html</anchorfile>
      <anchor>ad857d85e2a5b2bd87849eb51107b87fb</anchor>
      <arglist>(array $calls, ObjectProphecy $object, MethodProphecy $method)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChangeCurrentWorkingDirectoryTest</name>
    <filename>classChangeCurrentWorkingDirectoryTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testSomethingThatChangesTheCwd</name>
      <anchorfile>classChangeCurrentWorkingDirectoryTest.html</anchorfile>
      <anchor>a288ac44b583b6871c805ced071dd419a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::TestFixture::MockObject::ChildClass</name>
    <filename>classPHPUnit_1_1TestFixture_1_1MockObject_1_1ChildClass.html</filename>
    <base>PHPUnit::TestFixture::MockObject::ParentClass</base>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::ObjectReflector::TestFixture::ChildClass</name>
    <filename>classSebastianBergmann_1_1ObjectReflector_1_1TestFixture_1_1ChildClass.html</filename>
    <base>SebastianBergmann::ObjectReflector::TestFixture::ParentClass</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classSebastianBergmann_1_1ObjectReflector_1_1TestFixture_1_1ChildClass.html</anchorfile>
      <anchor>a41316e83fef26311d0ab052e4197941b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Type::TestFixture::ChildClass</name>
    <filename>classSebastianBergmann_1_1Type_1_1TestFixture_1_1ChildClass.html</filename>
    <base>SebastianBergmann::Type::TestFixture::ParentClass</base>
  </compound>
  <compound kind="class">
    <name>ChildProcessClass1351</name>
    <filename>classChildProcessClass1351.html</filename>
  </compound>
  <compound kind="class">
    <name>ChildSuite</name>
    <filename>classChildSuite.html</filename>
    <member kind="function" static="yes">
      <type>static</type>
      <name>suite</name>
      <anchorfile>classChildSuite.html</anchorfile>
      <anchor>a96b423470168f4c14d46457c907f3583</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Diff::Chunk</name>
    <filename>classSebastianBergmann_1_1Diff_1_1Chunk.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Chunk.html</anchorfile>
      <anchor>a483a0ec827e2b80cecaec66958b808ad</anchor>
      <arglist>(int $start=0, int $startRange=1, int $end=0, int $endRange=1, array $lines=[])</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getStart</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Chunk.html</anchorfile>
      <anchor>af875b22d26cc8346c1ee831f9088d753</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getStartRange</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Chunk.html</anchorfile>
      <anchor>add9d9405f7f00ceab600b9f074e0f7cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getEnd</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Chunk.html</anchorfile>
      <anchor>ad8cbaa1fb159a089e0e83dc10d11fbf0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getEndRange</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Chunk.html</anchorfile>
      <anchor>a57ca6c4299beb868d22d8857e0b52e6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getLines</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Chunk.html</anchorfile>
      <anchor>a46b04afae1027f9bcad180298c9f630b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setLines</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Chunk.html</anchorfile>
      <anchor>ab291f9593e641f8255ed25a9407de016</anchor>
      <arglist>(array $lines)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Diff::ChunkTest</name>
    <filename>classSebastianBergmann_1_1Diff_1_1ChunkTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testHasInitiallyNoLines</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1ChunkTest.html</anchorfile>
      <anchor>a3d0156314215cc75ef2d17d31558aeb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCanBeCreatedWithoutArguments</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1ChunkTest.html</anchorfile>
      <anchor>a7a7cfde1546db83c36f56eac76c697b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStartCanBeRetrieved</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1ChunkTest.html</anchorfile>
      <anchor>aae933ed53853a423ae3ee03b525e62da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStartRangeCanBeRetrieved</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1ChunkTest.html</anchorfile>
      <anchor>a3f40ba60d6a3d3a0ba3e80ee5f1017e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testEndCanBeRetrieved</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1ChunkTest.html</anchorfile>
      <anchor>a160e22f6521326ea3ef8b99f19abbb01</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testEndRangeCanBeRetrieved</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1ChunkTest.html</anchorfile>
      <anchor>a5ff8c8e2d8eaf10aff5e41609658694d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testLinesCanBeRetrieved</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1ChunkTest.html</anchorfile>
      <anchor>a314a0b02a224781f7491d5db02146597</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testLinesCanBeSet</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1ChunkTest.html</anchorfile>
      <anchor>a4659ddebf4f0d0eb718a032b53e560cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1ChunkTest.html</anchorfile>
      <anchor>a8f75eb6756f72488e258b63d08ae9675</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>class_with_method_named_empty</name>
    <filename>classclass__with__method__named__empty.html</filename>
    <member kind="function">
      <type></type>
      <name>empty</name>
      <anchorfile>classclass__with__method__named__empty.html</anchorfile>
      <anchor>ab16d714bfcec182e043eefe72f42c799</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>class_with_method_that_declares_anonymous_class</name>
    <filename>classclass__with__method__that__declares__anonymous__class.html</filename>
    <member kind="function">
      <type></type>
      <name>method</name>
      <anchorfile>classclass__with__method__that__declares__anonymous__class.html</anchorfile>
      <anchor>a42294ba7e2f275fb87acdc2ac1f3bda0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>class_with_multiple_anonymous_classes_and_functions</name>
    <filename>classclass__with__multiple__anonymous__classes__and__functions.html</filename>
    <member kind="function">
      <type></type>
      <name>m</name>
      <anchorfile>classclass__with__multiple__anonymous__classes__and__functions.html</anchorfile>
      <anchor>a98ef25b583c487d002b36f8e6f8f4ffb</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::PhpDocumentor::ClassAndInterfaceTagRetriever</name>
    <filename>classProphecy_1_1PhpDocumentor_1_1ClassAndInterfaceTagRetriever.html</filename>
    <base>Prophecy::PhpDocumentor::MethodTagRetrieverInterface</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classProphecy_1_1PhpDocumentor_1_1ClassAndInterfaceTagRetriever.html</anchorfile>
      <anchor>ad05fbac29e0bfa96bb8d6da8ec615a45</anchor>
      <arglist>(MethodTagRetrieverInterface $classRetriever=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getTagList</name>
      <anchorfile>classProphecy_1_1PhpDocumentor_1_1ClassAndInterfaceTagRetriever.html</anchorfile>
      <anchor>af8b04677873618df6df44ae62cc06347</anchor>
      <arglist>(\ReflectionClass $reflectionClass)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Doubler::Generator::ClassCodeGenerator</name>
    <filename>classProphecy_1_1Doubler_1_1Generator_1_1ClassCodeGenerator.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1ClassCodeGenerator.html</anchorfile>
      <anchor>a9fdbb54dada42ec5c9ec61ac3ca4e2d4</anchor>
      <arglist>(TypeHintReference $typeHintReference=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>generate</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1ClassCodeGenerator.html</anchorfile>
      <anchor>abc79b425ef06b2bfdd2163f02e6b728b</anchor>
      <arglist>($classname, Node\ClassNode $class)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Doubler::Generator::ClassCreator</name>
    <filename>classProphecy_1_1Doubler_1_1Generator_1_1ClassCreator.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1ClassCreator.html</anchorfile>
      <anchor>a039ae125f012a6a8a2771fd774608d6f</anchor>
      <arglist>(ClassCodeGenerator $generator=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>create</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1ClassCreator.html</anchorfile>
      <anchor>a7ad0d762581cc9ec693115c886d2d973</anchor>
      <arglist>($classname, Node\ClassNode $class)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Exception::Doubler::ClassCreatorException</name>
    <filename>classProphecy_1_1Exception_1_1Doubler_1_1ClassCreatorException.html</filename>
    <base>Prophecy::Exception::Doubler::DoublerException</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classProphecy_1_1Exception_1_1Doubler_1_1ClassCreatorException.html</anchorfile>
      <anchor>ab82776ce90bfbcb81e43f314c4575e4d</anchor>
      <arglist>($message, ClassNode $node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getClassNode</name>
      <anchorfile>classProphecy_1_1Exception_1_1Doubler_1_1ClassCreatorException.html</anchorfile>
      <anchor>a64fcdd0533483c0cbeedddbb835acc99</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::ClassHasAttribute</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1ClassHasAttribute.html</filename>
    <base>PHPUnit::Framework::Constraint::Constraint</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1ClassHasAttribute.html</anchorfile>
      <anchor>a85112bbf6ab5fcc5dcad9efa5b327471</anchor>
      <arglist>(string $attributeName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1ClassHasAttribute.html</anchorfile>
      <anchor>a4a981af48e96b9b97197c0896e8e1384</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>matches</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1ClassHasAttribute.html</anchorfile>
      <anchor>a7c0c5cbeda719b867ea6e03b97ce3310</anchor>
      <arglist>($other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>failureDescription</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1ClassHasAttribute.html</anchorfile>
      <anchor>a30102340052ef2acb803eea230bd2f41</anchor>
      <arglist>($other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>attributeName</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1ClassHasAttribute.html</anchorfile>
      <anchor>af246cbbdbb5056195994cf8008c2b7ea</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::ClassHasAttributeTest</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1ClassHasAttributeTest.html</filename>
    <base>PHPUnit::Framework::Constraint::ConstraintTestCase</base>
    <member kind="function">
      <type></type>
      <name>testConstraintClassHasAttribute</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1ClassHasAttributeTest.html</anchorfile>
      <anchor>a0505fb5f7b0441c8e24abb8befa7592c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintClassHasAttribute2</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1ClassHasAttributeTest.html</anchorfile>
      <anchor>adae5d762602e336e0a0da77c7d135bf1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::ClassHasStaticAttribute</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1ClassHasStaticAttribute.html</filename>
    <base>PHPUnit::Framework::Constraint::ClassHasAttribute</base>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1ClassHasStaticAttribute.html</anchorfile>
      <anchor>ace2882019017942a19a3dc67a708d6d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>matches</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1ClassHasStaticAttribute.html</anchorfile>
      <anchor>acf811c07768979484295c43bb7ac9aa0</anchor>
      <arglist>($other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::ClassHasStaticAttributeTest</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1ClassHasStaticAttributeTest.html</filename>
    <base>PHPUnit::Framework::Constraint::ConstraintTestCase</base>
    <member kind="function">
      <type></type>
      <name>testConstraintClassHasStaticAttribute</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1ClassHasStaticAttributeTest.html</anchorfile>
      <anchor>ad0a10cd4c187cf5f86834148f838408f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintClassHasStaticAttribute2</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1ClassHasStaticAttributeTest.html</anchorfile>
      <anchor>afd3a4842560f5c75e91a8afdb4085c07</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Doubler::Generator::ClassMirror</name>
    <filename>classProphecy_1_1Doubler_1_1Generator_1_1ClassMirror.html</filename>
    <member kind="function">
      <type></type>
      <name>reflect</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1ClassMirror.html</anchorfile>
      <anchor>af8d450fdc7b5de685d178bfa91abfa1c</anchor>
      <arglist>(?ReflectionClass $class, array $interfaces)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Exception::Doubler::ClassMirrorException</name>
    <filename>classProphecy_1_1Exception_1_1Doubler_1_1ClassMirrorException.html</filename>
    <base>Prophecy::Exception::Doubler::DoublerException</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classProphecy_1_1Exception_1_1Doubler_1_1ClassMirrorException.html</anchorfile>
      <anchor>a4d0bf08f9e0129dd51e53ad8b28134f8</anchor>
      <arglist>($message, ReflectionClass $class)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getReflectedClass</name>
      <anchorfile>classProphecy_1_1Exception_1_1Doubler_1_1ClassMirrorException.html</anchorfile>
      <anchor>ad4aef99e9e9d9e2471d23e17c1d8f8c1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Doubler::Generator::Node::ClassNode</name>
    <filename>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1ClassNode.html</filename>
    <member kind="function">
      <type></type>
      <name>getParentClass</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1ClassNode.html</anchorfile>
      <anchor>a3bd0c6248d2c2a03801eb388a56321d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setParentClass</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1ClassNode.html</anchorfile>
      <anchor>aa02a2158d4ca6124d026111fdafb55e8</anchor>
      <arglist>($class)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getInterfaces</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1ClassNode.html</anchorfile>
      <anchor>af4ab9c925689d41e5ea4a7fe1f629c17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addInterface</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1ClassNode.html</anchorfile>
      <anchor>a5cd9d1f08525bc78038439e03abf2a02</anchor>
      <arglist>($interface)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>hasInterface</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1ClassNode.html</anchorfile>
      <anchor>a8bfe8ed20110f9cb37a9e7296cb55fd3</anchor>
      <arglist>($interface)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getProperties</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1ClassNode.html</anchorfile>
      <anchor>a3dde9dbf823d2ac4d8a7b0e6effd31d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addProperty</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1ClassNode.html</anchorfile>
      <anchor>a3a1e3a2d774d2eeab56e0e59c43dd75e</anchor>
      <arglist>($name, $visibility=&apos;public&apos;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getMethods</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1ClassNode.html</anchorfile>
      <anchor>a1c437380323037f65fcd9bededdf3857</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addMethod</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1ClassNode.html</anchorfile>
      <anchor>ac65e23260ed97b1ef2293af123d3b897</anchor>
      <arglist>(MethodNode $method, $force=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>removeMethod</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1ClassNode.html</anchorfile>
      <anchor>a9a540bab61027cbbc315a22aca5c5a9f</anchor>
      <arglist>($name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getMethod</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1ClassNode.html</anchorfile>
      <anchor>a0409695baaa4048d2ed600e44e37b66d</anchor>
      <arglist>($name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>hasMethod</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1ClassNode.html</anchorfile>
      <anchor>ade1997b6424fc840d3566f80a7801cc8</anchor>
      <arglist>($name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getUnextendableMethods</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1ClassNode.html</anchorfile>
      <anchor>a72e880e57f6805cdb68467f1b7fa9ccc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addUnextendableMethod</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1ClassNode.html</anchorfile>
      <anchor>af2843084be0d0c7f6bbabd678f308a8c</anchor>
      <arglist>($unextendableMethod)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isExtendable</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1ClassNode.html</anchorfile>
      <anchor>ad500c8db2bceb2c23d53736b7ff22b2d</anchor>
      <arglist>($method)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Exception::Doubler::ClassNotFoundException</name>
    <filename>classProphecy_1_1Exception_1_1Doubler_1_1ClassNotFoundException.html</filename>
    <base>Prophecy::Exception::Doubler::DoubleException</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classProphecy_1_1Exception_1_1Doubler_1_1ClassNotFoundException.html</anchorfile>
      <anchor>ae39440abb0226a1c8556ae39f2f2cb3d</anchor>
      <arglist>($message, $classname)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getClassname</name>
      <anchorfile>classProphecy_1_1Exception_1_1Doubler_1_1ClassNotFoundException.html</anchorfile>
      <anchor>ab1b0ca826e77c9f3d44f5ea8ec42d459</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>Prophecy::Doubler::ClassPatch::ClassPatchInterface</name>
    <filename>interfaceProphecy_1_1Doubler_1_1ClassPatch_1_1ClassPatchInterface.html</filename>
    <member kind="function">
      <type></type>
      <name>supports</name>
      <anchorfile>interfaceProphecy_1_1Doubler_1_1ClassPatch_1_1ClassPatchInterface.html</anchorfile>
      <anchor>af8aabfbc55d28c16695577881d086f5b</anchor>
      <arglist>(ClassNode $node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>apply</name>
      <anchorfile>interfaceProphecy_1_1Doubler_1_1ClassPatch_1_1ClassPatchInterface.html</anchorfile>
      <anchor>a33d28ba49d7e3894a4c59b71bc2bfdce</anchor>
      <arglist>(ClassNode $node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getPriority</name>
      <anchorfile>interfaceProphecy_1_1Doubler_1_1ClassPatch_1_1ClassPatchInterface.html</anchorfile>
      <anchor>a34ee72ab3603cb87580d258a5da06deb</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::Types::ClassString</name>
    <filename>classphpDocumentor_1_1Reflection_1_1Types_1_1ClassString.html</filename>
    <base>phpDocumentor::Reflection::Type</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1ClassString.html</anchorfile>
      <anchor>aa368ccf88c7cbab06a3380870b7e3d1b</anchor>
      <arglist>(?Fqsen $fqsen=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getFqsen</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1ClassString.html</anchorfile>
      <anchor>a694d3bc66deac399dae12ee41f2f2378</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1ClassString.html</anchorfile>
      <anchor>a4714ab036805e4f55c42f32c377faabf</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::Types::ClassStringTest</name>
    <filename>classphpDocumentor_1_1Reflection_1_1Types_1_1ClassStringTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testClassStringStringifyCorrectly</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1ClassStringTest.html</anchorfile>
      <anchor>a6e25eaef233b52eaaf4665e3d04c9041</anchor>
      <arglist>(ClassString $array, string $expectedString)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>provideClassStrings</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1ClassStringTest.html</anchorfile>
      <anchor>adb1f3fd546518cc77c140616b398bcd5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::PhpDocumentor::ClassTagRetriever</name>
    <filename>classProphecy_1_1PhpDocumentor_1_1ClassTagRetriever.html</filename>
    <base>Prophecy::PhpDocumentor::MethodTagRetrieverInterface</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classProphecy_1_1PhpDocumentor_1_1ClassTagRetriever.html</anchorfile>
      <anchor>a1f2d599dc00ecef049c99cda45c93c1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getTagList</name>
      <anchorfile>classProphecy_1_1PhpDocumentor_1_1ClassTagRetriever.html</anchorfile>
      <anchor>a66f7317d3de7c12a08616d10d7289d68</anchor>
      <arglist>(\ReflectionClass $reflectionClass)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ClassThatImplementsSerializable</name>
    <filename>classClassThatImplementsSerializable.html</filename>
    <member kind="function">
      <type></type>
      <name>serialize</name>
      <anchorfile>classClassThatImplementsSerializable.html</anchorfile>
      <anchor>ae853904e8ae55838f7a6eda5cb87126a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>unserialize</name>
      <anchorfile>classClassThatImplementsSerializable.html</anchorfile>
      <anchor>ab6e1c6b5106bbe95ab5414ec139f17a3</anchor>
      <arglist>($serialized)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::TestFixture::MockObject::ClassUsingConfigurableMethods</name>
    <filename>classPHPUnit_1_1TestFixture_1_1MockObject_1_1ClassUsingConfigurableMethods.html</filename>
    <member kind="function" static="yes">
      <type>static</type>
      <name>getConfigurableMethods</name>
      <anchorfile>classPHPUnit_1_1TestFixture_1_1MockObject_1_1ClassUsingConfigurableMethods.html</anchorfile>
      <anchor>a26951a95abde243bd0ad1754d1fa51a3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ClassWithAllPossibleReturnTypes</name>
    <filename>classClassWithAllPossibleReturnTypes.html</filename>
    <member kind="function">
      <type></type>
      <name>methodWithNoReturnTypeDeclaration</name>
      <anchorfile>classClassWithAllPossibleReturnTypes.html</anchorfile>
      <anchor>a351d7f05b75f0f628951385a99887757</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>methodWithVoidReturnTypeDeclaration</name>
      <anchorfile>classClassWithAllPossibleReturnTypes.html</anchorfile>
      <anchor>ac3c6c180a0e27c84837f924c97de7833</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>methodWithStringReturnTypeDeclaration</name>
      <anchorfile>classClassWithAllPossibleReturnTypes.html</anchorfile>
      <anchor>a9502f33587c807cdadc3e1469e62db47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>methodWithFloatReturnTypeDeclaration</name>
      <anchorfile>classClassWithAllPossibleReturnTypes.html</anchorfile>
      <anchor>ac1eaea6fffc321334ded38fbe7b62091</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>methodWithIntReturnTypeDeclaration</name>
      <anchorfile>classClassWithAllPossibleReturnTypes.html</anchorfile>
      <anchor>a6dcbe51bcb2cb5745a62ef4663eaeaa7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>methodWithBoolReturnTypeDeclaration</name>
      <anchorfile>classClassWithAllPossibleReturnTypes.html</anchorfile>
      <anchor>ace54b485f5179616a6993ed7e2f155cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>methodWithArrayReturnTypeDeclaration</name>
      <anchorfile>classClassWithAllPossibleReturnTypes.html</anchorfile>
      <anchor>ade8ad010bc6d85424291932b4d8aa07c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>methodWithTraversableReturnTypeDeclaration</name>
      <anchorfile>classClassWithAllPossibleReturnTypes.html</anchorfile>
      <anchor>a6e5ed34635d25f44ce936931f06f12d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>methodWithGeneratorReturnTypeDeclaration</name>
      <anchorfile>classClassWithAllPossibleReturnTypes.html</anchorfile>
      <anchor>a118a673ea5dd70c5b15470f52dc34835</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>methodWithObjectReturnTypeDeclaration</name>
      <anchorfile>classClassWithAllPossibleReturnTypes.html</anchorfile>
      <anchor>a6d636323f0c2a2a23bf13a704db0f0aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>methodWithClassReturnTypeDeclaration</name>
      <anchorfile>classClassWithAllPossibleReturnTypes.html</anchorfile>
      <anchor>ae3ac5f4770f3434597a50f5602622a8b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Type::TestFixture::ClassWithCallbackMethods</name>
    <filename>classSebastianBergmann_1_1Type_1_1TestFixture_1_1ClassWithCallbackMethods.html</filename>
    <member kind="function">
      <type></type>
      <name>nonStaticCallback</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1TestFixture_1_1ClassWithCallbackMethods.html</anchorfile>
      <anchor>a727d0fe98c8fff8211d5ddaade2437f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>staticCallback</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1TestFixture_1_1ClassWithCallbackMethods.html</anchorfile>
      <anchor>a73f9d599548e0447804505e7ba6e6c1c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::TestFixture::MockObject::ClassWithImplicitProtocol</name>
    <filename>classPHPUnit_1_1TestFixture_1_1MockObject_1_1ClassWithImplicitProtocol.html</filename>
    <member kind="function">
      <type></type>
      <name>firstCall</name>
      <anchorfile>classPHPUnit_1_1TestFixture_1_1MockObject_1_1ClassWithImplicitProtocol.html</anchorfile>
      <anchor>a48d3c7fbe7e095dc2a9a65c0da1d9015</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>secondCall</name>
      <anchorfile>classPHPUnit_1_1TestFixture_1_1MockObject_1_1ClassWithImplicitProtocol.html</anchorfile>
      <anchor>a415c85e78adb32700dd37602def4ff5b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::ObjectReflector::TestFixture::ClassWithIntegerAttributeName</name>
    <filename>classSebastianBergmann_1_1ObjectReflector_1_1TestFixture_1_1ClassWithIntegerAttributeName.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classSebastianBergmann_1_1ObjectReflector_1_1TestFixture_1_1ClassWithIntegerAttributeName.html</anchorfile>
      <anchor>aab40cab7558e80486fa1f154490ffd27</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Type::TestFixture::ClassWithInvokeMethod</name>
    <filename>classSebastianBergmann_1_1Type_1_1TestFixture_1_1ClassWithInvokeMethod.html</filename>
    <member kind="function">
      <type></type>
      <name>__invoke</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1TestFixture_1_1ClassWithInvokeMethod.html</anchorfile>
      <anchor>a812333e380f6087c2b0150d6ccb446fc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ClassWithNonPublicAttributes</name>
    <filename>classClassWithNonPublicAttributes.html</filename>
    <base>ParentClassWithProtectedAttributes</base>
    <member kind="variable">
      <type></type>
      <name>$publicAttribute</name>
      <anchorfile>classClassWithNonPublicAttributes.html</anchorfile>
      <anchor>ad4331e124900a60b5afcb5077a3a2df1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$foo</name>
      <anchorfile>classClassWithNonPublicAttributes.html</anchorfile>
      <anchor>ae9270f6415fc4e51bb9fcdd6e3e7dd0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$bar</name>
      <anchorfile>classClassWithNonPublicAttributes.html</anchorfile>
      <anchor>af6558f604f1d7f3368e46fd70f727fed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$publicArray</name>
      <anchorfile>classClassWithNonPublicAttributes.html</anchorfile>
      <anchor>a13c1014badce97019c3530af75837ecd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static</type>
      <name>$publicStaticAttribute</name>
      <anchorfile>classClassWithNonPublicAttributes.html</anchorfile>
      <anchor>a79e3ad308ec436b6bd64c1859027c636</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$protectedAttribute</name>
      <anchorfile>classClassWithNonPublicAttributes.html</anchorfile>
      <anchor>a5cb44914524caf9975cab36ab2b6f89a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$privateAttribute</name>
      <anchorfile>classClassWithNonPublicAttributes.html</anchorfile>
      <anchor>a7fd9116fb6e69104c77be94f1fc211c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$protectedArray</name>
      <anchorfile>classClassWithNonPublicAttributes.html</anchorfile>
      <anchor>afdafa6e0ed8dd08783927180d61dc722</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$privateArray</name>
      <anchorfile>classClassWithNonPublicAttributes.html</anchorfile>
      <anchor>a23b5e9378e1341c3d0f4b564bcf23932</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static</type>
      <name>$protectedStaticAttribute</name>
      <anchorfile>classClassWithNonPublicAttributes.html</anchorfile>
      <anchor>a2483ae7734f07acfbdfd72a47eb5b652</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static</type>
      <name>$privateStaticAttribute</name>
      <anchorfile>classClassWithNonPublicAttributes.html</anchorfile>
      <anchor>a46dd05b229a4b7f3111660c7b0261397</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::TestFixture::MockObject::ClassWithoutParentButParentReturnType</name>
    <filename>classPHPUnit_1_1TestFixture_1_1MockObject_1_1ClassWithoutParentButParentReturnType.html</filename>
    <member kind="function">
      <type></type>
      <name>foo</name>
      <anchorfile>classPHPUnit_1_1TestFixture_1_1MockObject_1_1ClassWithoutParentButParentReturnType.html</anchorfile>
      <anchor>ab0dbde6bdac95cd20c3102017f50dfa4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ClassWithScalarTypeDeclarations</name>
    <filename>classClassWithScalarTypeDeclarations.html</filename>
    <member kind="function">
      <type></type>
      <name>foo</name>
      <anchorfile>classClassWithScalarTypeDeclarations.html</anchorfile>
      <anchor>a1725327fbbe7bd0ac07c20257ca0d52f</anchor>
      <arglist>(string $string, int $int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ClassWithSelfTypeHint</name>
    <filename>classClassWithSelfTypeHint.html</filename>
    <member kind="function">
      <type></type>
      <name>foo</name>
      <anchorfile>classClassWithSelfTypeHint.html</anchorfile>
      <anchor>a848391772ddb51df596730c0f26db536</anchor>
      <arglist>(self $foo)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ClassWithStaticMethod</name>
    <filename>classClassWithStaticMethod.html</filename>
    <member kind="function" static="yes">
      <type>static</type>
      <name>staticMethod</name>
      <anchorfile>classClassWithStaticMethod.html</anchorfile>
      <anchor>a24ce942aed78f4bee0aaa4417b8af338</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Comparator::ClassWithToString</name>
    <filename>classSebastianBergmann_1_1Comparator_1_1ClassWithToString.html</filename>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ClassWithToString.html</anchorfile>
      <anchor>a45ab2301b338cce2cfa335e8eec99b31</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ClassWithToString</name>
    <filename>classClassWithToString.html</filename>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classClassWithToString.html</anchorfile>
      <anchor>a42b82248eab5450e926c440990a8e578</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ClassWithVariadicArgumentMethod</name>
    <filename>classClassWithVariadicArgumentMethod.html</filename>
    <member kind="function">
      <type></type>
      <name>foo</name>
      <anchorfile>classClassWithVariadicArgumentMethod.html</anchorfile>
      <anchor>a9edf9dbea53189765424f5b1e0aef4d9</anchor>
      <arglist>(... $args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>My::Example::Classy</name>
    <filename>classMy_1_1Example_1_1Classy.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classMy_1_1Example_1_1Classy.html</anchorfile>
      <anchor>a597efabcf8622c8bbe232c96457c4494</anchor>
      <arglist>($context)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Util::TestDox::CliTestDoxPrinter</name>
    <filename>classPHPUnit_1_1Util_1_1TestDox_1_1CliTestDoxPrinter.html</filename>
    <base>PHPUnit::Util::TestDox::TestDoxPrinter</base>
    <member kind="function">
      <type></type>
      <name>printResult</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1CliTestDoxPrinter.html</anchorfile>
      <anchor>a1c3cb65502551c256307e0f810219ebf</anchor>
      <arglist>(TestResult $result)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>printHeader</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1CliTestDoxPrinter.html</anchorfile>
      <anchor>a62b8875c3674822db7b1d3774dcd2269</anchor>
      <arglist>(TestResult $result)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>formatClassName</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1CliTestDoxPrinter.html</anchorfile>
      <anchor>a233754d050700439ed079a51a73e149e</anchor>
      <arglist>(Test $test)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>registerTestResult</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1CliTestDoxPrinter.html</anchorfile>
      <anchor>abc5a889980c1175e92c5474f5a8dd933</anchor>
      <arglist>(Test $test, ?\Throwable $t, int $status, float $time, bool $verbose)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>formatTestName</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1CliTestDoxPrinter.html</anchorfile>
      <anchor>a78f2cc2dccb12728b0f2fa86c2e27b55</anchor>
      <arglist>(Test $test)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>writeTestResult</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1CliTestDoxPrinter.html</anchorfile>
      <anchor>a0ae98e87c177543356b01ac37b3ef925</anchor>
      <arglist>(array $prevResult, array $result)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>formatThrowable</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1CliTestDoxPrinter.html</anchorfile>
      <anchor>a6ec2877332f85b0f29be373a789eabff</anchor>
      <arglist>(\Throwable $t, ?int $status=null)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>colorizeMessageAndDiff</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1CliTestDoxPrinter.html</anchorfile>
      <anchor>aee3eb86387f425ba2ed73e4343f5daa9</anchor>
      <arglist>(string $style, string $buffer)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>formatStacktrace</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1CliTestDoxPrinter.html</anchorfile>
      <anchor>aaa289d958ab3afaeddcb5305bff2ddb2</anchor>
      <arglist>(\Throwable $t)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>formatTestResultMessage</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1CliTestDoxPrinter.html</anchorfile>
      <anchor>a7f1281945b8eac9c1c53a83a2df43850</anchor>
      <arglist>(\Throwable $t, array $result, ?string $prefix=null)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>drawSpinner</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1CliTestDoxPrinter.html</anchorfile>
      <anchor>ad5b6815b0fb28936b5836750975801ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>undrawSpinner</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1CliTestDoxPrinter.html</anchorfile>
      <anchor>a47e95f6abb4988381dfba7f9ff307f95</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Util::TestDox::CliTestDoxPrinterColorTest</name>
    <filename>classPHPUnit_1_1Util_1_1TestDox_1_1CliTestDoxPrinterColorTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testColorizesDiffInFailureMessage</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1CliTestDoxPrinterColorTest.html</anchorfile>
      <anchor>ab24411b1fcd813e109f5d798ddd4081a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1CliTestDoxPrinterColorTest.html</anchorfile>
      <anchor>a98a65279f40917828ff06f54ff26bf7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>tearDown</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1CliTestDoxPrinterColorTest.html</anchorfile>
      <anchor>a0391f0e3870cd82f137a21323c84c93f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Util::TestDox::CliTestDoxPrinterTest</name>
    <filename>classPHPUnit_1_1Util_1_1TestDox_1_1CliTestDoxPrinterTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testPrintsTheClassNameOfTheTestClass</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1CliTestDoxPrinterTest.html</anchorfile>
      <anchor>a934379c25b4abe390a574b1f04c02a26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testPrintsThePrettifiedMethodName</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1CliTestDoxPrinterTest.html</anchorfile>
      <anchor>a6a7587ace78fa4f41bdb1415b9fd9edc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testPrintsCheckMarkForSuccessfulTest</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1CliTestDoxPrinterTest.html</anchorfile>
      <anchor>afb6a45c3ce2b43915d409311411ec034</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testDoesNotPrintAdditionalInformationForSuccessfulTest</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1CliTestDoxPrinterTest.html</anchorfile>
      <anchor>a5c9f5ceca4fc5c127f58c1afc6eb4915</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testPrintsCrossForTestWithError</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1CliTestDoxPrinterTest.html</anchorfile>
      <anchor>aa7607ca510550f14689302de717047bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testPrintsAdditionalInformationForTestWithError</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1CliTestDoxPrinterTest.html</anchorfile>
      <anchor>aeaf5193a7e367792cc21606248f2825c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testPrintsWarningTriangleForTestWithWarning</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1CliTestDoxPrinterTest.html</anchorfile>
      <anchor>ad781f867af9caaeb63a4ce08dcbfae24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testPrintsAdditionalInformationForTestWithWarning</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1CliTestDoxPrinterTest.html</anchorfile>
      <anchor>aaa7537ec679c22333fbce5a30eb2c3b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testPrintsCrossForTestWithFailure</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1CliTestDoxPrinterTest.html</anchorfile>
      <anchor>ae8178195a500e6353acc7f31e7c743d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testPrintsAdditionalInformationForTestWithFailure</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1CliTestDoxPrinterTest.html</anchorfile>
      <anchor>a3dcd2554d75a4284c76522be4af5298d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testPrintsEmptySetSymbolForTestWithFailure</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1CliTestDoxPrinterTest.html</anchorfile>
      <anchor>ae9927e47484867de98fe094c638d79db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testDoesNotPrintAdditionalInformationForIncompleteTestByDefault</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1CliTestDoxPrinterTest.html</anchorfile>
      <anchor>a2ebe61bcf26e4ca3c5440f5337caf072</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testPrintsAdditionalInformationForIncompleteTestInVerboseMode</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1CliTestDoxPrinterTest.html</anchorfile>
      <anchor>a3f32d4d85991771034f34e2fbab884c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testPrintsRadioactiveSymbolForRiskyTest</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1CliTestDoxPrinterTest.html</anchorfile>
      <anchor>a7b8daf4893f606e50ced6b6c0c543948</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testDoesNotPrintAdditionalInformationForRiskyTestByDefault</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1CliTestDoxPrinterTest.html</anchorfile>
      <anchor>a94b0440ba066c382daf5bee696918454</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testPrintsAdditionalInformationForRiskyTestInVerboseMode</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1CliTestDoxPrinterTest.html</anchorfile>
      <anchor>a21dd6bc9df097ddb8499bc78b41301ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testPrintsArrowForSkippedTest</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1CliTestDoxPrinterTest.html</anchorfile>
      <anchor>a7dd203ec234fc208f26d5ae5dedb4e8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testDoesNotPrintAdditionalInformationForSkippedTestByDefault</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1CliTestDoxPrinterTest.html</anchorfile>
      <anchor>ae54380e62c58303087b8685503629435</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testPrintsAdditionalInformationForSkippedTestInVerboseMode</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1CliTestDoxPrinterTest.html</anchorfile>
      <anchor>a6a8340270ad037292bedba9156ce122d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1CliTestDoxPrinterTest.html</anchorfile>
      <anchor>ad9fb39eed24c48999bb441c664b434d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>tearDown</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1CliTestDoxPrinterTest.html</anchorfile>
      <anchor>ad049709e1099659dd5c65c748c3906a0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ClonedDependencyTest</name>
    <filename>classClonedDependencyTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testOne</name>
      <anchorfile>classClonedDependencyTest.html</anchorfile>
      <anchor>adc09b67e5446ac7bcf6dcafa6d5990d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTwo</name>
      <anchorfile>classClonedDependencyTest.html</anchorfile>
      <anchor>a8483135b4ac5c05661827107341f5d89</anchor>
      <arglist>($dependency)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testThree</name>
      <anchorfile>classClonedDependencyTest.html</anchorfile>
      <anchor>ab37d1ce846f22eb437f4e572ffcfe45b</anchor>
      <arglist>($dependency)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFour</name>
      <anchorfile>classClonedDependencyTest.html</anchorfile>
      <anchor>a56f4671b9a2d727b22ab4c620a8b58b6</anchor>
      <arglist>($dependency)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFive</name>
      <anchorfile>classClonedDependencyTest.html</anchorfile>
      <anchor>a13e94def327c0cc8939717cab540562c</anchor>
      <arglist>($dependency)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSix</name>
      <anchorfile>classClonedDependencyTest.html</anchorfile>
      <anchor>a2e88120dc30e33a178ac95c6048d826e</anchor>
      <arglist>($dependency)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>setUpBeforeClass</name>
      <anchorfile>classClonedDependencyTest.html</anchorfile>
      <anchor>a47ecd8899909146920e1de1240a18da7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeepCopy::Exception::CloneException</name>
    <filename>classDeepCopy_1_1Exception_1_1CloneException.html</filename>
  </compound>
  <compound kind="class">
    <name>Prophecy::Comparator::ClosureComparator</name>
    <filename>classProphecy_1_1Comparator_1_1ClosureComparator.html</filename>
    <base>SebastianBergmann::Comparator::Comparator</base>
    <member kind="function">
      <type></type>
      <name>accepts</name>
      <anchorfile>classProphecy_1_1Comparator_1_1ClosureComparator.html</anchorfile>
      <anchor>a8b51f5543ba7c4567eb698555fc4011f</anchor>
      <arglist>($expected, $actual)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>assertEquals</name>
      <anchorfile>classProphecy_1_1Comparator_1_1ClosureComparator.html</anchorfile>
      <anchor>a1791266c57103fbb1da527e52d82f641</anchor>
      <arglist>($expected, $actual, $delta=0.0, $canonicalize=false, $ignoreCase=false, array &amp;$processed=array())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::CodeCoverage::Report::Clover</name>
    <filename>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Clover.html</filename>
    <member kind="function">
      <type></type>
      <name>process</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Clover.html</anchorfile>
      <anchor>a74cf4a3192491b2e8d69080031b95e36</anchor>
      <arglist>(CodeCoverage $coverage, ?string $target=null, ?string $name=null)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::CodeCoverage::Report::CloverTest</name>
    <filename>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1CloverTest.html</filename>
    <base>SebastianBergmann::CodeCoverage::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testCloverForBankAccountTest</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1CloverTest.html</anchorfile>
      <anchor>af9ecad9a5648c1d625a1d8b586ac99a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCloverForFileWithIgnoredLines</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1CloverTest.html</anchorfile>
      <anchor>aa6d13352d41dcd2aaf0ce16b772c7447</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCloverForClassWithAnonymousFunction</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1CloverTest.html</anchorfile>
      <anchor>a091ff25ee4a147eeaa5785f4e291796d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::CodeCoverage::CodeCoverage</name>
    <filename>classSebastianBergmann_1_1CodeCoverage_1_1CodeCoverage.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1CodeCoverage.html</anchorfile>
      <anchor>a92ea9f900263f5d461040be1608969b6</anchor>
      <arglist>(Driver $driver=null, Filter $filter=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getReport</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1CodeCoverage.html</anchorfile>
      <anchor>ac0c1900e9f75178b8abdd2ce6a840996</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>clear</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1CodeCoverage.html</anchorfile>
      <anchor>a3b01083de5493d40933ff94c9836eb4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>filter</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1CodeCoverage.html</anchorfile>
      <anchor>a00f82892d4d4d41b267a06956146137c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getData</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1CodeCoverage.html</anchorfile>
      <anchor>a2b915204854d2e92b9da2ca086a54a7d</anchor>
      <arglist>(bool $raw=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setData</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1CodeCoverage.html</anchorfile>
      <anchor>a6f21063b89a07973bb5af2fb290172a9</anchor>
      <arglist>(array $data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getTests</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1CodeCoverage.html</anchorfile>
      <anchor>a2c8ce6d6f78634895b027c4c13baa620</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setTests</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1CodeCoverage.html</anchorfile>
      <anchor>a835b76713910e4595fb2ac6fa8be77bb</anchor>
      <arglist>(array $tests)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>start</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1CodeCoverage.html</anchorfile>
      <anchor>a9759a1203b1f505797050572d7dae619</anchor>
      <arglist>($id, bool $clear=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>stop</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1CodeCoverage.html</anchorfile>
      <anchor>a723296f759f5b93d26205de1a2cc7259</anchor>
      <arglist>(bool $append=true, $linesToBeCovered=[], array $linesToBeUsed=[], bool $ignoreForceCoversAnnotation=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>append</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1CodeCoverage.html</anchorfile>
      <anchor>ad8d7256c422048a6b2618650125589e8</anchor>
      <arglist>(array $data, $id=null, bool $append=true, $linesToBeCovered=[], array $linesToBeUsed=[], bool $ignoreForceCoversAnnotation=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>merge</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1CodeCoverage.html</anchorfile>
      <anchor>a4ce9527b5569bbcb430d23abca2f2cdf</anchor>
      <arglist>(self $that)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setCacheTokens</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1CodeCoverage.html</anchorfile>
      <anchor>a24c40aac8a470abe6c14a292d5474ba4</anchor>
      <arglist>(bool $flag)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getCacheTokens</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1CodeCoverage.html</anchorfile>
      <anchor>a3f71c82844dc8a048e8b97d20dac6413</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setCheckForUnintentionallyCoveredCode</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1CodeCoverage.html</anchorfile>
      <anchor>a268a223332a1a7d29d1e184434ea21bb</anchor>
      <arglist>(bool $flag)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setForceCoversAnnotation</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1CodeCoverage.html</anchorfile>
      <anchor>a3ed06b4498ad6a7edfe4a5ca36f29938</anchor>
      <arglist>(bool $flag)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setCheckForMissingCoversAnnotation</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1CodeCoverage.html</anchorfile>
      <anchor>a795b260cbb2c7656414eedbdb3d048b1</anchor>
      <arglist>(bool $flag)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setCheckForUnexecutedCoveredCode</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1CodeCoverage.html</anchorfile>
      <anchor>a4648bcd7de6f9ae53303e937d46eea1c</anchor>
      <arglist>(bool $flag)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setAddUncoveredFilesFromWhitelist</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1CodeCoverage.html</anchorfile>
      <anchor>a51720907d7df7f9bafe0dea387bb4b93</anchor>
      <arglist>(bool $flag)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setProcessUncoveredFilesFromWhitelist</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1CodeCoverage.html</anchorfile>
      <anchor>adc21ad184bad470f8e3918c431d83013</anchor>
      <arglist>(bool $flag)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setDisableIgnoredLines</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1CodeCoverage.html</anchorfile>
      <anchor>a27d6e5c35411165fa8fd10c97483c20e</anchor>
      <arglist>(bool $flag)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setIgnoreDeprecatedCode</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1CodeCoverage.html</anchorfile>
      <anchor>ab55e7a2f16be7017e186e5400a010254</anchor>
      <arglist>(bool $flag)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setUnintentionallyCoveredSubclassesWhitelist</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1CodeCoverage.html</anchorfile>
      <anchor>aa9f0609c13c152d4811d4611e2507379</anchor>
      <arglist>(array $whitelist)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::CodeCoverageException</name>
    <filename>classPHPUnit_1_1Framework_1_1CodeCoverageException.html</filename>
    <base>PHPUnit::Framework::Exception</base>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::CodeCoverage::CodeCoverageTest</name>
    <filename>classSebastianBergmann_1_1CodeCoverage_1_1CodeCoverageTest.html</filename>
    <base>SebastianBergmann::CodeCoverage::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testCannotStopWithInvalidSecondArgument</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1CodeCoverageTest.html</anchorfile>
      <anchor>ae266e528801aa9efd16c9deb38ef3996</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCannotAppendWithInvalidArgument</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1CodeCoverageTest.html</anchorfile>
      <anchor>a9c37064839606130c6894bf055a100ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCollect</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1CodeCoverageTest.html</anchorfile>
      <anchor>a27a87e2688c68b75957bbb20853fb7ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testMerge</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1CodeCoverageTest.html</anchorfile>
      <anchor>a03dba1b82243acd368adb3be9ad4d03b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testMergeReverseOrder</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1CodeCoverageTest.html</anchorfile>
      <anchor>a0f6c99d0bf875ac4c57032ddec4f5651</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testMerge2</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1CodeCoverageTest.html</anchorfile>
      <anchor>a425261625dc53755757abed8428ed71a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetLinesToBeIgnored</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1CodeCoverageTest.html</anchorfile>
      <anchor>a3dac2af566f0a7d9e58a81f1a0ee63d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetLinesToBeIgnored2</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1CodeCoverageTest.html</anchorfile>
      <anchor>a0e223e74309bf446c3ee63fd35c8f204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetLinesToBeIgnored3</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1CodeCoverageTest.html</anchorfile>
      <anchor>a5fef1b6c74f9df7ed5c43e947c1f8a0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetLinesToBeIgnoredOneLineAnnotations</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1CodeCoverageTest.html</anchorfile>
      <anchor>ae2ae83453574a753a8585e9aa2df1cca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetLinesToBeIgnoredWhenIgnoreIsDisabled</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1CodeCoverageTest.html</anchorfile>
      <anchor>afb376f29a0a6890d0f3949915823fa29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testUseStatementsAreIgnored</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1CodeCoverageTest.html</anchorfile>
      <anchor>a99e2550500df69d1afe5113d5544385f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAppendThrowsExceptionIfCoveredCodeWasNotExecuted</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1CodeCoverageTest.html</anchorfile>
      <anchor>ab31540fc9a6859137b1370861e4f8a56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAppendThrowsExceptionIfUsedCodeWasNotExecuted</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1CodeCoverageTest.html</anchorfile>
      <anchor>ad87b5cc5522521538c83e4dab156de8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1CodeCoverageTest.html</anchorfile>
      <anchor>a41951a5649696ae39edb58c337a3bfbc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::GlobalState::CodeExporter</name>
    <filename>classSebastianBergmann_1_1GlobalState_1_1CodeExporter.html</filename>
    <member kind="function">
      <type></type>
      <name>constants</name>
      <anchorfile>classSebastianBergmann_1_1GlobalState_1_1CodeExporter.html</anchorfile>
      <anchor>a757ac38c2a3b274e6ca7497f3a15f262</anchor>
      <arglist>(Snapshot $snapshot)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>globalVariables</name>
      <anchorfile>classSebastianBergmann_1_1GlobalState_1_1CodeExporter.html</anchorfile>
      <anchor>a30b64729a3eae43c8557a36daa23e783</anchor>
      <arglist>(Snapshot $snapshot)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>iniSettings</name>
      <anchorfile>classSebastianBergmann_1_1GlobalState_1_1CodeExporter.html</anchorfile>
      <anchor>acac48863e6febf53748c5e91f0f06e49</anchor>
      <arglist>(Snapshot $snapshot)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::GlobalState::CodeExporterTest</name>
    <filename>classSebastianBergmann_1_1GlobalState_1_1CodeExporterTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testCanExportGlobalVariablesToCode</name>
      <anchorfile>classSebastianBergmann_1_1GlobalState_1_1CodeExporterTest.html</anchorfile>
      <anchor>a0f4c7c2b52568baed9c8cf1f7366f74b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::Types::Collection</name>
    <filename>classphpDocumentor_1_1Reflection_1_1Types_1_1Collection.html</filename>
    <base>phpDocumentor::Reflection::Types::AbstractList</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1Collection.html</anchorfile>
      <anchor>acefaf3a8b726ea4667c91dfb5e400ef6</anchor>
      <arglist>(?Fqsen $fqsen, Type $valueType, ?Type $keyType=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getFqsen</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1Collection.html</anchorfile>
      <anchor>a19e1642a08d861ce2616cde1e23ae4c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1Collection.html</anchorfile>
      <anchor>a5b176cd636fb283fe95aafeb30704eb6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::CollectionResolverTest</name>
    <filename>classphpDocumentor_1_1Reflection_1_1CollectionResolverTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testResolvingCollection</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1CollectionResolverTest.html</anchorfile>
      <anchor>a4d543df9904ade0c0abe5f75c65fbadd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testResolvingCollectionWithKeyType</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1CollectionResolverTest.html</anchorfile>
      <anchor>ae6c43f84952ef709bda7f10392ecb918</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testResolvingArrayCollection</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1CollectionResolverTest.html</anchorfile>
      <anchor>af8d573720b766765368ed31f423994d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testResolvingArrayCollectionWithKey</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1CollectionResolverTest.html</anchorfile>
      <anchor>a69c934fdf940051dbd6f678255ddafea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testResolvingArrayCollectionWithKeyAndWhitespace</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1CollectionResolverTest.html</anchorfile>
      <anchor>a688e3daa0a83abde2f18ffd7b24e485f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testResolvingArrayCollectionWithKeyAndTooManyWhitespace</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1CollectionResolverTest.html</anchorfile>
      <anchor>a563fd7e91c099e27a15c868df976e08a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testResolvingCollectionOfCollection</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1CollectionResolverTest.html</anchorfile>
      <anchor>ae7ec7b0a78627f218db9f6967ee62280</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testBadArrayCollectionKey</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1CollectionResolverTest.html</anchorfile>
      <anchor>aeb28836bf94dbbd7ae71427a8fd17a0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testMissingStartCollection</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1CollectionResolverTest.html</anchorfile>
      <anchor>a88ccda5a7b3e3e0d7c50b54062877d31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testMissingEndCollection</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1CollectionResolverTest.html</anchorfile>
      <anchor>abed61834e974c0500f31a2be825832de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testBadCollectionClass</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1CollectionResolverTest.html</anchorfile>
      <anchor>a23ffa2187639fbf47d7629a8e83d35b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testResolvingCollectionAsArray</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1CollectionResolverTest.html</anchorfile>
      <anchor>ad595f6b795a17c5bb13173ea35b71bb6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::Types::CollectionTest</name>
    <filename>classphpDocumentor_1_1Reflection_1_1Types_1_1CollectionTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testCollectionStringifyCorrectly</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1CollectionTest.html</anchorfile>
      <anchor>a05e593ee02ac28fe1be70ffdaa39c390</anchor>
      <arglist>(Collection $collection, string $expectedString)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>provideCollections</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1CollectionTest.html</anchorfile>
      <anchor>ae6f2ad0b24d32440c54f5ad22708297e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Util::Color</name>
    <filename>classPHPUnit_1_1Util_1_1Color.html</filename>
    <member kind="function" static="yes">
      <type>static</type>
      <name>colorize</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Color.html</anchorfile>
      <anchor>a3dc292544cc5598ccb833c89f6ca3cbb</anchor>
      <arglist>(string $color, string $buffer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>colorizePath</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Color.html</anchorfile>
      <anchor>a32b0bf147bffa77b46ef83b0c3100f8a</anchor>
      <arglist>(string $path, ?string $prevPath=null, bool $colorizeFilename=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>dim</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Color.html</anchorfile>
      <anchor>ab8cb602b984051c09883beffd28ba657</anchor>
      <arglist>(string $buffer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>visualizeWhitespace</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Color.html</anchorfile>
      <anchor>a6a7f76577c84940ff611d045e48845ce</anchor>
      <arglist>(string $buffer, bool $visualizeEOL=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Util::ColorTest</name>
    <filename>classPHPUnit_1_1Util_1_1ColorTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testColorize</name>
      <anchorfile>classPHPUnit_1_1Util_1_1ColorTest.html</anchorfile>
      <anchor>a868b2efc339b361b27678746b18f2145</anchor>
      <arglist>(string $color, string $buffer, string $expected)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testColorizePath</name>
      <anchorfile>classPHPUnit_1_1Util_1_1ColorTest.html</anchorfile>
      <anchor>a885a582e2552bbc7262f73c2b6a80801</anchor>
      <arglist>(?string $prevPath, string $path, bool $colorizeFilename, string $expected)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testDimAndColorizeDimAreDifferent</name>
      <anchorfile>classPHPUnit_1_1Util_1_1ColorTest.html</anchorfile>
      <anchor>a4cbd5e1d0eaee432f38492e474dfa266</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testVisibleWhitespace</name>
      <anchorfile>classPHPUnit_1_1Util_1_1ColorTest.html</anchorfile>
      <anchor>a9d77c72469cb7567e8eb5e783c3b070d</anchor>
      <arglist>(string $actual, string $expected)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testVisibleWhitespaceWithoutEOL</name>
      <anchorfile>classPHPUnit_1_1Util_1_1ColorTest.html</anchorfile>
      <anchor>ada7cf781544da379b564d0ab8de26fdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testPrettifyUnnamedDataprovider</name>
      <anchorfile>classPHPUnit_1_1Util_1_1ColorTest.html</anchorfile>
      <anchor>a776bc13585b4d64570787b6f4e8c58f1</anchor>
      <arglist>(int $value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testPrettifyNamedDataprovider</name>
      <anchorfile>classPHPUnit_1_1Util_1_1ColorTest.html</anchorfile>
      <anchor>a2261a402f3a0bdae5b3898ba2b9b4172</anchor>
      <arglist>(int $value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTestdoxDatanameAsParameter</name>
      <anchorfile>classPHPUnit_1_1Util_1_1ColorTest.html</anchorfile>
      <anchor>a15592fc187d0786c3352071d7fa6ac4e</anchor>
      <arglist>(int $value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>colorizeProvider</name>
      <anchorfile>classPHPUnit_1_1Util_1_1ColorTest.html</anchorfile>
      <anchor>ae135eca62d52a9cd105ea97e709fc405</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>colorizePathProvider</name>
      <anchorfile>classPHPUnit_1_1Util_1_1ColorTest.html</anchorfile>
      <anchor>a88a5fe054dfa59285aae73be2d49817f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>whitespacedStringProvider</name>
      <anchorfile>classPHPUnit_1_1Util_1_1ColorTest.html</anchorfile>
      <anchor>a9a54f6dc18079a01ccfde31f9d491ca3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>unnamedDataSetProvider</name>
      <anchorfile>classPHPUnit_1_1Util_1_1ColorTest.html</anchorfile>
      <anchor>a032d20fde8f9f6d7d3fd07d4d7d9189a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>namedDataSetProvider</name>
      <anchorfile>classPHPUnit_1_1Util_1_1ColorTest.html</anchorfile>
      <anchor>a313a45ca9824e24e2c9f9f92bf97a7f7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::TextUI::Command</name>
    <filename>classPHPUnit_1_1TextUI_1_1Command.html</filename>
    <member kind="function">
      <type></type>
      <name>run</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1Command.html</anchorfile>
      <anchor>a55451d0c4552e367b9c1af284a9cdfe5</anchor>
      <arglist>(array $argv, bool $exit=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>main</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1Command.html</anchorfile>
      <anchor>aa66be3cc28ce5b26a0dbefd09f90e054</anchor>
      <arglist>(bool $exit=true)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>createRunner</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1Command.html</anchorfile>
      <anchor>a10a8035709945466bd6d793307aae0fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>handleArguments</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1Command.html</anchorfile>
      <anchor>a0f78d3943183eb16b1e596223458385f</anchor>
      <arglist>(array $argv)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>handleLoader</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1Command.html</anchorfile>
      <anchor>a10c90d4713d9685b19bd99d7ba6bda66</anchor>
      <arglist>(string $loaderClass, string $loaderFile=&apos;&apos;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>handlePrinter</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1Command.html</anchorfile>
      <anchor>a5b1fb4f2aae30087812952ba68a1233f</anchor>
      <arglist>(string $printerClass, string $printerFile=&apos;&apos;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>handleBootstrap</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1Command.html</anchorfile>
      <anchor>a0020b490bfe1574360010f9ce255cf2a</anchor>
      <arglist>(string $filename)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>handleVersionCheck</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1Command.html</anchorfile>
      <anchor>aefc5a4b30aada2655dec8d7708b6aff2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>showHelp</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1Command.html</anchorfile>
      <anchor>aa458b9099c0aa737d2bf42a34bc846fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>handleCustomTestSuite</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1Command.html</anchorfile>
      <anchor>a91c8adaa3b8edd52fcfc495a227795d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$arguments</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1Command.html</anchorfile>
      <anchor>a2bdcdfa7a03cd44fa8ce100c9de29fb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$options</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1Command.html</anchorfile>
      <anchor>a2e2a0a96d79dc65a5102c67a92c316bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$longOptions</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1Command.html</anchorfile>
      <anchor>aff477f78993716611216ae3f7616f324</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Comparator::Comparator</name>
    <filename>classSebastianBergmann_1_1Comparator_1_1Comparator.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1Comparator.html</anchorfile>
      <anchor>a063c809fb4cf8dc56bc9a696a8ec745f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setFactory</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1Comparator.html</anchorfile>
      <anchor>ae5f294636d9640222054cdf2a3b61525</anchor>
      <arglist>(Factory $factory)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>accepts</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1Comparator.html</anchorfile>
      <anchor>aa2c514c117d5ecfc277d532f64a13274</anchor>
      <arglist>($expected, $actual)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>assertEquals</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1Comparator.html</anchorfile>
      <anchor>aa89e4585124586744e52fd2e32efe7c3</anchor>
      <arglist>($expected, $actual, $delta=0.0, $canonicalize=false, $ignoreCase=false)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$factory</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1Comparator.html</anchorfile>
      <anchor>a9622aa6ee3be06b428a7d580ad69ec07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$exporter</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1Comparator.html</anchorfile>
      <anchor>adc81d13e4304c141c9f4fbd2d57dfc1f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Comparator::ComparisonFailure</name>
    <filename>classSebastianBergmann_1_1Comparator_1_1ComparisonFailure.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ComparisonFailure.html</anchorfile>
      <anchor>a1b4536fecac272fdd2480bfb8ec38ff5</anchor>
      <arglist>($expected, $actual, $expectedAsString, $actualAsString, $identical=false, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getActual</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ComparisonFailure.html</anchorfile>
      <anchor>a8f1f2407e67ef7d89b8cae8b113aa8f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getExpected</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ComparisonFailure.html</anchorfile>
      <anchor>a3f421fc06199c699c9ec468a83003c8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getActualAsString</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ComparisonFailure.html</anchorfile>
      <anchor>aa6b16308cb4305ae61712c971649c73f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getExpectedAsString</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ComparisonFailure.html</anchorfile>
      <anchor>a5261a72d9f34232944e83396a425b8d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getDiff</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ComparisonFailure.html</anchorfile>
      <anchor>a2174d252214a8afda67114eba981e10c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ComparisonFailure.html</anchorfile>
      <anchor>accf9fcb005172873ea99ece7a744ee81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$expected</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ComparisonFailure.html</anchorfile>
      <anchor>a465c3a73a2313eb41b9ce7f54771c5b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$actual</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ComparisonFailure.html</anchorfile>
      <anchor>aab84c650fc3ec4b578bb570b3e4e0bc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$expectedAsString</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ComparisonFailure.html</anchorfile>
      <anchor>a060ec013ccca132808ef3da3c2830c18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$actualAsString</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ComparisonFailure.html</anchorfile>
      <anchor>a4e2b67c27387837512f529662e547603</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$identical</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ComparisonFailure.html</anchorfile>
      <anchor>a3663d5746eee4bce97f822473143244c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$message</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ComparisonFailure.html</anchorfile>
      <anchor>aa300424b828fad329b166b0b39977984</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Comparator::ComparisonFailureTest</name>
    <filename>classSebastianBergmann_1_1Comparator_1_1ComparisonFailureTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testComparisonFailure</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ComparisonFailureTest.html</anchorfile>
      <anchor>ad01b0570d62ca2d88b6a086e502491ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testDiffNotPossible</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ComparisonFailureTest.html</anchorfile>
      <anchor>a973f0faa61c106017ea152b489886575</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::ComponentElement</name>
    <filename>classPharIo_1_1Manifest_1_1ComponentElement.html</filename>
    <base>PharIo::Manifest::ManifestElement</base>
    <member kind="function">
      <type></type>
      <name>getName</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ComponentElement.html</anchorfile>
      <anchor>a01c160dc52918307ebac169886c8d41b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getVersion</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ComponentElement.html</anchorfile>
      <anchor>ad2a26e12cbbce265112f763300e9a525</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::ComponentElementCollection</name>
    <filename>classPharIo_1_1Manifest_1_1ComponentElementCollection.html</filename>
    <base>PharIo::Manifest::ElementCollection</base>
    <member kind="function">
      <type></type>
      <name>current</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ComponentElementCollection.html</anchorfile>
      <anchor>a86adaece9663b304c7a01f87c814ca1f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::ComponentElementCollectionTest</name>
    <filename>classPharIo_1_1Manifest_1_1ComponentElementCollectionTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testComponentElementCanBeRetrievedFromCollection</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ComponentElementCollectionTest.html</anchorfile>
      <anchor>ac8e6fe5e1344c909c1d4cb144d0ad1d2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::ComponentElementTest</name>
    <filename>classPharIo_1_1Manifest_1_1ComponentElementTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testNameCanBeRetrieved</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ComponentElementTest.html</anchorfile>
      <anchor>afd8659368d2c61d1dc4eee7fbf57fb41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testEmailCanBeRetrieved</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ComponentElementTest.html</anchorfile>
      <anchor>a1e8d73cd1d9274f59f4bf86573216a2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ComponentElementTest.html</anchorfile>
      <anchor>a539bf3bb7ca820ab6e96c798a1310e07</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::Composite</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1Composite.html</filename>
    <base>PHPUnit::Framework::Constraint::Constraint</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1Composite.html</anchorfile>
      <anchor>aba502d3c61aafbfdfa3b2a1a5263750b</anchor>
      <arglist>(Constraint $innerConstraint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>evaluate</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1Composite.html</anchorfile>
      <anchor>ae95369f38cee9ba6e15cde99184fbf97</anchor>
      <arglist>($other, string $description=&apos;&apos;, bool $returnResult=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>count</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1Composite.html</anchorfile>
      <anchor>ad40f85c7c7d31b3a1855708f4e15e2b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>innerConstraint</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1Composite.html</anchorfile>
      <anchor>a38a7f4cc5472d1056d3ab7cd5902b8ba</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::Types::Compound</name>
    <filename>classphpDocumentor_1_1Reflection_1_1Types_1_1Compound.html</filename>
    <base>phpDocumentor::Reflection::Types::AggregatedType</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1Compound.html</anchorfile>
      <anchor>aaa7198b8f668a823c88dbf522f1394bd</anchor>
      <arglist>(array $types)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::Types::CompoundTest</name>
    <filename>classphpDocumentor_1_1Reflection_1_1Types_1_1CompoundTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testCompoundCannotBeConstructedFromType</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1CompoundTest.html</anchorfile>
      <anchor>a6be4c9abb47504416988597b50f11d19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCompoundGetType</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1CompoundTest.html</anchorfile>
      <anchor>a4c7e6d56f7b892350f2ae0597bb9f06e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCompoundGetNotExistingType</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1CompoundTest.html</anchorfile>
      <anchor>aa18d237452900a6cdacd0f654d3eca4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCompoundHasIndex</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1CompoundTest.html</anchorfile>
      <anchor>aa30733a42024937977e9869dca335d8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCompoundDoesNotHasIndex</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1CompoundTest.html</anchorfile>
      <anchor>a1de1044fe6c3e1b39c6982624ac3d458</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCompoundContainsType</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1CompoundTest.html</anchorfile>
      <anchor>aee0a7c3c9b20118f95956a1b2e0fe5bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCompoundDoesNotContainType</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1CompoundTest.html</anchorfile>
      <anchor>a7f46c4ae9a3c48a4f028a03d38719d82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCompoundCanBeConstructedAndStringifiedCorrectly</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1CompoundTest.html</anchorfile>
      <anchor>aeb7b75f8ffea01d4213f675678383bdc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCompoundDoesNotContainDuplicates</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1CompoundTest.html</anchorfile>
      <anchor>a6cdede02ddd540997fa0b15c9d1daf38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCompoundCanBeIterated</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1CompoundTest.html</anchorfile>
      <anchor>a69cd49fcf7e7549328446d586baeded7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConcreteTest</name>
    <filename>classConcreteTest.html</filename>
    <base>AbstractTest</base>
    <member kind="function">
      <type></type>
      <name>testTwo</name>
      <anchorfile>classConcreteTest.html</anchorfile>
      <anchor>a428ae5b03cf51f1c536991ae95572bcf</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConcreteWithMyCustomExtensionTest</name>
    <filename>classConcreteWithMyCustomExtensionTest.html</filename>
    <base>AbstractTest</base>
    <member kind="function">
      <type></type>
      <name>testTwo</name>
      <anchorfile>classConcreteWithMyCustomExtensionTest.html</anchorfile>
      <anchor>ab3ab5e6b1ed9be80da71120592bd4bf4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>Contracts::ConditionerInterface</name>
    <filename>interfaceContracts_1_1ConditionerInterface.html</filename>
    <member kind="function">
      <type></type>
      <name>conditionByIsEqualTo</name>
      <anchorfile>interfaceContracts_1_1ConditionerInterface.html</anchorfile>
      <anchor>ab21ad48820cae0443b5ee997bddce23a</anchor>
      <arglist>(string $property, string $value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::MockObject::ConfigurableMethod</name>
    <filename>classPHPUnit_1_1Framework_1_1MockObject_1_1ConfigurableMethod.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1ConfigurableMethod.html</anchorfile>
      <anchor>a3079ec7b4fdb0c7ab95c1cbc266ec9a0</anchor>
      <arglist>(string $name, Type $returnType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getName</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1ConfigurableMethod.html</anchorfile>
      <anchor>a63ccfd56677bbfc9be002d7ab229070d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mayReturn</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1ConfigurableMethod.html</anchorfile>
      <anchor>a3dd4c6c2bc1e2ac0c6141fbd40bb6b8d</anchor>
      <arglist>($value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getReturnTypeDeclaration</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1ConfigurableMethod.html</anchorfile>
      <anchor>a8e18db0701d6e33832d079884628519a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::MockObject::ConfigurableMethodsAlreadyInitializedException</name>
    <filename>classPHPUnit_1_1Framework_1_1MockObject_1_1ConfigurableMethodsAlreadyInitializedException.html</filename>
    <base>PHPUnit::Framework::Exception</base>
    <base>PHPUnit::Framework::MockObject::Exception</base>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::MockObject::ConfigurableMethodsTest</name>
    <filename>classPHPUnit_1_1Framework_1_1MockObject_1_1ConfigurableMethodsTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testTwoClassesUsingConfigurableMethodsDontInterfere</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1ConfigurableMethodsTest.html</anchorfile>
      <anchor>a5f7cf46afe807b9e423f250a02efe915</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConfigurableMethodsAreImmutable</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1ConfigurableMethodsTest.html</anchorfile>
      <anchor>af31904a0e1bd93ab98361a216ea205f5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::MockObject::ConfigurableMethodTest</name>
    <filename>classPHPUnit_1_1Framework_1_1MockObject_1_1ConfigurableMethodTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testMethodMayReturnAssignableValue</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1ConfigurableMethodTest.html</anchorfile>
      <anchor>a114e56077959cf75af3d57761217de66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testMethodMayNotReturnUnassignableValue</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1ConfigurableMethodTest.html</anchorfile>
      <anchor>ad737d99257916b91e6eb12f56da3049e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Util::Configuration</name>
    <filename>classPHPUnit_1_1Util_1_1Configuration.html</filename>
    <member kind="function">
      <type></type>
      <name>hasValidationErrors</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Configuration.html</anchorfile>
      <anchor>a4c9b7a7496d38abe1530ed605513cb83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getValidationErrors</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Configuration.html</anchorfile>
      <anchor>a7e19db97b1aefd285a4b5fe36a7c6719</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getFilename</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Configuration.html</anchorfile>
      <anchor>ae9e62613f2efb662f58f9734ab2b98ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getExtensionConfiguration</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Configuration.html</anchorfile>
      <anchor>af7279277125c139e84da598033861210</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getFilterConfiguration</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Configuration.html</anchorfile>
      <anchor>a935b26b8255a8ba15847a3838c9efbc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getGroupConfiguration</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Configuration.html</anchorfile>
      <anchor>abc1834edffa9dff8dc445caf7e284800</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getTestdoxGroupConfiguration</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Configuration.html</anchorfile>
      <anchor>ae5722f9f519e310b4a12cafd5cfe2d34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getListenerConfiguration</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Configuration.html</anchorfile>
      <anchor>a620fd1c52c2e1f196968dbb90244922a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getLoggingConfiguration</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Configuration.html</anchorfile>
      <anchor>a76e1c462bc8fd2efbff42d3f77fb0150</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getPHPConfiguration</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Configuration.html</anchorfile>
      <anchor>a59bb0d27cda1ba7f2916aba95428ca23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>handlePHPConfiguration</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Configuration.html</anchorfile>
      <anchor>a787c7e818dcb8276b0818297884a0e6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getPHPUnitConfiguration</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Configuration.html</anchorfile>
      <anchor>aa4db152e6e07a92d9416dafa898042f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getTestSuiteConfiguration</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Configuration.html</anchorfile>
      <anchor>a931fa247647dc7ab38b45efa8436d09a</anchor>
      <arglist>(string $testSuiteFilter=&apos;&apos;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getTestSuiteNames</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Configuration.html</anchorfile>
      <anchor>ab0293b61c2af80a492867e5b57e95c3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>getInstance</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Configuration.html</anchorfile>
      <anchor>a53aba939d59d773fc5960905a3ff3c92</anchor>
      <arglist>(string $filename)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Diff::ConfigurationException</name>
    <filename>classSebastianBergmann_1_1Diff_1_1ConfigurationException.html</filename>
    <base>SebastianBergmann::Diff::InvalidArgumentException</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1ConfigurationException.html</anchorfile>
      <anchor>a4f524e23e588961dc07f14b6b9012dcc</anchor>
      <arglist>(string $option, string $expected, $value, int $code=0, \Exception $previous=null)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Diff::ConfigurationExceptionTest</name>
    <filename>classSebastianBergmann_1_1Diff_1_1ConfigurationExceptionTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testConstructWithDefaults</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1ConfigurationExceptionTest.html</anchorfile>
      <anchor>a584809b9f8de7cfcb44cca2b817d5014</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstruct</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1ConfigurationExceptionTest.html</anchorfile>
      <anchor>ac94ece43db776a6803bdf6e9de0b1013</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Util::ConfigurationGenerator</name>
    <filename>classPHPUnit_1_1Util_1_1ConfigurationGenerator.html</filename>
    <member kind="function">
      <type></type>
      <name>generateDefaultConfiguration</name>
      <anchorfile>classPHPUnit_1_1Util_1_1ConfigurationGenerator.html</anchorfile>
      <anchor>a4120246f6d11356c00258f99506ea2e2</anchor>
      <arglist>(string $phpunitVersion, string $bootstrapScript, string $testsDirectory, string $srcDirectory)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Util::ConfigurationGeneratorTest</name>
    <filename>classPHPUnit_1_1Util_1_1ConfigurationGeneratorTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testGeneratesConfigurationCorrectly</name>
      <anchorfile>classPHPUnit_1_1Util_1_1ConfigurationGeneratorTest.html</anchorfile>
      <anchor>a0b95d377212dae2741c872862dfb6024</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Util::ConfigurationTest</name>
    <filename>classPHPUnit_1_1Util_1_1ConfigurationTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testExceptionIsThrownForNotExistingConfigurationFile</name>
      <anchorfile>classPHPUnit_1_1Util_1_1ConfigurationTest.html</anchorfile>
      <anchor>ab912d77ce6624231e5d76dc75771ea50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testShouldReadColorsWhenTrueInConfigurationFile</name>
      <anchorfile>classPHPUnit_1_1Util_1_1ConfigurationTest.html</anchorfile>
      <anchor>ad2ed90d261e784f90b59f50914e997a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testShouldReadColorsWhenFalseInConfigurationFile</name>
      <anchorfile>classPHPUnit_1_1Util_1_1ConfigurationTest.html</anchorfile>
      <anchor>aeb74aad8142e122e21abbedc8b384828</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testShouldReadColorsWhenEmptyInConfigurationFile</name>
      <anchorfile>classPHPUnit_1_1Util_1_1ConfigurationTest.html</anchorfile>
      <anchor>a02e200b4e957f6c78b126cca6729da06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testShouldReadColorsWhenInvalidInConfigurationFile</name>
      <anchorfile>classPHPUnit_1_1Util_1_1ConfigurationTest.html</anchorfile>
      <anchor>acffb906d627c8064237857b7560c7468</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testInvalidConfigurationGeneratesValidationErrors</name>
      <anchorfile>classPHPUnit_1_1Util_1_1ConfigurationTest.html</anchorfile>
      <anchor>ab05c4c4fbbe2f4897905f70478f5afa1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testShouldUseDefaultValuesForInvalidIntegers</name>
      <anchorfile>classPHPUnit_1_1Util_1_1ConfigurationTest.html</anchorfile>
      <anchor>a9467602a956586da691fa3fa0210ecd0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testShouldParseXmlConfigurationRootAttributes</name>
      <anchorfile>classPHPUnit_1_1Util_1_1ConfigurationTest.html</anchorfile>
      <anchor>a12ba149cb04097f399a0b3f15b64d0b8</anchor>
      <arglist>(string $optionName, string $optionValue, $expected)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>configurationRootOptionsProvider</name>
      <anchorfile>classPHPUnit_1_1Util_1_1ConfigurationTest.html</anchorfile>
      <anchor>ab76c776c1e5a280bc2d3389cc60e6c2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testShouldParseXmlConfigurationExecutionOrderCombined</name>
      <anchorfile>classPHPUnit_1_1Util_1_1ConfigurationTest.html</anchorfile>
      <anchor>aae3b8930e5098432550328c64e46e25a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFilterConfigurationIsReadCorrectly</name>
      <anchorfile>classPHPUnit_1_1Util_1_1ConfigurationTest.html</anchorfile>
      <anchor>acb68654b35c54f40de312c0cbd5c4db4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGroupConfigurationIsReadCorrectly</name>
      <anchorfile>classPHPUnit_1_1Util_1_1ConfigurationTest.html</anchorfile>
      <anchor>a4f24c1a12b047a0473c1ef1d9ac7329e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTestdoxGroupConfigurationIsReadCorrectly</name>
      <anchorfile>classPHPUnit_1_1Util_1_1ConfigurationTest.html</anchorfile>
      <anchor>a69039c32aa68322b636f8cc928449603</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testListenerConfigurationIsReadCorrectly</name>
      <anchorfile>classPHPUnit_1_1Util_1_1ConfigurationTest.html</anchorfile>
      <anchor>a921587b6d9de58e0237e71ce4e22cb16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExtensionConfigurationIsReadCorrectly</name>
      <anchorfile>classPHPUnit_1_1Util_1_1ConfigurationTest.html</anchorfile>
      <anchor>ace891561a772ca031c74d77ee6e7f917</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testLoggingConfigurationIsReadCorrectly</name>
      <anchorfile>classPHPUnit_1_1Util_1_1ConfigurationTest.html</anchorfile>
      <anchor>a0dce89feb880b2eb3103594b0e437aee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testPHPConfigurationIsReadCorrectly</name>
      <anchorfile>classPHPUnit_1_1Util_1_1ConfigurationTest.html</anchorfile>
      <anchor>a234fcc10e75ff6f59b935d9ec1436fd6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testPHPConfigurationIsHandledCorrectly</name>
      <anchorfile>classPHPUnit_1_1Util_1_1ConfigurationTest.html</anchorfile>
      <anchor>af5bd470f9decd8393ef58c6a702afbe7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHandlePHPConfigurationDoesNotOverwriteExistingEnvArrayVariables</name>
      <anchorfile>classPHPUnit_1_1Util_1_1ConfigurationTest.html</anchorfile>
      <anchor>a0ba3056cf0e28c1970311f6f0c5472a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHandlePHPConfigurationDoesForceOverwrittenExistingEnvArrayVariables</name>
      <anchorfile>classPHPUnit_1_1Util_1_1ConfigurationTest.html</anchorfile>
      <anchor>a22fd6470e020cf77a5733641c06e0942</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHandlePHPConfigurationDoesNotOverwriteVariablesFromPutEnv</name>
      <anchorfile>classPHPUnit_1_1Util_1_1ConfigurationTest.html</anchorfile>
      <anchor>a6eb150490b88a2caaa7b284a3d4e38fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHandlePHPConfigurationDoesOverwriteVariablesFromPutEnvWhenForced</name>
      <anchorfile>classPHPUnit_1_1Util_1_1ConfigurationTest.html</anchorfile>
      <anchor>a95a231dfd8b6d97b9df6315b677a1adf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testPHPUnitConfigurationIsReadCorrectly</name>
      <anchorfile>classPHPUnit_1_1Util_1_1ConfigurationTest.html</anchorfile>
      <anchor>a663488eef32a790d73dc215341648ece</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testXincludeInConfiguration</name>
      <anchorfile>classPHPUnit_1_1Util_1_1ConfigurationTest.html</anchorfile>
      <anchor>a83eb2c4bd77648a5c7a7bdf4536288d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testWithEmptyConfigurations</name>
      <anchorfile>classPHPUnit_1_1Util_1_1ConfigurationTest.html</anchorfile>
      <anchor>abc68bf31d8947f3f6b540231448f607d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetTestSuiteNamesReturnsTheNamesIfDefined</name>
      <anchorfile>classPHPUnit_1_1Util_1_1ConfigurationTest.html</anchorfile>
      <anchor>a5cb4f383a6df7e74b71c1d0a23f9b130</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTestSuiteConfigurationForASingleFileInASuite</name>
      <anchorfile>classPHPUnit_1_1Util_1_1ConfigurationTest.html</anchorfile>
      <anchor>a57f549b3b64d4a52503083a08dfa51e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>test_TestDox_configuration_is_parsed_correctly</name>
      <anchorfile>classPHPUnit_1_1Util_1_1ConfigurationTest.html</anchorfile>
      <anchor>a138e12c5ff283445ae65ef2b0620ce55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>test_Conflict_between_testdox_and_printerClass_is_detected</name>
      <anchorfile>classPHPUnit_1_1Util_1_1ConfigurationTest.html</anchorfile>
      <anchor>aff6cd5c75969f2e70975b64d2bb34ddc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classPHPUnit_1_1Util_1_1ConfigurationTest.html</anchorfile>
      <anchor>a62195cd7a4272837324bd1cbf1ad813a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>assertConfigurationEquals</name>
      <anchorfile>classPHPUnit_1_1Util_1_1ConfigurationTest.html</anchorfile>
      <anchor>aaba7125875f4b0601c971cd302a10f0f</anchor>
      <arglist>(Configuration $expectedConfiguration, Configuration $actualConfiguration)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$configuration</name>
      <anchorfile>classPHPUnit_1_1Util_1_1ConfigurationTest.html</anchorfile>
      <anchor>a57f479f159976d22d3be8c77cad21beb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::MockObject::Stub::ConsecutiveCalls</name>
    <filename>classPHPUnit_1_1Framework_1_1MockObject_1_1Stub_1_1ConsecutiveCalls.html</filename>
    <base>PHPUnit::Framework::MockObject::Stub::Stub</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Stub_1_1ConsecutiveCalls.html</anchorfile>
      <anchor>a78d0576d3ce39a58105097bb93e7c8d8</anchor>
      <arglist>(array $stack)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>invoke</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Stub_1_1ConsecutiveCalls.html</anchorfile>
      <anchor>a30f925d4a5070bb168d0dd927a8cbe48</anchor>
      <arglist>(Invocation $invocation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Stub_1_1ConsecutiveCalls.html</anchorfile>
      <anchor>aab57dcedc038bdf651c5ec302c5650d7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::MockObject::Rule::ConsecutiveParameters</name>
    <filename>classPHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1ConsecutiveParameters.html</filename>
    <base>PHPUnit::Framework::MockObject::Rule::ParametersRule</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1ConsecutiveParameters.html</anchorfile>
      <anchor>a169419596d14ddefa8ca50f5cb6bf2cb</anchor>
      <arglist>(array $parameterGroups)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1ConsecutiveParameters.html</anchorfile>
      <anchor>ae9ca3421670597c1c633dfa2d79efaa5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>apply</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1ConsecutiveParameters.html</anchorfile>
      <anchor>aa5f6a53eaa1a802a51940d0974f1e279</anchor>
      <arglist>(BaseInvocation $invocation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>verify</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1ConsecutiveParameters.html</anchorfile>
      <anchor>a1c4190b79d701300704eb2bcb020d3e6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConsecutiveParametersTest</name>
    <filename>classConsecutiveParametersTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testIntegration</name>
      <anchorfile>classConsecutiveParametersTest.html</anchorfile>
      <anchor>ae29fd745043d01b7a51ff31f786a4e93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIntegrationWithLessAssertionsThanMethodCalls</name>
      <anchorfile>classConsecutiveParametersTest.html</anchorfile>
      <anchor>a7cfb03a25ddd031daf63fd831899bc26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIntegrationExpectingException</name>
      <anchorfile>classConsecutiveParametersTest.html</anchorfile>
      <anchor>a5478bd9d2394a28dceef640fda2a7aad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIntegrationFailsWithNonIterableParameterGroup</name>
      <anchorfile>classConsecutiveParametersTest.html</anchorfile>
      <anchor>a8036b99fe0bc0d67b15ed4cbd1b9798a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Environment::Console</name>
    <filename>classSebastianBergmann_1_1Environment_1_1Console.html</filename>
    <member kind="function">
      <type></type>
      <name>hasColorSupport</name>
      <anchorfile>classSebastianBergmann_1_1Environment_1_1Console.html</anchorfile>
      <anchor>aacf1de59e6ed4e4418a31ec679770ee8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getNumberOfColumns</name>
      <anchorfile>classSebastianBergmann_1_1Environment_1_1Console.html</anchorfile>
      <anchor>acdfaf031aca61451eab153df8899d437</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isInteractive</name>
      <anchorfile>classSebastianBergmann_1_1Environment_1_1Console.html</anchorfile>
      <anchor>a7cae4d4f48fca9b1f799091a07308149</anchor>
      <arglist>($fileDescriptor=self::STDOUT)</arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>STDIN</name>
      <anchorfile>classSebastianBergmann_1_1Environment_1_1Console.html</anchorfile>
      <anchor>a25728cf5de5ef9b5b0a8122aef2d0d67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>STDOUT</name>
      <anchorfile>classSebastianBergmann_1_1Environment_1_1Console.html</anchorfile>
      <anchor>a5656f3304f3ba737bbac75d6f25016c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>STDERR</name>
      <anchorfile>classSebastianBergmann_1_1Environment_1_1Console.html</anchorfile>
      <anchor>aae80dd92c9efa144255656a2e0a43a3a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Environment::ConsoleTest</name>
    <filename>classSebastianBergmann_1_1Environment_1_1ConsoleTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testCanDetectIfStdoutIsInteractiveByDefault</name>
      <anchorfile>classSebastianBergmann_1_1Environment_1_1ConsoleTest.html</anchorfile>
      <anchor>abeb91d891e40393185fdeb001d854ca1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCanDetectIfFileDescriptorIsInteractive</name>
      <anchorfile>classSebastianBergmann_1_1Environment_1_1ConsoleTest.html</anchorfile>
      <anchor>af6d5879a5bd84b6e940eab6944fc56cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCanDetectColorSupport</name>
      <anchorfile>classSebastianBergmann_1_1Environment_1_1ConsoleTest.html</anchorfile>
      <anchor>af6184ba16997426b127ad66ad9e19930</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCanDetectNumberOfColumns</name>
      <anchorfile>classSebastianBergmann_1_1Environment_1_1ConsoleTest.html</anchorfile>
      <anchor>abba101c4b99e6088bbb0089e4e206064</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classSebastianBergmann_1_1Environment_1_1ConsoleTest.html</anchorfile>
      <anchor>a80a67a66b6a94dd1dbd12fb6ecd64cdd</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::Constraint</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1Constraint.html</filename>
    <base>PHPUnit::Framework::SelfDescribing</base>
    <member kind="function">
      <type></type>
      <name>evaluate</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1Constraint.html</anchorfile>
      <anchor>aceccbf0ae2c44affca1c5e3870a0d2c1</anchor>
      <arglist>($other, string $description=&apos;&apos;, bool $returnResult=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>count</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1Constraint.html</anchorfile>
      <anchor>a980aea02875af7bc8d47c0e9caa5506f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>exporter</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1Constraint.html</anchorfile>
      <anchor>aa3bbe9fceed5837209cf8c849d85d7ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>matches</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1Constraint.html</anchorfile>
      <anchor>aa46f5e0d773c239414df67cedcbb5eba</anchor>
      <arglist>($other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>fail</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1Constraint.html</anchorfile>
      <anchor>addba3abf8e392e1c00bde2eaf0b2df4f</anchor>
      <arglist>($other, $description, ComparisonFailure $comparisonFailure=null)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>additionalFailureDescription</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1Constraint.html</anchorfile>
      <anchor>abd0dbaac69f51c542760a1e6bc861288</anchor>
      <arglist>($other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>failureDescription</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1Constraint.html</anchorfile>
      <anchor>a3392202a52e6550678b104000314abba</anchor>
      <arglist>($other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::ConstraintTest</name>
    <filename>classPHPUnit_1_1Framework_1_1ConstraintTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testConstraintArrayNotHasKey</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ConstraintTest.html</anchorfile>
      <anchor>a0f8449f8e56692da1fcbdafcb1294a33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintArrayNotHasKey2</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ConstraintTest.html</anchorfile>
      <anchor>acf106409b662d21ef9a85be8ae47476b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintFileNotExists</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ConstraintTest.html</anchorfile>
      <anchor>a4ff23e700cbf03423ddee3fef0831c51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintFileNotExists2</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ConstraintTest.html</anchorfile>
      <anchor>a546863fdc56dd1476e6b21bec12e0ebe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintNotGreaterThan</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ConstraintTest.html</anchorfile>
      <anchor>a0372f0c6774dea6639792c833cd9e365</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintNotGreaterThan2</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ConstraintTest.html</anchorfile>
      <anchor>a3b960c4378c13b82cdbb807bc7c3adda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintGreaterThanOrEqual</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ConstraintTest.html</anchorfile>
      <anchor>a7775dfdee80acb276714421cc41cee23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintGreaterThanOrEqual2</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ConstraintTest.html</anchorfile>
      <anchor>a6797f4b490c2350bbbb15973d1ed7797</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintNotGreaterThanOrEqual</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ConstraintTest.html</anchorfile>
      <anchor>ae7dec61d5092c94d4f8093de5d78c4cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintNotGreaterThanOrEqual2</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ConstraintTest.html</anchorfile>
      <anchor>acbcbe3571643ff0cbfade02adfa943e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintIsAnything</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ConstraintTest.html</anchorfile>
      <anchor>a6a81030217a5f3e8bdf8abde17c896d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintNotIsAnything</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ConstraintTest.html</anchorfile>
      <anchor>add423f96e9068a46b9760659b800834f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintIsNotEqual</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ConstraintTest.html</anchorfile>
      <anchor>a0f8ed58f563684bf161c2c404477b45e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintIsNotEqual2</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ConstraintTest.html</anchorfile>
      <anchor>ae0deb8af2b32d2c611727bcf31327fe8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintIsNotIdentical</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ConstraintTest.html</anchorfile>
      <anchor>abd334cdb4663696a47f638df11706462</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintIsNotIdentical2</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ConstraintTest.html</anchorfile>
      <anchor>af7778431a392de0929906f32a5ee2460</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintIsNotIdentical3</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ConstraintTest.html</anchorfile>
      <anchor>ae635c849338f588e9332f0e51356b07e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintIsInstanceOf</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ConstraintTest.html</anchorfile>
      <anchor>ae34d7718c0c3d16e2662551df42429f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintIsInstanceOf2</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ConstraintTest.html</anchorfile>
      <anchor>a3e9b4cafbdce68f8c0b3069478ea2273</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintIsNotInstanceOf</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ConstraintTest.html</anchorfile>
      <anchor>ab8dc5b98d7815acfbdd4addfd6ba9d18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintIsNotInstanceOf2</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ConstraintTest.html</anchorfile>
      <anchor>a19a29ba4a0be43165f65b0df723ac3ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintIsNotType</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ConstraintTest.html</anchorfile>
      <anchor>a5d0785d1ee779ecb99ba1d73e8423f4a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintIsNotType2</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ConstraintTest.html</anchorfile>
      <anchor>af415c0e11533cdbb0a4490892517e1af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintIsNotNull</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ConstraintTest.html</anchorfile>
      <anchor>a28eb9aead6a8163a5c0d9638f9469269</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintIsNotNull2</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ConstraintTest.html</anchorfile>
      <anchor>a314e3a0b6373edd4239721e6c81633c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintNotLessThan</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ConstraintTest.html</anchorfile>
      <anchor>a1fe08ab4ade6fd5b4735725a01220a20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintNotLessThan2</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ConstraintTest.html</anchorfile>
      <anchor>a45c4d24dca911c1aa2b07bc5b585d0fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintLessThanOrEqual</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ConstraintTest.html</anchorfile>
      <anchor>a25bb12ea4bceb495df4ccd71e95f20b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintLessThanOrEqual2</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ConstraintTest.html</anchorfile>
      <anchor>ab066e36f3a50d29d2a619c745633a22f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintNotLessThanOrEqual</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ConstraintTest.html</anchorfile>
      <anchor>ac3bf21b5954bdd4502de3f9f13677066</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintNotLessThanOrEqual2</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ConstraintTest.html</anchorfile>
      <anchor>a7ab7ea50736604c6a6844fe4516f02ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintClassNotHasAttribute</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ConstraintTest.html</anchorfile>
      <anchor>a134a566ea626d375b1639686b80f7431</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintClassNotHasAttribute2</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ConstraintTest.html</anchorfile>
      <anchor>a2ee82fb2d1847d406a58d33dc85f7d02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintClassNotHasStaticAttribute</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ConstraintTest.html</anchorfile>
      <anchor>a150414d11555ee2babe2394d52521b78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintClassNotHasStaticAttribute2</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ConstraintTest.html</anchorfile>
      <anchor>a34f3e8d45f642d90e17c563ecd784bbb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintObjectNotHasAttribute</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ConstraintTest.html</anchorfile>
      <anchor>ae47b661d793c0eec8c8aaaf35b459bb2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintObjectNotHasAttribute2</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ConstraintTest.html</anchorfile>
      <anchor>a41402770d03a7c1eb7622ad0c608729e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintPCRENotMatch</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ConstraintTest.html</anchorfile>
      <anchor>a1e722ae234a9880dfa080e482fbdd794</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintPCRENotMatch2</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ConstraintTest.html</anchorfile>
      <anchor>a40bafddcc83adbaa197e0660e667dc79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintStringStartsNotWith</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ConstraintTest.html</anchorfile>
      <anchor>a872aad83427513e15cae6602105b772e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintStringStartsNotWith2</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ConstraintTest.html</anchorfile>
      <anchor>afff201f3df9686ebe58d369c759a8fc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintStringNotContains</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ConstraintTest.html</anchorfile>
      <anchor>a37fce6c278007a4f098edebf891f462e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintStringNotContainsWhenIgnoreCase</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ConstraintTest.html</anchorfile>
      <anchor>ac7d1217457f182dc56ceedc7a415ca93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintStringNotContainsForUtf8StringWhenNotIgnoreCase</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ConstraintTest.html</anchorfile>
      <anchor>ace8d8d95942f1cb6be5cd064c5e22265</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintStringNotContains2</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ConstraintTest.html</anchorfile>
      <anchor>aa5b666c15468c53ee55b45d56b24d7da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintStringEndsNotWith</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ConstraintTest.html</anchorfile>
      <anchor>a8708d355bca7e04250350e490f392ef9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintStringEndsNotWith2</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ConstraintTest.html</anchorfile>
      <anchor>aeb59354eabdf809bdf2f0114b92bd013</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintArrayNotContains</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ConstraintTest.html</anchorfile>
      <anchor>a8df55d31062565be1faee02659237842</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintArrayNotContains2</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ConstraintTest.html</anchorfile>
      <anchor>a23cbea087a8cf84d8734998135cbb624</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintCountWithAnArray</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ConstraintTest.html</anchorfile>
      <anchor>a29d86aaede12ffc8570df3f8efc9a7ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintCountWithAnIteratorWhichDoesNotImplementCountable</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ConstraintTest.html</anchorfile>
      <anchor>a8ccf2395b5c1d53b538abd012bf195cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintCountWithAnObjectImplementingCountable</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ConstraintTest.html</anchorfile>
      <anchor>af168b88f89236245625c217f9d44e7f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintCountFailing</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ConstraintTest.html</anchorfile>
      <anchor>ae80f95b2a178fc51baf793141e1e1442</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintNotCountFailing</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ConstraintTest.html</anchorfile>
      <anchor>a517fb106de76dccb1ab259c796da69f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintNotSameSizeFailing</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ConstraintTest.html</anchorfile>
      <anchor>a938409d8fc479d7d2349fbdd007939a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintException</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ConstraintTest.html</anchorfile>
      <anchor>a349db2b7c8f39aa4fb66158aacab1965</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::ConstraintTestCase</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1ConstraintTestCase.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testIsCountable</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1ConstraintTestCase.html</anchorfile>
      <anchor>a8f2b89c4ba435cd7d8e78f4b6b3f2ff6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIsSelfDescribing</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1ConstraintTestCase.html</anchorfile>
      <anchor>a6acbf28aab26cf9551f1bb248aa6d6db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>className</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1ConstraintTestCase.html</anchorfile>
      <anchor>a48ea5b66563b64ee910e12febf5c3a1d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::ContainsElement</name>
    <filename>classPharIo_1_1Manifest_1_1ContainsElement.html</filename>
    <base>PharIo::Manifest::ManifestElement</base>
    <member kind="function">
      <type></type>
      <name>getName</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ContainsElement.html</anchorfile>
      <anchor>a4b95b8ab66978a53e50dddb2d7e9873a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getVersion</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ContainsElement.html</anchorfile>
      <anchor>a91d0e3fd33eb8b603a337561297e6e56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getType</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ContainsElement.html</anchorfile>
      <anchor>a206a8dc2c2dfb70c8126416d0a9ae9d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getExtensionElement</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ContainsElement.html</anchorfile>
      <anchor>a3408e3c8878d770d3612fa968c622188</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::ContainsElementTest</name>
    <filename>classPharIo_1_1Manifest_1_1ContainsElementTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testVersionCanBeRetrieved</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ContainsElementTest.html</anchorfile>
      <anchor>ae42cb74a47ea69e118b25fb0fe8d784a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testThrowsExceptionWhenVersionAttributeIsMissing</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ContainsElementTest.html</anchorfile>
      <anchor>aaa323a9c1e6813741565504340e2b56a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testNameCanBeRetrieved</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ContainsElementTest.html</anchorfile>
      <anchor>a564f2fd03a88c864590c792d6a6e6dcc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testThrowsExceptionWhenNameAttributeIsMissing</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ContainsElementTest.html</anchorfile>
      <anchor>ad474c21cd9378edf76e172b935c12786</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTypeCanBeRetrieved</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ContainsElementTest.html</anchorfile>
      <anchor>adf9949fb6722d7b4454d203ee1ad2e34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testThrowsExceptionWhenTypeAttributeIsMissing</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ContainsElementTest.html</anchorfile>
      <anchor>aec956144b95674cc0e72dff297f967b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetExtensionElementReturnsExtensionElement</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ContainsElementTest.html</anchorfile>
      <anchor>aec936bace684bae20424f19c90fcbd72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ContainsElementTest.html</anchorfile>
      <anchor>a33509ddd9c7d6d4fd59f3ffb516a295a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::Types::Context</name>
    <filename>classphpDocumentor_1_1Reflection_1_1Types_1_1Context.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1Context.html</anchorfile>
      <anchor>adbef6ec83e133d3c31bee9f16d0bad5b</anchor>
      <arglist>(string $namespace, array $namespaceAliases=[])</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getNamespace</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1Context.html</anchorfile>
      <anchor>a24f40bf8767b76c8eee4ac3718f31a54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getNamespaceAliases</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1Context.html</anchorfile>
      <anchor>ab479dfb0a156ac1f13c05cb6a5543f85</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::RecursionContext::Context</name>
    <filename>classSebastianBergmann_1_1RecursionContext_1_1Context.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classSebastianBergmann_1_1RecursionContext_1_1Context.html</anchorfile>
      <anchor>a1da7b0bd6825f16821b4f7c7165a245e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>add</name>
      <anchorfile>classSebastianBergmann_1_1RecursionContext_1_1Context.html</anchorfile>
      <anchor>a1a77e70003472ef355d309aaae22169a</anchor>
      <arglist>(&amp;$value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>contains</name>
      <anchorfile>classSebastianBergmann_1_1RecursionContext_1_1Context.html</anchorfile>
      <anchor>a786e8a817d70fe791ee6a5fc7f6567e6</anchor>
      <arglist>(&amp;$value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__destruct</name>
      <anchorfile>classSebastianBergmann_1_1RecursionContext_1_1Context.html</anchorfile>
      <anchor>a0927504082c3aa8c3a109c7a88896109</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::Types::ContextFactory</name>
    <filename>classphpDocumentor_1_1Reflection_1_1Types_1_1ContextFactory.html</filename>
    <member kind="function">
      <type></type>
      <name>createForNamespace</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1ContextFactory.html</anchorfile>
      <anchor>a72d256f2a9252c5e6f1bebf3b80ed057</anchor>
      <arglist>(string $namespace, string $fileContents)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>benchmark::ContextFactoryBench</name>
    <filename>classbenchmark_1_1ContextFactoryBench.html</filename>
    <member kind="function">
      <type></type>
      <name>setup</name>
      <anchorfile>classbenchmark_1_1ContextFactoryBench.html</anchorfile>
      <anchor>ae7047517e90a6bbb6a8c1a859c11a2cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>benchCreateContextForNamespace</name>
      <anchorfile>classbenchmark_1_1ContextFactoryBench.html</anchorfile>
      <anchor>a5ea979190df85a26c4e24af3222589b5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::Types::ContextFactoryTest</name>
    <filename>classphpDocumentor_1_1Reflection_1_1Types_1_1ContextFactoryTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testReadsNamespaceFromClassReflection</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1ContextFactoryTest.html</anchorfile>
      <anchor>ab28601239c0ba0802b58f17838baf250</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testReadsAliasesFromClassReflection</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1ContextFactoryTest.html</anchorfile>
      <anchor>a226520ab9873f509e4a8daa4f5c88be4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testReadsNamespaceFromProvidedNamespaceAndContent</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1ContextFactoryTest.html</anchorfile>
      <anchor>a3f74096998e818a21ad07eb2651c4477</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testReadsAliasesFromProvidedNamespaceAndContent</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1ContextFactoryTest.html</anchorfile>
      <anchor>a9777d5b87e12306aa4707285c174915e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTraitUseIsNotDetectedAsNamespaceUse</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1ContextFactoryTest.html</anchorfile>
      <anchor>a5f8c5077f1b9b0cedbeebd23e7dd047a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAllOpeningBracesAreCheckedWhenSearchingForEndOfClass</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1ContextFactoryTest.html</anchorfile>
      <anchor>abcb3c7fe1e8f5b9a92310c218ec117aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testEmptyFileName</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1ContextFactoryTest.html</anchorfile>
      <anchor>a55d8069ae7b3741b11f881d9c90e2415</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testEvalDClass</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1ContextFactoryTest.html</anchorfile>
      <anchor>a6d6a6222f9866d8f1e0d40721f051bc3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>assertNamespaceAliasesFrom</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1ContextFactoryTest.html</anchorfile>
      <anchor>a7a1540a73da305c2ce94af0494b02c60</anchor>
      <arglist>(Context $context)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::RecursionContext::ContextTest</name>
    <filename>classSebastianBergmann_1_1RecursionContext_1_1ContextTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>failsProvider</name>
      <anchorfile>classSebastianBergmann_1_1RecursionContext_1_1ContextTest.html</anchorfile>
      <anchor>afaf82475610a1ba0506054eb76c15126</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>valuesProvider</name>
      <anchorfile>classSebastianBergmann_1_1RecursionContext_1_1ContextTest.html</anchorfile>
      <anchor>a3b161a211cf13c7fa48a69e16405e23b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAddFails</name>
      <anchorfile>classSebastianBergmann_1_1RecursionContext_1_1ContextTest.html</anchorfile>
      <anchor>a0022f33913a39c686e71a442a55ee862</anchor>
      <arglist>($value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testContainsFails</name>
      <anchorfile>classSebastianBergmann_1_1RecursionContext_1_1ContextTest.html</anchorfile>
      <anchor>a9551bc9fe2c354116e7e68586ed30603</anchor>
      <arglist>($value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAdd</name>
      <anchorfile>classSebastianBergmann_1_1RecursionContext_1_1ContextTest.html</anchorfile>
      <anchor>a23035f0487e0a2bf53556c1523dcfba0</anchor>
      <arglist>($value, $key)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testContainsFound</name>
      <anchorfile>classSebastianBergmann_1_1RecursionContext_1_1ContextTest.html</anchorfile>
      <anchor>a9b110787d9cf1b7ea4ffe2316187e86d</anchor>
      <arglist>($value, $key)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testContainsNotFound</name>
      <anchorfile>classSebastianBergmann_1_1RecursionContext_1_1ContextTest.html</anchorfile>
      <anchor>afd96ecf60b89255b026d0d2c300861a8</anchor>
      <arglist>($value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classSebastianBergmann_1_1RecursionContext_1_1ContextTest.html</anchorfile>
      <anchor>aa26c3a252a0627196c1d8adb7ae67aca</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::Types::ContextTest</name>
    <filename>classphpDocumentor_1_1Reflection_1_1Types_1_1ContextTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testProvidesANormalizedNamespace</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1ContextTest.html</anchorfile>
      <anchor>abc97322585dbb88bc618200bc99d0806</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testInterpretsNamespaceNamedGlobalAsRootNamespace</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1ContextTest.html</anchorfile>
      <anchor>ae2fa241ee123445d78ecc7abada69807</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testInterpretsNamespaceNamedDefaultAsRootNamespace</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1ContextTest.html</anchorfile>
      <anchor>acf6f459bc869b11558f86fe7d35f9ee2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testProvidesNormalizedNamespaceAliases</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1ContextTest.html</anchorfile>
      <anchor>aa57f5f610a747ad15092520889c5b509</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::CopyrightElement</name>
    <filename>classPharIo_1_1Manifest_1_1CopyrightElement.html</filename>
    <base>PharIo::Manifest::ManifestElement</base>
    <member kind="function">
      <type></type>
      <name>getAuthorElements</name>
      <anchorfile>classPharIo_1_1Manifest_1_1CopyrightElement.html</anchorfile>
      <anchor>a852d39b4e30fa3b13f9d210b4ae2877b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getLicenseElement</name>
      <anchorfile>classPharIo_1_1Manifest_1_1CopyrightElement.html</anchorfile>
      <anchor>a3002ccebd983b33b8c19cf40fd91b0a0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::CopyrightElementTest</name>
    <filename>classPharIo_1_1Manifest_1_1CopyrightElementTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testThrowsExceptionWhenGetAuthroElementsIsCalledButNodesAreMissing</name>
      <anchorfile>classPharIo_1_1Manifest_1_1CopyrightElementTest.html</anchorfile>
      <anchor>a2524add94dfa38d672dfec7d9eb2d642</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testThrowsExceptionWhenGetLicenseElementIsCalledButNodeIsMissing</name>
      <anchorfile>classPharIo_1_1Manifest_1_1CopyrightElementTest.html</anchorfile>
      <anchor>aa941e255e447bbc23355f06ac29f348e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetAuthorElementsReturnsAuthorElementCollection</name>
      <anchorfile>classPharIo_1_1Manifest_1_1CopyrightElementTest.html</anchorfile>
      <anchor>a146d2e11c00495f81bd3b4dc599014f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetLicenseElementReturnsLicenseElement</name>
      <anchorfile>classPharIo_1_1Manifest_1_1CopyrightElementTest.html</anchorfile>
      <anchor>aff821b2af26aebd5f5cb7c5e7af163fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classPharIo_1_1Manifest_1_1CopyrightElementTest.html</anchorfile>
      <anchor>a46a4a107644c7e1f01b753f899c379f8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::CopyrightInformation</name>
    <filename>classPharIo_1_1Manifest_1_1CopyrightInformation.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPharIo_1_1Manifest_1_1CopyrightInformation.html</anchorfile>
      <anchor>a64ca818ad7697761e799d0d9e620f784</anchor>
      <arglist>(AuthorCollection $authors, License $license)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getAuthors</name>
      <anchorfile>classPharIo_1_1Manifest_1_1CopyrightInformation.html</anchorfile>
      <anchor>ab76f8ee548a409a1451419942d60088f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getLicense</name>
      <anchorfile>classPharIo_1_1Manifest_1_1CopyrightInformation.html</anchorfile>
      <anchor>a2ef93a78686dac5180da1a16e527892f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::CopyrightInformationTest</name>
    <filename>classPharIo_1_1Manifest_1_1CopyrightInformationTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testCanBeCreated</name>
      <anchorfile>classPharIo_1_1Manifest_1_1CopyrightInformationTest.html</anchorfile>
      <anchor>a85071ab7afd0c6356880582b50f4f868</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAuthorsCanBeRetrieved</name>
      <anchorfile>classPharIo_1_1Manifest_1_1CopyrightInformationTest.html</anchorfile>
      <anchor>a45aa5a143804ed5f1bc587df920dc081</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testLicenseCanBeRetrieved</name>
      <anchorfile>classPharIo_1_1Manifest_1_1CopyrightInformationTest.html</anchorfile>
      <anchor>a7a6a4557c1042a2365814c7b2082046e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classPharIo_1_1Manifest_1_1CopyrightInformationTest.html</anchorfile>
      <anchor>a04f31979f0f6f3c5bb6bb506949a4d3d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::Count</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1Count.html</filename>
    <base>PHPUnit::Framework::Constraint::Constraint</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1Count.html</anchorfile>
      <anchor>a18afc4db0c0e23b09bbb5e84265c8ea7</anchor>
      <arglist>(int $expected)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1Count.html</anchorfile>
      <anchor>a480028e5b75742dc62869cf10de1d2ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>matches</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1Count.html</anchorfile>
      <anchor>a88a73fcf458548b13345c1f78dc4a79c</anchor>
      <arglist>($other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>getCountOf</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1Count.html</anchorfile>
      <anchor>a8b4c3aa4cb6ea2ec950d424bfd335755</anchor>
      <arglist>($other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>getCountOfGenerator</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1Count.html</anchorfile>
      <anchor>a08839aa2084e500760f460011c2aba78</anchor>
      <arglist>(Generator $generator)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>failureDescription</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1Count.html</anchorfile>
      <anchor>ad549a9ac402ff41712af0adf2bc8c728</anchor>
      <arglist>($other)</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>Contracts::CountableInterface</name>
    <filename>interfaceContracts_1_1CountableInterface.html</filename>
    <member kind="function">
      <type></type>
      <name>count</name>
      <anchorfile>interfaceContracts_1_1CountableInterface.html</anchorfile>
      <anchor>aeb9795fa7abd84d5c60080c9baf12e46</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CountConstraint</name>
    <filename>classCountConstraint.html</filename>
    <base>PHPUnit::Framework::Constraint::Constraint</base>
    <member kind="function">
      <type></type>
      <name>matches</name>
      <anchorfile>classCountConstraint.html</anchorfile>
      <anchor>a1de0ec783476a6c0b65cf31dfdccf333</anchor>
      <arglist>($other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classCountConstraint.html</anchorfile>
      <anchor>ae0cf6dbdfde7b28b42fff2a7eebc1f70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>count</name>
      <anchorfile>classCountConstraint.html</anchorfile>
      <anchor>a9386f0b040df7bb62a45ad650862745e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>fromCount</name>
      <anchorfile>classCountConstraint.html</anchorfile>
      <anchor>ac6f6421fa465e7fadc30c6429bf4c15b</anchor>
      <arglist>(int $count)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::CountTest</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1CountTest.html</filename>
    <base>PHPUnit::Framework::Constraint::ConstraintTestCase</base>
    <member kind="function">
      <type></type>
      <name>testCount</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1CountTest.html</anchorfile>
      <anchor>af48912359c1a85a1d27eb6378d3a3962</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCountDoesNotChangeIteratorKey</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1CountTest.html</anchorfile>
      <anchor>a2196d2d41ec51e4acc278a0417f07e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCountGeneratorsDoNotRewind</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1CountTest.html</anchorfile>
      <anchor>aeae68751dc25039df998d3558c68fc01</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCountTraversable</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1CountTest.html</anchorfile>
      <anchor>ac2955c2cb84f0cdc15905f10dc55d818</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCountCanBeExportedToString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1CountTest.html</anchorfile>
      <anchor>a297b46873521440a5797e2acfdf26a3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCountEvaluateReturnsNullWithNonCountableAndNonTraversableOther</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1CountTest.html</anchorfile>
      <anchor>a182c066f6b41156861f56dd3f44ccebb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>test_EmptyIterator_is_handled_correctly</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1CountTest.html</anchorfile>
      <anchor>a06b735d33ed3662bfb4ad6a28caea6a4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::CodeCoverage::Report::Xml::Coverage</name>
    <filename>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1Coverage.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1Coverage.html</anchorfile>
      <anchor>a83d277c254ee1670e0ee794d5a0f1c7f</anchor>
      <arglist>(\DOMElement $context, string $line)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addTest</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1Coverage.html</anchorfile>
      <anchor>a918184d453fd5865e51c5f9e254d0e3b</anchor>
      <arglist>(string $test)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>finalize</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1Coverage.html</anchorfile>
      <anchor>a2717e1fb29ec74e0bd855c768e98a5a2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CoverageClassExtendedTest</name>
    <filename>classCoverageClassExtendedTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classCoverageClassExtendedTest.html</anchorfile>
      <anchor>af2e2f3d587a4f403fee72023424f0539</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classCoverageClassExtendedTest.html</anchorfile>
      <anchor>af2e2f3d587a4f403fee72023424f0539</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CoverageClassNothingTest</name>
    <filename>classCoverageClassNothingTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classCoverageClassNothingTest.html</anchorfile>
      <anchor>acbcf587389ce392da90c17ba82fbac8b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CoverageClassTest</name>
    <filename>classCoverageClassTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classCoverageClassTest.html</anchorfile>
      <anchor>a6ad1cf703366f868d3d09bab95c76195</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classCoverageClassTest.html</anchorfile>
      <anchor>a6ad1cf703366f868d3d09bab95c76195</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CoverageClassWithoutAnnotationsTest</name>
    <filename>classCoverageClassWithoutAnnotationsTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classCoverageClassWithoutAnnotationsTest.html</anchorfile>
      <anchor>ae7f629b5c2f2555f1eaabbf5bdf2e47c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CoverageCoversOverridesCoversNothingTest</name>
    <filename>classCoverageCoversOverridesCoversNothingTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classCoverageCoversOverridesCoversNothingTest.html</anchorfile>
      <anchor>a68ce5543ed072dd64c8856ac09b8a694</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CoverageFunctionParenthesesTest</name>
    <filename>classCoverageFunctionParenthesesTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classCoverageFunctionParenthesesTest.html</anchorfile>
      <anchor>a58efe1a83e5c3e5eb89e1d0ca892ac38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classCoverageFunctionParenthesesTest.html</anchorfile>
      <anchor>a58efe1a83e5c3e5eb89e1d0ca892ac38</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CoverageFunctionParenthesesWhitespaceTest</name>
    <filename>classCoverageFunctionParenthesesWhitespaceTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classCoverageFunctionParenthesesWhitespaceTest.html</anchorfile>
      <anchor>a28c5e603561bf0cde45604c794ff0991</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classCoverageFunctionParenthesesWhitespaceTest.html</anchorfile>
      <anchor>a28c5e603561bf0cde45604c794ff0991</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CoverageFunctionTest</name>
    <filename>classCoverageFunctionTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classCoverageFunctionTest.html</anchorfile>
      <anchor>a64944d4cd6b12c78fc90c3f24254058a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classCoverageFunctionTest.html</anchorfile>
      <anchor>a64944d4cd6b12c78fc90c3f24254058a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CoverageMethodNothingCoversMethod</name>
    <filename>classCoverageMethodNothingCoversMethod.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classCoverageMethodNothingCoversMethod.html</anchorfile>
      <anchor>afc28d9b4daa21e1d16fbf76ce3e7c68d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CoverageMethodNothingTest</name>
    <filename>classCoverageMethodNothingTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classCoverageMethodNothingTest.html</anchorfile>
      <anchor>aab0b959c52fe1c4ada9f7d203c088d4a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CoverageMethodOneLineAnnotationTest</name>
    <filename>classCoverageMethodOneLineAnnotationTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classCoverageMethodOneLineAnnotationTest.html</anchorfile>
      <anchor>ae92392f29ebf08bbc6f1295fc7b55a31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classCoverageMethodOneLineAnnotationTest.html</anchorfile>
      <anchor>ae92392f29ebf08bbc6f1295fc7b55a31</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CoverageMethodParenthesesTest</name>
    <filename>classCoverageMethodParenthesesTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classCoverageMethodParenthesesTest.html</anchorfile>
      <anchor>a65c378fa5ca758ca0732cdd5ec3615e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classCoverageMethodParenthesesTest.html</anchorfile>
      <anchor>a65c378fa5ca758ca0732cdd5ec3615e1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CoverageMethodParenthesesWhitespaceTest</name>
    <filename>classCoverageMethodParenthesesWhitespaceTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classCoverageMethodParenthesesWhitespaceTest.html</anchorfile>
      <anchor>a5102b7abb658c790446cc82f3f8503e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classCoverageMethodParenthesesWhitespaceTest.html</anchorfile>
      <anchor>a5102b7abb658c790446cc82f3f8503e9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CoverageMethodTest</name>
    <filename>classCoverageMethodTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classCoverageMethodTest.html</anchorfile>
      <anchor>afd8a28cf3485c912ff38783f7c2ccdd0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classCoverageMethodTest.html</anchorfile>
      <anchor>afd8a28cf3485c912ff38783f7c2ccdd0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CoverageNamespacedFunctionTest</name>
    <filename>classCoverageNamespacedFunctionTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testFunc</name>
      <anchorfile>classCoverageNamespacedFunctionTest.html</anchorfile>
      <anchor>af3e47fefab1c34955476405bef922076</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CoverageNoneTest</name>
    <filename>classCoverageNoneTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classCoverageNoneTest.html</anchorfile>
      <anchor>ab8a9808e52e4cb04f1dc1a6d71c7b3a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classCoverageNoneTest.html</anchorfile>
      <anchor>ab8a9808e52e4cb04f1dc1a6d71c7b3a8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CoverageNothingTest</name>
    <filename>classCoverageNothingTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classCoverageNothingTest.html</anchorfile>
      <anchor>a1b9db016b9534876cccf4138923a35a6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CoverageNotPrivateTest</name>
    <filename>classCoverageNotPrivateTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classCoverageNotPrivateTest.html</anchorfile>
      <anchor>a83073309b858b69c2c8a53baf05ef2a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classCoverageNotPrivateTest.html</anchorfile>
      <anchor>a83073309b858b69c2c8a53baf05ef2a8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CoverageNotProtectedTest</name>
    <filename>classCoverageNotProtectedTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classCoverageNotProtectedTest.html</anchorfile>
      <anchor>ac7f5cca60c714dce57c6e38272f4c188</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classCoverageNotProtectedTest.html</anchorfile>
      <anchor>ac7f5cca60c714dce57c6e38272f4c188</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CoverageNotPublicTest</name>
    <filename>classCoverageNotPublicTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classCoverageNotPublicTest.html</anchorfile>
      <anchor>a7c2580ed7595eaf10adffe3cc27c32ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classCoverageNotPublicTest.html</anchorfile>
      <anchor>a7c2580ed7595eaf10adffe3cc27c32ca</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CoveragePrivateTest</name>
    <filename>classCoveragePrivateTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classCoveragePrivateTest.html</anchorfile>
      <anchor>a3394a8163e3d7662c6bae12fbc716069</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classCoveragePrivateTest.html</anchorfile>
      <anchor>a3394a8163e3d7662c6bae12fbc716069</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CoverageProtectedTest</name>
    <filename>classCoverageProtectedTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classCoverageProtectedTest.html</anchorfile>
      <anchor>a2edf685c4af9f947e9d15dc727b12631</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classCoverageProtectedTest.html</anchorfile>
      <anchor>a2edf685c4af9f947e9d15dc727b12631</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CoveragePublicTest</name>
    <filename>classCoveragePublicTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classCoveragePublicTest.html</anchorfile>
      <anchor>a63360b5d5c189429bcdc8ffe9cae30f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classCoveragePublicTest.html</anchorfile>
      <anchor>a63360b5d5c189429bcdc8ffe9cae30f6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CoverageTwoDefaultClassAnnotations</name>
    <filename>classCoverageTwoDefaultClassAnnotations.html</filename>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classCoverageTwoDefaultClassAnnotations.html</anchorfile>
      <anchor>a77352796d03743736e4e480807d02ad4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classCoverageTwoDefaultClassAnnotations.html</anchorfile>
      <anchor>a77352796d03743736e4e480807d02ad4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CoveredClass</name>
    <filename>classCoveredClass.html</filename>
    <base>CoveredParentClass</base>
    <base>CoveredParentClass</base>
    <member kind="function">
      <type></type>
      <name>publicMethod</name>
      <anchorfile>classCoveredClass.html</anchorfile>
      <anchor>afed601208757c43cd46a0c54c10db161</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>publicMethod</name>
      <anchorfile>classCoveredClass.html</anchorfile>
      <anchor>afed601208757c43cd46a0c54c10db161</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>protectedMethod</name>
      <anchorfile>classCoveredClass.html</anchorfile>
      <anchor>acb23b12f04f8f09dff8fe6d0fc29b729</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>protectedMethod</name>
      <anchorfile>classCoveredClass.html</anchorfile>
      <anchor>acb23b12f04f8f09dff8fe6d0fc29b729</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foo::CoveredClass</name>
    <filename>classFoo_1_1CoveredClass.html</filename>
    <base>Foo::CoveredParentClass</base>
    <base>Foo::CoveredParentClass</base>
    <member kind="function">
      <type></type>
      <name>publicMethod</name>
      <anchorfile>classFoo_1_1CoveredClass.html</anchorfile>
      <anchor>a8682163942c33ffbd258033d49e57b86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>publicMethod</name>
      <anchorfile>classFoo_1_1CoveredClass.html</anchorfile>
      <anchor>a8682163942c33ffbd258033d49e57b86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>protectedMethod</name>
      <anchorfile>classFoo_1_1CoveredClass.html</anchorfile>
      <anchor>acecb83d19eba061f32ce80b96775d8bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>protectedMethod</name>
      <anchorfile>classFoo_1_1CoveredClass.html</anchorfile>
      <anchor>acecb83d19eba061f32ce80b96775d8bb</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CoveredClassWithAnonymousFunctionInStaticMethod</name>
    <filename>classCoveredClassWithAnonymousFunctionInStaticMethod.html</filename>
    <member kind="function" static="yes">
      <type>static</type>
      <name>runAnonymous</name>
      <anchorfile>classCoveredClassWithAnonymousFunctionInStaticMethod.html</anchorfile>
      <anchor>aac76bf57387b0eaa2f2c5d713334ef4a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::CoveredCodeNotExecutedException</name>
    <filename>classPHPUnit_1_1Framework_1_1CoveredCodeNotExecutedException.html</filename>
    <base>PHPUnit::Framework::RiskyTestError</base>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::CodeCoverage::CoveredCodeNotExecutedException</name>
    <filename>classSebastianBergmann_1_1CodeCoverage_1_1CoveredCodeNotExecutedException.html</filename>
    <base>SebastianBergmann::CodeCoverage::RuntimeException</base>
  </compound>
  <compound kind="class">
    <name>CoveredParentClass</name>
    <filename>classCoveredParentClass.html</filename>
    <member kind="function">
      <type></type>
      <name>publicMethod</name>
      <anchorfile>classCoveredParentClass.html</anchorfile>
      <anchor>a09e3deda6075fa8e939fd33bca2d5ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>publicMethod</name>
      <anchorfile>classCoveredParentClass.html</anchorfile>
      <anchor>a09e3deda6075fa8e939fd33bca2d5ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>protectedMethod</name>
      <anchorfile>classCoveredParentClass.html</anchorfile>
      <anchor>ae71a6ce78e220a6d42011772e8d4e3e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>protectedMethod</name>
      <anchorfile>classCoveredParentClass.html</anchorfile>
      <anchor>ae71a6ce78e220a6d42011772e8d4e3e9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foo::CoveredParentClass</name>
    <filename>classFoo_1_1CoveredParentClass.html</filename>
    <member kind="function">
      <type></type>
      <name>publicMethod</name>
      <anchorfile>classFoo_1_1CoveredParentClass.html</anchorfile>
      <anchor>acf0c0952cbd016092b8321ba324af17a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>publicMethod</name>
      <anchorfile>classFoo_1_1CoveredParentClass.html</anchorfile>
      <anchor>acf0c0952cbd016092b8321ba324af17a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>protectedMethod</name>
      <anchorfile>classFoo_1_1CoveredParentClass.html</anchorfile>
      <anchor>a919ec424a7b2a498a18a5eadf9944ada</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>protectedMethod</name>
      <anchorfile>classFoo_1_1CoveredParentClass.html</anchorfile>
      <anchor>a919ec424a7b2a498a18a5eadf9944ada</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocBlock::Tags::Covers</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Covers.html</filename>
    <base>phpDocumentor::Reflection::DocBlock::Tags::BaseTag</base>
    <base>phpDocumentor::Reflection::DocBlock::Tags::Factory::StaticMethod</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Covers.html</anchorfile>
      <anchor>a6ea615d28d668bed3b5aea04ac22f60f</anchor>
      <arglist>(Fqsen $refers, ?Description $description=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getReference</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Covers.html</anchorfile>
      <anchor>a663303749c42b1a223fc2ff800ca4ef8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Covers.html</anchorfile>
      <anchor>aa574425c0c35ceb60952c4951c71a2b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>create</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Covers.html</anchorfile>
      <anchor>a8126d39aeb5095ca127b26d372c27e85</anchor>
      <arglist>(string $body, ?DescriptionFactory $descriptionFactory=null, ?FqsenResolver $resolver=null, ?TypeContext $context=null)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$name</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Covers.html</anchorfile>
      <anchor>a5c7bf2e5ff9525a32a4656d40ee2a6d1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocBlock::Tags::CoversTest</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1CoversTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>tearDown</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1CoversTest.html</anchorfile>
      <anchor>ae2d8a7df974f1991ae063b072465ba37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIfCorrectTagNameIsReturned</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1CoversTest.html</anchorfile>
      <anchor>a7850dbe43d5268d8df8a1c9ad78686f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIfTagCanBeRenderedUsingDefaultFormatter</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1CoversTest.html</anchorfile>
      <anchor>a9410da2e23ef92082403577d8288353e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIfTagCanBeRenderedUsingSpecificFormatter</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1CoversTest.html</anchorfile>
      <anchor>af4b5738c4371ff2e68d18daa95a7b438</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasReferenceToFqsen</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1CoversTest.html</anchorfile>
      <anchor>a541be8c704c847070cacc2ddeeeea2b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasDescription</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1CoversTest.html</anchorfile>
      <anchor>a89b1f74c5cf1754a3eba06ea2cc07ad7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStringRepresentationIsReturned</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1CoversTest.html</anchorfile>
      <anchor>a580e2c9a81d36e25c2ee7a9fdaf78896</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethod</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1CoversTest.html</anchorfile>
      <anchor>aa29045d7e301a78247bde3a4e422ef1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStringRepresentationIsReturnedWithoutDescription</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1CoversTest.html</anchorfile>
      <anchor>aa3d10da35ce8b4e2dd7058b50a3ac6ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStringRepresentationIsReturnedWithDescription</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1CoversTest.html</anchorfile>
      <anchor>a44cdbfcec39cc9e51cfd6efcd9da7033</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodFailsIfBodyIsNotEmpty</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1CoversTest.html</anchorfile>
      <anchor>a187d2646ff4462fb3a0709f2b2c9ba1d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::CodeCoverage::Report::Crap4j</name>
    <filename>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Crap4j.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Crap4j.html</anchorfile>
      <anchor>a557c5c924bcc7ae0e58923257f3f6207</anchor>
      <arglist>(int $threshold=30)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>process</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Crap4j.html</anchorfile>
      <anchor>ab334a9c2b3d3b2f1323a2df838ae62e8</anchor>
      <arglist>(CodeCoverage $coverage, ?string $target=null, ?string $name=null)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::CodeCoverage::Report::Crap4jTest</name>
    <filename>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Crap4jTest.html</filename>
    <base>SebastianBergmann::CodeCoverage::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testForBankAccountTest</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Crap4jTest.html</anchorfile>
      <anchor>ae8ebf5f6c05fb49237be7858e5a9ba55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testForFileWithIgnoredLines</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Crap4jTest.html</anchorfile>
      <anchor>a46c71637e30e5c554858afd7b14ab791</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testForClassWithAnonymousFunction</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Crap4jTest.html</anchorfile>
      <anchor>a17d9c27a25cf628ea65849cb0bf20332</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Symfony::Polyfill::Ctype::Ctype</name>
    <filename>classSymfony_1_1Polyfill_1_1Ctype_1_1Ctype.html</filename>
    <member kind="function" static="yes">
      <type>static</type>
      <name>ctype_alnum</name>
      <anchorfile>classSymfony_1_1Polyfill_1_1Ctype_1_1Ctype.html</anchorfile>
      <anchor>a3334585d9ed5548deb5efc7c8ce5c3bc</anchor>
      <arglist>($text)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>ctype_alpha</name>
      <anchorfile>classSymfony_1_1Polyfill_1_1Ctype_1_1Ctype.html</anchorfile>
      <anchor>a82cdb13a35546ea6a82cd146052814aa</anchor>
      <arglist>($text)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>ctype_cntrl</name>
      <anchorfile>classSymfony_1_1Polyfill_1_1Ctype_1_1Ctype.html</anchorfile>
      <anchor>ab0e5c6312a4aa53259caf0d574e216df</anchor>
      <arglist>($text)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>ctype_digit</name>
      <anchorfile>classSymfony_1_1Polyfill_1_1Ctype_1_1Ctype.html</anchorfile>
      <anchor>a38736271212757af3b497f3247297e8f</anchor>
      <arglist>($text)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>ctype_graph</name>
      <anchorfile>classSymfony_1_1Polyfill_1_1Ctype_1_1Ctype.html</anchorfile>
      <anchor>a785e6637e90612db37527504b009eb41</anchor>
      <arglist>($text)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>ctype_lower</name>
      <anchorfile>classSymfony_1_1Polyfill_1_1Ctype_1_1Ctype.html</anchorfile>
      <anchor>a4675670ae66899c3211842553fe6d6b0</anchor>
      <arglist>($text)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>ctype_print</name>
      <anchorfile>classSymfony_1_1Polyfill_1_1Ctype_1_1Ctype.html</anchorfile>
      <anchor>aac89d387dafeceb8eca049ef15a3a756</anchor>
      <arglist>($text)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>ctype_punct</name>
      <anchorfile>classSymfony_1_1Polyfill_1_1Ctype_1_1Ctype.html</anchorfile>
      <anchor>a1f3c7649a625e9006a989bca726b9e92</anchor>
      <arglist>($text)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>ctype_space</name>
      <anchorfile>classSymfony_1_1Polyfill_1_1Ctype_1_1Ctype.html</anchorfile>
      <anchor>a97508652b8b3371885c8a4eb0259bfdc</anchor>
      <arglist>($text)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>ctype_upper</name>
      <anchorfile>classSymfony_1_1Polyfill_1_1Ctype_1_1Ctype.html</anchorfile>
      <anchor>aaaa934d703d7eeb0205184374c720be5</anchor>
      <arglist>($text)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>ctype_xdigit</name>
      <anchorfile>classSymfony_1_1Polyfill_1_1Ctype_1_1Ctype.html</anchorfile>
      <anchor>a5627da06aa2d638b45d7d030341c15d0</anchor>
      <arglist>($text)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::Assets::CustomParam</name>
    <filename>classphpDocumentor_1_1Reflection_1_1Assets_1_1CustomParam.html</filename>
    <base>phpDocumentor::Reflection::DocBlock::Tag</base>
    <base>phpDocumentor::Reflection::DocBlock::Tags::Factory::StaticMethod</base>
    <member kind="function">
      <type></type>
      <name>getName</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Assets_1_1CustomParam.html</anchorfile>
      <anchor>aedcba940937221d014d2678980653289</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>render</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Assets_1_1CustomParam.html</anchorfile>
      <anchor>a5678f82545f864a58c24f341fc57457b</anchor>
      <arglist>(?Formatter $formatter=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Assets_1_1CustomParam.html</anchorfile>
      <anchor>aa27eef71443f079e28e10060ea2d0c35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>create</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Assets_1_1CustomParam.html</anchorfile>
      <anchor>a7cc6a58c814aba432033223d182214f1</anchor>
      <arglist>($body, FqsenResolver $fqsenResolver=null, ?string $myParam=null)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$myParam</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Assets_1_1CustomParam.html</anchorfile>
      <anchor>a41e810a079cd453c5561d439fe29f069</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$fqsenResolver</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Assets_1_1CustomParam.html</anchorfile>
      <anchor>a7c65649ee0ef285a0a9ca5bf2f398ac6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CustomPrinter</name>
    <filename>classCustomPrinter.html</filename>
    <base>PHPUnit::TextUI::ResultPrinter</base>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::Assets::CustomServiceClass</name>
    <filename>classphpDocumentor_1_1Reflection_1_1Assets_1_1CustomServiceClass.html</filename>
    <base>phpDocumentor::Reflection::DocBlock::Tag</base>
    <base>phpDocumentor::Reflection::DocBlock::Tags::Factory::StaticMethod</base>
    <member kind="function">
      <type></type>
      <name>getName</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Assets_1_1CustomServiceClass.html</anchorfile>
      <anchor>af4b0fd6c6d62c28daa74c65d089845da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>render</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Assets_1_1CustomServiceClass.html</anchorfile>
      <anchor>aa1ee75e4b35d957bace5a3ab86bd8291</anchor>
      <arglist>(?Formatter $formatter=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Assets_1_1CustomServiceClass.html</anchorfile>
      <anchor>a8b6bbb2e2cc2ee465c943eb7712b98ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>create</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Assets_1_1CustomServiceClass.html</anchorfile>
      <anchor>aac07003bf8d58020523f63f8911be72d</anchor>
      <arglist>($body, PassthroughFormatter $formatter=null)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$formatter</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Assets_1_1CustomServiceClass.html</anchorfile>
      <anchor>a4a057a055d7873ea3dbc857913afd370</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::Assets::CustomServiceInterface</name>
    <filename>classphpDocumentor_1_1Reflection_1_1Assets_1_1CustomServiceInterface.html</filename>
    <base>phpDocumentor::Reflection::DocBlock::Tag</base>
    <base>phpDocumentor::Reflection::DocBlock::Tags::Factory::StaticMethod</base>
    <member kind="function">
      <type></type>
      <name>getName</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Assets_1_1CustomServiceInterface.html</anchorfile>
      <anchor>a0dfee75c091c3e6e68cc86e939f5855f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>render</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Assets_1_1CustomServiceInterface.html</anchorfile>
      <anchor>ae9b7d3ddd1a56314b2be785d58836cd7</anchor>
      <arglist>(?Formatter $formatter=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Assets_1_1CustomServiceInterface.html</anchorfile>
      <anchor>a413f3dfd5711f304d3070fc7765c231f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>create</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Assets_1_1CustomServiceInterface.html</anchorfile>
      <anchor>a66dd2b31ded7348519b70749d97d8e6e</anchor>
      <arglist>($body, Formatter $formatter=null)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$formatter</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Assets_1_1CustomServiceInterface.html</anchorfile>
      <anchor>a1b633abc73bb170efa87b1fa47cc8355</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::CodeCoverage::Report::Html::Dashboard</name>
    <filename>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Html_1_1Dashboard.html</filename>
    <base>SebastianBergmann::CodeCoverage::Report::Html::Renderer</base>
    <member kind="function">
      <type></type>
      <name>render</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Html_1_1Dashboard.html</anchorfile>
      <anchor>a35fd9b46e6b3fe19fdc64b420954a231</anchor>
      <arglist>(DirectoryNode $node, string $file)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>complexity</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Html_1_1Dashboard.html</anchorfile>
      <anchor>a4f61b31409e8d2b23711dd092185fe7b</anchor>
      <arglist>(array $classes, string $baseLink)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>coverageDistribution</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Html_1_1Dashboard.html</anchorfile>
      <anchor>ab4e9ca50b837d75034b9ee0334d96b4b</anchor>
      <arglist>(array $classes)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>insufficientCoverage</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Html_1_1Dashboard.html</anchorfile>
      <anchor>a7bee3c007259ab19e4a4f39b1b0b3261</anchor>
      <arglist>(array $classes, string $baseLink)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>projectRisks</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Html_1_1Dashboard.html</anchorfile>
      <anchor>ac2dcc63650fb2e3c527da2ae343d55bc</anchor>
      <arglist>(array $classes, string $baseLink)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>getActiveBreadcrumb</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Html_1_1Dashboard.html</anchorfile>
      <anchor>a2e6dca0435a8ecac06432f48c90c2398</anchor>
      <arglist>(AbstractNode $node)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DataProviderDebugTest</name>
    <filename>classDataProviderDebugTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testProvider</name>
      <anchorfile>classDataProviderDebugTest.html</anchorfile>
      <anchor>a37c50003f39c9f7c27e1519c8fdcaa1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>provider</name>
      <anchorfile>classDataProviderDebugTest.html</anchorfile>
      <anchor>a128122cc220da0756af7d19bd478aa02</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DataProviderDependencyTest</name>
    <filename>classDataProviderDependencyTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testReference</name>
      <anchorfile>classDataProviderDependencyTest.html</anchorfile>
      <anchor>a06361b1c5ab0e0e206707795facd3c54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testDependency</name>
      <anchorfile>classDataProviderDependencyTest.html</anchorfile>
      <anchor>a2f47158ee52b724cd19482b30fbbc740</anchor>
      <arglist>($param)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>provider</name>
      <anchorfile>classDataProviderDependencyTest.html</anchorfile>
      <anchor>a468dd83e404f33450ee7000a38b05633</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DataproviderExecutionOrderTest</name>
    <filename>classDataproviderExecutionOrderTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testFirstTestThatAlwaysWorks</name>
      <anchorfile>classDataproviderExecutionOrderTest.html</anchorfile>
      <anchor>a2c7e41a63c4959c90fd6ca87e224ae31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAddNumbersWithADataprovider</name>
      <anchorfile>classDataproviderExecutionOrderTest.html</anchorfile>
      <anchor>a86aaaafffbf8c15a5de42c80bfc5b895</anchor>
      <arglist>(int $a, int $b, int $sum)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTestInTheMiddleThatAlwaysWorks</name>
      <anchorfile>classDataproviderExecutionOrderTest.html</anchorfile>
      <anchor>a8d4658035c655c47f9c155e72badccc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAddMoreNumbersWithADataprovider</name>
      <anchorfile>classDataproviderExecutionOrderTest.html</anchorfile>
      <anchor>aa0fe5e2f629dfacb49527c8261722302</anchor>
      <arglist>(int $a, int $b, int $sum)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>dataproviderAdditions</name>
      <anchorfile>classDataproviderExecutionOrderTest.html</anchorfile>
      <anchor>a7cb29a52e83061487ad5a10d018baac7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DataProviderFilterTest</name>
    <filename>classDataProviderFilterTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testTrue</name>
      <anchorfile>classDataProviderFilterTest.html</anchorfile>
      <anchor>a509af8da0e1e80a4f8e84ae1c40c4615</anchor>
      <arglist>($truth)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFalse</name>
      <anchorfile>classDataProviderFilterTest.html</anchorfile>
      <anchor>a74d6e0d67430fb1119ae8465645f8867</anchor>
      <arglist>($false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>truthProvider</name>
      <anchorfile>classDataProviderFilterTest.html</anchorfile>
      <anchor>a21b872efe4b5103fa4cca1969f711ee1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>falseProvider</name>
      <anchorfile>classDataProviderFilterTest.html</anchorfile>
      <anchor>a7a76de1d0379dd7703b64beb3c1dba9a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DataProviderIncompleteTest</name>
    <filename>classDataProviderIncompleteTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testIncomplete</name>
      <anchorfile>classDataProviderIncompleteTest.html</anchorfile>
      <anchor>ac9cd7ec147a0b97b8c803e1d3bc0e713</anchor>
      <arglist>($a, $b, $c)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAdd</name>
      <anchorfile>classDataProviderIncompleteTest.html</anchorfile>
      <anchor>a3c7093280b4e1705e2da91813b1d95e2</anchor>
      <arglist>($a, $b, $c)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>incompleteTestProviderMethod</name>
      <anchorfile>classDataProviderIncompleteTest.html</anchorfile>
      <anchor>a6079ca2a827680486d7db90a1d2b2857</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>providerMethod</name>
      <anchorfile>classDataProviderIncompleteTest.html</anchorfile>
      <anchor>a109cf19105a0dc62cdf88b7285ce4f9e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DataProviderSkippedTest</name>
    <filename>classDataProviderSkippedTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testSkipped</name>
      <anchorfile>classDataProviderSkippedTest.html</anchorfile>
      <anchor>afd6a328a9321929b89b4f2595c3df0b6</anchor>
      <arglist>($a, $b, $c)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAdd</name>
      <anchorfile>classDataProviderSkippedTest.html</anchorfile>
      <anchor>abbf2f22eb59118ee378ec722372ebfa7</anchor>
      <arglist>($a, $b, $c)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>skippedTestProviderMethod</name>
      <anchorfile>classDataProviderSkippedTest.html</anchorfile>
      <anchor>ab9156d14ae08b417e560e9fa06fe0df7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>providerMethod</name>
      <anchorfile>classDataProviderSkippedTest.html</anchorfile>
      <anchor>abdafbc3666abc971ca546392449ba10a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DataProviderTest</name>
    <filename>classDataProviderTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testAdd</name>
      <anchorfile>classDataProviderTest.html</anchorfile>
      <anchor>ab0fe18337d39dae0caf2a240066cd273</anchor>
      <arglist>($a, $b, $c)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>providerMethod</name>
      <anchorfile>classDataProviderTest.html</anchorfile>
      <anchor>a12bf1698604ad62736d4027b182fdd05</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::DataProviderTestSuite</name>
    <filename>classPHPUnit_1_1Framework_1_1DataProviderTestSuite.html</filename>
    <base>PHPUnit::Framework::TestSuite</base>
    <member kind="function">
      <type></type>
      <name>setDependencies</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1DataProviderTestSuite.html</anchorfile>
      <anchor>a91115643d333a41d8f8a9f338ed56de6</anchor>
      <arglist>(array $dependencies)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getDependencies</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1DataProviderTestSuite.html</anchorfile>
      <anchor>a171bb34714575369369ec328fb34d642</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>hasDependencies</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1DataProviderTestSuite.html</anchorfile>
      <anchor>aff8de13a04a144e663e49c3936fff97e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getSize</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1DataProviderTestSuite.html</anchorfile>
      <anchor>abbe19865e2f5293a2425aa6c768a25cb</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeepCopy::TypeFilter::Date::DateIntervalFilter</name>
    <filename>classDeepCopy_1_1TypeFilter_1_1Date_1_1DateIntervalFilter.html</filename>
    <base>DeepCopy::TypeFilter::TypeFilter</base>
    <member kind="function">
      <type></type>
      <name>apply</name>
      <anchorfile>classDeepCopy_1_1TypeFilter_1_1Date_1_1DateIntervalFilter.html</anchorfile>
      <anchor>a6ac61449b7c5d76ecf40598d5b50f758</anchor>
      <arglist>($element)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeepCopyTest::TypeFilter::Date::DateIntervalFilterTest</name>
    <filename>classDeepCopyTest_1_1TypeFilter_1_1Date_1_1DateIntervalFilterTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>test_it_deep_copies_a_DateInterval</name>
      <anchorfile>classDeepCopyTest_1_1TypeFilter_1_1Date_1_1DateIntervalFilterTest.html</anchorfile>
      <anchor>a36d7f52f509c03b7f6ba2d17c7bbc3e7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Comparator::DateTimeComparator</name>
    <filename>classSebastianBergmann_1_1Comparator_1_1DateTimeComparator.html</filename>
    <base>SebastianBergmann::Comparator::ObjectComparator</base>
    <member kind="function">
      <type></type>
      <name>accepts</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1DateTimeComparator.html</anchorfile>
      <anchor>acf4cffa6b1113f8fa3c3f10e47588f04</anchor>
      <arglist>($expected, $actual)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Comparator::DateTimeComparatorTest</name>
    <filename>classSebastianBergmann_1_1Comparator_1_1DateTimeComparatorTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>acceptsFailsProvider</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1DateTimeComparatorTest.html</anchorfile>
      <anchor>a8c90877ba9047af86dacf4b9ffda0e50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>assertEqualsSucceedsProvider</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1DateTimeComparatorTest.html</anchorfile>
      <anchor>a77c8e0367d6643dfe6de19073b9a1a46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>assertEqualsFailsProvider</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1DateTimeComparatorTest.html</anchorfile>
      <anchor>a4b0959d1e51b8af581ae770b17dec274</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAcceptsSucceeds</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1DateTimeComparatorTest.html</anchorfile>
      <anchor>a901c3bafaa2b403976d2bec189963f79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAcceptsFails</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1DateTimeComparatorTest.html</anchorfile>
      <anchor>a61489e31bb9ef69b6f8e46160b0cc25c</anchor>
      <arglist>($expected, $actual)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertEqualsSucceeds</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1DateTimeComparatorTest.html</anchorfile>
      <anchor>a1caf83c55fbe71feb14dac54f9dc744a</anchor>
      <arglist>($expected, $actual, $delta=0.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertEqualsFails</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1DateTimeComparatorTest.html</anchorfile>
      <anchor>ad8710fa414ee69daa6c33bcf3a95d71d</anchor>
      <arglist>($expected, $actual, $delta=0.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAcceptsDateTimeInterface</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1DateTimeComparatorTest.html</anchorfile>
      <anchor>a01fa5cd99e66cc348facf7445e7452a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSupportsDateTimeInterface</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1DateTimeComparatorTest.html</anchorfile>
      <anchor>adb1ba6ea4e7db75c7d6299f63f9c64b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1DateTimeComparatorTest.html</anchorfile>
      <anchor>a71d9ae6062a818982311c534f88812dd</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeepCopy::DeepCopy</name>
    <filename>classDeepCopy_1_1DeepCopy.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classDeepCopy_1_1DeepCopy.html</anchorfile>
      <anchor>a1a742aee63314d93ad6b1990eaefc86c</anchor>
      <arglist>($useCloneMethod=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>skipUncloneable</name>
      <anchorfile>classDeepCopy_1_1DeepCopy.html</anchorfile>
      <anchor>a0d71b6a526ffc99212afd37417711441</anchor>
      <arglist>($skipUncloneable=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copy</name>
      <anchorfile>classDeepCopy_1_1DeepCopy.html</anchorfile>
      <anchor>af7e11376bd6b72fd6298e60afbe765f9</anchor>
      <arglist>($object)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addFilter</name>
      <anchorfile>classDeepCopy_1_1DeepCopy.html</anchorfile>
      <anchor>acb92ea5388336719f75704e0995893a9</anchor>
      <arglist>(Filter $filter, Matcher $matcher)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>prependFilter</name>
      <anchorfile>classDeepCopy_1_1DeepCopy.html</anchorfile>
      <anchor>ab0cba6e978656cb2cfa3e7e1bf990361</anchor>
      <arglist>(Filter $filter, Matcher $matcher)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addTypeFilter</name>
      <anchorfile>classDeepCopy_1_1DeepCopy.html</anchorfile>
      <anchor>a391f1f2dee54d8a84fb87d8d1cdf6568</anchor>
      <arglist>(TypeFilter $filter, TypeMatcher $matcher)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeepCopyTest::DeepCopyTest</name>
    <filename>classDeepCopyTest_1_1DeepCopyTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>test_it_can_copy_scalar_values</name>
      <anchorfile>classDeepCopyTest_1_1DeepCopyTest.html</anchorfile>
      <anchor>ab32a704b5984548d6a4db83293eac78f</anchor>
      <arglist>($value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>provideScalarValues</name>
      <anchorfile>classDeepCopyTest_1_1DeepCopyTest.html</anchorfile>
      <anchor>a0f73a3f96c022cff2f089234b2c10237</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>test_it_can_copy_an_array_of_scalar_values</name>
      <anchorfile>classDeepCopyTest_1_1DeepCopyTest.html</anchorfile>
      <anchor>a4da79a9fcafeb0b5cf9a91996721ec61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>test_it_can_copy_an_object</name>
      <anchorfile>classDeepCopyTest_1_1DeepCopyTest.html</anchorfile>
      <anchor>ad5934767e129b8657fb528c02f89b87f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>test_it_can_copy_an_array_of_objects</name>
      <anchorfile>classDeepCopyTest_1_1DeepCopyTest.html</anchorfile>
      <anchor>aeb59c1deea3e3532fa2a507af82b1082</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>test_it_can_copy_an_object_with_scalar_properties</name>
      <anchorfile>classDeepCopyTest_1_1DeepCopyTest.html</anchorfile>
      <anchor>a003aab829274c109e3f886fdd1061888</anchor>
      <arglist>($object, $expectedVal)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>provideObjectWithScalarValues</name>
      <anchorfile>classDeepCopyTest_1_1DeepCopyTest.html</anchorfile>
      <anchor>a3326e8577e9b93756da97962ba65e33b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>test_it_can_copy_an_object_with_an_object_property</name>
      <anchorfile>classDeepCopyTest_1_1DeepCopyTest.html</anchorfile>
      <anchor>ac5e487f54705d8f6497a52dc6d92e83d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>test_it_copies_dynamic_properties</name>
      <anchorfile>classDeepCopyTest_1_1DeepCopyTest.html</anchorfile>
      <anchor>a98ed3a62ae289a40bb1c22a557dc2949</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>test_it_can_copy_an_object_with_a_date_object_property</name>
      <anchorfile>classDeepCopyTest_1_1DeepCopyTest.html</anchorfile>
      <anchor>a1a0b9f115c4083f579d9fe69fb90a3f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>test_it_skips_the_copy_for_userland_datetimezone</name>
      <anchorfile>classDeepCopyTest_1_1DeepCopyTest.html</anchorfile>
      <anchor>a9a38ee964ea60ca2c04661edb9653eb9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>test_it_skips_the_copy_for_userland_dateinterval</name>
      <anchorfile>classDeepCopyTest_1_1DeepCopyTest.html</anchorfile>
      <anchor>ab3ac3a9a7efc2c672d11f96fcc72be8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>test_it_can_copy_graphs_with_circular_references</name>
      <anchorfile>classDeepCopyTest_1_1DeepCopyTest.html</anchorfile>
      <anchor>acd8f46c70d87c3f025d39edf209a936b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>test_it_cannot_copy_unclonable_items</name>
      <anchorfile>classDeepCopyTest_1_1DeepCopyTest.html</anchorfile>
      <anchor>ad0659d73f1de4f2769eb3f60b0ebf279</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>test_it_can_skip_uncloneable_objects</name>
      <anchorfile>classDeepCopyTest_1_1DeepCopyTest.html</anchorfile>
      <anchor>ac981b2575cd8cc412f5406843dd9b344</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>test_it_uses_the_userland_defined_cloned_method</name>
      <anchorfile>classDeepCopyTest_1_1DeepCopyTest.html</anchorfile>
      <anchor>a42f0570035ee12e5535c21d74b4a4f82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>test_it_only_uses_the_userland_defined_cloned_method_when_configured_to_do_so</name>
      <anchorfile>classDeepCopyTest_1_1DeepCopyTest.html</anchorfile>
      <anchor>a0fdf9c6ac53bebf1eb919f0495e1a6ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>test_it_can_deep_copy_an_array_object</name>
      <anchorfile>classDeepCopyTest_1_1DeepCopyTest.html</anchorfile>
      <anchor>a5b7e5004505f25bde620f62e9cd5e575</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>test_it_clones_objects_extending_array_object</name>
      <anchorfile>classDeepCopyTest_1_1DeepCopyTest.html</anchorfile>
      <anchor>a4fa2e9ced218979db9c077385f0b1747</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>test_it_can_prepend_filter</name>
      <anchorfile>classDeepCopyTest_1_1DeepCopyTest.html</anchorfile>
      <anchor>a8c6d2fcca7071a7161bbf7e2afb87422</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>test_it_clones_typed_properties</name>
      <anchorfile>classDeepCopyTest_1_1DeepCopyTest.html</anchorfile>
      <anchor>a2f899497565ed7d86c12bc0c38fff70b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>test_it_ignores_uninitialized_typed_properties</name>
      <anchorfile>classDeepCopyTest_1_1DeepCopyTest.html</anchorfile>
      <anchor>aaec3a233f56514d70780f09c0f3b80f5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Util::PHP::DefaultPhpProcess</name>
    <filename>classPHPUnit_1_1Util_1_1PHP_1_1DefaultPhpProcess.html</filename>
    <base>PHPUnit::Util::PHP::AbstractPhpProcess</base>
    <member kind="function">
      <type></type>
      <name>runJob</name>
      <anchorfile>classPHPUnit_1_1Util_1_1PHP_1_1DefaultPhpProcess.html</anchorfile>
      <anchor>a544a306c9ee7731ef0d058cd8e13ffbd</anchor>
      <arglist>(string $job, array $settings=[])</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>getHandles</name>
      <anchorfile>classPHPUnit_1_1Util_1_1PHP_1_1DefaultPhpProcess.html</anchorfile>
      <anchor>af0389e7436c5afe139a0992baa5cb88b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>runProcess</name>
      <anchorfile>classPHPUnit_1_1Util_1_1PHP_1_1DefaultPhpProcess.html</anchorfile>
      <anchor>a3961eee276bdfb7ae636812807094d22</anchor>
      <arglist>(string $job, array $settings)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>process</name>
      <anchorfile>classPHPUnit_1_1Util_1_1PHP_1_1DefaultPhpProcess.html</anchorfile>
      <anchor>a18a985a9e334925b3df085479b33b179</anchor>
      <arglist>($pipe, string $job)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>cleanup</name>
      <anchorfile>classPHPUnit_1_1Util_1_1PHP_1_1DefaultPhpProcess.html</anchorfile>
      <anchor>a10de9baad2b4544e366c13863193e487</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>useTemporaryFile</name>
      <anchorfile>classPHPUnit_1_1Util_1_1PHP_1_1DefaultPhpProcess.html</anchorfile>
      <anchor>ab45a27ebd233da0b7c38a97128195e5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$tempFile</name>
      <anchorfile>classPHPUnit_1_1Util_1_1PHP_1_1DefaultPhpProcess.html</anchorfile>
      <anchor>a70fd4178547239b7d741b41e5139fee1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Runner::DefaultTestResultCache</name>
    <filename>classPHPUnit_1_1Runner_1_1DefaultTestResultCache.html</filename>
    <base>PHPUnit::Runner::TestResultCache</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1DefaultTestResultCache.html</anchorfile>
      <anchor>a46d43da3a489d5684213cb288c66ed27</anchor>
      <arglist>(?string $filepath=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>persist</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1DefaultTestResultCache.html</anchorfile>
      <anchor>ae44437d25aa890d4b2409168fdf821f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>saveToFile</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1DefaultTestResultCache.html</anchorfile>
      <anchor>a0ddc44510380e706e1ba43c08b2a87b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setState</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1DefaultTestResultCache.html</anchorfile>
      <anchor>a8e15428832c1fd937af2ee3530107d05</anchor>
      <arglist>(string $testName, int $state)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getState</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1DefaultTestResultCache.html</anchorfile>
      <anchor>ab4854d3a9a45005499c2dfc2df3b3179</anchor>
      <arglist>(string $testName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setTime</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1DefaultTestResultCache.html</anchorfile>
      <anchor>acee30f257a3c6d17acf56f205c09d645</anchor>
      <arglist>(string $testName, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getTime</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1DefaultTestResultCache.html</anchorfile>
      <anchor>a4c6fb29c00ef5480fe5d9075e47c08ad</anchor>
      <arglist>(string $testName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>load</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1DefaultTestResultCache.html</anchorfile>
      <anchor>a17901ca700acea86aab883e59b5f7b29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyStateToCache</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1DefaultTestResultCache.html</anchorfile>
      <anchor>adec93a142a2bab64b704cc49f11816b0</anchor>
      <arglist>(self $targetCache)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>clear</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1DefaultTestResultCache.html</anchorfile>
      <anchor>a90180d6ce6a845f561564fb98973bbc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>serialize</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1DefaultTestResultCache.html</anchorfile>
      <anchor>aa9e4fc41a0b5b426269ea48d52a334d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>unserialize</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1DefaultTestResultCache.html</anchorfile>
      <anchor>a4d2485d7de832295b313ac0069f738eb</anchor>
      <arglist>($serialized)</arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>DEFAULT_RESULT_CACHE_FILENAME</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1DefaultTestResultCache.html</anchorfile>
      <anchor>ab2c6cfd2d13aab4172580aa254733f30</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Runner::DefaultTestResultCacheTest</name>
    <filename>classPHPUnit_1_1Runner_1_1DefaultTestResultCacheTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testGetTimeForNonExistentTestNameReturnsFloatZero</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1DefaultTestResultCacheTest.html</anchorfile>
      <anchor>a676a20bc0ffad2653c065e3cee6b1982</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1DefaultTestResultCacheTest.html</anchorfile>
      <anchor>af797323d8c148cf6597c70ddadcf6261</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DependencyFailureTest</name>
    <filename>classDependencyFailureTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testOne</name>
      <anchorfile>classDependencyFailureTest.html</anchorfile>
      <anchor>a4a0222ea7f3750955a508cefe2d53a26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTwo</name>
      <anchorfile>classDependencyFailureTest.html</anchorfile>
      <anchor>a1bb6f9e987bc6458a3d824cfd5ec06a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testThree</name>
      <anchorfile>classDependencyFailureTest.html</anchorfile>
      <anchor>a1727e58bfe85352ba1e9248f2930c48a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFour</name>
      <anchorfile>classDependencyFailureTest.html</anchorfile>
      <anchor>aee419cbfb212ed6c290d1a96493ff7e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHandlesDependsAnnotationForNonexistentTests</name>
      <anchorfile>classDependencyFailureTest.html</anchorfile>
      <anchor>ac3c66810ce33650955769c2a7b07e66b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHandlesDependsAnnotationWithNoMethodSpecified</name>
      <anchorfile>classDependencyFailureTest.html</anchorfile>
      <anchor>a7b513a1ded44b6a0d4aea0cd1609b0fb</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DependencySuccessTest</name>
    <filename>classDependencySuccessTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testOne</name>
      <anchorfile>classDependencySuccessTest.html</anchorfile>
      <anchor>a8d39c7bf57eaffd13a3d7e0cb5641ae2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTwo</name>
      <anchorfile>classDependencySuccessTest.html</anchorfile>
      <anchor>aa9cbafe786688a2db03e83780cb9f0f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testThree</name>
      <anchorfile>classDependencySuccessTest.html</anchorfile>
      <anchor>a56ce2908c05d08d425471e3090a0403e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DependencyTestSuite</name>
    <filename>classDependencyTestSuite.html</filename>
    <member kind="function" static="yes">
      <type>static</type>
      <name>suite</name>
      <anchorfile>classDependencyTestSuite.html</anchorfile>
      <anchor>acd0d4aa8d87f67a26f9d1eeb83ee9e0f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocBlock::Tags::Deprecated</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Deprecated.html</filename>
    <base>phpDocumentor::Reflection::DocBlock::Tags::BaseTag</base>
    <base>phpDocumentor::Reflection::DocBlock::Tags::Factory::StaticMethod</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Deprecated.html</anchorfile>
      <anchor>a973d91a54321a6639bf14d9c1fa23fbe</anchor>
      <arglist>(?string $version=null, ?Description $description=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getVersion</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Deprecated.html</anchorfile>
      <anchor>a4c4efb1f06e88b3116931663674fc6c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Deprecated.html</anchorfile>
      <anchor>ad700b2ef56ace294e6ce1462920545aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>create</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Deprecated.html</anchorfile>
      <anchor>af6337cf7309fa88dc2a06003afd5f70a</anchor>
      <arglist>(?string $body, ?DescriptionFactory $descriptionFactory=null, ?TypeContext $context=null)</arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>REGEX_VECTOR</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Deprecated.html</anchorfile>
      <anchor>aa9282bc985a6bf5fb120522ff38cdfcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$name</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Deprecated.html</anchorfile>
      <anchor>a96f6dbc16d856ca8d10292847650e9df</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Error::Deprecated</name>
    <filename>classPHPUnit_1_1Framework_1_1Error_1_1Deprecated.html</filename>
    <base>PHPUnit::Framework::Error::Error</base>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocBlock::Tags::DeprecatedTest</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1DeprecatedTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>tearDown</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1DeprecatedTest.html</anchorfile>
      <anchor>aa40905673dad2dfc3ddf3c0f84c91f88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIfCorrectTagNameIsReturned</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1DeprecatedTest.html</anchorfile>
      <anchor>a704767e6ce2adad770a5d4253253b6ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIfTagCanBeRenderedUsingDefaultFormatter</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1DeprecatedTest.html</anchorfile>
      <anchor>a0e56093381d1e56268401334f1eb09c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIfTagCanBeRenderedUsingSpecificFormatter</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1DeprecatedTest.html</anchorfile>
      <anchor>a0ea91d256a60ca069ce9fa855af78fa0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasVersionNumber</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1DeprecatedTest.html</anchorfile>
      <anchor>a4428fad5d5e775959c62e9e8eb1b2ba6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasDescription</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1DeprecatedTest.html</anchorfile>
      <anchor>a52c5d6fe9b9bb75dda780416231497c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStringRepresentationIsReturned</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1DeprecatedTest.html</anchorfile>
      <anchor>ae168b73028815da0934f98457a2bdc27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStringRepresentationIsReturnedWithoutDescription</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1DeprecatedTest.html</anchorfile>
      <anchor>ae30dd137f4a071e24ada4892be8a4fb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethod</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1DeprecatedTest.html</anchorfile>
      <anchor>aa3e32a92ff8e1bb1bade8a33873cde26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodCreatesEmptyDeprecatedTag</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1DeprecatedTest.html</anchorfile>
      <anchor>acdd446882ee74036a9c35d12ffbb3a06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodReturnsNullIfBodyDoesNotMatchRegex</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1DeprecatedTest.html</anchorfile>
      <anchor>a3e7c853dd284739dc2c04ad7379fe026</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocBlock::Description</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Description.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Description.html</anchorfile>
      <anchor>a6b95400d01fbbceb0b4b4f38d31e9199</anchor>
      <arglist>(string $bodyTemplate, array $tags=[])</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getBodyTemplate</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Description.html</anchorfile>
      <anchor>aac0f15fad3f83b97a91ba902fd1a2a29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getTags</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Description.html</anchorfile>
      <anchor>a7bb5267db6ccef7e4bc6435ebb045a93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>render</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Description.html</anchorfile>
      <anchor>a8476129c09a8a93de80d3232ecea1803</anchor>
      <arglist>(?Formatter $formatter=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Description.html</anchorfile>
      <anchor>a11f8e79d87544229d4c5887342faea6d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocBlock::DescriptionFactory</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1DescriptionFactory.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1DescriptionFactory.html</anchorfile>
      <anchor>a37bc88ff5c10ca47b56309b4e277124a</anchor>
      <arglist>(TagFactory $tagFactory)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>create</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1DescriptionFactory.html</anchorfile>
      <anchor>aad151c46ef0029ac598cc10d3b1f42e5</anchor>
      <arglist>(string $contents, ?TypeContext $context=null)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocBlock::DescriptionFactoryTest</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1DescriptionFactoryTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>tearDown</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1DescriptionFactoryTest.html</anchorfile>
      <anchor>ab636f3a1735e3d4114982178557faba9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testDescriptionCanParseASimpleString</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1DescriptionFactoryTest.html</anchorfile>
      <anchor>a59daa45dc155efee4661f39aa8b951b0</anchor>
      <arglist>(string $contents)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testEscapeSequences</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1DescriptionFactoryTest.html</anchorfile>
      <anchor>accf46a09d18cde7a0ec447c214f94e22</anchor>
      <arglist>(string $contents, string $expected)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testDescriptionCanParseAStringWithInlineTag</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1DescriptionFactoryTest.html</anchorfile>
      <anchor>afffc423985f06d01cf2870b2f4a10381</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testDescriptionCanParseAStringStartingWithInlineTag</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1DescriptionFactoryTest.html</anchorfile>
      <anchor>a8b1dde1e15f3d94843b09c3a9bb48131</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testDescriptionCanParseAStringContainingMultipleTags</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1DescriptionFactoryTest.html</anchorfile>
      <anchor>a785fb10ff0a8546f98498ea26563ecc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIfSuperfluousStartingSpacesAreRemoved</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1DescriptionFactoryTest.html</anchorfile>
      <anchor>aadad3c1c06fc9fec1acd23198fb83390</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testDescriptionWithBrokenInlineTags</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1DescriptionFactoryTest.html</anchorfile>
      <anchor>adda5bc9a290645d9680f07afd0a30d84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>provideSimpleExampleDescriptions</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1DescriptionFactoryTest.html</anchorfile>
      <anchor>af0b2b010229df6f68ee68f6b64000552</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>provideEscapeSequences</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1DescriptionFactoryTest.html</anchorfile>
      <anchor>a0dad4b67ef6c5eef0fa061cd92b629a5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocBlock::DescriptionTest</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1DescriptionTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>tearDown</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1DescriptionTest.html</anchorfile>
      <anchor>a49649a21d6304b1f8d7d4444f599f070</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testDescriptionCanRenderUsingABodyWithPlaceholdersAndTags</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1DescriptionTest.html</anchorfile>
      <anchor>a074d8726be67704e56234e634715d729</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testDescriptionCanBeCastToString</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1DescriptionTest.html</anchorfile>
      <anchor>a25cacb661b5dbcd03f6d63bd3a479673</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testDescriptionTagsGetter</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1DescriptionTest.html</anchorfile>
      <anchor>ab84e43487ed72c84af40063021ce5e0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testDescriptionBodyTemplateGetter</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1DescriptionTest.html</anchorfile>
      <anchor>ab3c90c599aa3d28b160d7b8036804b13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testDescriptionMultipleTagsCanBeCastToString</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1DescriptionTest.html</anchorfile>
      <anchor>a55804e6f68f397ab0d9ed85fa9c44deb</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Diff::Diff</name>
    <filename>classSebastianBergmann_1_1Diff_1_1Diff.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Diff.html</anchorfile>
      <anchor>acacb1ce742dee66b96013c7a90875778</anchor>
      <arglist>(string $from, string $to, array $chunks=[])</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getFrom</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Diff.html</anchorfile>
      <anchor>a59efe599b73cba7c005710e1e1a025d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getTo</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Diff.html</anchorfile>
      <anchor>a3577452d0fe9da5b8cd20b7058c6369f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getChunks</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Diff.html</anchorfile>
      <anchor>ac8cb8097e433bd818cb6971e330dcb5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setChunks</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Diff.html</anchorfile>
      <anchor>a0ab8e892f69ba188c9659bdb31c06c31</anchor>
      <arglist>(array $chunks)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Diff::Differ</name>
    <filename>classSebastianBergmann_1_1Diff_1_1Differ.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Differ.html</anchorfile>
      <anchor>a50715df72453076791a75da1d03e2ff8</anchor>
      <arglist>($outputBuilder=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>diff</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Differ.html</anchorfile>
      <anchor>ab217d7e0f922b2cf8c08f3f2e0588c09</anchor>
      <arglist>($from, $to, LongestCommonSubsequenceCalculator $lcs=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>diffToArray</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Differ.html</anchorfile>
      <anchor>a2b5adfa6489f779d568615c724afb655</anchor>
      <arglist>($from, $to, LongestCommonSubsequenceCalculator $lcs=null)</arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>OLD</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Differ.html</anchorfile>
      <anchor>af27992fea4243f945b9066511e7f99d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>ADDED</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Differ.html</anchorfile>
      <anchor>a6698151918f0ae3967c437cc2ce4b9f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>REMOVED</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Differ.html</anchorfile>
      <anchor>a88acaae469e6761b03aa5189d4e5a0f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>DIFF_LINE_END_WARNING</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Differ.html</anchorfile>
      <anchor>a98a21bde40e3c8488de44a9733dc81bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>NO_LINE_END_EOF_WARNING</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Differ.html</anchorfile>
      <anchor>afe8597a133bfffbc4752cf840f5c9b17</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Diff::DifferTest</name>
    <filename>classSebastianBergmann_1_1Diff_1_1DifferTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testArrayRepresentationOfDiffCanBeRenderedUsingTimeEfficientLcsImplementation</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1DifferTest.html</anchorfile>
      <anchor>abe9e48c0028574e282b1dd523e01a85c</anchor>
      <arglist>(array $expected, $from, $to)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTextRepresentationOfDiffCanBeRenderedUsingTimeEfficientLcsImplementation</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1DifferTest.html</anchorfile>
      <anchor>ab476d56289ef93315edb9fc749a33262</anchor>
      <arglist>(string $expected, string $from, string $to)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testArrayRepresentationOfDiffCanBeRenderedUsingMemoryEfficientLcsImplementation</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1DifferTest.html</anchorfile>
      <anchor>af37df5988dd232b875ee303382652c07</anchor>
      <arglist>(array $expected, $from, $to)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTextRepresentationOfDiffCanBeRenderedUsingMemoryEfficientLcsImplementation</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1DifferTest.html</anchorfile>
      <anchor>abadd9c5fb06211581637cf7356dbfb62</anchor>
      <arglist>(string $expected, string $from, string $to)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTypesOtherThanArrayAndStringCanBePassed</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1DifferTest.html</anchorfile>
      <anchor>a7da6ede98948dec2c9f904d5173d74ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testArrayDiffs</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1DifferTest.html</anchorfile>
      <anchor>affcbec32b9d9265af54efede446e89c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>arrayProvider</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1DifferTest.html</anchorfile>
      <anchor>a2ff1dfb69f6f9f84d8ca9f3d24541096</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>textProvider</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1DifferTest.html</anchorfile>
      <anchor>a1710007e399ff880c191dbab5efad042</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testDiffToArrayInvalidFromType</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1DifferTest.html</anchorfile>
      <anchor>a10d6edf4b15d86ecd61208d4b27b09a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testDiffInvalidToType</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1DifferTest.html</anchorfile>
      <anchor>af9168b65e8c9bf0eea556d7509e6b00a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSplitStringByLines</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1DifferTest.html</anchorfile>
      <anchor>a27fc33ee916041f0873eaee153e73e76</anchor>
      <arglist>(array $expected, string $input)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>provideSplitStringByLinesCases</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1DifferTest.html</anchorfile>
      <anchor>a243bf75a9c8bf62a4f1b3504ffddde82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstructorInvalidArgInt</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1DifferTest.html</anchorfile>
      <anchor>a0f78ff6a18229f943a1504988dbf2b12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstructorInvalidArgObject</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1DifferTest.html</anchorfile>
      <anchor>a5511d0c5438798e6a2c8bf18a9d548fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1DifferTest.html</anchorfile>
      <anchor>a5ac66b91a4a3aca824bf528aa370cb46</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Diff::Output::DiffOnlyOutputBuilder</name>
    <filename>classSebastianBergmann_1_1Diff_1_1Output_1_1DiffOnlyOutputBuilder.html</filename>
    <base>SebastianBergmann::Diff::Output::DiffOutputBuilderInterface</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Output_1_1DiffOnlyOutputBuilder.html</anchorfile>
      <anchor>a28b8913a1c9fd7dceb26f0337b40ee4b</anchor>
      <arglist>(string $header=&quot;--- Original\n+++ New\n&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getDiff</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Output_1_1DiffOnlyOutputBuilder.html</anchorfile>
      <anchor>a20eb9ce0577378f72daa1153ab3c6e9f</anchor>
      <arglist>(array $diff)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Diff::Output::DiffOnlyOutputBuilderTest</name>
    <filename>classSebastianBergmann_1_1Diff_1_1Output_1_1DiffOnlyOutputBuilderTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testDiffDoNotShowNonDiffLines</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Output_1_1DiffOnlyOutputBuilderTest.html</anchorfile>
      <anchor>a2ceb76e68a4bf2b4057a6a9e1402ab52</anchor>
      <arglist>(string $expected, string $from, string $to, string $header=&apos;&apos;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>textForNoNonDiffLinesProvider</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Output_1_1DiffOnlyOutputBuilderTest.html</anchorfile>
      <anchor>a83427a2ac572fb779bf11985b1c438bf</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>SebastianBergmann::Diff::Output::DiffOutputBuilderInterface</name>
    <filename>interfaceSebastianBergmann_1_1Diff_1_1Output_1_1DiffOutputBuilderInterface.html</filename>
    <member kind="function">
      <type></type>
      <name>getDiff</name>
      <anchorfile>interfaceSebastianBergmann_1_1Diff_1_1Output_1_1DiffOutputBuilderInterface.html</anchorfile>
      <anchor>a3519e6e233e78bc24e9c32aea8ff0b00</anchor>
      <arglist>(array $diff)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Diff::DiffTest</name>
    <filename>classSebastianBergmann_1_1Diff_1_1DiffTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testGettersAfterConstructionWithDefault</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1DiffTest.html</anchorfile>
      <anchor>a840e7082a4ff3840839d9a324aa99330</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGettersAfterConstructionWithChunks</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1DiffTest.html</anchorfile>
      <anchor>aa8db19014b1d4187c13b46f71cb7df96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSetChunksAfterConstruction</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1DiffTest.html</anchorfile>
      <anchor>ae190fec011c158e1cbe247cacd1319fc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::CodeCoverage::Node::Directory</name>
    <filename>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1Directory.html</filename>
    <base>SebastianBergmann::CodeCoverage::Node::AbstractNode</base>
    <member kind="function">
      <type></type>
      <name>count</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1Directory.html</anchorfile>
      <anchor>a7dde449d2bbf52a83bcd43c78b16a798</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getIterator</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1Directory.html</anchorfile>
      <anchor>a1362653605fb0eb83357f9fbd9e50c7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addDirectory</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1Directory.html</anchorfile>
      <anchor>a0bf6d2e88f4ca2ca082b72b51612d971</anchor>
      <arglist>(string $name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addFile</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1Directory.html</anchorfile>
      <anchor>afba1fcbf5ad5271402a00d16166adaa3</anchor>
      <arglist>(string $name, array $coverageData, array $testData, bool $cacheTokens)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getDirectories</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1Directory.html</anchorfile>
      <anchor>a8a97b76c1ea658dc2cbdd91ddd22adea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getFiles</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1Directory.html</anchorfile>
      <anchor>ab05ba18abc601cc3372bb61a68bfc92d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getChildNodes</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1Directory.html</anchorfile>
      <anchor>a2531a7e1f266b286f06e1c2cbb5ee338</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getClasses</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1Directory.html</anchorfile>
      <anchor>ac1b74919204c0c39486bdb618f891f02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getTraits</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1Directory.html</anchorfile>
      <anchor>adb4305ece60d60e5032acd2f297e8afb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getFunctions</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1Directory.html</anchorfile>
      <anchor>ad828c672e4478d33509356d90943f4ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getLinesOfCode</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1Directory.html</anchorfile>
      <anchor>a311146c4d9261d31e246b828481dd297</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getNumExecutableLines</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1Directory.html</anchorfile>
      <anchor>a3d0871536f384cfb5f0a7ed7bdbed140</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getNumExecutedLines</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1Directory.html</anchorfile>
      <anchor>aa361e35df6dc24f51bdcc88e9cb46eb0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getNumClasses</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1Directory.html</anchorfile>
      <anchor>a9a8c320a2bfca6c9d9aec5cc96441132</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getNumTestedClasses</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1Directory.html</anchorfile>
      <anchor>a8b54ef06b6cc9c821b9ce31ae6ede0d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getNumTraits</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1Directory.html</anchorfile>
      <anchor>a3ffe7df1b50ce9a2380d71f694f707c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getNumTestedTraits</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1Directory.html</anchorfile>
      <anchor>a7c3b4b8fe1ebb37bd810ded5fad4a2a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getNumMethods</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1Directory.html</anchorfile>
      <anchor>a466e0e3ca76ce06ecb5307091f42cb0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getNumTestedMethods</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1Directory.html</anchorfile>
      <anchor>a49b4bf478b16456f10b4daed8413f8b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getNumFunctions</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1Directory.html</anchorfile>
      <anchor>a9de68c0849b6e56f1e355777134201d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getNumTestedFunctions</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1Directory.html</anchorfile>
      <anchor>af1601a61b8df28126ab9b6fa6000e2cc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::CodeCoverage::Report::Html::Directory</name>
    <filename>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Html_1_1Directory.html</filename>
    <base>SebastianBergmann::CodeCoverage::Report::Html::Renderer</base>
    <member kind="function">
      <type></type>
      <name>render</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Html_1_1Directory.html</anchorfile>
      <anchor>aa06222350cb9ecf3a91ff61cfa306972</anchor>
      <arglist>(DirectoryNode $node, string $file)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>renderItem</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Html_1_1Directory.html</anchorfile>
      <anchor>a54cba668f34038ef642c6c9f7682343f</anchor>
      <arglist>(Node $node, bool $total=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::CodeCoverage::Report::Xml::Directory</name>
    <filename>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1Directory.html</filename>
    <base>SebastianBergmann::CodeCoverage::Report::Xml::Node</base>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::DirectoryExists</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1DirectoryExists.html</filename>
    <base>PHPUnit::Framework::Constraint::Constraint</base>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1DirectoryExists.html</anchorfile>
      <anchor>a0cd3b3007edef08dcf351856e9ac3fbf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>matches</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1DirectoryExists.html</anchorfile>
      <anchor>a27c7cb1fc7820ab4e37d1a7c860d9bea</anchor>
      <arglist>($other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>failureDescription</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1DirectoryExists.html</anchorfile>
      <anchor>a290dba4ef41e24b1864d0d7e30df053e</anchor>
      <arglist>($other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::DirectoryExistsTest</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1DirectoryExistsTest.html</filename>
    <base>PHPUnit::Framework::Constraint::ConstraintTestCase</base>
    <member kind="function">
      <type></type>
      <name>testDefaults</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1DirectoryExistsTest.html</anchorfile>
      <anchor>a82bd6d33aa44a1457dd2f02d1007f397</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testEvaluateReturnsFalseWhenDirectoryDoesNotExist</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1DirectoryExistsTest.html</anchorfile>
      <anchor>abe046a4dca266a859cdd9807a0f31eaa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testEvaluateReturnsTrueWhenDirectoryExists</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1DirectoryExistsTest.html</anchorfile>
      <anchor>a9b93d94b98c8fc11a9df0c12a2ac4d21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testEvaluateThrowsExpectationFailedExceptionWhenDirectoryDoesNotExist</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1DirectoryExistsTest.html</anchorfile>
      <anchor>a3f108b66160f06dbafeeb8bdde8efa6f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Doubler::ClassPatch::DisableConstructorPatch</name>
    <filename>classProphecy_1_1Doubler_1_1ClassPatch_1_1DisableConstructorPatch.html</filename>
    <base>Prophecy::Doubler::ClassPatch::ClassPatchInterface</base>
    <member kind="function">
      <type></type>
      <name>supports</name>
      <anchorfile>classProphecy_1_1Doubler_1_1ClassPatch_1_1DisableConstructorPatch.html</anchorfile>
      <anchor>a2889c5879ead4d744eec0aa085c8231f</anchor>
      <arglist>(ClassNode $node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>apply</name>
      <anchorfile>classProphecy_1_1Doubler_1_1ClassPatch_1_1DisableConstructorPatch.html</anchorfile>
      <anchor>a52fbaa29e0b24098cc102b9b666ca8a6</anchor>
      <arglist>(ClassNode $node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getPriority</name>
      <anchorfile>classProphecy_1_1Doubler_1_1ClassPatch_1_1DisableConstructorPatch.html</anchorfile>
      <anchor>ac53368f9e336759eed1e9d36fb1747fb</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocBlock</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocBlock.html</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlock::DescriptionFactoryTest</class>
    <class kind="class">phpDocumentor::Reflection::DocBlock::DescriptionTest</class>
    <class kind="class">phpDocumentor::Reflection::DocBlock::ExampleFinderTest</class>
    <class kind="class">phpDocumentor::Reflection::DocBlock::SerializerTest</class>
    <class kind="class">phpDocumentor::Reflection::DocBlock::StandardTagFactoryTest</class>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock.html</anchorfile>
      <anchor>a11895a679d8e5d8b33c22e4065038072</anchor>
      <arglist>(string $summary=&apos;&apos;, ?DocBlock\Description $description=null, array $tags=[], ?Types\Context $context=null, ?Location $location=null, bool $isTemplateStart=false, bool $isTemplateEnd=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getSummary</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock.html</anchorfile>
      <anchor>a17a7c2d459eb7629d9c11d77d7e5e526</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getDescription</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock.html</anchorfile>
      <anchor>a8218b226187b822749748acb26abb00e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getContext</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock.html</anchorfile>
      <anchor>aba570709e51945bc6ca8f50a5fed760c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getLocation</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock.html</anchorfile>
      <anchor>a2adb7fc4115e8c1378cffd6fe020aade</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isTemplateStart</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock.html</anchorfile>
      <anchor>a37b5b99c71ffa3fcf81c189344cba5b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isTemplateEnd</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock.html</anchorfile>
      <anchor>af500fa2be1d5e726cb6e86aa13a1fe66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getTags</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock.html</anchorfile>
      <anchor>ad71a251f3048d47528840cc3fce17ee3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getTagsByName</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock.html</anchorfile>
      <anchor>a6278d74665df32bbf3951b28da0b87ef</anchor>
      <arglist>(string $name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>hasTag</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock.html</anchorfile>
      <anchor>a05cf66348c2ecc801f77a09749fdb623</anchor>
      <arglist>(string $name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>removeTag</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock.html</anchorfile>
      <anchor>a3bee9431260c6468cb85b8e831f9e16d</anchor>
      <arglist>(Tag $tagToRemove)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Util::Annotation::DocBlock</name>
    <filename>classPHPUnit_1_1Util_1_1Annotation_1_1DocBlock.html</filename>
    <member kind="function">
      <type></type>
      <name>requirements</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Annotation_1_1DocBlock.html</anchorfile>
      <anchor>a8caf1eb65671272c36dc1c837b83a419</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>expectedException</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Annotation_1_1DocBlock.html</anchorfile>
      <anchor>a0375abb0780209b90f24a89e0074bfcc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getProvidedData</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Annotation_1_1DocBlock.html</anchorfile>
      <anchor>a6a8d4e64b3771710bb92a7400c75eaed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getInlineAnnotations</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Annotation_1_1DocBlock.html</anchorfile>
      <anchor>aaeb6a53d22a5abd22efb5ec1c5101a4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>symbolAnnotations</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Annotation_1_1DocBlock.html</anchorfile>
      <anchor>a21d22d55d73651ae8f3d247bf6a60438</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isHookToBeExecutedBeforeClass</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Annotation_1_1DocBlock.html</anchorfile>
      <anchor>a3468bc1f9688e4b047a4711e353a5d34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isHookToBeExecutedAfterClass</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Annotation_1_1DocBlock.html</anchorfile>
      <anchor>a468a4bc0df049dd5783d55bfa20b267e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isToBeExecutedBeforeTest</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Annotation_1_1DocBlock.html</anchorfile>
      <anchor>a3115fa068245fb42df4c31c98a8056c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isToBeExecutedAfterTest</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Annotation_1_1DocBlock.html</anchorfile>
      <anchor>aa7bf4e8912e8011e5c535f76aed997cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>ofClass</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Annotation_1_1DocBlock.html</anchorfile>
      <anchor>a351ab1e2e99f1d643500a7e27b7a39cb</anchor>
      <arglist>(\ReflectionClass $class)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>ofMethod</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Annotation_1_1DocBlock.html</anchorfile>
      <anchor>af3bcdbdb3459ca8c9d520fdbb171ceae</anchor>
      <arglist>(\ReflectionMethod $method, string $classNameInHierarchy)</arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>REGEX_DATA_PROVIDER</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Annotation_1_1DocBlock.html</anchorfile>
      <anchor>a0023aa84eeb3f8a0d010f858e4bf9173</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocBlockFactory</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocBlockFactory.html</filename>
    <base>phpDocumentor::Reflection::DocBlockFactoryInterface</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlockFactory.html</anchorfile>
      <anchor>a1e2861fee418fa9c6b6524a0881e03fb</anchor>
      <arglist>(DescriptionFactory $descriptionFactory, TagFactory $tagFactory)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>create</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlockFactory.html</anchorfile>
      <anchor>a8134ed4a00589ade1883c36764d5b892</anchor>
      <arglist>($docblock, ?Types\Context $context=null, ?Location $location=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>registerTagHandler</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlockFactory.html</anchorfile>
      <anchor>a0b0ff50259e04d64542592066c4b7e9a</anchor>
      <arglist>(string $tagName, string $handler)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>createInstance</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlockFactory.html</anchorfile>
      <anchor>a2200f2d8d8684feb2256caab648451f5</anchor>
      <arglist>(array $additionalTags=[])</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>phpDocumentor::Reflection::DocBlockFactoryInterface</name>
    <filename>interfacephpDocumentor_1_1Reflection_1_1DocBlockFactoryInterface.html</filename>
    <member kind="function">
      <type></type>
      <name>create</name>
      <anchorfile>interfacephpDocumentor_1_1Reflection_1_1DocBlockFactoryInterface.html</anchorfile>
      <anchor>af6eb38f0d9c6ee3fdaf9572e97c57ec3</anchor>
      <arglist>($docblock, ?Types\Context $context=null, ?Location $location=null)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>createInstance</name>
      <anchorfile>interfacephpDocumentor_1_1Reflection_1_1DocBlockFactoryInterface.html</anchorfile>
      <anchor>a7d78f45a9abe6a019ab6de9500b8637d</anchor>
      <arglist>(array $additionalTags=[])</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocBlockFactoryTest</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocBlockFactoryTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>tearDown</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlockFactoryTest.html</anchorfile>
      <anchor>a30a3ccaf7291d9b7368ffdb9479c614b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCreateFactoryUsingFactoryMethod</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlockFactoryTest.html</anchorfile>
      <anchor>a117456a2609228d162d4ddb3d1c2b461</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCreateDocBlockFromReflection</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlockFactoryTest.html</anchorfile>
      <anchor>a6a733621aa4e84a5a949178badbd5338</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCreateDocBlockFromStringWithDocComment</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlockFactoryTest.html</anchorfile>
      <anchor>a68a796e2fbd364c7c4adc0f6ac58ccaa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCreateDocBlockFromStringWithoutDocComment</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlockFactoryTest.html</anchorfile>
      <anchor>aec5832bfe43fe3048b2efdd357d57707</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSummaryAndDescriptionAreSeparated</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlockFactoryTest.html</anchorfile>
      <anchor>a6dfcac55d58675894b00ad20f5ffa369</anchor>
      <arglist>(string $given, string $summary, string $description)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testDescriptionsRetainFormatting</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlockFactoryTest.html</anchorfile>
      <anchor>a67189d771f47301df03936c08249bfa1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTagsAreInterpretedUsingFactory</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlockFactoryTest.html</anchorfile>
      <anchor>a269f03a9897117ed7bc48091ed07ad8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>provideSummaryAndDescriptions</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlockFactoryTest.html</anchorfile>
      <anchor>a2d7d39cbad60a2e3035d151b76a913a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTagsWithContextNamespace</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlockFactoryTest.html</anchorfile>
      <anchor>a746bcd3b4dee9126772d9fbf46ddb131</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocblockSeeTagResolvingTest</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocblockSeeTagResolvingTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocblocksWithAnnotationsTest</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocblocksWithAnnotationsTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>tearDown</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocblocksWithAnnotationsTest.html</anchorfile>
      <anchor>a34b9b8945f3874750251a025dc3942cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testDocblockWithAnnotations</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocblocksWithAnnotationsTest.html</anchorfile>
      <anchor>a1bcf0a496e273cc2e363c14b56fc4a2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testDocblockWithAnnotationHavingZeroValue</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocblocksWithAnnotationsTest.html</anchorfile>
      <anchor>acd4eec4d432a0adfe0c0b8d63131ac44</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocBlockTest</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocBlockTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>tearDown</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlockTest.html</anchorfile>
      <anchor>aeb10ccb084c807e8785905df6134f608</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testDocBlockCanHaveASummary</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlockTest.html</anchorfile>
      <anchor>aa1f78630356d74570ed656b41e054383</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testDocBlockCanHaveEllipsisInSummary</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlockTest.html</anchorfile>
      <anchor>a9a8c6ad2caee2e6a393f705ca2a56333</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testDocBlockCanHaveADescription</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlockTest.html</anchorfile>
      <anchor>aedd854297c84029e938f6b3780b1c008</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testDocBlockCanHaveTags</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlockTest.html</anchorfile>
      <anchor>a9e58b103b8e1185083549f2c7780add1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testDocBlockAllowsOnlyTags</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlockTest.html</anchorfile>
      <anchor>a84f714b75e2e3f37faf4dd4a9a3f5dd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFindTagsInDocBlockByName</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlockTest.html</anchorfile>
      <anchor>a3792e1aeb0794d802e6a1b944c2f9872</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCheckIfThereAreTagsWithAGivenName</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlockTest.html</anchorfile>
      <anchor>abb121dd03eb74f7640748928264ef2f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testDocBlockKnowsInWhichNamespaceItIsAndWhichAliasesThereAre</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlockTest.html</anchorfile>
      <anchor>abad6dff64fa94ac9af58a3053974aa16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testDocBlockKnowsAtWhichLineItIs</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlockTest.html</anchorfile>
      <anchor>ac1e562ce62ccb0a0555aedec5fe4dc49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testDocBlockIsNotATemplateByDefault</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlockTest.html</anchorfile>
      <anchor>a2d389bf7c267eea80cbcf201b58c7d42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testDocBlockKnowsIfItIsTheStartOfADocBlockTemplate</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlockTest.html</anchorfile>
      <anchor>a4550abed1ba98c8d94b3cf6fe58fbbc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testDocBlockKnowsIfItIsTheEndOfADocBlockTemplate</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlockTest.html</anchorfile>
      <anchor>ad83f60fa6a9325218b4242e755b6b24b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testRemoveTag</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlockTest.html</anchorfile>
      <anchor>a6bde2debe5aebf6a0eb6a858bed52b2b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeepCopy::Filter::Doctrine::DoctrineCollectionFilter</name>
    <filename>classDeepCopy_1_1Filter_1_1Doctrine_1_1DoctrineCollectionFilter.html</filename>
    <base>DeepCopy::Filter::Filter</base>
    <member kind="function">
      <type></type>
      <name>apply</name>
      <anchorfile>classDeepCopy_1_1Filter_1_1Doctrine_1_1DoctrineCollectionFilter.html</anchorfile>
      <anchor>a01452a9c2f189bdd9b897b839c83185a</anchor>
      <arglist>($object, $property, $objectCopier)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeepCopyTest::Filter::Doctrine::DoctrineCollectionFilterTest</name>
    <filename>classDeepCopyTest_1_1Filter_1_1Doctrine_1_1DoctrineCollectionFilterTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>test_it_copies_the_object_property_array_collection</name>
      <anchorfile>classDeepCopyTest_1_1Filter_1_1Doctrine_1_1DoctrineCollectionFilterTest.html</anchorfile>
      <anchor>a9aef075a4d32f33b6c4a66aee056a258</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeepCopy::Filter::Doctrine::DoctrineEmptyCollectionFilter</name>
    <filename>classDeepCopy_1_1Filter_1_1Doctrine_1_1DoctrineEmptyCollectionFilter.html</filename>
    <base>DeepCopy::Filter::Filter</base>
    <member kind="function">
      <type></type>
      <name>apply</name>
      <anchorfile>classDeepCopy_1_1Filter_1_1Doctrine_1_1DoctrineEmptyCollectionFilter.html</anchorfile>
      <anchor>a9f396c705b9c3423ae32c13b708e9af6</anchor>
      <arglist>($object, $property, $objectCopier)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeepCopyTest::Filter::Doctrine::DoctrineEmptyCollectionFilterTest</name>
    <filename>classDeepCopyTest_1_1Filter_1_1Doctrine_1_1DoctrineEmptyCollectionFilterTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>test_it_sets_the_object_property_to_an_empty_doctrine_collection</name>
      <anchorfile>classDeepCopyTest_1_1Filter_1_1Doctrine_1_1DoctrineEmptyCollectionFilterTest.html</anchorfile>
      <anchor>ac950464ab653acc7fd948e56f60b1b3b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeepCopy::Filter::Doctrine::DoctrineProxyFilter</name>
    <filename>classDeepCopy_1_1Filter_1_1Doctrine_1_1DoctrineProxyFilter.html</filename>
    <base>DeepCopy::Filter::Filter</base>
    <member kind="function">
      <type></type>
      <name>apply</name>
      <anchorfile>classDeepCopy_1_1Filter_1_1Doctrine_1_1DoctrineProxyFilter.html</anchorfile>
      <anchor>a92b64bb3cd741b3c2c66752d2c3854c4</anchor>
      <arglist>($object, $property, $objectCopier)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeepCopyTest::Filter::Doctrine::DoctrineProxyFilterTest</name>
    <filename>classDeepCopyTest_1_1Filter_1_1Doctrine_1_1DoctrineProxyFilterTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>test_it_loads_the_doctrine_proxy</name>
      <anchorfile>classDeepCopyTest_1_1Filter_1_1Doctrine_1_1DoctrineProxyFilterTest.html</anchorfile>
      <anchor>aee863e02e4860fdf5ac95bb765f8bc58</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeepCopy::Matcher::Doctrine::DoctrineProxyMatcher</name>
    <filename>classDeepCopy_1_1Matcher_1_1Doctrine_1_1DoctrineProxyMatcher.html</filename>
    <base>DeepCopy::Matcher::Matcher</base>
    <member kind="function">
      <type></type>
      <name>matches</name>
      <anchorfile>classDeepCopy_1_1Matcher_1_1Doctrine_1_1DoctrineProxyMatcher.html</anchorfile>
      <anchor>af8fa8e8ee9ba0b8930bd3d3b22e13f7a</anchor>
      <arglist>($object, $property)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeepCopyTest::Matcher::Doctrine::DoctrineProxyMatcherTest</name>
    <filename>classDeepCopyTest_1_1Matcher_1_1Doctrine_1_1DoctrineProxyMatcherTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>test_it_matches_the_given_objects</name>
      <anchorfile>classDeepCopyTest_1_1Matcher_1_1Doctrine_1_1DoctrineProxyMatcherTest.html</anchorfile>
      <anchor>aed52ea7352fa4ff23b3cdbd7bcec07c7</anchor>
      <arglist>($object, $expected)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>providePairs</name>
      <anchorfile>classDeepCopyTest_1_1Matcher_1_1Doctrine_1_1DoctrineProxyMatcherTest.html</anchorfile>
      <anchor>a758aba9f854945f50446bc12d408c4c2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DoesNotPerformAssertionsButPerformingAssertionsTest</name>
    <filename>classDoesNotPerformAssertionsButPerformingAssertionsTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testFalseAndTrueAreStillFine</name>
      <anchorfile>classDoesNotPerformAssertionsButPerformingAssertionsTest.html</anchorfile>
      <anchor>abd147830a13fff7b52ddb54218f91c84</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Comparator::DOMNodeComparator</name>
    <filename>classSebastianBergmann_1_1Comparator_1_1DOMNodeComparator.html</filename>
    <base>SebastianBergmann::Comparator::ObjectComparator</base>
    <member kind="function">
      <type></type>
      <name>accepts</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1DOMNodeComparator.html</anchorfile>
      <anchor>aeb7d0638556c4ba75e7016a5a3adfc3d</anchor>
      <arglist>($expected, $actual)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>assertEquals</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1DOMNodeComparator.html</anchorfile>
      <anchor>a13af179e7634fce1023e5a932f33642a</anchor>
      <arglist>($expected, $actual, $delta=0.0, $canonicalize=false, $ignoreCase=false, array &amp;$processed=[])</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Comparator::DOMNodeComparatorTest</name>
    <filename>classSebastianBergmann_1_1Comparator_1_1DOMNodeComparatorTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>acceptsSucceedsProvider</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1DOMNodeComparatorTest.html</anchorfile>
      <anchor>a7af97432e1a57af01e1e0e3c9bd0371e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>acceptsFailsProvider</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1DOMNodeComparatorTest.html</anchorfile>
      <anchor>a7269864c02a1773c319a4acc356925ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>assertEqualsSucceedsProvider</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1DOMNodeComparatorTest.html</anchorfile>
      <anchor>a8db98a82c0b2adaee42107417e0c91a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>assertEqualsFailsProvider</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1DOMNodeComparatorTest.html</anchorfile>
      <anchor>a1ad3b59bd6466d510b0c03fa6d05ebf0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAcceptsSucceeds</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1DOMNodeComparatorTest.html</anchorfile>
      <anchor>a515f3266d34dd72dd9bf9318c72f8710</anchor>
      <arglist>($expected, $actual)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAcceptsFails</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1DOMNodeComparatorTest.html</anchorfile>
      <anchor>a15c64c5f02785b02911a560286c676fd</anchor>
      <arglist>($expected, $actual)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertEqualsSucceeds</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1DOMNodeComparatorTest.html</anchorfile>
      <anchor>a41e400df022248760b869913735ae9f9</anchor>
      <arglist>($expected, $actual, $ignoreCase=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertEqualsFails</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1DOMNodeComparatorTest.html</anchorfile>
      <anchor>ac1da8c1125329b09068d3f19d891457e</anchor>
      <arglist>($expected, $actual)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1DOMNodeComparatorTest.html</anchorfile>
      <anchor>a335fd40fa14cc098cea5c99c39974918</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DoNoAssertionTestCase</name>
    <filename>classDoNoAssertionTestCase.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testNothing</name>
      <anchorfile>classDoNoAssertionTestCase.html</anchorfile>
      <anchor>a9958570b41335b00b8756cf90e4ca95f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Comparator::DoubleComparator</name>
    <filename>classSebastianBergmann_1_1Comparator_1_1DoubleComparator.html</filename>
    <base>SebastianBergmann::Comparator::NumericComparator</base>
    <member kind="function">
      <type></type>
      <name>accepts</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1DoubleComparator.html</anchorfile>
      <anchor>a7f1d7c1d05735b9c4b27579ca66a3491</anchor>
      <arglist>($expected, $actual)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>assertEquals</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1DoubleComparator.html</anchorfile>
      <anchor>adc318eae540e0fbe93a7848bfa2a0178</anchor>
      <arglist>($expected, $actual, $delta=0.0, $canonicalize=false, $ignoreCase=false)</arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>EPSILON</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1DoubleComparator.html</anchorfile>
      <anchor>ae4711663e829b3f6894149421ac4e617</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Comparator::DoubleComparatorTest</name>
    <filename>classSebastianBergmann_1_1Comparator_1_1DoubleComparatorTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>acceptsSucceedsProvider</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1DoubleComparatorTest.html</anchorfile>
      <anchor>a78a6e0eacfb5ccd9d335bd377bfff649</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>acceptsFailsProvider</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1DoubleComparatorTest.html</anchorfile>
      <anchor>ad92092c6a6ffed87876ea6394cfd1ddc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>assertEqualsSucceedsProvider</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1DoubleComparatorTest.html</anchorfile>
      <anchor>a63139b4be02a3c8760f9f8457cfde116</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>assertEqualsFailsProvider</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1DoubleComparatorTest.html</anchorfile>
      <anchor>a32b9bef511fe75f245b562fb4ed40c91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAcceptsSucceeds</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1DoubleComparatorTest.html</anchorfile>
      <anchor>abb06fb8c36b34ba1b433f8c060f1284a</anchor>
      <arglist>($expected, $actual)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAcceptsFails</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1DoubleComparatorTest.html</anchorfile>
      <anchor>a2079031cdeacb17b95443a6c58d3c526</anchor>
      <arglist>($expected, $actual)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertEqualsSucceeds</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1DoubleComparatorTest.html</anchorfile>
      <anchor>a409d51ac77d9d48b5cecc4ec811a0f0a</anchor>
      <arglist>($expected, $actual, $delta=0.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertEqualsFails</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1DoubleComparatorTest.html</anchorfile>
      <anchor>a11b45184ff74c4e9942349eadcd262bf</anchor>
      <arglist>($expected, $actual, $delta=0.0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1DoubleComparatorTest.html</anchorfile>
      <anchor>a01f47b206ed80855784e3f523b9f7b9f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Exception::Doubler::DoubleException</name>
    <filename>classProphecy_1_1Exception_1_1Doubler_1_1DoubleException.html</filename>
    <base>Prophecy::Exception::Doubler::DoublerException</base>
  </compound>
  <compound kind="interface">
    <name>Prophecy::Doubler::DoubleInterface</name>
    <filename>interfaceProphecy_1_1Doubler_1_1DoubleInterface.html</filename>
  </compound>
  <compound kind="class">
    <name>Prophecy::Doubler::Doubler</name>
    <filename>classProphecy_1_1Doubler_1_1Doubler.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Doubler.html</anchorfile>
      <anchor>aa6a6764cd7ee593d06e90e6675c66a12</anchor>
      <arglist>(ClassMirror $mirror=null, ClassCreator $creator=null, NameGenerator $namer=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getClassPatches</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Doubler.html</anchorfile>
      <anchor>a710cb24de3e79220b50c1e2adad56f51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>registerClassPatch</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Doubler.html</anchorfile>
      <anchor>af2658c5567a9ea2090a30415d9556f75</anchor>
      <arglist>(ClassPatchInterface $patch)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>double</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Doubler.html</anchorfile>
      <anchor>a3c81838d79c2a874a33fef4c34d07075</anchor>
      <arglist>(ReflectionClass $class=null, array $interfaces, array $args=null)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>createDoubleClass</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Doubler.html</anchorfile>
      <anchor>a2f640d4651765f412659a073df15be06</anchor>
      <arglist>(ReflectionClass $class=null, array $interfaces)</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>Prophecy::Exception::Doubler::DoublerException</name>
    <filename>interfaceProphecy_1_1Exception_1_1Doubler_1_1DoublerException.html</filename>
    <base>Prophecy::Exception::Exception</base>
  </compound>
  <compound kind="class">
    <name>DoubleTestCase</name>
    <filename>classDoubleTestCase.html</filename>
    <base>PHPUnit::Framework::Test</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classDoubleTestCase.html</anchorfile>
      <anchor>a4f6f27d3f9209e86bffef24a9f595a18</anchor>
      <arglist>(TestCase $testCase)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>count</name>
      <anchorfile>classDoubleTestCase.html</anchorfile>
      <anchor>a3b188fdc8d360c2d7bed0759d0d72155</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>run</name>
      <anchorfile>classDoubleTestCase.html</anchorfile>
      <anchor>ada572cad00b73cb9c68ec31d8b471bf1</anchor>
      <arglist>(TestResult $result=null)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$testCase</name>
      <anchorfile>classDoubleTestCase.html</anchorfile>
      <anchor>af69ea0eeaf825971a9d8fa11e08ab49f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>SebastianBergmann::CodeCoverage::Driver::Driver</name>
    <filename>interfaceSebastianBergmann_1_1CodeCoverage_1_1Driver_1_1Driver.html</filename>
    <member kind="function">
      <type></type>
      <name>start</name>
      <anchorfile>interfaceSebastianBergmann_1_1CodeCoverage_1_1Driver_1_1Driver.html</anchorfile>
      <anchor>a754fe1e47a5bb2c5a69cc9a390221a93</anchor>
      <arglist>(bool $determineUnusedAndDead=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>stop</name>
      <anchorfile>interfaceSebastianBergmann_1_1CodeCoverage_1_1Driver_1_1Driver.html</anchorfile>
      <anchor>ab7122fed23c4e370b6d9dca3aa34711e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>LINE_EXECUTED</name>
      <anchorfile>interfaceSebastianBergmann_1_1CodeCoverage_1_1Driver_1_1Driver.html</anchorfile>
      <anchor>a870d251dd16b9289851dadc6c8752ca3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>LINE_NOT_EXECUTED</name>
      <anchorfile>interfaceSebastianBergmann_1_1CodeCoverage_1_1Driver_1_1Driver.html</anchorfile>
      <anchor>a3f7a211f96aaf13f6de858d4586aed90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>LINE_NOT_EXECUTABLE</name>
      <anchorfile>interfaceSebastianBergmann_1_1CodeCoverage_1_1Driver_1_1Driver.html</anchorfile>
      <anchor>ac12045d74319f152382b5e934fe448cc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DummyBarTest</name>
    <filename>classDummyBarTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testBarEqualsBar</name>
      <anchorfile>classDummyBarTest.html</anchorfile>
      <anchor>a6cc635783a1de9091598ce7edbb95863</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DummyException</name>
    <filename>classDummyException.html</filename>
  </compound>
  <compound kind="class">
    <name>DummyFooTest</name>
    <filename>classDummyFooTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testFooEqualsFoo</name>
      <anchorfile>classDummyFooTest.html</anchorfile>
      <anchor>ab4ca4c209f1b8b64a8c829cdbf2fa73b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DuplicateKeyDataProviderTest</name>
    <filename>classDuplicateKeyDataProviderTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>test</name>
      <anchorfile>classDuplicateKeyDataProviderTest.html</anchorfile>
      <anchor>a4dc7a35e787b3a18c5fc7127a7e8e734</anchor>
      <arglist>($arg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>dataProvider</name>
      <anchorfile>classDuplicateKeyDataProviderTest.html</anchorfile>
      <anchor>a38596bb2e3e71d5fac3dbb9381eefb8c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>phpDocumentor::Reflection::Element</name>
    <filename>interfacephpDocumentor_1_1Reflection_1_1Element.html</filename>
    <member kind="function">
      <type></type>
      <name>getFqsen</name>
      <anchorfile>interfacephpDocumentor_1_1Reflection_1_1Element.html</anchorfile>
      <anchor>acd929463b3e3e8e9889a507c996aa8f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getName</name>
      <anchorfile>interfacephpDocumentor_1_1Reflection_1_1Element.html</anchorfile>
      <anchor>a9a892d5d48ae45f97fdc514f0d678a70</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::ElementCollection</name>
    <filename>classPharIo_1_1Manifest_1_1ElementCollection.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ElementCollection.html</anchorfile>
      <anchor>ad66ef7e7310957b539e34317d40c2c3e</anchor>
      <arglist>(DOMNodeList $nodeList)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>current</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ElementCollection.html</anchorfile>
      <anchor>ac7b7dce558f090991db5f4781c1cd17c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>next</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ElementCollection.html</anchorfile>
      <anchor>a7c3bdb3bbe8908097113a5a189f1cf51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>key</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ElementCollection.html</anchorfile>
      <anchor>ac1abfd3516c99233c0573bae26c7e261</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>valid</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ElementCollection.html</anchorfile>
      <anchor>a167e7467e2018aaa21bbfb2ac7ead114</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>rewind</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ElementCollection.html</anchorfile>
      <anchor>aba8a63accf571bdf5eef112457daada3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>getCurrentElement</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ElementCollection.html</anchorfile>
      <anchor>ac74a573627c03866564a9b3c5518a186</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::Email</name>
    <filename>classPharIo_1_1Manifest_1_1Email.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPharIo_1_1Manifest_1_1Email.html</anchorfile>
      <anchor>aeb215c42b9465d2fc548154f445014fd</anchor>
      <arglist>($email)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classPharIo_1_1Manifest_1_1Email.html</anchorfile>
      <anchor>aab44a3ddb2b5aeaa644e4d20bf99cdae</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::EmailTest</name>
    <filename>classPharIo_1_1Manifest_1_1EmailTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testCanBeCreatedForValidEmail</name>
      <anchorfile>classPharIo_1_1Manifest_1_1EmailTest.html</anchorfile>
      <anchor>a4cf3452b82bcbf955ab20d49a6fea4d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCanBeUsedAsString</name>
      <anchorfile>classPharIo_1_1Manifest_1_1EmailTest.html</anchorfile>
      <anchor>a8b2b4de8355f606fc5ab55e70a2d4156</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCannotBeCreatedForInvalidEmail</name>
      <anchorfile>classPharIo_1_1Manifest_1_1EmailTest.html</anchorfile>
      <anchor>a6debe7f810f8a33a9d1b3a366a8fc480</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EmptyDataProviderTest</name>
    <filename>classEmptyDataProviderTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testCase</name>
      <anchorfile>classEmptyDataProviderTest.html</anchorfile>
      <anchor>ac0189a20a03069a45b841f8d529df063</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>providerMethod</name>
      <anchorfile>classEmptyDataProviderTest.html</anchorfile>
      <anchor>a57837c06c42c38e9ca847d1061ddea15</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EmptyTestCaseTest</name>
    <filename>classEmptyTestCaseTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::ObjectEnumerator::Enumerator</name>
    <filename>classSebastianBergmann_1_1ObjectEnumerator_1_1Enumerator.html</filename>
    <member kind="function">
      <type></type>
      <name>enumerate</name>
      <anchorfile>classSebastianBergmann_1_1ObjectEnumerator_1_1Enumerator.html</anchorfile>
      <anchor>a5c1517a8b5901704424fd3527b829681</anchor>
      <arglist>($variable)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::ObjectEnumerator::EnumeratorTest</name>
    <filename>classSebastianBergmann_1_1ObjectEnumerator_1_1EnumeratorTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testEnumeratesSingleObject</name>
      <anchorfile>classSebastianBergmann_1_1ObjectEnumerator_1_1EnumeratorTest.html</anchorfile>
      <anchor>a9debc848e1587cba99a97e283d154f2e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testEnumeratesArrayWithSingleObject</name>
      <anchorfile>classSebastianBergmann_1_1ObjectEnumerator_1_1EnumeratorTest.html</anchorfile>
      <anchor>a8e6a7252187a67a34513c074097734d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testEnumeratesArrayWithTwoReferencesToTheSameObject</name>
      <anchorfile>classSebastianBergmann_1_1ObjectEnumerator_1_1EnumeratorTest.html</anchorfile>
      <anchor>a8f78a93641ba980e72e9a8a1347cea39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testEnumeratesArrayOfObjects</name>
      <anchorfile>classSebastianBergmann_1_1ObjectEnumerator_1_1EnumeratorTest.html</anchorfile>
      <anchor>a0ef32e11d12e6a53319b4c770de30403</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testEnumeratesObjectWithAggregatedObject</name>
      <anchorfile>classSebastianBergmann_1_1ObjectEnumerator_1_1EnumeratorTest.html</anchorfile>
      <anchor>a4cf810337bb960b3bb7a34a865aeefdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testEnumeratesObjectWithAggregatedObjectsInArray</name>
      <anchorfile>classSebastianBergmann_1_1ObjectEnumerator_1_1EnumeratorTest.html</anchorfile>
      <anchor>acfa8b6e88c35c430c834df2bc1e1acd0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testEnumeratesObjectsWithCyclicReferences</name>
      <anchorfile>classSebastianBergmann_1_1ObjectEnumerator_1_1EnumeratorTest.html</anchorfile>
      <anchor>a412133e8400cb9d442859b909eeb72f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testEnumeratesClassThatThrowsException</name>
      <anchorfile>classSebastianBergmann_1_1ObjectEnumerator_1_1EnumeratorTest.html</anchorfile>
      <anchor>a29fd0d7961be91e0cc869b62eae09a87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExceptionIsRaisedForInvalidArgument</name>
      <anchorfile>classSebastianBergmann_1_1ObjectEnumerator_1_1EnumeratorTest.html</anchorfile>
      <anchor>a7675dc4e7b8150ad6d5deebab8a5c725</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExceptionIsRaisedForInvalidArgument2</name>
      <anchorfile>classSebastianBergmann_1_1ObjectEnumerator_1_1EnumeratorTest.html</anchorfile>
      <anchor>a12018b01913b7fa831d1590aebc5428d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classSebastianBergmann_1_1ObjectEnumerator_1_1EnumeratorTest.html</anchorfile>
      <anchor>ad40edf2a555b32a36e0934aaa90514dd</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Error::Error</name>
    <filename>classPHPUnit_1_1Framework_1_1Error_1_1Error.html</filename>
    <base>PHPUnit::Framework::Exception</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Error_1_1Error.html</anchorfile>
      <anchor>a5f9bff0553877368324c6b272247bfac</anchor>
      <arglist>(string $message, int $code, string $file, int $line, \Exception $previous=null)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Util::ErrorHandler</name>
    <filename>classPHPUnit_1_1Util_1_1ErrorHandler.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Util_1_1ErrorHandler.html</anchorfile>
      <anchor>a2e7a8e8ecdc25e8433f30f8787fdff69</anchor>
      <arglist>(bool $convertDeprecationsToExceptions, bool $convertErrorsToExceptions, bool $convertNoticesToExceptions, bool $convertWarningsToExceptions)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__invoke</name>
      <anchorfile>classPHPUnit_1_1Util_1_1ErrorHandler.html</anchorfile>
      <anchor>a17b28a45324ae04e5cf58c04f130e8b7</anchor>
      <arglist>(int $errorNumber, string $errorString, string $errorFile, int $errorLine)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>register</name>
      <anchorfile>classPHPUnit_1_1Util_1_1ErrorHandler.html</anchorfile>
      <anchor>a2afe59d4b7f45ec74923c2e6a9b653ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>unregister</name>
      <anchorfile>classPHPUnit_1_1Util_1_1ErrorHandler.html</anchorfile>
      <anchor>aef3840afb65cfda1d5063a608e9fb6c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>invokeIgnoringWarnings</name>
      <anchorfile>classPHPUnit_1_1Util_1_1ErrorHandler.html</anchorfile>
      <anchor>a81ed6b0be1b7020e6d81050ef70a8d0a</anchor>
      <arglist>(callable $callable)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Argument::Token::ExactValueToken</name>
    <filename>classProphecy_1_1Argument_1_1Token_1_1ExactValueToken.html</filename>
    <base>Prophecy::Argument::Token::TokenInterface</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1ExactValueToken.html</anchorfile>
      <anchor>ab3cc1a6f15a7d0f27321bf138077df12</anchor>
      <arglist>($value, StringUtil $util=null, ComparatorFactory $comparatorFactory=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>scoreArgument</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1ExactValueToken.html</anchorfile>
      <anchor>ac518443006a599df753ab2c4eeec9e7d</anchor>
      <arglist>($argument)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getValue</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1ExactValueToken.html</anchorfile>
      <anchor>a3c2ea25829f851178dc2d4cae4643552</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isLast</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1ExactValueToken.html</anchorfile>
      <anchor>ac78fedd5745ca593fb27a6fd2d3e7c55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1ExactValueToken.html</anchorfile>
      <anchor>aaa7b18a8f207344cc9a1976092b1c768</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Version::ExactVersionConstraint</name>
    <filename>classPharIo_1_1Version_1_1ExactVersionConstraint.html</filename>
    <base>PharIo::Version::AbstractVersionConstraint</base>
    <member kind="function">
      <type></type>
      <name>complies</name>
      <anchorfile>classPharIo_1_1Version_1_1ExactVersionConstraint.html</anchorfile>
      <anchor>a2e6be574543a91a5efaccf0e6f9dd1cb</anchor>
      <arglist>(Version $version)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Version::ExactVersionConstraintTest</name>
    <filename>classPharIo_1_1Version_1_1ExactVersionConstraintTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>compliantVersionProvider</name>
      <anchorfile>classPharIo_1_1Version_1_1ExactVersionConstraintTest.html</anchorfile>
      <anchor>a6b5b7b14374db08a0587724cdb32d1cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>nonCompliantVersionProvider</name>
      <anchorfile>classPharIo_1_1Version_1_1ExactVersionConstraintTest.html</anchorfile>
      <anchor>ae8802e8061cea3645dccf6112c1eacdc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testReturnsTrueForCompliantVersion</name>
      <anchorfile>classPharIo_1_1Version_1_1ExactVersionConstraintTest.html</anchorfile>
      <anchor>a61abb7cdb4f131d2dd6da1d96ace8069</anchor>
      <arglist>($constraintValue, Version $version)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testReturnsFalseForNonCompliantVersion</name>
      <anchorfile>classPharIo_1_1Version_1_1ExactVersionConstraintTest.html</anchorfile>
      <anchor>a1f2370efc88b96252cf7181cba9b1df3</anchor>
      <arglist>($constraintValue, Version $version)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocBlock::Tags::Example</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Example.html</filename>
    <base>phpDocumentor::Reflection::DocBlock::Tag</base>
    <base>phpDocumentor::Reflection::DocBlock::Tags::Factory::StaticMethod</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Example.html</anchorfile>
      <anchor>a8afe7b74d1d755db1acfcdec27ea8621</anchor>
      <arglist>(string $filePath, bool $isURI, int $startingLine, int $lineCount, ?string $content)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getContent</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Example.html</anchorfile>
      <anchor>a38378361dc4b2bffb2653464e3141062</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getDescription</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Example.html</anchorfile>
      <anchor>aa75b647c84a92e5a3d89dd3901284d45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getFilePath</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Example.html</anchorfile>
      <anchor>ac8d957940ce07489295f9400221a9b0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Example.html</anchorfile>
      <anchor>a8b3ac6ebec58f2e783d111ddf3e0c490</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getStartingLine</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Example.html</anchorfile>
      <anchor>a8862000dfaba4532fcb9a6c2785f9652</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getLineCount</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Example.html</anchorfile>
      <anchor>a72a49554e0bb00551c69e492f4fafb0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getName</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Example.html</anchorfile>
      <anchor>a9ee8534bd29cfd1741aff539d3662470</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>render</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Example.html</anchorfile>
      <anchor>a45da3e48a2b474edfbd599382e128040</anchor>
      <arglist>(?Formatter $formatter=null)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>create</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Example.html</anchorfile>
      <anchor>a4b19c107a396c1b25a35387a37104be6</anchor>
      <arglist>(string $body)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Example</name>
    <filename>classExample.html</filename>
    <member kind="function">
      <type></type>
      <name>even</name>
      <anchorfile>classExample.html</anchorfile>
      <anchor>a1a9d96a004ba37c7b1ac1481ca57a4d8</anchor>
      <arglist>($numbers)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocBlock::ExampleFinder</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1ExampleFinder.html</filename>
    <member kind="function">
      <type></type>
      <name>find</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1ExampleFinder.html</anchorfile>
      <anchor>a026d04b530ec03635eb6249fdb5b1f3e</anchor>
      <arglist>(Example $example)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setSourceDirectory</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1ExampleFinder.html</anchorfile>
      <anchor>afcd949846fc37666065f8ea05f8dcdb1</anchor>
      <arglist>(string $directory=&apos;&apos;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getSourceDirectory</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1ExampleFinder.html</anchorfile>
      <anchor>a946d56330fb1ef29d3bea0724e854800</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setExampleDirectories</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1ExampleFinder.html</anchorfile>
      <anchor>aafd86be66375b6d72b34f0c863d5d33d</anchor>
      <arglist>(array $directories)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getExampleDirectories</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1ExampleFinder.html</anchorfile>
      <anchor>ab73408db599a94864c463e4028f19d95</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocBlock::ExampleFinderTest</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1ExampleFinderTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>tearDown</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1ExampleFinderTest.html</anchorfile>
      <anchor>abfa11ce448e67c081e4d574efb145d15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setUp</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1ExampleFinderTest.html</anchorfile>
      <anchor>a410dc00239209423f452d531f4f3fd06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFileNotFound</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1ExampleFinderTest.html</anchorfile>
      <anchor>ac12fba6b30269311f100e73e73f58d9e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DocBlock::Tags::ExampleTest</name>
    <filename>classDocBlock_1_1Tags_1_1ExampleTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testExampleWithoutContent</name>
      <anchorfile>classDocBlock_1_1Tags_1_1ExampleTest.html</anchorfile>
      <anchor>a58c0fe589c82aa2a860919f4705daac9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testWithDescription</name>
      <anchorfile>classDocBlock_1_1Tags_1_1ExampleTest.html</anchorfile>
      <anchor>ab01196e9435f85e8d38ed748cc93fe42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStartlineIsParsed</name>
      <anchorfile>classDocBlock_1_1Tags_1_1ExampleTest.html</anchorfile>
      <anchor>a8fd7397b6b6a57cd8c29d67e41e343ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAllowOmitingLineCount</name>
      <anchorfile>classDocBlock_1_1Tags_1_1ExampleTest.html</anchorfile>
      <anchor>adddcb38bfe46cea21e03e8f6ecd68d87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testLengthIsParsed</name>
      <anchorfile>classDocBlock_1_1Tags_1_1ExampleTest.html</anchorfile>
      <anchor>a81536bb59621ee4b5a7c6012ca93988f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStringRepresentationIsReturned</name>
      <anchorfile>classDocBlock_1_1Tags_1_1ExampleTest.html</anchorfile>
      <anchor>a979701cb629912a774a7a407f349d21b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStringRepresentationIsReturnedWithoutDescription</name>
      <anchorfile>classDocBlock_1_1Tags_1_1ExampleTest.html</anchorfile>
      <anchor>a33e96898e858ec62ffecaaf9f8c28f96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethod</name>
      <anchorfile>classDocBlock_1_1Tags_1_1ExampleTest.html</anchorfile>
      <anchor>ac8b456026f332e0dcdd87f3aa4c2e860</anchor>
      <arglist>(string $input, string $filePath, int $startLine, int $lineCount, ?string $description, string $content)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>tagContentProvider</name>
      <anchorfile>classDocBlock_1_1Tags_1_1ExampleTest.html</anchorfile>
      <anchor>abf69dd3d9b90e7234d5640b4fffa09ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testValidatesArguments</name>
      <anchorfile>classDocBlock_1_1Tags_1_1ExampleTest.html</anchorfile>
      <anchor>a93864649f35afed4b837b31df82ae540</anchor>
      <arglist>(string $filePath, bool $isUrl, int $startLine, int $lineCount, string $description)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>invalidExampleProvider</name>
      <anchorfile>classDocBlock_1_1Tags_1_1ExampleTest.html</anchorfile>
      <anchor>a7ad977bf71fdd87c0af156da501a4266</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>SebastianBergmann::Timer::Exception</name>
    <filename>interfaceSebastianBergmann_1_1Timer_1_1Exception.html</filename>
  </compound>
  <compound kind="interface">
    <name>SebastianBergmann::Diff::Exception</name>
    <filename>interfaceSebastianBergmann_1_1Diff_1_1Exception.html</filename>
  </compound>
  <compound kind="interface">
    <name>SebastianBergmann::GlobalState::Exception</name>
    <filename>interfaceSebastianBergmann_1_1GlobalState_1_1Exception.html</filename>
  </compound>
  <compound kind="interface">
    <name>SebastianBergmann::ObjectEnumerator::Exception</name>
    <filename>interfaceSebastianBergmann_1_1ObjectEnumerator_1_1Exception.html</filename>
  </compound>
  <compound kind="interface">
    <name>SebastianBergmann::ObjectReflector::Exception</name>
    <filename>interfaceSebastianBergmann_1_1ObjectReflector_1_1Exception.html</filename>
  </compound>
  <compound kind="interface">
    <name>SebastianBergmann::RecursionContext::Exception</name>
    <filename>interfaceSebastianBergmann_1_1RecursionContext_1_1Exception.html</filename>
  </compound>
  <compound kind="interface">
    <name>SebastianBergmann::Type::Exception</name>
    <filename>interfaceSebastianBergmann_1_1Type_1_1Exception.html</filename>
  </compound>
  <compound kind="class">
    <name>TheSeer::Tokenizer::Exception</name>
    <filename>classTheSeer_1_1Tokenizer_1_1Exception.html</filename>
  </compound>
  <compound kind="interface">
    <name>PHPUnit::Exception</name>
    <filename>interfacePHPUnit_1_1Exception.html</filename>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::Exception</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1Exception.html</filename>
    <base>PHPUnit::Framework::Constraint::Constraint</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1Exception.html</anchorfile>
      <anchor>a53927e3da4be771dac3de3d2bd886770</anchor>
      <arglist>(string $className)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1Exception.html</anchorfile>
      <anchor>aee3add358cb2a37ee20eccfd44707fa4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>matches</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1Exception.html</anchorfile>
      <anchor>a6690d663be09e620f60c00c1ee9f73b9</anchor>
      <arglist>($other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>failureDescription</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1Exception.html</anchorfile>
      <anchor>a77f390ea840c905a0592e38940c17b21</anchor>
      <arglist>($other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Exception</name>
    <filename>classPHPUnit_1_1Framework_1_1Exception.html</filename>
    <base>PHPUnit::Exception</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Exception.html</anchorfile>
      <anchor>ac510410cb3486bc23c70711dd6b0df0a</anchor>
      <arglist>($message=&apos;&apos;, $code=0, \Throwable $previous=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Exception.html</anchorfile>
      <anchor>a3c6fea7982d74c14293b08818417c2cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__sleep</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Exception.html</anchorfile>
      <anchor>a453b544dd1954021d7cc1b43eaec5caa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getSerializableTrace</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Exception.html</anchorfile>
      <anchor>a27d0fe72aba92d8642383635c9afa322</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$serializableTrace</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Exception.html</anchorfile>
      <anchor>a0c09d8cad1f6ae45a3895e60a63c2271</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>PharIo::Version::Exception</name>
    <filename>interfacePharIo_1_1Version_1_1Exception.html</filename>
  </compound>
  <compound kind="interface">
    <name>PHPUnit::Framework::MockObject::Exception</name>
    <filename>interfacePHPUnit_1_1Framework_1_1MockObject_1_1Exception.html</filename>
  </compound>
  <compound kind="interface">
    <name>Prophecy::Exception::Exception</name>
    <filename>interfaceProphecy_1_1Exception_1_1Exception.html</filename>
    <member kind="function">
      <type></type>
      <name>getMessage</name>
      <anchorfile>interfaceProphecy_1_1Exception_1_1Exception.html</anchorfile>
      <anchor>a0c7cfb061c0b0435c322667ec935c1d9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::MockObject::Stub::Exception</name>
    <filename>classPHPUnit_1_1Framework_1_1MockObject_1_1Stub_1_1Exception.html</filename>
    <base>PHPUnit::Framework::MockObject::Stub::Stub</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Stub_1_1Exception.html</anchorfile>
      <anchor>aeb1c2cb946ab4972f4fb892d26faa612</anchor>
      <arglist>(\Throwable $exception)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>invoke</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Stub_1_1Exception.html</anchorfile>
      <anchor>a6c067602787a639d9ebeeae04a0e741f</anchor>
      <arglist>(Invocation $invocation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Stub_1_1Exception.html</anchorfile>
      <anchor>a902dcd03972df01631b909e806352d2c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Runner::Exception</name>
    <filename>classPHPUnit_1_1Runner_1_1Exception.html</filename>
    <base>PHPUnit::Exception</base>
  </compound>
  <compound kind="class">
    <name>PHPUnit::TextUI::Exception</name>
    <filename>classPHPUnit_1_1TextUI_1_1Exception.html</filename>
    <base>PHPUnit::Exception</base>
  </compound>
  <compound kind="interface">
    <name>SebastianBergmann::CodeCoverage::Exception</name>
    <filename>interfaceSebastianBergmann_1_1CodeCoverage_1_1Exception.html</filename>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Util::Exception</name>
    <filename>classPHPUnit_1_1Util_1_1Exception.html</filename>
    <base>PHPUnit::Exception</base>
  </compound>
  <compound kind="interface">
    <name>PharIo::Manifest::Exception</name>
    <filename>interfacePharIo_1_1Manifest_1_1Exception.html</filename>
  </compound>
  <compound kind="class">
    <name>DoctrineTest::InstantiatorTestAsset::ExceptionAsset</name>
    <filename>classDoctrineTest_1_1InstantiatorTestAsset_1_1ExceptionAsset.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classDoctrineTest_1_1InstantiatorTestAsset_1_1ExceptionAsset.html</anchorfile>
      <anchor>a9f8c0741b0787e7dcc183ca85ebd3373</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::ExceptionCode</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1ExceptionCode.html</filename>
    <base>PHPUnit::Framework::Constraint::Constraint</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1ExceptionCode.html</anchorfile>
      <anchor>a2c393ac5e1c110af5b2cf7818be788aa</anchor>
      <arglist>($expected)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1ExceptionCode.html</anchorfile>
      <anchor>aaa8ad2f527f8aeba3efdbf6e9aa31892</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>matches</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1ExceptionCode.html</anchorfile>
      <anchor>a11c2830cd1b5173948889ee5101c2a56</anchor>
      <arglist>($other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>failureDescription</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1ExceptionCode.html</anchorfile>
      <anchor>ad826adcb4bd6a16e9bee4947b298ccb8</anchor>
      <arglist>($other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::ExceptionCodeTest</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1ExceptionCodeTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testExceptionCodeCanEvaluateExceptions</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1ExceptionCodeTest.html</anchorfile>
      <anchor>ab12d17f92abe3972534f1b530e88cd24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExceptionCodeCanBeExportedAsString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1ExceptionCodeTest.html</anchorfile>
      <anchor>a5ff2c5bb68d2c254082369fcaab565ff</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Comparator::ExceptionComparator</name>
    <filename>classSebastianBergmann_1_1Comparator_1_1ExceptionComparator.html</filename>
    <base>SebastianBergmann::Comparator::ObjectComparator</base>
    <member kind="function">
      <type></type>
      <name>accepts</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ExceptionComparator.html</anchorfile>
      <anchor>a682ac563bccae02d15371fe8d3166932</anchor>
      <arglist>($expected, $actual)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>toArray</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ExceptionComparator.html</anchorfile>
      <anchor>a421f0caba32f98ea1647c081c69777e3</anchor>
      <arglist>($object)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Comparator::ExceptionComparatorTest</name>
    <filename>classSebastianBergmann_1_1Comparator_1_1ExceptionComparatorTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>acceptsSucceedsProvider</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ExceptionComparatorTest.html</anchorfile>
      <anchor>adb19ffff25882f67136066468dcf4dd6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>acceptsFailsProvider</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ExceptionComparatorTest.html</anchorfile>
      <anchor>a9206cbf6027b03cf376f804500fc9c61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>assertEqualsSucceedsProvider</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ExceptionComparatorTest.html</anchorfile>
      <anchor>ada45ed9a772e92b96a884a060d973aab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>assertEqualsFailsProvider</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ExceptionComparatorTest.html</anchorfile>
      <anchor>a52971312444942dd2eae1928f9645275</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAcceptsSucceeds</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ExceptionComparatorTest.html</anchorfile>
      <anchor>a50b1fa154a7e32e7222354f3507f783b</anchor>
      <arglist>($expected, $actual)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAcceptsFails</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ExceptionComparatorTest.html</anchorfile>
      <anchor>a2154a0faa98708644cd11d65b1cf9674</anchor>
      <arglist>($expected, $actual)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertEqualsSucceeds</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ExceptionComparatorTest.html</anchorfile>
      <anchor>a78ef96bc86a4d3b0579a346a6aef588b</anchor>
      <arglist>($expected, $actual)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertEqualsFails</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ExceptionComparatorTest.html</anchorfile>
      <anchor>ac7ff7838eee801eb8b3188f47160c12a</anchor>
      <arglist>($expected, $actual, $message)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ExceptionComparatorTest.html</anchorfile>
      <anchor>a37c2d5473198f3b6df9b130636175217</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ExceptionInAssertPostConditionsTest</name>
    <filename>classExceptionInAssertPostConditionsTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classExceptionInAssertPostConditionsTest.html</anchorfile>
      <anchor>ad67d7a99c45456db9eb60b4dc045e1ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$setUp</name>
      <anchorfile>classExceptionInAssertPostConditionsTest.html</anchorfile>
      <anchor>a4f237089137bc2f797e705341f665045</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$assertPreConditions</name>
      <anchorfile>classExceptionInAssertPostConditionsTest.html</anchorfile>
      <anchor>a88c9e63469bbabf0811903d4096f5109</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$assertPostConditions</name>
      <anchorfile>classExceptionInAssertPostConditionsTest.html</anchorfile>
      <anchor>ae10836518911eea4f79d7e93100841c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$tearDown</name>
      <anchorfile>classExceptionInAssertPostConditionsTest.html</anchorfile>
      <anchor>acb600e52fc314b229553940998bc81a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$testSomething</name>
      <anchorfile>classExceptionInAssertPostConditionsTest.html</anchorfile>
      <anchor>ad080eb8214627f018e5babd670676bee</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classExceptionInAssertPostConditionsTest.html</anchorfile>
      <anchor>a4b78f57face133b49f995126aa02bb60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>tearDown</name>
      <anchorfile>classExceptionInAssertPostConditionsTest.html</anchorfile>
      <anchor>a1c5da0857186631056eae5083acf481b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>assertPreConditions</name>
      <anchorfile>classExceptionInAssertPostConditionsTest.html</anchorfile>
      <anchor>af5b2101e2fa75f9c9ca565643a077560</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>assertPostConditions</name>
      <anchorfile>classExceptionInAssertPostConditionsTest.html</anchorfile>
      <anchor>a609885c38e986fc7655618e058561a14</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ExceptionInAssertPreConditionsTest</name>
    <filename>classExceptionInAssertPreConditionsTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classExceptionInAssertPreConditionsTest.html</anchorfile>
      <anchor>a4628e680630207bbe81de72b0f827b88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$setUp</name>
      <anchorfile>classExceptionInAssertPreConditionsTest.html</anchorfile>
      <anchor>a417d5059875a1c9b310dfeda062e3d66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$assertPreConditions</name>
      <anchorfile>classExceptionInAssertPreConditionsTest.html</anchorfile>
      <anchor>a415e221e9a82a46bc81a14a680455a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$assertPostConditions</name>
      <anchorfile>classExceptionInAssertPreConditionsTest.html</anchorfile>
      <anchor>a981d032158a0e7d3bb6ee45fb703dbe7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$tearDown</name>
      <anchorfile>classExceptionInAssertPreConditionsTest.html</anchorfile>
      <anchor>a50b6196162b9ce3c7df7e66cad5bb9b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$testSomething</name>
      <anchorfile>classExceptionInAssertPreConditionsTest.html</anchorfile>
      <anchor>a93942b316c0d573251a6a2290152bc6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classExceptionInAssertPreConditionsTest.html</anchorfile>
      <anchor>a8adc5f389d54dd9a613d8e0faa8452dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>tearDown</name>
      <anchorfile>classExceptionInAssertPreConditionsTest.html</anchorfile>
      <anchor>a16c70b42544b194ebd557f6fbde07ba2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>assertPreConditions</name>
      <anchorfile>classExceptionInAssertPreConditionsTest.html</anchorfile>
      <anchor>a20766505fe87219a99203fd27786a837</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>assertPostConditions</name>
      <anchorfile>classExceptionInAssertPreConditionsTest.html</anchorfile>
      <anchor>a3b8a4fd94d40819e053c197c344d98d6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ExceptionInSetUpTest</name>
    <filename>classExceptionInSetUpTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classExceptionInSetUpTest.html</anchorfile>
      <anchor>ae6d544976771a0c45f56e766c18a63c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$setUp</name>
      <anchorfile>classExceptionInSetUpTest.html</anchorfile>
      <anchor>a5a4eac050e84c54246cb176dfc9ab272</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$assertPreConditions</name>
      <anchorfile>classExceptionInSetUpTest.html</anchorfile>
      <anchor>a41083e926850d77161bdd2b50537e9e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$assertPostConditions</name>
      <anchorfile>classExceptionInSetUpTest.html</anchorfile>
      <anchor>afda1421ba4934dc5c9fbaae391a20f1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$tearDown</name>
      <anchorfile>classExceptionInSetUpTest.html</anchorfile>
      <anchor>a2fe54dfef67993fdd70b1c7401ae6b4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$testSomething</name>
      <anchorfile>classExceptionInSetUpTest.html</anchorfile>
      <anchor>a4b1c12d6467600c0431b57901ed0ee44</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classExceptionInSetUpTest.html</anchorfile>
      <anchor>a046cd84ad4df0ee0f48f67e0996575c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>tearDown</name>
      <anchorfile>classExceptionInSetUpTest.html</anchorfile>
      <anchor>ac57c4af975187b96c6ae2035b2c28efe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>assertPreConditions</name>
      <anchorfile>classExceptionInSetUpTest.html</anchorfile>
      <anchor>a34fdd8fe6b7be9b4cb2d5ccfaacf09ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>assertPostConditions</name>
      <anchorfile>classExceptionInSetUpTest.html</anchorfile>
      <anchor>ad3117a25ff9204ee2c964ab7aade7f87</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ExceptionInTearDownAfterClassTest</name>
    <filename>classExceptionInTearDownAfterClassTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testOne</name>
      <anchorfile>classExceptionInTearDownAfterClassTest.html</anchorfile>
      <anchor>a43289c5b90d97f4cd998d656619a995f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTwo</name>
      <anchorfile>classExceptionInTearDownAfterClassTest.html</anchorfile>
      <anchor>a061b59cabcf602f0bb82534e21b3f6af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>tearDownAfterClass</name>
      <anchorfile>classExceptionInTearDownAfterClassTest.html</anchorfile>
      <anchor>ad26c450eb61041dc6bc725479e92f59c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ExceptionInTearDownTest</name>
    <filename>classExceptionInTearDownTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classExceptionInTearDownTest.html</anchorfile>
      <anchor>a98b4075be1993c2b2136a795f7d79c9b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$setUp</name>
      <anchorfile>classExceptionInTearDownTest.html</anchorfile>
      <anchor>a24c28952166e5989181fd86dba90481e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$assertPreConditions</name>
      <anchorfile>classExceptionInTearDownTest.html</anchorfile>
      <anchor>a98bab44f338b703f77b3878015411774</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$assertPostConditions</name>
      <anchorfile>classExceptionInTearDownTest.html</anchorfile>
      <anchor>a22a0595777eb6f8599980596bf60aa09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$tearDown</name>
      <anchorfile>classExceptionInTearDownTest.html</anchorfile>
      <anchor>a3baecb5dd8342ff84908381a7b8deed2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$testSomething</name>
      <anchorfile>classExceptionInTearDownTest.html</anchorfile>
      <anchor>aa8f7ce165244b3e231d8a1c8cae3023c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classExceptionInTearDownTest.html</anchorfile>
      <anchor>a999b29ea41cd84bc781098f9a1907972</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>tearDown</name>
      <anchorfile>classExceptionInTearDownTest.html</anchorfile>
      <anchor>a0e7ac43610879acb320227118547dd56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>assertPreConditions</name>
      <anchorfile>classExceptionInTearDownTest.html</anchorfile>
      <anchor>af2fb3eb56b8aeee2b865402d9252e2cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>assertPostConditions</name>
      <anchorfile>classExceptionInTearDownTest.html</anchorfile>
      <anchor>acfd087759b0354d2d97223e77447a6bf</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>Doctrine::Instantiator::Exception::ExceptionInterface</name>
    <filename>interfaceDoctrine_1_1Instantiator_1_1Exception_1_1ExceptionInterface.html</filename>
  </compound>
  <compound kind="class">
    <name>ExceptionInTest</name>
    <filename>classExceptionInTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classExceptionInTest.html</anchorfile>
      <anchor>ac9a59a35195e42341ea7464e4db15215</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$setUp</name>
      <anchorfile>classExceptionInTest.html</anchorfile>
      <anchor>a4e801b48205625520f316e84782406e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$assertPreConditions</name>
      <anchorfile>classExceptionInTest.html</anchorfile>
      <anchor>ab94f4f6aa9845cb5b744673c64e54882</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$assertPostConditions</name>
      <anchorfile>classExceptionInTest.html</anchorfile>
      <anchor>a2dd0f39a525d92d05722fafd231fb90a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$tearDown</name>
      <anchorfile>classExceptionInTest.html</anchorfile>
      <anchor>a2c9141bc036ff7812f76575ca95b7cfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$testSomething</name>
      <anchorfile>classExceptionInTest.html</anchorfile>
      <anchor>a2f7d10ee593b118517ee2c6d83c337e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classExceptionInTest.html</anchorfile>
      <anchor>adf239c47298ba19d1d1d169154ca78ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>tearDown</name>
      <anchorfile>classExceptionInTest.html</anchorfile>
      <anchor>a5dee0ac6137cef92028541bad7ebbae9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>assertPreConditions</name>
      <anchorfile>classExceptionInTest.html</anchorfile>
      <anchor>a3a0a73caa36fff7558280082f90f7fb9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>assertPostConditions</name>
      <anchorfile>classExceptionInTest.html</anchorfile>
      <anchor>a0903a07977cbb285826747291e584d98</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ExceptionInTestDetectedInTeardown</name>
    <filename>classExceptionInTestDetectedInTeardown.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classExceptionInTestDetectedInTeardown.html</anchorfile>
      <anchor>addd74ff891c3d509102adef197a893c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$exceptionDetected</name>
      <anchorfile>classExceptionInTestDetectedInTeardown.html</anchorfile>
      <anchor>aa6d1be7a634becd19dec4d952d237915</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>tearDown</name>
      <anchorfile>classExceptionInTestDetectedInTeardown.html</anchorfile>
      <anchor>abe364f5003b92f947d20e4e5671fd30c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::ExceptionMessage</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1ExceptionMessage.html</filename>
    <base>PHPUnit::Framework::Constraint::Constraint</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1ExceptionMessage.html</anchorfile>
      <anchor>a52bf601a4642a743eb9e26f774b324c4</anchor>
      <arglist>(string $expected)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1ExceptionMessage.html</anchorfile>
      <anchor>ad67cf54880fc69b2fc35b80e0c601d76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>matches</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1ExceptionMessage.html</anchorfile>
      <anchor>a35678e5bcc56ebb7c19f8994816806ab</anchor>
      <arglist>($other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>failureDescription</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1ExceptionMessage.html</anchorfile>
      <anchor>a0de1aaf6426f027d5496eb2c4f56526f</anchor>
      <arglist>($other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::ExceptionMessageRegExpTest</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1ExceptionMessageRegExpTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testRegexMessage</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1ExceptionMessageRegExpTest.html</anchorfile>
      <anchor>a01071ec3aca6287eed9f2a5695f92286</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testRegexMessageExtreme</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1ExceptionMessageRegExpTest.html</anchorfile>
      <anchor>a960ca3fe95599c96d1b7e078d72fab3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testMessageXdebugScreamCompatibility</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1ExceptionMessageRegExpTest.html</anchorfile>
      <anchor>a8ff0beeef84043d68a21dd49be742cc0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testRegExMessageCanBeExportedAsString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1ExceptionMessageRegExpTest.html</anchorfile>
      <anchor>aacec618c5f99e574038f2da715987faf</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::ExceptionMessageRegularExpression</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1ExceptionMessageRegularExpression.html</filename>
    <base>PHPUnit::Framework::Constraint::Constraint</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1ExceptionMessageRegularExpression.html</anchorfile>
      <anchor>a16335f60b1d1e7cd6a6acbd11bbf691f</anchor>
      <arglist>(string $expected)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1ExceptionMessageRegularExpression.html</anchorfile>
      <anchor>ac6b774641a40a4f19c23979507817da1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>matches</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1ExceptionMessageRegularExpression.html</anchorfile>
      <anchor>aade2cdd331d8d4540dceba0ff4e1fab2</anchor>
      <arglist>($other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>failureDescription</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1ExceptionMessageRegularExpression.html</anchorfile>
      <anchor>ae07903aecaf81fa39fb662ac2d1c8b93</anchor>
      <arglist>($other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::ExceptionMessageTest</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1ExceptionMessageTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testLiteralMessage</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1ExceptionMessageTest.html</anchorfile>
      <anchor>ac5f5e7373153cdaf2cff0907782ace30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testPartialMessageBegin</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1ExceptionMessageTest.html</anchorfile>
      <anchor>a498a1c47dc980d29f0d260e91ac0d3d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testPartialMessageMiddle</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1ExceptionMessageTest.html</anchorfile>
      <anchor>a486685e51db3e5d2876f0b0e167a7d95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testPartialMessageEnd</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1ExceptionMessageTest.html</anchorfile>
      <anchor>a926492f9f753bdbae8670ca44baf5e0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testEmptyMessageExportToString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1ExceptionMessageTest.html</anchorfile>
      <anchor>ac8b4ba116d887516aec75ab460bd274f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testMessageExportToString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1ExceptionMessageTest.html</anchorfile>
      <anchor>a5c90f4d8a1ccfe373759fe450785b082</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>My::Space::ExceptionNamespaceTest</name>
    <filename>classMy_1_1Space_1_1ExceptionNamespaceTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testConstants</name>
      <anchorfile>classMy_1_1Space_1_1ExceptionNamespaceTest.html</anchorfile>
      <anchor>a867efb6fdea6c3646a5f4fd6c042b40d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testUnknownConstants</name>
      <anchorfile>classMy_1_1Space_1_1ExceptionNamespaceTest.html</anchorfile>
      <anchor>a40294a1ccef3bf550e69482a5e1dda24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>ERROR_MESSAGE</name>
      <anchorfile>classMy_1_1Space_1_1ExceptionNamespaceTest.html</anchorfile>
      <anchor>a12f751634bda23556ebdbad3a786b37f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>ERROR_CODE</name>
      <anchorfile>classMy_1_1Space_1_1ExceptionNamespaceTest.html</anchorfile>
      <anchor>a1612b25905d6c1007a4a8cad44a3c9aa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ExceptionStackTest</name>
    <filename>classExceptionStackTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testPrintingChildException</name>
      <anchorfile>classExceptionStackTest.html</anchorfile>
      <anchor>a0dd03c479f02a3be8c6b4a5ce1f1fa78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testNestedExceptions</name>
      <anchorfile>classExceptionStackTest.html</anchorfile>
      <anchor>a16611eccd1b5260cb6d7b394eb61974b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ExceptionTest</name>
    <filename>classExceptionTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testOne</name>
      <anchorfile>classExceptionTest.html</anchorfile>
      <anchor>aede2d597a3bb70e54746142f6fd27d8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTwo</name>
      <anchorfile>classExceptionTest.html</anchorfile>
      <anchor>a9906866a90f6aa440653082f0c9e3055</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testThree</name>
      <anchorfile>classExceptionTest.html</anchorfile>
      <anchor>afc4047792c5656e5971e421ef45a6912</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFour</name>
      <anchorfile>classExceptionTest.html</anchorfile>
      <anchor>a445347a97e426c0b789da7e267286d56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFive</name>
      <anchorfile>classExceptionTest.html</anchorfile>
      <anchor>ac486142f2ce15291ab09d23bafd0b70d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSix</name>
      <anchorfile>classExceptionTest.html</anchorfile>
      <anchor>a2c7b836250cae76f093e753ef38df327</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSeven</name>
      <anchorfile>classExceptionTest.html</anchorfile>
      <anchor>ac8dfa3364215e788ec7d46353e6d6c85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testEight</name>
      <anchorfile>classExceptionTest.html</anchorfile>
      <anchor>a6647b53f5c302401dc93219972d42496</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testNine</name>
      <anchorfile>classExceptionTest.html</anchorfile>
      <anchor>a55fca7cd42f152dcb092e727bab2deb9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSingleLine</name>
      <anchorfile>classExceptionTest.html</anchorfile>
      <anchor>ad536f5afbb3fe12ace9e2a754900dfb9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testUnknownConstants</name>
      <anchorfile>classExceptionTest.html</anchorfile>
      <anchor>ad0dceb30f81318fe2fecb42e020694cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testWithRegexMessage</name>
      <anchorfile>classExceptionTest.html</anchorfile>
      <anchor>a6fda35ebc679b2fbe733a9f495bff6ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testWithRegexMessageFromClassConstant</name>
      <anchorfile>classExceptionTest.html</anchorfile>
      <anchor>a69f915b84a06e7504fc2fa1870efa6f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testWithUnknowRegexMessageFromClassConstant</name>
      <anchorfile>classExceptionTest.html</anchorfile>
      <anchor>a05f289c0df25c2714efd491836371f5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>ERROR_MESSAGE</name>
      <anchorfile>classExceptionTest.html</anchorfile>
      <anchor>abb1afc0c07f00c08e43c44a9834266d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>ERROR_MESSAGE_REGEX</name>
      <anchorfile>classExceptionTest.html</anchorfile>
      <anchor>addbc933842f0c826e604e8d48d1540e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>ERROR_CODE</name>
      <anchorfile>classExceptionTest.html</anchorfile>
      <anchor>a0b184a6da739cee90ac74717b0a07d97</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::ExceptionTest</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1ExceptionTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testExceptionCanBeExportedAsString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1ExceptionTest.html</anchorfile>
      <anchor>a626fefaf284e71c5c1c4508a01603d80</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::ExceptionTest</name>
    <filename>classPHPUnit_1_1Framework_1_1ExceptionTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testExceptionSleep</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ExceptionTest.html</anchorfile>
      <anchor>a395fefbc8778129efc6e91f378d2f174</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::ObjectEnumerator::Fixtures::ExceptionThrower</name>
    <filename>classSebastianBergmann_1_1ObjectEnumerator_1_1Fixtures_1_1ExceptionThrower.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classSebastianBergmann_1_1ObjectEnumerator_1_1Fixtures_1_1ExceptionThrower.html</anchorfile>
      <anchor>a09b524873e9eeefec7f905572332c733</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__get</name>
      <anchorfile>classSebastianBergmann_1_1ObjectEnumerator_1_1Fixtures_1_1ExceptionThrower.html</anchorfile>
      <anchor>ac23e6374e8b82ae5d1de009ced595343</anchor>
      <arglist>($property)</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>ExceptionWithThrowable</name>
    <filename>interfaceExceptionWithThrowable.html</filename>
    <member kind="function">
      <type></type>
      <name>getAdditionalInformation</name>
      <anchorfile>interfaceExceptionWithThrowable.html</anchorfile>
      <anchor>afa355a8f5c87a52edf399528c93ea23c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::ExceptionWrapper</name>
    <filename>classPHPUnit_1_1Framework_1_1ExceptionWrapper.html</filename>
    <base>PHPUnit::Framework::Exception</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ExceptionWrapper.html</anchorfile>
      <anchor>a2422f4e493019e52402c03a7fe137859</anchor>
      <arglist>(Throwable $t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ExceptionWrapper.html</anchorfile>
      <anchor>a6188127a3a2276c7bd31f3d2edc73f60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getClassName</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ExceptionWrapper.html</anchorfile>
      <anchor>aa97b411526b0d10a6b8a226495e7de05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getPreviousWrapped</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ExceptionWrapper.html</anchorfile>
      <anchor>a2e53499472dbf837e0cae99772374c0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setClassName</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ExceptionWrapper.html</anchorfile>
      <anchor>ad6aad04e1c4ef96ccd770e876050d55f</anchor>
      <arglist>(string $className)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setOriginalException</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ExceptionWrapper.html</anchorfile>
      <anchor>aa442089efbb27f776a6f50edb4bff91b</anchor>
      <arglist>(Throwable $t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getOriginalException</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ExceptionWrapper.html</anchorfile>
      <anchor>ad2bcc9484c152a84bb3a5d11d6f609cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$className</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ExceptionWrapper.html</anchorfile>
      <anchor>abf098866a5310289b2df3cd5b2656df0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$previous</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ExceptionWrapper.html</anchorfile>
      <anchor>a8f852a365b5db19e85fc44ccd26d74b5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::ExceptionWrapperTest</name>
    <filename>classPHPUnit_1_1Framework_1_1ExceptionWrapperTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testGetOriginalException</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ExceptionWrapperTest.html</anchorfile>
      <anchor>acb1b008197c16ea4a931b0c79c8feb21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetOriginalExceptionWithPrevious</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ExceptionWrapperTest.html</anchorfile>
      <anchor>aac2ca584a2392df10757acccfb24cd13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testNoOriginalExceptionInStacktrace</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ExceptionWrapperTest.html</anchorfile>
      <anchor>ab8e8e9d330c2d55b0ba73fba2c0283cb</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Runner::Filter::ExcludeGroupFilterIterator</name>
    <filename>classPHPUnit_1_1Runner_1_1Filter_1_1ExcludeGroupFilterIterator.html</filename>
    <base>PHPUnit::Runner::Filter::GroupFilterIterator</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>doAccept</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1Filter_1_1ExcludeGroupFilterIterator.html</anchorfile>
      <anchor>a0b4a198f103f8653ea20ab2da91bd84e</anchor>
      <arglist>(string $hash)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::ExpectationFailedException</name>
    <filename>classPHPUnit_1_1Framework_1_1ExpectationFailedException.html</filename>
    <base>PHPUnit::Framework::AssertionFailedError</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ExpectationFailedException.html</anchorfile>
      <anchor>a1fef6561445dbcb0bf05da13d6b657d8</anchor>
      <arglist>(string $message, ComparisonFailure $comparisonFailure=null, \Exception $previous=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getComparisonFailure</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ExpectationFailedException.html</anchorfile>
      <anchor>ab7dee03aac8e8da91d80a866dc0cfd0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$comparisonFailure</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1ExpectationFailedException.html</anchorfile>
      <anchor>a52f10b30a33b5124259a9991170f17ea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Exporter::Exporter</name>
    <filename>classSebastianBergmann_1_1Exporter_1_1Exporter.html</filename>
    <member kind="function">
      <type></type>
      <name>export</name>
      <anchorfile>classSebastianBergmann_1_1Exporter_1_1Exporter.html</anchorfile>
      <anchor>a475f8b4c5f21f87488fe11cf3ff0e625</anchor>
      <arglist>($value, $indentation=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>shortenedRecursiveExport</name>
      <anchorfile>classSebastianBergmann_1_1Exporter_1_1Exporter.html</anchorfile>
      <anchor>a10ee3b6b68d102a72d54dc04198218c0</anchor>
      <arglist>(&amp;$data, Context $context=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>shortenedExport</name>
      <anchorfile>classSebastianBergmann_1_1Exporter_1_1Exporter.html</anchorfile>
      <anchor>a8a626e5a83786ee4e9b798591f57ff8c</anchor>
      <arglist>($value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toArray</name>
      <anchorfile>classSebastianBergmann_1_1Exporter_1_1Exporter.html</anchorfile>
      <anchor>a0ca652e048e6207ad8e86797c95cc6a6</anchor>
      <arglist>($value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>recursiveExport</name>
      <anchorfile>classSebastianBergmann_1_1Exporter_1_1Exporter.html</anchorfile>
      <anchor>ac5adb28b4c2b0dcb2a735fa27565c44d</anchor>
      <arglist>(&amp;$value, $indentation, $processed=null)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Exporter::ExporterTest</name>
    <filename>classSebastianBergmann_1_1Exporter_1_1ExporterTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>exportProvider</name>
      <anchorfile>classSebastianBergmann_1_1Exporter_1_1ExporterTest.html</anchorfile>
      <anchor>aa6d60a7b6b4af5e6a6ef66e66ead9c13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExport</name>
      <anchorfile>classSebastianBergmann_1_1Exporter_1_1ExporterTest.html</anchorfile>
      <anchor>ae740e0d715560aab68ab5d2f8debea23</anchor>
      <arglist>($value, $expected)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExport2</name>
      <anchorfile>classSebastianBergmann_1_1Exporter_1_1ExporterTest.html</anchorfile>
      <anchor>ad5fc5c877e993ed5624946c5eb2e5336</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>shortenedExportProvider</name>
      <anchorfile>classSebastianBergmann_1_1Exporter_1_1ExporterTest.html</anchorfile>
      <anchor>a278697ea9d01bf228a96bf2ffec3927a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testShortenedExport</name>
      <anchorfile>classSebastianBergmann_1_1Exporter_1_1ExporterTest.html</anchorfile>
      <anchor>a1615da98f0245f07193086eca8223a6c</anchor>
      <arglist>($value, $expected)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testShortenedExportForMultibyteCharacters</name>
      <anchorfile>classSebastianBergmann_1_1Exporter_1_1ExporterTest.html</anchorfile>
      <anchor>aacce5e1b026f21b9f67aa0c3d2659a44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>provideNonBinaryMultibyteStrings</name>
      <anchorfile>classSebastianBergmann_1_1Exporter_1_1ExporterTest.html</anchorfile>
      <anchor>ac6220774ea022467ce6f0803e5fed4ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testNonBinaryStringExport</name>
      <anchorfile>classSebastianBergmann_1_1Exporter_1_1ExporterTest.html</anchorfile>
      <anchor>a23c875b1bf4a6a97c420cde26711b1fb</anchor>
      <arglist>($value, $expectedLength)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testNonObjectCanBeReturnedAsArray</name>
      <anchorfile>classSebastianBergmann_1_1Exporter_1_1ExporterTest.html</anchorfile>
      <anchor>af7d6bb6f09efa144a9b437624901aba1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIgnoreKeysInValue</name>
      <anchorfile>classSebastianBergmann_1_1Exporter_1_1ExporterTest.html</anchorfile>
      <anchor>a096a0d3daf96f3f5080132d9e728cf69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testShortenedRecursiveExport</name>
      <anchorfile>classSebastianBergmann_1_1Exporter_1_1ExporterTest.html</anchorfile>
      <anchor>a51405c0dfc4f0cfd17da2c2f6f72eda6</anchor>
      <arglist>(array $value, string $expected)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>shortenedRecursiveExportProvider</name>
      <anchorfile>classSebastianBergmann_1_1Exporter_1_1ExporterTest.html</anchorfile>
      <anchor>abbd4c7ed204e45c12a8d01803da6b9d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testShortenedRecursiveOccurredRecursion</name>
      <anchorfile>classSebastianBergmann_1_1Exporter_1_1ExporterTest.html</anchorfile>
      <anchor>a17f54cfd77e0d249b3b62f3de23a1b37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classSebastianBergmann_1_1Exporter_1_1ExporterTest.html</anchorfile>
      <anchor>ad8acd6ab5fabc1f91f9ad50e03ee1300</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Util::ExportUtil</name>
    <filename>classProphecy_1_1Util_1_1ExportUtil.html</filename>
    <member kind="function" static="yes">
      <type>static</type>
      <name>export</name>
      <anchorfile>classProphecy_1_1Util_1_1ExportUtil.html</anchorfile>
      <anchor>aa0cc70d261ab5f8a6cc31204456d2633</anchor>
      <arglist>($value, $indentation=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>toArray</name>
      <anchorfile>classProphecy_1_1Util_1_1ExportUtil.html</anchorfile>
      <anchor>a7241bb95654a7f02ceba5f4341a6c44a</anchor>
      <arglist>($value)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static</type>
      <name>recursiveExport</name>
      <anchorfile>classProphecy_1_1Util_1_1ExportUtil.html</anchorfile>
      <anchor>ab4689a3786dce5967752224b6eddb410</anchor>
      <arglist>(&amp;$value, $indentation, $processed=null)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::Types::Expression</name>
    <filename>classphpDocumentor_1_1Reflection_1_1Types_1_1Expression.html</filename>
    <base>phpDocumentor::Reflection::Type</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1Expression.html</anchorfile>
      <anchor>a9e6a067967f9aeef1e5634f802dc331e</anchor>
      <arglist>(Type $valueType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getValueType</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1Expression.html</anchorfile>
      <anchor>a3eeb628137075b1a9244a1a43f53b40a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1Expression.html</anchorfile>
      <anchor>a22a93a2926712f65fed3742fbad67cee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$valueType</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1Expression.html</anchorfile>
      <anchor>ad0806cf9ca785ec5ca2857cba6b128ed</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::ExtElement</name>
    <filename>classPharIo_1_1Manifest_1_1ExtElement.html</filename>
    <base>PharIo::Manifest::ManifestElement</base>
    <member kind="function">
      <type></type>
      <name>getName</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ExtElement.html</anchorfile>
      <anchor>af574394b7728e8918ab4739e891a5872</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::ExtElementCollection</name>
    <filename>classPharIo_1_1Manifest_1_1ExtElementCollection.html</filename>
    <base>PharIo::Manifest::ElementCollection</base>
    <member kind="function">
      <type></type>
      <name>current</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ExtElementCollection.html</anchorfile>
      <anchor>a079812c1d835426198857a588a97c8b6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::ExtElementCollectionTest</name>
    <filename>classPharIo_1_1Manifest_1_1ExtElementCollectionTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testComponentElementCanBeRetrievedFromCollection</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ExtElementCollectionTest.html</anchorfile>
      <anchor>ae423fdc5e2ac465a0adf005832a565cc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::ExtElementTest</name>
    <filename>classPharIo_1_1Manifest_1_1ExtElementTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testNameCanBeRetrieved</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ExtElementTest.html</anchorfile>
      <anchor>a362bc47c68792adca1493bd9df65e67d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ExtElementTest.html</anchorfile>
      <anchor>a20b12f09ab1376ff5cb939859db95c07</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Other::Space::Extender</name>
    <filename>classOther_1_1Space_1_1Extender.html</filename>
    <base>Foo::Bar::Baz</base>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Test::Extension</name>
    <filename>classPHPUnit_1_1Test_1_1Extension.html</filename>
    <base>PHPUnit::Runner::AfterIncompleteTestHook</base>
    <base>PHPUnit::Runner::AfterLastTestHook</base>
    <base>PHPUnit::Runner::AfterRiskyTestHook</base>
    <base>PHPUnit::Runner::AfterSkippedTestHook</base>
    <base>PHPUnit::Runner::AfterSuccessfulTestHook</base>
    <base>PHPUnit::Runner::AfterTestErrorHook</base>
    <base>PHPUnit::Runner::AfterTestFailureHook</base>
    <base>PHPUnit::Runner::AfterTestHook</base>
    <base>PHPUnit::Runner::AfterTestWarningHook</base>
    <base>PHPUnit::Runner::BeforeFirstTestHook</base>
    <base>PHPUnit::Runner::BeforeTestHook</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Test_1_1Extension.html</anchorfile>
      <anchor>a740ad2128932ee95071b625e4bf5913a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>tellAmountOfInjectedArguments</name>
      <anchorfile>classPHPUnit_1_1Test_1_1Extension.html</anchorfile>
      <anchor>a9f90ff1b164388c3dca83d01d1fc7166</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>executeBeforeFirstTest</name>
      <anchorfile>classPHPUnit_1_1Test_1_1Extension.html</anchorfile>
      <anchor>a3b395188640fb3c2072c2a8d14344d83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>executeBeforeTest</name>
      <anchorfile>classPHPUnit_1_1Test_1_1Extension.html</anchorfile>
      <anchor>af67070c0c479a6be396b8a50b88efb80</anchor>
      <arglist>(string $test)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>executeAfterTest</name>
      <anchorfile>classPHPUnit_1_1Test_1_1Extension.html</anchorfile>
      <anchor>a6124fb09b1512547002a66c55bf6cb4d</anchor>
      <arglist>(string $test, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>executeAfterSuccessfulTest</name>
      <anchorfile>classPHPUnit_1_1Test_1_1Extension.html</anchorfile>
      <anchor>aae7a570f4b4ba98341861a0f190c1009</anchor>
      <arglist>(string $test, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>executeAfterIncompleteTest</name>
      <anchorfile>classPHPUnit_1_1Test_1_1Extension.html</anchorfile>
      <anchor>a4ff5909990a0e4476f8995d42e63505f</anchor>
      <arglist>(string $test, string $message, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>executeAfterRiskyTest</name>
      <anchorfile>classPHPUnit_1_1Test_1_1Extension.html</anchorfile>
      <anchor>a1d6fec393a4591aebdc829ac1f6aa94a</anchor>
      <arglist>(string $test, string $message, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>executeAfterSkippedTest</name>
      <anchorfile>classPHPUnit_1_1Test_1_1Extension.html</anchorfile>
      <anchor>aa342df9b1a14ac5bb9472a6c645f8dc7</anchor>
      <arglist>(string $test, string $message, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>executeAfterTestError</name>
      <anchorfile>classPHPUnit_1_1Test_1_1Extension.html</anchorfile>
      <anchor>a47b58d449b69f1e7c3b181fa8089e0c4</anchor>
      <arglist>(string $test, string $message, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>executeAfterTestFailure</name>
      <anchorfile>classPHPUnit_1_1Test_1_1Extension.html</anchorfile>
      <anchor>ac4e51aa3fba1577468a067b321bf113a</anchor>
      <arglist>(string $test, string $message, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>executeAfterTestWarning</name>
      <anchorfile>classPHPUnit_1_1Test_1_1Extension.html</anchorfile>
      <anchor>aebc678c2ae4bf0aeb05a204041553dfd</anchor>
      <arglist>(string $test, string $message, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>executeAfterLastTest</name>
      <anchorfile>classPHPUnit_1_1Test_1_1Extension.html</anchorfile>
      <anchor>a92d16b8d77ecd0f164d80d0c8c3bf454</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::Extension</name>
    <filename>classPharIo_1_1Manifest_1_1Extension.html</filename>
    <base>PharIo::Manifest::Type</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPharIo_1_1Manifest_1_1Extension.html</anchorfile>
      <anchor>a2ec1b9400410732f799ce52241418f94</anchor>
      <arglist>(ApplicationName $application, VersionConstraint $versionConstraint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getApplicationName</name>
      <anchorfile>classPharIo_1_1Manifest_1_1Extension.html</anchorfile>
      <anchor>ab2d233ed7705decb67da09641ba7c1ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getVersionConstraint</name>
      <anchorfile>classPharIo_1_1Manifest_1_1Extension.html</anchorfile>
      <anchor>a71473d171d34b61f1947e97eb5e68d24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isExtension</name>
      <anchorfile>classPharIo_1_1Manifest_1_1Extension.html</anchorfile>
      <anchor>aecb8d635d27460e78b4d720965a1be86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isExtensionFor</name>
      <anchorfile>classPharIo_1_1Manifest_1_1Extension.html</anchorfile>
      <anchor>a4d3353e70d7e988bd7e8be9f9b3c6ffc</anchor>
      <arglist>(ApplicationName $name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isCompatibleWith</name>
      <anchorfile>classPharIo_1_1Manifest_1_1Extension.html</anchorfile>
      <anchor>a05625a7008e32b735f178326a869c46d</anchor>
      <arglist>(ApplicationName $name, Version $version)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::ExtensionElement</name>
    <filename>classPharIo_1_1Manifest_1_1ExtensionElement.html</filename>
    <base>PharIo::Manifest::ManifestElement</base>
    <member kind="function">
      <type></type>
      <name>getFor</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ExtensionElement.html</anchorfile>
      <anchor>a4145eab3c675a269c871bd7ae29c64dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getCompatible</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ExtensionElement.html</anchorfile>
      <anchor>a4e955c014fed30d610abd9d2c52b5a58</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::ExtensionElementTest</name>
    <filename>classPharIo_1_1Manifest_1_1ExtensionElementTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testNForCanBeRetrieved</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ExtensionElementTest.html</anchorfile>
      <anchor>a049982290d47917f60b32cd36dbee379</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCompatibleVersionConstraintCanBeRetrieved</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ExtensionElementTest.html</anchorfile>
      <anchor>abc237f5feea27ba1a2a86ed468f63822</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ExtensionElementTest.html</anchorfile>
      <anchor>ae5100764c5a76e66b4773a5cd64296b1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::ExtensionTest</name>
    <filename>classPharIo_1_1Manifest_1_1ExtensionTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testCanBeCreated</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ExtensionTest.html</anchorfile>
      <anchor>a42f6cc89d3074358e4af1f67b8b10831</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIsNotApplication</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ExtensionTest.html</anchorfile>
      <anchor>a4c726b15e7ab89b9263fb9cee82ec373</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIsNotLibrary</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ExtensionTest.html</anchorfile>
      <anchor>ae71dcef4725ff48f0a80c4aa54e4dbde</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIsExtension</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ExtensionTest.html</anchorfile>
      <anchor>aa88b58a8f7e26525e196b59bc39916ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testApplicationCanBeRetrieved</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ExtensionTest.html</anchorfile>
      <anchor>a3becf0f7414306ba657d560a486961c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testVersionConstraintCanBeRetrieved</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ExtensionTest.html</anchorfile>
      <anchor>a6715ddcc88ff2c513874f1ac2c9cb79c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testApplicationCanBeQueried</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ExtensionTest.html</anchorfile>
      <anchor>a4a346a433a286f3ec070b239da14a0fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCompatibleWithReturnsTrueForMatchingVersionConstraintAndApplicaiton</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ExtensionTest.html</anchorfile>
      <anchor>acdc81951dc98c66836fc9c7d52f0990a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCompatibleWithReturnsFalseForNotMatchingVersionConstraint</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ExtensionTest.html</anchorfile>
      <anchor>a1fd753c0180c329c142bca680d42e780</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCompatibleWithReturnsFalseForNotMatchingApplication</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ExtensionTest.html</anchorfile>
      <anchor>a55574a3964e7bb9ee11b2c3cae7fb5af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ExtensionTest.html</anchorfile>
      <anchor>ae527187b30c3e05a41c0369781d08ab6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::FileIterator::Facade</name>
    <filename>classSebastianBergmann_1_1FileIterator_1_1Facade.html</filename>
    <member kind="function">
      <type></type>
      <name>getFilesAsArray</name>
      <anchorfile>classSebastianBergmann_1_1FileIterator_1_1Facade.html</anchorfile>
      <anchor>a5e95d0dab9b129b5aa2581906f1a5cf9</anchor>
      <arglist>($paths, $suffixes=&apos;&apos;, $prefixes=&apos;&apos;, array $exclude=[], bool $commonPath=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>getCommonPath</name>
      <anchorfile>classSebastianBergmann_1_1FileIterator_1_1Facade.html</anchorfile>
      <anchor>a253511788ccb8b9faa5402cafefd87de</anchor>
      <arglist>(array $files)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::CodeCoverage::Report::Html::Facade</name>
    <filename>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Html_1_1Facade.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Html_1_1Facade.html</anchorfile>
      <anchor>a1837c2993176e21bd93e27d747bfa7dc</anchor>
      <arglist>(int $lowUpperBound=50, int $highLowerBound=90, string $generator=&apos;&apos;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>process</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Html_1_1Facade.html</anchorfile>
      <anchor>a365bd655dca1beb323862a5df295ace1</anchor>
      <arglist>(CodeCoverage $coverage, string $target)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::CodeCoverage::Report::Xml::Facade</name>
    <filename>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1Facade.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1Facade.html</anchorfile>
      <anchor>a9301ca4fb5c56f7e92eefd64c81de126</anchor>
      <arglist>(string $version)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>process</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1Facade.html</anchorfile>
      <anchor>aa8d8c19347c8d20a9f034001fa4037e5</anchor>
      <arglist>(CodeCoverage $coverage, string $target)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::FileIterator::Factory</name>
    <filename>classSebastianBergmann_1_1FileIterator_1_1Factory.html</filename>
    <member kind="function">
      <type></type>
      <name>getFileIterator</name>
      <anchorfile>classSebastianBergmann_1_1FileIterator_1_1Factory.html</anchorfile>
      <anchor>ab65e4fe4c5553df4d7cdd2bad0de071c</anchor>
      <arglist>($paths, $suffixes=&apos;&apos;, $prefixes=&apos;&apos;, array $exclude=[])</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>getPathsAfterResolvingWildcards</name>
      <anchorfile>classSebastianBergmann_1_1FileIterator_1_1Factory.html</anchorfile>
      <anchor>a0d9939ab648c3ee1fb5bd18afc8816e5</anchor>
      <arglist>(array $paths)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Comparator::Factory</name>
    <filename>classSebastianBergmann_1_1Comparator_1_1Factory.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1Factory.html</anchorfile>
      <anchor>a3f6f6ee21d0ae3ba3c6f1a1001886fcd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getComparatorFor</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1Factory.html</anchorfile>
      <anchor>aef0d302f745ff6498960a713c978e8f6</anchor>
      <arglist>($expected, $actual)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>register</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1Factory.html</anchorfile>
      <anchor>abd55efa9f80b070684215c025ae2abf0</anchor>
      <arglist>(Comparator $comparator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>unregister</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1Factory.html</anchorfile>
      <anchor>af2faa4fc2c5efa290820b65d2672c84d</anchor>
      <arglist>(Comparator $comparator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>reset</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1Factory.html</anchorfile>
      <anchor>a2865b7ec47274a23884192ad123f6ee4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>getInstance</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1Factory.html</anchorfile>
      <anchor>a2abad6a08471ccf25890e2aaeea3dd62</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Comparator::Factory</name>
    <filename>classProphecy_1_1Comparator_1_1Factory.html</filename>
    <base>SebastianBergmann::Comparator::Factory</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classProphecy_1_1Comparator_1_1Factory.html</anchorfile>
      <anchor>a6be1e18e8c5e927def496795ef2e9585</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>getInstance</name>
      <anchorfile>classProphecy_1_1Comparator_1_1Factory.html</anchorfile>
      <anchor>a0932170ceb6722d0334f754f7ad5b4b0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Runner::Filter::Factory</name>
    <filename>classPHPUnit_1_1Runner_1_1Filter_1_1Factory.html</filename>
    <member kind="function">
      <type></type>
      <name>addFilter</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1Filter_1_1Factory.html</anchorfile>
      <anchor>a8b36caecb46e638b5b84013d8ec902ef</anchor>
      <arglist>(ReflectionClass $filter, $args)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>factory</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1Filter_1_1Factory.html</anchorfile>
      <anchor>a5e17fb6ebec401ebea82d70b1e70c70e</anchor>
      <arglist>(Iterator $iterator, TestSuite $suite)</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>Contracts::FactoryInterface</name>
    <filename>interfaceContracts_1_1FactoryInterface.html</filename>
    <member kind="function">
      <type></type>
      <name>getInstance</name>
      <anchorfile>interfaceContracts_1_1FactoryInterface.html</anchorfile>
      <anchor>aa700d94805052e351f13165219630908</anchor>
      <arglist>(string $identifier, array $config=[])</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Comparator::FactoryTest</name>
    <filename>classSebastianBergmann_1_1Comparator_1_1FactoryTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>instanceProvider</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1FactoryTest.html</anchorfile>
      <anchor>a9fc3c586ffc733398d5c1ec1874ec50f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetComparatorFor</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1FactoryTest.html</anchorfile>
      <anchor>a22db1a3e1d660f6faa142bb249ccf01b</anchor>
      <arglist>($a, $b, $expected)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testRegister</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1FactoryTest.html</anchorfile>
      <anchor>a86c5c0d812d0d7a3484643bb9be7f8c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testUnregister</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1FactoryTest.html</anchorfile>
      <anchor>abed6ca8aeb0f6d93bb79c273aa1adc4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIsSingleton</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1FactoryTest.html</anchorfile>
      <anchor>aec0ae9a521ad17a08a82df2acae16bec</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::FileIterator::FactoryTest</name>
    <filename>classSebastianBergmann_1_1FileIterator_1_1FactoryTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testFindFilesInTestDirectory</name>
      <anchorfile>classSebastianBergmann_1_1FileIterator_1_1FactoryTest.html</anchorfile>
      <anchor>aefd932dd8864642bec4cba0ae989a227</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFindFilesWithExcludedNonExistingSubdirectory</name>
      <anchorfile>classSebastianBergmann_1_1FileIterator_1_1FactoryTest.html</anchorfile>
      <anchor>a2936ab416cddac27864867262aedfc09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classSebastianBergmann_1_1FileIterator_1_1FactoryTest.html</anchorfile>
      <anchor>a82a5ecad90ecc66b5825172867ee570f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Exception::Prediction::FailedPredictionException</name>
    <filename>classProphecy_1_1Exception_1_1Prediction_1_1FailedPredictionException.html</filename>
    <base>Prophecy::Exception::Prediction::PredictionException</base>
  </compound>
  <compound kind="class">
    <name>Failure</name>
    <filename>classFailure.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>runTest</name>
      <anchorfile>classFailure.html</anchorfile>
      <anchor>a5c268540f97404cccf415f418100ec3f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FailureTest</name>
    <filename>classFailureTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testAssertArrayEqualsArray</name>
      <anchorfile>classFailureTest.html</anchorfile>
      <anchor>afeb10a11abd456b59c4dc0ba5e0e3415</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertIntegerEqualsInteger</name>
      <anchorfile>classFailureTest.html</anchorfile>
      <anchor>ab99b04dadb713d0883c442f7488b639f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertObjectEqualsObject</name>
      <anchorfile>classFailureTest.html</anchorfile>
      <anchor>a98ae67eb0ddadb30bac446938c863ca0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertNullEqualsString</name>
      <anchorfile>classFailureTest.html</anchorfile>
      <anchor>a9df2d89fe510bc7ce5e3693bae201c30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertStringEqualsString</name>
      <anchorfile>classFailureTest.html</anchorfile>
      <anchor>a1dd8299134db059199679c1ba81e4eb8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertTextEqualsText</name>
      <anchorfile>classFailureTest.html</anchorfile>
      <anchor>a6c03f16621b062f5e22e5babdc6c1bb7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertStringMatchesFormat</name>
      <anchorfile>classFailureTest.html</anchorfile>
      <anchor>a4259b7af09984580cb323076874a56db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertNumericEqualsNumeric</name>
      <anchorfile>classFailureTest.html</anchorfile>
      <anchor>a4185ce07eeddfc763529836615e9e9d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertTextSameText</name>
      <anchorfile>classFailureTest.html</anchorfile>
      <anchor>af9101dff8d76fe51a51f756560d9677b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertObjectSameObject</name>
      <anchorfile>classFailureTest.html</anchorfile>
      <anchor>a2cc631758a9ef8b676f325327987d96f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertObjectSameNull</name>
      <anchorfile>classFailureTest.html</anchorfile>
      <anchor>a23bb274bbb639736aa4ff996b86f827b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertFloatSameFloat</name>
      <anchorfile>classFailureTest.html</anchorfile>
      <anchor>a2d39b50fe2c2ea7b1245f6b918776ce1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertStringMatchesFormatFile</name>
      <anchorfile>classFailureTest.html</anchorfile>
      <anchor>aca67ec2e5bc472932a9d4768be15af44</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeepCopyTest::TypeFilter::Spl::FakeDeepCopy</name>
    <filename>classDeepCopyTest_1_1TypeFilter_1_1Spl_1_1FakeDeepCopy.html</filename>
    <base>DeepCopy::DeepCopy</base>
    <member kind="function">
      <type></type>
      <name>copy</name>
      <anchorfile>classDeepCopyTest_1_1TypeFilter_1_1Spl_1_1FakeDeepCopy.html</anchorfile>
      <anchor>aea28efb416ac00f05382cff79520edf2</anchor>
      <arglist>($object)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::PseudoTypes::False_</name>
    <filename>classphpDocumentor_1_1Reflection_1_1PseudoTypes_1_1False__.html</filename>
    <base>phpDocumentor::Reflection::Types::Boolean</base>
    <base>phpDocumentor::Reflection::PseudoType</base>
    <member kind="function">
      <type></type>
      <name>underlyingType</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1PseudoTypes_1_1False__.html</anchorfile>
      <anchor>ac2bc41c34e698c1b4fa958535a98dd38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1PseudoTypes_1_1False__.html</anchorfile>
      <anchor>a95c8e2375debde19b98d7f4e61d72864</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::PseudoTypes::FalseTest</name>
    <filename>classphpDocumentor_1_1Reflection_1_1PseudoTypes_1_1FalseTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testExposesUnderlyingType</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1PseudoTypes_1_1FalseTest.html</anchorfile>
      <anchor>a7201921701ad825e009916b34de7df73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFalseStringifyCorrectly</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1PseudoTypes_1_1FalseTest.html</anchorfile>
      <anchor>ab5d01d4830e5055b62fa93f40c0a78ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCanBeInstantiatedUsingDeprecatedFqsen</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1PseudoTypes_1_1FalseTest.html</anchorfile>
      <anchor>a0fffdc05604e88f40cee33a85cee69a4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FalsyConstraint</name>
    <filename>classFalsyConstraint.html</filename>
    <base>PHPUnit::Framework::Constraint::Constraint</base>
    <member kind="function">
      <type></type>
      <name>matches</name>
      <anchorfile>classFalsyConstraint.html</anchorfile>
      <anchor>abcffdb780574d1cd0ba765bcd92d42cc</anchor>
      <arglist>($other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classFalsyConstraint.html</anchorfile>
      <anchor>a6e304f0feebd8b5a6f45a9bcbfa989e8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FatalTest</name>
    <filename>classFatalTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testFatalError</name>
      <anchorfile>classFatalTest.html</anchorfile>
      <anchor>a9a082c1a26bd8042a9d833789e285734</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>phpDocumentor::Reflection::File</name>
    <filename>interfacephpDocumentor_1_1Reflection_1_1File.html</filename>
    <member kind="function">
      <type></type>
      <name>getContents</name>
      <anchorfile>interfacephpDocumentor_1_1Reflection_1_1File.html</anchorfile>
      <anchor>abe5b71c83f9b8693b3f9d6d8a38e244c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>md5</name>
      <anchorfile>interfacephpDocumentor_1_1Reflection_1_1File.html</anchorfile>
      <anchor>ad72a02bdf2f8d0e7525f71749334f91f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>path</name>
      <anchorfile>interfacephpDocumentor_1_1Reflection_1_1File.html</anchorfile>
      <anchor>af7128dae37d1fcb58e77ff7f9aa1aceb</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::CodeCoverage::Node::File</name>
    <filename>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1File.html</filename>
    <base>SebastianBergmann::CodeCoverage::Node::AbstractNode</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1File.html</anchorfile>
      <anchor>a21fe4a73d364f3b12934e9428a766e85</anchor>
      <arglist>(string $name, AbstractNode $parent, array $coverageData, array $testData, bool $cacheTokens)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>count</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1File.html</anchorfile>
      <anchor>a94991c0af50fcb8dd3c1400a2e354e7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getCoverageData</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1File.html</anchorfile>
      <anchor>a78a894028fe8021c7cc0f6cbc0160ca2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getTestData</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1File.html</anchorfile>
      <anchor>aa3f26091607f9ee59858e50a2c5e4d61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getClasses</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1File.html</anchorfile>
      <anchor>ae709233c7e2a0adcf4e3d10c88aeb857</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getTraits</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1File.html</anchorfile>
      <anchor>a750e027251527e6ae7bbd218b11fa910</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getFunctions</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1File.html</anchorfile>
      <anchor>aeaa110266ca42a0319cf830df96ea6b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getLinesOfCode</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1File.html</anchorfile>
      <anchor>a5ff8b3b59d06eb9236a1369ee99f896e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getNumExecutableLines</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1File.html</anchorfile>
      <anchor>afc3f75f571791ab6b9f9e8a8c77ed76a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getNumExecutedLines</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1File.html</anchorfile>
      <anchor>a6a029c7597cb0825a6192ef4fbc9da84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getNumClasses</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1File.html</anchorfile>
      <anchor>aa00b4068fb297e23fd8643a7be2c25eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getNumTestedClasses</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1File.html</anchorfile>
      <anchor>a8aecf28f8cb4ccadf5d9cfc0b67b6a9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getNumTraits</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1File.html</anchorfile>
      <anchor>a69fec0895597d9500c428d032f120268</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getNumTestedTraits</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1File.html</anchorfile>
      <anchor>ac07daceab892404c11c499c2c622c546</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getNumMethods</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1File.html</anchorfile>
      <anchor>a50a28703567577cf8a9fb3002d24b08b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getNumTestedMethods</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1File.html</anchorfile>
      <anchor>aa3866e4d8a8c8d0efd810ace097e332f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getNumFunctions</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1File.html</anchorfile>
      <anchor>aa8aa69275e37d7cf48bd75864b3892d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getNumTestedFunctions</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1File.html</anchorfile>
      <anchor>ae577b153f8519d54664526f37ac39ccd</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::CodeCoverage::Report::Html::File</name>
    <filename>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Html_1_1File.html</filename>
    <base>SebastianBergmann::CodeCoverage::Report::Html::Renderer</base>
    <member kind="function">
      <type></type>
      <name>render</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Html_1_1File.html</anchorfile>
      <anchor>a3c833926d02efe8ebe76802cde115538</anchor>
      <arglist>(FileNode $node, string $file)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>renderItems</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Html_1_1File.html</anchorfile>
      <anchor>a2993b0efa9f0b2d8647c5242f0bb0d81</anchor>
      <arglist>(FileNode $node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>renderTraitOrClassItems</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Html_1_1File.html</anchorfile>
      <anchor>aab9b4a9afa53e113ae62991a689f8ec9</anchor>
      <arglist>(array $items, \Text_Template $template, \Text_Template $methodItemTemplate)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>renderFunctionItems</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Html_1_1File.html</anchorfile>
      <anchor>a854c6510fbc1c75f1f2dcb48bd6353a1</anchor>
      <arglist>(array $functions, \Text_Template $template)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>renderFunctionOrMethodItem</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Html_1_1File.html</anchorfile>
      <anchor>a8e82588c15e1874964b22b985549ddbc</anchor>
      <arglist>(\Text_Template $template, array $item, string $indent=&apos;&apos;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>renderSource</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Html_1_1File.html</anchorfile>
      <anchor>ae0fc1ec2c607d7470f94a47dee40fedf</anchor>
      <arglist>(FileNode $node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>loadFile</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Html_1_1File.html</anchorfile>
      <anchor>af9dd20afc220c41554fbeb2a43b6ee72</anchor>
      <arglist>($file)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::CodeCoverage::Report::Xml::File</name>
    <filename>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1File.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1File.html</anchorfile>
      <anchor>a55f67a0292ead9e09a58808e1e89618d</anchor>
      <arglist>(\DOMElement $context)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getTotals</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1File.html</anchorfile>
      <anchor>a5adc9653ef487025b955104493083120</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getLineCoverage</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1File.html</anchorfile>
      <anchor>a0d822cf6c28fd22c8a6766f6f0856171</anchor>
      <arglist>(string $line)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>getContextNode</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1File.html</anchorfile>
      <anchor>a872c5f914d0da7b367334a3e28f602e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>getDomDocument</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1File.html</anchorfile>
      <anchor>acf9b6e6cf372f6bd98ff524c9efd795c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileFetcher::FileCopyInterruptedException</name>
    <filename>classFileFetcher_1_1FileCopyInterruptedException.html</filename>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::FileExists</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1FileExists.html</filename>
    <base>PHPUnit::Framework::Constraint::Constraint</base>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1FileExists.html</anchorfile>
      <anchor>a215708acb845a56e4d5b67100f7d410a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>matches</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1FileExists.html</anchorfile>
      <anchor>a42f26961b7049cb344472f5ec47e00e1</anchor>
      <arglist>($other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>failureDescription</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1FileExists.html</anchorfile>
      <anchor>a2828194c6934d82f606817d82e345496</anchor>
      <arglist>($other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::FileExistsTest</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1FileExistsTest.html</filename>
    <base>PHPUnit::Framework::Constraint::ConstraintTestCase</base>
    <member kind="function">
      <type></type>
      <name>testConstraintFileExists</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1FileExistsTest.html</anchorfile>
      <anchor>a8635835d2eceb68f15951f041b22494c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintFileExists2</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1FileExistsTest.html</anchorfile>
      <anchor>a1d8e378d09ab6a92c6925cd86ef870d1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileFetcher::FileFetcher</name>
    <filename>classFileFetcher_1_1FileFetcher.html</filename>
    <base>Procrastinator::Job::AbstractPersistentJob</base>
    <member kind="function">
      <type></type>
      <name>setTimeLimit</name>
      <anchorfile>classFileFetcher_1_1FileFetcher.html</anchorfile>
      <anchor>a055989cc58890d0b14963fc8cce0382e</anchor>
      <arglist>(int $seconds)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>__construct</name>
      <anchorfile>classFileFetcher_1_1FileFetcher.html</anchorfile>
      <anchor>a78be09e132232249ead2a65495d8ecfb</anchor>
      <arglist>(string $identifier, $storage, array $config=null)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>runIt</name>
      <anchorfile>classFileFetcher_1_1FileFetcher.html</anchorfile>
      <anchor>a4babdf20c7219aa3d31859b8a28c79af</anchor>
      <arglist>()</arglist>
    </member>
    <docanchor file="classFileFetcher_1_1FileFetcher" title="Basic Usage:">autotoc_md1</docanchor>
  </compound>
  <compound kind="class">
    <name>FileFetcherTest::FileFetcherTest</name>
    <filename>classFileFetcherTest_1_1FileFetcherTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testRemote</name>
      <anchorfile>classFileFetcherTest_1_1FileFetcherTest.html</anchorfile>
      <anchor>a7312d6935af8522fd21a2d7abf4445a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testKeepOriginalFilename</name>
      <anchorfile>classFileFetcherTest_1_1FileFetcherTest.html</anchorfile>
      <anchor>a93927912a65dd7cdf27a5acd53929d5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testLocal</name>
      <anchorfile>classFileFetcherTest_1_1FileFetcherTest.html</anchorfile>
      <anchor>add3b623be029b55161d221b62a347ee7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testMissingConfigFilePath</name>
      <anchorfile>classFileFetcherTest_1_1FileFetcherTest.html</anchorfile>
      <anchor>a5c278509216ffe0f74b9e15ff670088b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTimeOut</name>
      <anchorfile>classFileFetcherTest_1_1FileFetcherTest.html</anchorfile>
      <anchor>a1e5e7738ac4959ab037806cda917f3fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIncompatibleServer</name>
      <anchorfile>classFileFetcherTest_1_1FileFetcherTest.html</anchorfile>
      <anchor>a3f370cc3f8cf198261eb67fdcea784b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testLastResortErrorOpening</name>
      <anchorfile>classFileFetcherTest_1_1FileFetcherTest.html</anchorfile>
      <anchor>a5151bc3d9e1b7b76802de2db3244e935</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>tearDown</name>
      <anchorfile>classFileFetcherTest_1_1FileFetcherTest.html</anchorfile>
      <anchor>a002ed439fdf35ba59c40a59ad6b8ff02</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Util::FileLoader</name>
    <filename>classPHPUnit_1_1Util_1_1FileLoader.html</filename>
    <member kind="function" static="yes">
      <type>static</type>
      <name>checkAndLoad</name>
      <anchorfile>classPHPUnit_1_1Util_1_1FileLoader.html</anchorfile>
      <anchor>abf7aa0c08a54dfa95a3d734dac8095f7</anchor>
      <arglist>(string $filename)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>load</name>
      <anchorfile>classPHPUnit_1_1Util_1_1FileLoader.html</anchorfile>
      <anchor>a2f609a701d95761d43cc565f39925d3a</anchor>
      <arglist>(string $filename)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Util::Filesystem</name>
    <filename>classPHPUnit_1_1Util_1_1Filesystem.html</filename>
    <member kind="function" static="yes">
      <type>static</type>
      <name>classNameToFilename</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Filesystem.html</anchorfile>
      <anchor>abc0013bce22b133212dd3f8e519889cf</anchor>
      <arglist>(string $className)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>createDirectory</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Filesystem.html</anchorfile>
      <anchor>a817b14e8ab6916010f533f4b7a2833df</anchor>
      <arglist>(string $directory)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Diff::Utils::FileUtils</name>
    <filename>classSebastianBergmann_1_1Diff_1_1Utils_1_1FileUtils.html</filename>
    <member kind="function" static="yes">
      <type>static</type>
      <name>getFileContent</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Utils_1_1FileUtils.html</anchorfile>
      <anchor>a1a4f5421e3a04c4c429646395d87c04d</anchor>
      <arglist>(string $file)</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>DeepCopy::Filter::Filter</name>
    <filename>interfaceDeepCopy_1_1Filter_1_1Filter.html</filename>
    <member kind="function">
      <type></type>
      <name>apply</name>
      <anchorfile>interfaceDeepCopy_1_1Filter_1_1Filter.html</anchorfile>
      <anchor>abbd0ceeb8f568f7fe74737395f5ecbb7</anchor>
      <arglist>($object, $property, $objectCopier)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Util::Filter</name>
    <filename>classPHPUnit_1_1Util_1_1Filter.html</filename>
    <member kind="function" static="yes">
      <type>static</type>
      <name>getFilteredStacktrace</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Filter.html</anchorfile>
      <anchor>a47ae969c0974971ec4356ed27046d280</anchor>
      <arglist>(\Throwable $t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::CodeCoverage::Filter</name>
    <filename>classSebastianBergmann_1_1CodeCoverage_1_1Filter.html</filename>
    <member kind="function">
      <type></type>
      <name>addDirectoryToWhitelist</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Filter.html</anchorfile>
      <anchor>a99fedb22c236ea567da911f1b0f81259</anchor>
      <arglist>(string $directory, string $suffix=&apos;.php&apos;, string $prefix=&apos;&apos;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addFileToWhitelist</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Filter.html</anchorfile>
      <anchor>a22ce973ac3cec5b20b16de3db32a7fd0</anchor>
      <arglist>(string $filename)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addFilesToWhitelist</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Filter.html</anchorfile>
      <anchor>ae720258cf45b16367f9e60256bd3676c</anchor>
      <arglist>(array $files)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>removeDirectoryFromWhitelist</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Filter.html</anchorfile>
      <anchor>ad04481f8833ecf345f5cef7257e875ad</anchor>
      <arglist>(string $directory, string $suffix=&apos;.php&apos;, string $prefix=&apos;&apos;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>removeFileFromWhitelist</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Filter.html</anchorfile>
      <anchor>ad89c288e0280126555cf4bdbcafcf904</anchor>
      <arglist>(string $filename)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isFile</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Filter.html</anchorfile>
      <anchor>aa516cf5783c1fd1736de46cc1621c50b</anchor>
      <arglist>(string $filename)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isFiltered</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Filter.html</anchorfile>
      <anchor>ac714c705563f951de7f58134b9f01653</anchor>
      <arglist>(string $filename)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getWhitelist</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Filter.html</anchorfile>
      <anchor>a7ac62b86445ea09b36a361ad11134b1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>hasWhitelist</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Filter.html</anchorfile>
      <anchor>a32df6f507bdaf2e5870e1c172724de82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getWhitelistedFiles</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Filter.html</anchorfile>
      <anchor>a71b00e98e2263d2d275d527b75b16405</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setWhitelistedFiles</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Filter.html</anchorfile>
      <anchor>adeb7339a5b705d6976abe1b6a466a369</anchor>
      <arglist>(array $whitelistedFiles)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::CodeCoverage::FilterTest</name>
    <filename>classSebastianBergmann_1_1CodeCoverage_1_1FilterTest.html</filename>
    <base>SebastianBergmann::CodeCoverage::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testAddingAFileToTheWhitelistWorks</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1FilterTest.html</anchorfile>
      <anchor>ac237c0f5f69372f03b84547436736463</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testRemovingAFileFromTheWhitelistWorks</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1FilterTest.html</anchorfile>
      <anchor>aadeea923b1973fc8af546eb03551936f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAddingADirectoryToTheWhitelistWorks</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1FilterTest.html</anchorfile>
      <anchor>a108796b9610facdb401689429e190d99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAddingFilesToTheWhitelistWorks</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1FilterTest.html</anchorfile>
      <anchor>aa8f7016750a9c5cf7eec02bc506bd5a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testRemovingADirectoryFromTheWhitelistWorks</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1FilterTest.html</anchorfile>
      <anchor>a55f03debf6b693dd2b25adf9291a6a09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIsFile</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1FilterTest.html</anchorfile>
      <anchor>a06f0e24a7ade12f02d514a9f9b0f6429</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testWhitelistedFileIsNotFiltered</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1FilterTest.html</anchorfile>
      <anchor>a97d7882ba8052d853b7b6b3ad4180109</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testNotWhitelistedFileIsFiltered</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1FilterTest.html</anchorfile>
      <anchor>ad74730476d33fb3634595ce4686f64b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testNonFilesAreFiltered</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1FilterTest.html</anchorfile>
      <anchor>a7d930aa14c80befe6b4fe4903fe1ef95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTryingToAddFileThatDoesNotExistDoesNotChangeFilter</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1FilterTest.html</anchorfile>
      <anchor>a7a0f200b94e07b41d28f43b97ace41cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1FilterTest.html</anchorfile>
      <anchor>adac0ded550a21994d63f583a98c1f328</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FinalClass</name>
    <filename>classFinalClass.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classFinalClass.html</anchorfile>
      <anchor>a62c0d47dd4da60699e5287c11723b42b</anchor>
      <arglist>($value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>value</name>
      <anchorfile>classFinalClass.html</anchorfile>
      <anchor>aff25a7d32ab4e4ea1f2161c253d23f2d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DoctrineTest::InstantiatorTestAsset::FinalExceptionAsset</name>
    <filename>classDoctrineTest_1_1InstantiatorTestAsset_1_1FinalExceptionAsset.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classDoctrineTest_1_1InstantiatorTestAsset_1_1FinalExceptionAsset.html</anchorfile>
      <anchor>a76cd0820ed4a2ea97d35ebfad7fd59e5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foo::DataProviderIssue2833::FirstTest</name>
    <filename>classFoo_1_1DataProviderIssue2833_1_1FirstTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testFirst</name>
      <anchorfile>classFoo_1_1DataProviderIssue2833_1_1FirstTest.html</anchorfile>
      <anchor>a4887a7a2a09324105b1191f76429b959</anchor>
      <arglist>($x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>provide</name>
      <anchorfile>classFoo_1_1DataProviderIssue2833_1_1FirstTest.html</anchorfile>
      <anchor>a1374b8af5161037fa97e4c0c7dc836ff</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foo::DataProviderIssue2922::FirstTest</name>
    <filename>classFoo_1_1DataProviderIssue2922_1_1FirstTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testFirst</name>
      <anchorfile>classFoo_1_1DataProviderIssue2922_1_1FirstTest.html</anchorfile>
      <anchor>a97921593444ba55dd1d64d854647c719</anchor>
      <arglist>($x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>provide</name>
      <anchorfile>classFoo_1_1DataProviderIssue2922_1_1FirstTest.html</anchorfile>
      <anchor>af56813f8f025a6559c042d51ffbbadd4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::Types::Float_</name>
    <filename>classphpDocumentor_1_1Reflection_1_1Types_1_1Float__.html</filename>
    <base>phpDocumentor::Reflection::Type</base>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1Float__.html</anchorfile>
      <anchor>adf5f4a2c4d0a6b82576d1c12dc0a3335</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foo</name>
    <filename>classFoo.html</filename>
    <member kind="function">
      <type></type>
      <name>bar</name>
      <anchorfile>classFoo.html</anchorfile>
      <anchor>a6c0ab3cf4c3a4ff1b117b316fbfe60ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bar</name>
      <anchorfile>classFoo.html</anchorfile>
      <anchor>a6c0ab3cf4c3a4ff1b117b316fbfe60ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bar</name>
      <anchorfile>classFoo.html</anchorfile>
      <anchor>a6c0ab3cf4c3a4ff1b117b316fbfe60ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>foo</name>
      <anchorfile>classFoo.html</anchorfile>
      <anchor>aa3e600fe329020d0f5e7c5d0d5065f89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bar</name>
      <anchorfile>classFoo.html</anchorfile>
      <anchor>a3b8495caba71ebe3193946d27c85cca8</anchor>
      <arglist>(Baz $baz)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>barfoo</name>
      <anchorfile>classFoo.html</anchorfile>
      <anchor>aa3bc38e05273ec162f63ac732db4baf8</anchor>
      <arglist>(Barfoo $barfoo)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>baz</name>
      <anchorfile>classFoo.html</anchorfile>
      <anchor>a7d952d1fb42e9437584297df86641bb3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>blaz</name>
      <anchorfile>classFoo.html</anchorfile>
      <anchor>adfb8cc490184e6150f3aebf28ce87979</anchor>
      <arglist>($x, $y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>buzz</name>
      <anchorfile>classFoo.html</anchorfile>
      <anchor>aecc8061f879d8892f137c3a9a614aedd</anchor>
      <arglist>($foo)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>doSomething</name>
      <anchorfile>classFoo.html</anchorfile>
      <anchor>aefdda7a228d54e08a88046b5daf3c87f</anchor>
      <arglist>(Bar $bar)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>foobar</name>
      <anchorfile>classFoo.html</anchorfile>
      <anchor>a881e834508d07ff9dd7efe9170285509</anchor>
      <arglist>(Foobar $foobar)</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>foo</name>
    <filename>interfacefoo.html</filename>
    <class kind="class">foo::Foo</class>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::Types::Mock::Foo</name>
    <filename>classphpDocumentor_1_1Reflection_1_1Types_1_1Mock_1_1Foo.html</filename>
    <base>phpDocumentor::Reflection::Types::AbstractList</base>
  </compound>
  <compound kind="class">
    <name>foo::Foo</name>
    <filename>classfoo_1_1Foo.html</filename>
  </compound>
  <compound kind="class">
    <name>DeepCopyTest::Filter::Doctrine::Foo</name>
    <filename>classDeepCopyTest_1_1Filter_1_1Doctrine_1_1Foo.html</filename>
    <member kind="function">
      <type></type>
      <name>__load</name>
      <anchorfile>classDeepCopyTest_1_1Filter_1_1Doctrine_1_1Foo.html</anchorfile>
      <anchor>a1892d389ca4800051f53445930c268a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$isLoaded</name>
      <anchorfile>classDeepCopyTest_1_1Filter_1_1Doctrine_1_1Foo.html</anchorfile>
      <anchor>a7d5256f6c6817fa21ac8acd8a00c88e6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeepCopy::f003::Foo</name>
    <filename>classDeepCopy_1_1f003_1_1Foo.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classDeepCopy_1_1f003_1_1Foo.html</anchorfile>
      <anchor>a0e49c95bb2b348c798d908136b11b18f</anchor>
      <arglist>($name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getProp</name>
      <anchorfile>classDeepCopy_1_1f003_1_1Foo.html</anchorfile>
      <anchor>ac7b80bd13e854a1e38b43b60d3f8fcbc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setProp</name>
      <anchorfile>classDeepCopy_1_1f003_1_1Foo.html</anchorfile>
      <anchor>a6eeba4ff28de26d6379f9a8acef40d18</anchor>
      <arglist>($prop)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeepCopyTest::TypeMatcher::Foo</name>
    <filename>classDeepCopyTest_1_1TypeMatcher_1_1Foo.html</filename>
  </compound>
  <compound kind="class">
    <name>DeepCopy::f005::Foo</name>
    <filename>classDeepCopy_1_1f005_1_1Foo.html</filename>
    <member kind="function">
      <type></type>
      <name>__clone</name>
      <anchorfile>classDeepCopy_1_1f005_1_1Foo.html</anchorfile>
      <anchor>a18dbe388b6c61deda4aaee69ab69b1d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$cloned</name>
      <anchorfile>classDeepCopy_1_1f005_1_1Foo.html</anchorfile>
      <anchor>a9bd889be6fbb45998734cec287684db3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foo_Bar_Issue684Test</name>
    <filename>classFoo__Bar__Issue684Test.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
  </compound>
  <compound kind="class">
    <name>DeepCopy::f007::FooDateInterval</name>
    <filename>classDeepCopy_1_1f007_1_1FooDateInterval.html</filename>
    <member kind="function">
      <type></type>
      <name>__clone</name>
      <anchorfile>classDeepCopy_1_1f007_1_1FooDateInterval.html</anchorfile>
      <anchor>ac06502346ac0b5876f23e2552634bf55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$cloned</name>
      <anchorfile>classDeepCopy_1_1f007_1_1FooDateInterval.html</anchorfile>
      <anchor>aa83a62d94a88d0f178594dafbf3447fd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeepCopy::f007::FooDateTimeZone</name>
    <filename>classDeepCopy_1_1f007_1_1FooDateTimeZone.html</filename>
    <member kind="function">
      <type></type>
      <name>__clone</name>
      <anchorfile>classDeepCopy_1_1f007_1_1FooDateTimeZone.html</anchorfile>
      <anchor>abb6b99b810e67b8673de4f916b1f03e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$cloned</name>
      <anchorfile>classDeepCopy_1_1f007_1_1FooDateTimeZone.html</anchorfile>
      <anchor>aed3ea2c20dd2b504d0705a98898e56b5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>FooInterface</name>
    <filename>interfaceFooInterface.html</filename>
    <member kind="function">
      <type></type>
      <name>bar</name>
      <anchorfile>interfaceFooInterface.html</anchorfile>
      <anchor>ac90ac67404c3eec025c495b29c7c28d5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeepCopyTest::Matcher::Doctrine::FooProxy</name>
    <filename>classDeepCopyTest_1_1Matcher_1_1Doctrine_1_1FooProxy.html</filename>
    <member kind="function">
      <type></type>
      <name>__load</name>
      <anchorfile>classDeepCopyTest_1_1Matcher_1_1Doctrine_1_1FooProxy.html</anchorfile>
      <anchor>a7688a5e224da3b1f8805e4ce5147b95a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__isInitialized</name>
      <anchorfile>classDeepCopyTest_1_1Matcher_1_1Doctrine_1_1FooProxy.html</anchorfile>
      <anchor>a81978bb0cedf3c06a03404e7a275cb2f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>phpDocumentor::Reflection::DocBlock::Tags::Formatter</name>
    <filename>interfacephpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Formatter.html</filename>
    <member kind="function">
      <type></type>
      <name>format</name>
      <anchorfile>interfacephpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Formatter.html</anchorfile>
      <anchor>abeb1baf1834b0ecf6776db8824b7ce98</anchor>
      <arglist>(Tag $tag)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocBlock::Tags::Reference::Fqsen</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Reference_1_1Fqsen.html</filename>
    <base>phpDocumentor::Reflection::DocBlock::Tags::Reference::Reference</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Reference_1_1Fqsen.html</anchorfile>
      <anchor>a76c61f0127a6706b8fcdbac54570376f</anchor>
      <arglist>(RealFqsen $fqsen)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Reference_1_1Fqsen.html</anchorfile>
      <anchor>aa52626030e62655e534e29373b4852cb</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::Fqsen</name>
    <filename>classphpDocumentor_1_1Reflection_1_1Fqsen.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Fqsen.html</anchorfile>
      <anchor>a4efea2be18e1eeaa268493c7a3fc1024</anchor>
      <arglist>(string $fqsen)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Fqsen.html</anchorfile>
      <anchor>a0e97b77696a4edb4959d5328f9ec036a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getName</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Fqsen.html</anchorfile>
      <anchor>ad7da51f770f1250f3825fb556b544c50</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::FqsenResolver</name>
    <filename>classphpDocumentor_1_1Reflection_1_1FqsenResolver.html</filename>
    <member kind="function">
      <type></type>
      <name>resolve</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1FqsenResolver.html</anchorfile>
      <anchor>a9e21c82fd123ba57a93f49ea26cc52f2</anchor>
      <arglist>(string $fqsen, ?Context $context=null)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::FqsenResolverTest</name>
    <filename>classphpDocumentor_1_1Reflection_1_1FqsenResolverTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testResolveFqsen</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1FqsenResolverTest.html</anchorfile>
      <anchor>a6a6a5e03934b3ccc49282f57753756cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testResolveFqsenWithEmoji</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1FqsenResolverTest.html</anchorfile>
      <anchor>a419e32e4b3fc74710ebabb8d8797b47d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testResolveWithoutContext</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1FqsenResolverTest.html</anchorfile>
      <anchor>a98eb43cf2c7a049f825d272858e728b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testResolveFromAlias</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1FqsenResolverTest.html</anchorfile>
      <anchor>a69af897535f10f9fe2a3b51b5ccd9ac6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testResolveFromPartialAlias</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1FqsenResolverTest.html</anchorfile>
      <anchor>a0d38e2ac513d226772e34d4669721e29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testResolveThrowsExceptionWhenGarbageInputIsPassed</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1FqsenResolverTest.html</anchorfile>
      <anchor>ade095373144339057170de139277b029</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::FqsenTest</name>
    <filename>classphpDocumentor_1_1Reflection_1_1FqsenTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testValidFormats</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1FqsenTest.html</anchorfile>
      <anchor>aa6493c6249eba9363a4a3c0ad1e123f8</anchor>
      <arglist>(string $fqsen, string $name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>validFqsenProvider</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1FqsenTest.html</anchorfile>
      <anchor>ad71acc652b51415bc8464f04b1323472</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testInValidFormats</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1FqsenTest.html</anchorfile>
      <anchor>a3d35aa16f3cd0f799bf6b179bf3bca41</anchor>
      <arglist>(string $fqsen)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>invalidFqsenProvider</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1FqsenTest.html</anchorfile>
      <anchor>af09bdb04e85b6c893a7ad517a9106565</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testToString</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1FqsenTest.html</anchorfile>
      <anchor>aacbe9e415c8fee0adedb046fc1480ba5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FunctionCallbackWrapper</name>
    <filename>classFunctionCallbackWrapper.html</filename>
    <member kind="function" static="yes">
      <type>static</type>
      <name>functionCallback</name>
      <anchorfile>classFunctionCallbackWrapper.html</anchorfile>
      <anchor>aaa0059e09781bb7f24d07eae3fce4d3f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::FunctionsTest</name>
    <filename>classPHPUnit_1_1Framework_1_1FunctionsTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testGlobalFunctionsFileContainsAllStaticAssertions</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1FunctionsTest.html</anchorfile>
      <anchor>a28340c11e6bce2b409b267a5d1c67fed</anchor>
      <arglist>(string $methodName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>provideStaticAssertionMethodNames</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1FunctionsTest.html</anchorfile>
      <anchor>a1d30de1653292f2c163b655f50631b68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>setUpBeforeClass</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1FunctionsTest.html</anchorfile>
      <anchor>a0e310d3eda1873402c08c098a86348fc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::MockObject::Generator</name>
    <filename>classPHPUnit_1_1Framework_1_1MockObject_1_1Generator.html</filename>
    <member kind="function">
      <type></type>
      <name>getMock</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Generator.html</anchorfile>
      <anchor>aa063e6cd283e28ad62ebdfbb20288d7f</anchor>
      <arglist>($type, $methods=[], array $arguments=[], string $mockClassName=&apos;&apos;, bool $callOriginalConstructor=true, bool $callOriginalClone=true, bool $callAutoload=true, bool $cloneArguments=true, bool $callOriginalMethods=false, object $proxyTarget=null, bool $allowMockingUnknownTypes=true, bool $returnValueGeneration=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getMockForAbstractClass</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Generator.html</anchorfile>
      <anchor>ad18797ed254175973e2a7427305de43f</anchor>
      <arglist>(string $originalClassName, array $arguments=[], string $mockClassName=&apos;&apos;, bool $callOriginalConstructor=true, bool $callOriginalClone=true, bool $callAutoload=true, array $mockedMethods=null, bool $cloneArguments=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getMockForTrait</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Generator.html</anchorfile>
      <anchor>aa509e8fc4537f015846b04b18b18934e</anchor>
      <arglist>(string $traitName, array $arguments=[], string $mockClassName=&apos;&apos;, bool $callOriginalConstructor=true, bool $callOriginalClone=true, bool $callAutoload=true, array $mockedMethods=null, bool $cloneArguments=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getObjectForTrait</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Generator.html</anchorfile>
      <anchor>aacc5b8a9004bc3b37948071bb03a5e12</anchor>
      <arglist>(string $traitName, string $traitClassName=&apos;&apos;, bool $callAutoload=true, bool $callOriginalConstructor=false, array $arguments=[])</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>generate</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Generator.html</anchorfile>
      <anchor>aca6ae902522fe49ca592c14186a39d8b</anchor>
      <arglist>($type, array $methods=null, string $mockClassName=&apos;&apos;, bool $callOriginalClone=true, bool $callAutoload=true, bool $cloneArguments=true, bool $callOriginalMethods=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>generateClassFromWsdl</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Generator.html</anchorfile>
      <anchor>acab105662ab785216bc727180a679434</anchor>
      <arglist>(string $wsdlFile, string $className, array $methods=[], array $options=[])</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getClassMethods</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Generator.html</anchorfile>
      <anchor>a1c55d13ddb21437b18b545d360658e27</anchor>
      <arglist>(string $className)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mockClassMethods</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Generator.html</anchorfile>
      <anchor>a22a3b44ef8f0d5689370daf70a28842c</anchor>
      <arglist>(string $className, bool $callOriginalMethods, bool $cloneArguments)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mockInterfaceMethods</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Generator.html</anchorfile>
      <anchor>a6f7c978bbc7a16b54291a6ab48c1b45e</anchor>
      <arglist>(string $interfaceName, bool $cloneArguments)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GeneratorTest</name>
    <filename>classGeneratorTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testGetMockThrowsExceptionWhenInvalidFunctionNameIsPassedInAsAFunctionToMock</name>
      <anchorfile>classGeneratorTest.html</anchorfile>
      <anchor>a35dcd092209577c8940477bd92a258a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetMockThrowsExceptionWithInvalidClassArgumentType</name>
      <anchorfile>classGeneratorTest.html</anchorfile>
      <anchor>ab2e6e043d91bb7fe922e490a49dee00c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetMockThrowsExceptionWithInvalidMethods</name>
      <anchorfile>classGeneratorTest.html</anchorfile>
      <anchor>ac7a3203de9c451e86036ae787f00c0f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetMockThrowsExceptionWithNonExistingClass</name>
      <anchorfile>classGeneratorTest.html</anchorfile>
      <anchor>a166f61486e956135ad14d994aec02f7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetMockThrowsExceptionWithNonExistingClasses</name>
      <anchorfile>classGeneratorTest.html</anchorfile>
      <anchor>ab156adc08981c3844c20e3b32c274de1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetMockThrowsExceptionWithExistingClassAsMockName</name>
      <anchorfile>classGeneratorTest.html</anchorfile>
      <anchor>a122b49df6b593909dd4e0d0e1e9167c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetMockCanCreateNonExistingFunctions</name>
      <anchorfile>classGeneratorTest.html</anchorfile>
      <anchor>aca3656f8202c5be2dd3b442fb16f2eba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetMockGeneratorThrowsException</name>
      <anchorfile>classGeneratorTest.html</anchorfile>
      <anchor>af69bccd5a0ebb9c20674a206c88e1327</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetMockBlacklistedMethodNamesPhp7</name>
      <anchorfile>classGeneratorTest.html</anchorfile>
      <anchor>a8d86ad3680f60e8e47e51f1b30d2304f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetMockForAbstractClassDoesNotFailWhenFakingInterfaces</name>
      <anchorfile>classGeneratorTest.html</anchorfile>
      <anchor>ac471fb07f5165122fed6bc5b04bf6542</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetMockForAbstractClassStubbingAbstractClass</name>
      <anchorfile>classGeneratorTest.html</anchorfile>
      <anchor>a8a68a26d2a1fc0554f3015b235ccdeb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetMockForAbstractClassWithNonExistentMethods</name>
      <anchorfile>classGeneratorTest.html</anchorfile>
      <anchor>a25a338764d218009419d16e607cd3ccc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetMockForAbstractClassShouldCreateStubsOnlyForAbstractMethodWhenNoMethodsWereInformed</name>
      <anchorfile>classGeneratorTest.html</anchorfile>
      <anchor>a562cd22734cea5a3d316b716b9919363</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetMockForAbstractClassAbstractClassDoesNotExist</name>
      <anchorfile>classGeneratorTest.html</anchorfile>
      <anchor>a225ac3ad223a2fd02c0f89f2a4d8b16b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetMockForTraitWithNonExistentMethodsAndNonAbstractMethods</name>
      <anchorfile>classGeneratorTest.html</anchorfile>
      <anchor>a27c8ef40fc468ac0d4125c3a046b0a0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetMockForTraitStubbingAbstractMethod</name>
      <anchorfile>classGeneratorTest.html</anchorfile>
      <anchor>a39e23ec53da3b2597b2c49f220c53a1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetMockForTraitWithNonExistantTrait</name>
      <anchorfile>classGeneratorTest.html</anchorfile>
      <anchor>aff5f3a2fceba705dddcfb4ce269fb375</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetObjectForTraitWithNonExistantTrait</name>
      <anchorfile>classGeneratorTest.html</anchorfile>
      <anchor>a3553afea24cfdba48fed675e1b74a7c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetMockClassMethodsForNonExistantClass</name>
      <anchorfile>classGeneratorTest.html</anchorfile>
      <anchor>ac017c64c9f79299daa494b53e7add9e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetMockForSingletonWithReflectionSuccess</name>
      <anchorfile>classGeneratorTest.html</anchorfile>
      <anchor>af1e7e743ad7b2d08490e101861757c12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExceptionIsRaisedForMutuallyExclusiveOptions</name>
      <anchorfile>classGeneratorTest.html</anchorfile>
      <anchor>a9762f6e2f6b3cdad28389e84ebadb830</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCanImplementInterfacesThatHaveMethodsWithReturnTypes</name>
      <anchorfile>classGeneratorTest.html</anchorfile>
      <anchor>a9f71e827203d06c5e309588eda6c09a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCanConfigureMethodsForDoubleOfNonExistentClass</name>
      <anchorfile>classGeneratorTest.html</anchorfile>
      <anchor>a5517c4a76ba5c22d71b186ae7c751189</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCanInvokeMethodsOfNonExistentClass</name>
      <anchorfile>classGeneratorTest.html</anchorfile>
      <anchor>affe80e32ccf40ebf3083ca5d4baf4581</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testMockingOfExceptionWithThrowable</name>
      <anchorfile>classGeneratorTest.html</anchorfile>
      <anchor>a21e21cdb27b6cc813d60aa3635458199</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testMockingOfThrowable</name>
      <anchorfile>classGeneratorTest.html</anchorfile>
      <anchor>a7d62ed7be1a70bc05c0e15008b9f3e0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testMockingOfThrowableConstructorArguments</name>
      <anchorfile>classGeneratorTest.html</anchorfile>
      <anchor>a163545c68738199a7fc01d2aca614e92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetClassMethodsWithNonExistingClass</name>
      <anchorfile>classGeneratorTest.html</anchorfile>
      <anchor>afc0cd19855ad5c108025e92f927d2645</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCannotMockFinalClass</name>
      <anchorfile>classGeneratorTest.html</anchorfile>
      <anchor>a511c08de919fc98084053d4ad3a7292c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classGeneratorTest.html</anchorfile>
      <anchor>aaded51f4ef08da5a88e55e2054094414</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocBlock::Tags::Generic</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Generic.html</filename>
    <base>phpDocumentor::Reflection::DocBlock::Tags::BaseTag</base>
    <base>phpDocumentor::Reflection::DocBlock::Tags::Factory::StaticMethod</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Generic.html</anchorfile>
      <anchor>a56e3b2829c5c2666e1861e6b99f99763</anchor>
      <arglist>(string $name, ?Description $description=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Generic.html</anchorfile>
      <anchor>a275c15f7b4a541b77c61515b9c7f1c60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>create</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Generic.html</anchorfile>
      <anchor>a09bdfc6639e40ba45daf6500dbaf8bb8</anchor>
      <arglist>(string $body, string $name=&apos;&apos;, ?DescriptionFactory $descriptionFactory=null, ?TypeContext $context=null)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Type::GenericObjectType</name>
    <filename>classSebastianBergmann_1_1Type_1_1GenericObjectType.html</filename>
    <base>SebastianBergmann::Type::Type</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1GenericObjectType.html</anchorfile>
      <anchor>a390e224767978e7248820b66d67b866a</anchor>
      <arglist>(bool $nullable)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isAssignable</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1GenericObjectType.html</anchorfile>
      <anchor>af11dbbeeb564d4f0b44295de8645379c</anchor>
      <arglist>(Type $other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getReturnTypeDeclaration</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1GenericObjectType.html</anchorfile>
      <anchor>a6085f828590350bd71659549f3d6ae29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>allowsNull</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1GenericObjectType.html</anchorfile>
      <anchor>a1378b714a297ab205f36a292adfcca83</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Type::GenericObjectTypeTest</name>
    <filename>classSebastianBergmann_1_1Type_1_1GenericObjectTypeTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testMayDisallowNull</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1GenericObjectTypeTest.html</anchorfile>
      <anchor>a9ac4d98a41b1fab1a7a1093141a1f684</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCanGenerateReturnTypeDeclaration</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1GenericObjectTypeTest.html</anchorfile>
      <anchor>a79c81c45b3b8dde8e1490c7e4cf236ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testMayAllowNull</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1GenericObjectTypeTest.html</anchorfile>
      <anchor>af3bba57693dca210a27efddfa95398dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCanGenerateNullableReturnTypeDeclaration</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1GenericObjectTypeTest.html</anchorfile>
      <anchor>ad040a601052a625eafe175a394316aac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testObjectCanBeAssignedToGenericObject</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1GenericObjectTypeTest.html</anchorfile>
      <anchor>a721a93e166322cd717cf54f8948126b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testNullCanBeAssignedToNullableGenericObject</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1GenericObjectTypeTest.html</anchorfile>
      <anchor>a36862418cd0345ee218cf45a58429d76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testNonObjectCannotBeAssignedToGenericObject</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1GenericObjectTypeTest.html</anchorfile>
      <anchor>a51c5c3fdd12a12ea3de55274d7041abb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1GenericObjectTypeTest.html</anchorfile>
      <anchor>a76c2844919a51ebb914679e60662acdb</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocBlock::Tags::GenericTest</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1GenericTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>tearDown</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1GenericTest.html</anchorfile>
      <anchor>a1f4f666c8f324d57906db358469f2014</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIfCorrectTagNameIsReturned</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1GenericTest.html</anchorfile>
      <anchor>a047a02b91eb653093c75cc878c64256f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIfTagCanBeRenderedUsingDefaultFormatter</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1GenericTest.html</anchorfile>
      <anchor>a1b2c78f80045dc4c9e942b7e09096e76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIfTagCanBeRenderedUsingSpecificFormatter</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1GenericTest.html</anchorfile>
      <anchor>a70389fabd0bc49b1fe65521d9c1e328e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasDescription</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1GenericTest.html</anchorfile>
      <anchor>a719dd06e42bb7d5ef0f0994a80857a52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStringRepresentationIsReturned</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1GenericTest.html</anchorfile>
      <anchor>a32293ed14472ead9ae28137798b61241</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStringRepresentationIsReturnedWithoutDescription</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1GenericTest.html</anchorfile>
      <anchor>af02f9a91706c0631d9b38cad62910654</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethod</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1GenericTest.html</anchorfile>
      <anchor>a30a3c2e0f138a1322d6c81c78466b62a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodFailsIfNameIsNotEmpty</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1GenericTest.html</anchorfile>
      <anchor>a30719ff14e66f501a63ba0ab57d5c785</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodFailsIfNameContainsIllegalCharacters</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1GenericTest.html</anchorfile>
      <anchor>a26aa8f8b00e42621665bf209e8a1f7ac</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Util::Getopt</name>
    <filename>classPHPUnit_1_1Util_1_1Getopt.html</filename>
    <member kind="function" static="yes">
      <type>static</type>
      <name>parse</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Getopt.html</anchorfile>
      <anchor>a267c7a6ea6e6a8093b02e5355d82bebd</anchor>
      <arglist>(array $args, string $short_options, array $long_options=null)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Util::GetoptTest</name>
    <filename>classPHPUnit_1_1Util_1_1GetoptTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testItIncludeTheLongOptionsAfterTheArgument</name>
      <anchorfile>classPHPUnit_1_1Util_1_1GetoptTest.html</anchorfile>
      <anchor>ae6b1fc25067d16ff19feea73b912c7ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testItIncludeTheShortOptionsAfterTheArgument</name>
      <anchorfile>classPHPUnit_1_1Util_1_1GetoptTest.html</anchorfile>
      <anchor>ab97d368a5d439c52c1e77da4d127b6e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testShortOptionUnrecognizedException</name>
      <anchorfile>classPHPUnit_1_1Util_1_1GetoptTest.html</anchorfile>
      <anchor>ae3683da85f42cd58afd9566257abccf3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testShortOptionRequiresAnArgumentException</name>
      <anchorfile>classPHPUnit_1_1Util_1_1GetoptTest.html</anchorfile>
      <anchor>a1adfaee5f822e50051f7cf1651dc6967</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testShortOptionHandleAnOptionalValue</name>
      <anchorfile>classPHPUnit_1_1Util_1_1GetoptTest.html</anchorfile>
      <anchor>ab61582779ed14895108df13c89b21161</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testLongOptionIsAmbiguousException</name>
      <anchorfile>classPHPUnit_1_1Util_1_1GetoptTest.html</anchorfile>
      <anchor>a4c515a3e4db0a99d89b0324e78f617ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testLongOptionUnrecognizedException</name>
      <anchorfile>classPHPUnit_1_1Util_1_1GetoptTest.html</anchorfile>
      <anchor>abd118f5863dc3dcc00a9f76c39f198b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testLongOptionRequiresAnArgumentException</name>
      <anchorfile>classPHPUnit_1_1Util_1_1GetoptTest.html</anchorfile>
      <anchor>ad2bb4a45d10fc39ac58c417ec12996f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testLongOptionDoesNotAllowAnArgumentException</name>
      <anchorfile>classPHPUnit_1_1Util_1_1GetoptTest.html</anchorfile>
      <anchor>a3f1ed9bff7a1a5e7779286bca21e865b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testItHandlesLongParametesWithValues</name>
      <anchorfile>classPHPUnit_1_1Util_1_1GetoptTest.html</anchorfile>
      <anchor>a7568b93034ed7cff581c70650f4eff65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testItHandlesShortParametesWithValues</name>
      <anchorfile>classPHPUnit_1_1Util_1_1GetoptTest.html</anchorfile>
      <anchor>ac3027221a88bcf8e3b5dd09833d7f8b1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Util::GlobalState</name>
    <filename>classPHPUnit_1_1Util_1_1GlobalState.html</filename>
    <member kind="function" static="yes">
      <type>static</type>
      <name>getIncludedFilesAsString</name>
      <anchorfile>classPHPUnit_1_1Util_1_1GlobalState.html</anchorfile>
      <anchor>a38096a0cb4e95c62ff55dca9782766fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>processIncludedFilesAsString</name>
      <anchorfile>classPHPUnit_1_1Util_1_1GlobalState.html</anchorfile>
      <anchor>a1d3c6eeac15ea1e62190e2bd3fe909d1</anchor>
      <arglist>(array $files)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>getIniSettingsAsString</name>
      <anchorfile>classPHPUnit_1_1Util_1_1GlobalState.html</anchorfile>
      <anchor>ae36692b28e2cf0c550d57cb48f9cdd4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>getConstantsAsString</name>
      <anchorfile>classPHPUnit_1_1Util_1_1GlobalState.html</anchorfile>
      <anchor>ab752f09b04c2275489714fd5c8081c79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>getGlobalsAsString</name>
      <anchorfile>classPHPUnit_1_1Util_1_1GlobalState.html</anchorfile>
      <anchor>a12e50fd63941dd9a0cc7f0eeff2d1f07</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Util::GlobalStateTest</name>
    <filename>classPHPUnit_1_1Util_1_1GlobalStateTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testIncludedFilesAsStringSkipsVfsProtocols</name>
      <anchorfile>classPHPUnit_1_1Util_1_1GlobalStateTest.html</anchorfile>
      <anchor>a684c7802172bedaa45edf9f039b1021e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::GreaterThan</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1GreaterThan.html</filename>
    <base>PHPUnit::Framework::Constraint::Constraint</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1GreaterThan.html</anchorfile>
      <anchor>a2a77c99698ffd9f8d922d611f85d8374</anchor>
      <arglist>($value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1GreaterThan.html</anchorfile>
      <anchor>aa1d72153132d53ae3cdb573ca0e685f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>matches</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1GreaterThan.html</anchorfile>
      <anchor>ae0c2d4860c01f5dc8f1bcd2b2c3bf278</anchor>
      <arglist>($other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Version::GreaterThanOrEqualToVersionConstraint</name>
    <filename>classPharIo_1_1Version_1_1GreaterThanOrEqualToVersionConstraint.html</filename>
    <base>PharIo::Version::AbstractVersionConstraint</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPharIo_1_1Version_1_1GreaterThanOrEqualToVersionConstraint.html</anchorfile>
      <anchor>aad6fa8aec940c954bd8ac4503db5e8dc</anchor>
      <arglist>($originalValue, Version $minimalVersion)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>complies</name>
      <anchorfile>classPharIo_1_1Version_1_1GreaterThanOrEqualToVersionConstraint.html</anchorfile>
      <anchor>a8c0389b87c297126ecd5e3e63ee7e2aa</anchor>
      <arglist>(Version $version)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Version::GreaterThanOrEqualToVersionConstraintTest</name>
    <filename>classPharIo_1_1Version_1_1GreaterThanOrEqualToVersionConstraintTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>versionProvider</name>
      <anchorfile>classPharIo_1_1Version_1_1GreaterThanOrEqualToVersionConstraintTest.html</anchorfile>
      <anchor>afa859f3e7a97af8ccc4d7b872bc560f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testReturnsTrueForCompliantVersions</name>
      <anchorfile>classPharIo_1_1Version_1_1GreaterThanOrEqualToVersionConstraintTest.html</anchorfile>
      <anchor>a87453556e2af60201df10aacf9f0e9b2</anchor>
      <arglist>(Version $constraintVersion, Version $version, $expectedResult)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::GreaterThanTest</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1GreaterThanTest.html</filename>
    <base>PHPUnit::Framework::Constraint::ConstraintTestCase</base>
    <member kind="function">
      <type></type>
      <name>testConstraintGreaterThan</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1GreaterThanTest.html</anchorfile>
      <anchor>aa02958d0b0fbfb3881625ba46ffdd629</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintGreaterThan2</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1GreaterThanTest.html</anchorfile>
      <anchor>a0f281bd0b60e62c5d1a6b5b532269e61</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Runner::Filter::GroupFilterIterator</name>
    <filename>classPHPUnit_1_1Runner_1_1Filter_1_1GroupFilterIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1Filter_1_1GroupFilterIterator.html</anchorfile>
      <anchor>afb835f9ef7829b7fc25e13435e951654</anchor>
      <arglist>(RecursiveIterator $iterator, array $groups, TestSuite $suite)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>accept</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1Filter_1_1GroupFilterIterator.html</anchorfile>
      <anchor>ad338b09b812388e9c7638bc395f2557b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>doAccept</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1Filter_1_1GroupFilterIterator.html</anchorfile>
      <anchor>afaaabfaa7351e0cca7d3fe3734a9ea65</anchor>
      <arglist>(string $hash)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$groupTests</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1Filter_1_1GroupFilterIterator.html</anchorfile>
      <anchor>a3e1fdfb339bd5a80ad4caf8453a6086f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::StaticAnalysis::HelloWorldClass</name>
    <filename>classPHPUnit_1_1StaticAnalysis_1_1HelloWorldClass.html</filename>
    <member kind="function">
      <type></type>
      <name>sayHello</name>
      <anchorfile>classPHPUnit_1_1StaticAnalysis_1_1HelloWorldClass.html</anchorfile>
      <anchor>a36e1f45459110b6bb73b6122e131327e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::TextUI::Help</name>
    <filename>classPHPUnit_1_1TextUI_1_1Help.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1Help.html</anchorfile>
      <anchor>a2b36eab5de1899de4f6fdcaa8906f746</anchor>
      <arglist>(?int $width=null, ?bool $withColor=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>writeToConsole</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1Help.html</anchorfile>
      <anchor>ae9d638bb4f35f2fd0f8afcbd485e9060</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Doubler::ClassPatch::HhvmExceptionPatch</name>
    <filename>classProphecy_1_1Doubler_1_1ClassPatch_1_1HhvmExceptionPatch.html</filename>
    <base>Prophecy::Doubler::ClassPatch::ClassPatchInterface</base>
    <member kind="function">
      <type></type>
      <name>supports</name>
      <anchorfile>classProphecy_1_1Doubler_1_1ClassPatch_1_1HhvmExceptionPatch.html</anchorfile>
      <anchor>aed6af19538a52798571562feb926ea3b</anchor>
      <arglist>(ClassNode $node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>apply</name>
      <anchorfile>classProphecy_1_1Doubler_1_1ClassPatch_1_1HhvmExceptionPatch.html</anchorfile>
      <anchor>a97dfaeadd543f013e246fdd05c7856d3</anchor>
      <arglist>(ClassNode $node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getPriority</name>
      <anchorfile>classProphecy_1_1Doubler_1_1ClassPatch_1_1HhvmExceptionPatch.html</anchorfile>
      <anchor>a0173a33530bfcd3b84c023df446c58d1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>PHPUnit::Runner::Hook</name>
    <filename>interfacePHPUnit_1_1Runner_1_1Hook.html</filename>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Test::HookTest</name>
    <filename>classPHPUnit_1_1Test_1_1HookTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testSuccess</name>
      <anchorfile>classPHPUnit_1_1Test_1_1HookTest.html</anchorfile>
      <anchor>a97c9741c7f06a79d5d6e619653f9ffdc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFailure</name>
      <anchorfile>classPHPUnit_1_1Test_1_1HookTest.html</anchorfile>
      <anchor>ac82f55d7831dc0a3efc6897b75c80a7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testError</name>
      <anchorfile>classPHPUnit_1_1Test_1_1HookTest.html</anchorfile>
      <anchor>ac6151a4e91cd846b2ed44ac35019978f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIncomplete</name>
      <anchorfile>classPHPUnit_1_1Test_1_1HookTest.html</anchorfile>
      <anchor>a74ff24de58ddc2b9556938c6ec898d51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testRisky</name>
      <anchorfile>classPHPUnit_1_1Test_1_1HookTest.html</anchorfile>
      <anchor>af5263bf3c1fc59ac472dd7c697053218</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSkipped</name>
      <anchorfile>classPHPUnit_1_1Test_1_1HookTest.html</anchorfile>
      <anchor>a4cf4ae36827bf853ac7fd4c13909101d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testWarning</name>
      <anchorfile>classPHPUnit_1_1Test_1_1HookTest.html</anchorfile>
      <anchor>a1545c33f380fc6f28729a4b535d68c11</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Util::TestDox::HtmlResultPrinter</name>
    <filename>classPHPUnit_1_1Util_1_1TestDox_1_1HtmlResultPrinter.html</filename>
    <base>PHPUnit::TextUI::ResultPrinter</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>startRun</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1HtmlResultPrinter.html</anchorfile>
      <anchor>a4222414444109811cc7961fe9391ce77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>startClass</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1HtmlResultPrinter.html</anchorfile>
      <anchor>a42ca4c9e5a2f754b5b59a77547b211e2</anchor>
      <arglist>(string $name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>onTest</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1HtmlResultPrinter.html</anchorfile>
      <anchor>abf1afe45b698f41694a6640bf09d8d13</anchor>
      <arglist>($name, bool $success=true)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>endClass</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1HtmlResultPrinter.html</anchorfile>
      <anchor>aadccd39b2dffb4732dfe1b4ec2f3c23a</anchor>
      <arglist>(string $name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>endRun</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1HtmlResultPrinter.html</anchorfile>
      <anchor>ac1cf77fd18bedd21a7648da5b8698224</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::CodeCoverage::Report::Html::HTMLTest</name>
    <filename>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Html_1_1HTMLTest.html</filename>
    <base>SebastianBergmann::CodeCoverage::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testForBankAccountTest</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Html_1_1HTMLTest.html</anchorfile>
      <anchor>a7a27d0262e220911a757304d7816c433</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testForFileWithIgnoredLines</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Html_1_1HTMLTest.html</anchorfile>
      <anchor>acd0b60631b648d0f76a58dd808df4102</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testForClassWithAnonymousFunction</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Html_1_1HTMLTest.html</anchorfile>
      <anchor>a3e7ce273b516f270133a83a3e014f52e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>setUpBeforeClass</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Html_1_1HTMLTest.html</anchorfile>
      <anchor>a777cc30eca2e49401bedeb6ae21b8100</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>tearDown</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Html_1_1HTMLTest.html</anchorfile>
      <anchor>a8da5536e21923b166db1a1a70e7e6a91</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>Contracts::HydratableInterface</name>
    <filename>interfaceContracts_1_1HydratableInterface.html</filename>
    <member kind="function" static="yes">
      <type>static</type>
      <name>hydrate</name>
      <anchorfile>interfaceContracts_1_1HydratableInterface.html</anchorfile>
      <anchor>ad3fc3ba07a9f2b5020c8854c36d54abb</anchor>
      <arglist>(string $json, $instance=null)</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>i</name>
    <filename>interfacei.html</filename>
    <member kind="function">
      <type></type>
      <name>m</name>
      <anchorfile>interfacei.html</anchorfile>
      <anchor>ab6ada73562fb0a1518d5dc7892042833</anchor>
      <arglist>($a, array $b, array $c=array())</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>DeepCopyTest::TypeMatcher::IA</name>
    <filename>interfaceDeepCopyTest_1_1TypeMatcher_1_1IA.html</filename>
  </compound>
  <compound kind="class">
    <name>Prophecy::Argument::Token::IdenticalValueToken</name>
    <filename>classProphecy_1_1Argument_1_1Token_1_1IdenticalValueToken.html</filename>
    <base>Prophecy::Argument::Token::TokenInterface</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1IdenticalValueToken.html</anchorfile>
      <anchor>a0747386dbc76b46ad1f26c64720bfc61</anchor>
      <arglist>($value, StringUtil $util=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>scoreArgument</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1IdenticalValueToken.html</anchorfile>
      <anchor>a43c98da6043425dc888798fb174cc202</anchor>
      <arglist>($argument)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isLast</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1IdenticalValueToken.html</anchorfile>
      <anchor>aa3c7654b16d60cca9577e339ebabf4bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1IdenticalValueToken.html</anchorfile>
      <anchor>a7a87ffeafdd4f61d79e553d1b686a123</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>PHPUnit::Framework::MockObject::Builder::Identity</name>
    <filename>interfacePHPUnit_1_1Framework_1_1MockObject_1_1Builder_1_1Identity.html</filename>
    <member kind="function">
      <type></type>
      <name>id</name>
      <anchorfile>interfacePHPUnit_1_1Framework_1_1MockObject_1_1Builder_1_1Identity.html</anchorfile>
      <anchor>a54a44548538f29df07701772dc8be9bc</anchor>
      <arglist>($id)</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>Contracts::IdGeneratorInterface</name>
    <filename>interfaceContracts_1_1IdGeneratorInterface.html</filename>
    <member kind="function">
      <type></type>
      <name>generate</name>
      <anchorfile>interfaceContracts_1_1IdGeneratorInterface.html</anchorfile>
      <anchor>a383282fd8924585cdacc03f9f4d76afe</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Argument::Token::InArrayToken</name>
    <filename>classProphecy_1_1Argument_1_1Token_1_1InArrayToken.html</filename>
    <base>Prophecy::Argument::Token::TokenInterface</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1InArrayToken.html</anchorfile>
      <anchor>a4a09ab244a5db68ce54e62b6e0f3a287</anchor>
      <arglist>(array $arguments, $strict=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>scoreArgument</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1InArrayToken.html</anchorfile>
      <anchor>a8d7bd42ad3758d2daeb766ea16e537d9</anchor>
      <arglist>($argument)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isLast</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1InArrayToken.html</anchorfile>
      <anchor>afe842350160f3f4ea638da2f3addab83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1InArrayToken.html</anchorfile>
      <anchor>acc2d74de612b6e813c9b2f60f9fd391f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Runner::Filter::IncludeGroupFilterIterator</name>
    <filename>classPHPUnit_1_1Runner_1_1Filter_1_1IncludeGroupFilterIterator.html</filename>
    <base>PHPUnit::Runner::Filter::GroupFilterIterator</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>doAccept</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1Filter_1_1IncludeGroupFilterIterator.html</anchorfile>
      <anchor>a79c9ee8004564f24c6232ced21eb4959</anchor>
      <arglist>(string $hash)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::MockObject::IncompatibleReturnValueException</name>
    <filename>classPHPUnit_1_1Framework_1_1MockObject_1_1IncompatibleReturnValueException.html</filename>
    <base>PHPUnit::Framework::Exception</base>
    <base>PHPUnit::Framework::MockObject::Exception</base>
  </compound>
  <compound kind="class">
    <name>IncompleteTest</name>
    <filename>classIncompleteTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testIncomplete</name>
      <anchorfile>classIncompleteTest.html</anchorfile>
      <anchor>a75d416e0991f1e8ed372f569a9d33d14</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>PHPUnit::Framework::IncompleteTest</name>
    <filename>interfacePHPUnit_1_1Framework_1_1IncompleteTest.html</filename>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::IncompleteTestCase</name>
    <filename>classPHPUnit_1_1Framework_1_1IncompleteTestCase.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1IncompleteTestCase.html</anchorfile>
      <anchor>a4e283b2be20208f84ae148f8154e6632</anchor>
      <arglist>(string $className, string $methodName, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getMessage</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1IncompleteTestCase.html</anchorfile>
      <anchor>af43e0fc2ec39d8b978526a410e394003</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1IncompleteTestCase.html</anchorfile>
      <anchor>a572010cbcc9bdd89d60118365a90d57f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>runTest</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1IncompleteTestCase.html</anchorfile>
      <anchor>adcf65751c627b26fb34408013fbead06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$backupGlobals</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1IncompleteTestCase.html</anchorfile>
      <anchor>a073cfce207247031a83b8ef4fc7c9ce1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$backupStaticAttributes</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1IncompleteTestCase.html</anchorfile>
      <anchor>afbbda2762efa5f115da822c88fb7b7c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$runTestInSeparateProcess</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1IncompleteTestCase.html</anchorfile>
      <anchor>ab561b00f8a3e3623fbc9b3b39e1c07c1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::IncompleteTestCaseTest</name>
    <filename>classPHPUnit_1_1Framework_1_1IncompleteTestCaseTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testDefaults</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1IncompleteTestCaseTest.html</anchorfile>
      <anchor>a993aa8c487f3d9425f3973e0404db826</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetNameReturnsClassAndMethodName</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1IncompleteTestCaseTest.html</anchorfile>
      <anchor>a3a228be17bd7275c56a501a3a92f6db3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetMessageReturnsMessage</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1IncompleteTestCaseTest.html</anchorfile>
      <anchor>adbac9d775d5b269892d3785f1aac5a5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testRunMarksTestAsIncomplete</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1IncompleteTestCaseTest.html</anchorfile>
      <anchor>a40c19f98f731a2c07b0653833d824c13</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::IncompleteTestError</name>
    <filename>classPHPUnit_1_1Framework_1_1IncompleteTestError.html</filename>
    <base>PHPUnit::Framework::AssertionFailedError</base>
    <base>PHPUnit::Framework::IncompleteTest</base>
  </compound>
  <compound kind="class">
    <name>InheritanceA</name>
    <filename>classInheritanceA.html</filename>
    <base>InheritanceB</base>
  </compound>
  <compound kind="class">
    <name>InheritanceB</name>
    <filename>classInheritanceB.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classInheritanceB.html</anchorfile>
      <anchor>a42eef45c884f3ac0f22d02804be95dda</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InheritedTestCase</name>
    <filename>classInheritedTestCase.html</filename>
    <base>OneTestCase</base>
    <member kind="function">
      <type></type>
      <name>test2</name>
      <anchorfile>classInheritedTestCase.html</anchorfile>
      <anchor>a9d7bb8278b2b7f76cf0dec53c2afe441</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IniTest</name>
    <filename>classIniTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testIni</name>
      <anchorfile>classIniTest.html</anchorfile>
      <anchor>a16bc1b3912f20a0ea76535256e156481</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Doctrine::Instantiator::Instantiator</name>
    <filename>classDoctrine_1_1Instantiator_1_1Instantiator.html</filename>
    <base>Doctrine::Instantiator::InstantiatorInterface</base>
    <member kind="function">
      <type></type>
      <name>instantiate</name>
      <anchorfile>classDoctrine_1_1Instantiator_1_1Instantiator.html</anchorfile>
      <anchor>a8fcffce0abd2fb2f4f869ac0c72f1617</anchor>
      <arglist>($className)</arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>SERIALIZATION_FORMAT_USE_UNSERIALIZER</name>
      <anchorfile>classDoctrine_1_1Instantiator_1_1Instantiator.html</anchorfile>
      <anchor>a0cb9171baae490a8b18ef0c8ab83a122</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>SERIALIZATION_FORMAT_AVOID_UNSERIALIZER</name>
      <anchorfile>classDoctrine_1_1Instantiator_1_1Instantiator.html</anchorfile>
      <anchor>a95522fd1d3b686cb85a188b76640255d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>Doctrine::Instantiator::InstantiatorInterface</name>
    <filename>interfaceDoctrine_1_1Instantiator_1_1InstantiatorInterface.html</filename>
    <member kind="function">
      <type></type>
      <name>instantiate</name>
      <anchorfile>interfaceDoctrine_1_1Instantiator_1_1InstantiatorInterface.html</anchorfile>
      <anchor>a21e9e9258b6dc17e7f043bd5b11abb4a</anchor>
      <arglist>($className)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DoctrineTest::InstantiatorPerformance::InstantiatorPerformanceEvent</name>
    <filename>classDoctrineTest_1_1InstantiatorPerformance_1_1InstantiatorPerformanceEvent.html</filename>
    <member kind="function">
      <type></type>
      <name>init</name>
      <anchorfile>classDoctrineTest_1_1InstantiatorPerformance_1_1InstantiatorPerformanceEvent.html</anchorfile>
      <anchor>a2597e71b50ac623ff58737c5e822aef7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>benchInstantiateSelf</name>
      <anchorfile>classDoctrineTest_1_1InstantiatorPerformance_1_1InstantiatorPerformanceEvent.html</anchorfile>
      <anchor>aa428866263d77015025d0b43e8d9028c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>benchInstantiateInternalClass</name>
      <anchorfile>classDoctrineTest_1_1InstantiatorPerformance_1_1InstantiatorPerformanceEvent.html</anchorfile>
      <anchor>a16998e0480d7277534a190af0ec42629</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>benchInstantiateSimpleSerializableAssetClass</name>
      <anchorfile>classDoctrineTest_1_1InstantiatorPerformance_1_1InstantiatorPerformanceEvent.html</anchorfile>
      <anchor>aa2e37cf5024ed2ecbf0184d4ebb3c586</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>benchInstantiateSerializableArrayObjectAsset</name>
      <anchorfile>classDoctrineTest_1_1InstantiatorPerformance_1_1InstantiatorPerformanceEvent.html</anchorfile>
      <anchor>af49d94d62daf23b2dc87b7de7fd01e87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>benchInstantiateUnCloneableAsset</name>
      <anchorfile>classDoctrineTest_1_1InstantiatorPerformance_1_1InstantiatorPerformanceEvent.html</anchorfile>
      <anchor>a89f00c78fdfa367a76e0072d116eb755</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DoctrineTest::InstantiatorTest::InstantiatorTest</name>
    <filename>classDoctrineTest_1_1InstantiatorTest_1_1InstantiatorTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testCanInstantiate</name>
      <anchorfile>classDoctrineTest_1_1InstantiatorTest_1_1InstantiatorTest.html</anchorfile>
      <anchor>a86f8a3873cfa5a5f0e105887f6a028e2</anchor>
      <arglist>(string $className)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testInstantiatesSeparateInstances</name>
      <anchorfile>classDoctrineTest_1_1InstantiatorTest_1_1InstantiatorTest.html</anchorfile>
      <anchor>afabbe7cc99eeb32f3d82e51d87e2f0c7</anchor>
      <arglist>(string $className)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExceptionOnUnSerializationException</name>
      <anchorfile>classDoctrineTest_1_1InstantiatorTest_1_1InstantiatorTest.html</anchorfile>
      <anchor>a99c85f655965c4c401526de110adcdff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testInstantiationFromNonExistingClass</name>
      <anchorfile>classDoctrineTest_1_1InstantiatorTest_1_1InstantiatorTest.html</anchorfile>
      <anchor>a1ff41f266347c0a357b5dc164d3bed26</anchor>
      <arglist>(string $invalidClassName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testInstancesAreNotCloned</name>
      <anchorfile>classDoctrineTest_1_1InstantiatorTest_1_1InstantiatorTest.html</anchorfile>
      <anchor>aa03b5fb3a41108d1a053c3ae212690be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getInstantiableClasses</name>
      <anchorfile>classDoctrineTest_1_1InstantiatorTest_1_1InstantiatorTest.html</anchorfile>
      <anchor>a5961f47e5608c96c5ed32ac266d9ae57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getInvalidClassNames</name>
      <anchorfile>classDoctrineTest_1_1InstantiatorTest_1_1InstantiatorTest.html</anchorfile>
      <anchor>abfe1612f4d6eb5ecb24746457cd59bad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classDoctrineTest_1_1InstantiatorTest_1_1InstantiatorTest.html</anchorfile>
      <anchor>a8ca9eccdf65be9a6f43851b6f12b25f9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::Types::Integer</name>
    <filename>classphpDocumentor_1_1Reflection_1_1Types_1_1Integer.html</filename>
    <base>phpDocumentor::Reflection::Type</base>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1Integer.html</anchorfile>
      <anchor>ada1e17de373865d25ae6dc3f9ade11ee</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Exception::Doubler::InterfaceNotFoundException</name>
    <filename>classProphecy_1_1Exception_1_1Doubler_1_1InterfaceNotFoundException.html</filename>
    <base>Prophecy::Exception::Doubler::ClassNotFoundException</base>
    <member kind="function">
      <type></type>
      <name>getInterfaceName</name>
      <anchorfile>classProphecy_1_1Exception_1_1Doubler_1_1InterfaceNotFoundException.html</anchorfile>
      <anchor>a6706ecfdf450c30e3f9e3ccad51b867e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>InterfaceWithSemiReservedMethodName</name>
    <filename>interfaceInterfaceWithSemiReservedMethodName.html</filename>
    <member kind="function">
      <type></type>
      <name>unset</name>
      <anchorfile>interfaceInterfaceWithSemiReservedMethodName.html</anchorfile>
      <anchor>a3d2b3f08fc78ddca0ce1847ad02f1b11</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>InterfaceWithStaticMethod</name>
    <filename>interfaceInterfaceWithStaticMethod.html</filename>
    <member kind="function" static="yes">
      <type>static</type>
      <name>staticMethod</name>
      <anchorfile>interfaceInterfaceWithStaticMethod.html</anchorfile>
      <anchor>af64831e98a0efe005821c0034cbb3af2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::InterpretingDocBlocksTest</name>
    <filename>classphpDocumentor_1_1Reflection_1_1InterpretingDocBlocksTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>tearDown</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1InterpretingDocBlocksTest.html</anchorfile>
      <anchor>ad478cb48f56e10234b96313cbf6baf7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testInterpretingSummaryWithEllipsis</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1InterpretingDocBlocksTest.html</anchorfile>
      <anchor>ae330f3b54ff9bbafb5ea16ac54404e50</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::Types::Intersection</name>
    <filename>classphpDocumentor_1_1Reflection_1_1Types_1_1Intersection.html</filename>
    <base>phpDocumentor::Reflection::Types::AggregatedType</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1Intersection.html</anchorfile>
      <anchor>a4ad3aa068a9ca07dfc907abaf325d5ae</anchor>
      <arglist>(array $types)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::InvalidApplicationNameException</name>
    <filename>classPharIo_1_1Manifest_1_1InvalidApplicationNameException.html</filename>
    <base>PharIo::Manifest::Exception</base>
    <member kind="variable">
      <type>const</type>
      <name>NotAString</name>
      <anchorfile>classPharIo_1_1Manifest_1_1InvalidApplicationNameException.html</anchorfile>
      <anchor>a7e755eec8bbccb5b09609849b08e0928</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>InvalidFormat</name>
      <anchorfile>classPharIo_1_1Manifest_1_1InvalidApplicationNameException.html</anchorfile>
      <anchor>a75ae3086fd1a39f9ca9175c313702f68</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Doctrine::Instantiator::Exception::InvalidArgumentException</name>
    <filename>classDoctrine_1_1Instantiator_1_1Exception_1_1InvalidArgumentException.html</filename>
    <base>Doctrine::Instantiator::Exception::ExceptionInterface</base>
    <member kind="function" static="yes">
      <type>static</type>
      <name>fromNonExistingClass</name>
      <anchorfile>classDoctrine_1_1Instantiator_1_1Exception_1_1InvalidArgumentException.html</anchorfile>
      <anchor>afd865db943a74160cea80265d959d297</anchor>
      <arglist>(string $className)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>fromAbstractClass</name>
      <anchorfile>classDoctrine_1_1Instantiator_1_1Exception_1_1InvalidArgumentException.html</anchorfile>
      <anchor>a156553ff3ce81cf22875de2811612b73</anchor>
      <arglist>(ReflectionClass $reflectionClass)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Diff::InvalidArgumentException</name>
    <filename>classSebastianBergmann_1_1Diff_1_1InvalidArgumentException.html</filename>
    <base>SebastianBergmann::Diff::Exception</base>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::ObjectEnumerator::InvalidArgumentException</name>
    <filename>classSebastianBergmann_1_1ObjectEnumerator_1_1InvalidArgumentException.html</filename>
    <base>SebastianBergmann::ObjectEnumerator::Exception</base>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::ObjectReflector::InvalidArgumentException</name>
    <filename>classSebastianBergmann_1_1ObjectReflector_1_1InvalidArgumentException.html</filename>
    <base>SebastianBergmann::ObjectReflector::Exception</base>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::RecursionContext::InvalidArgumentException</name>
    <filename>classSebastianBergmann_1_1RecursionContext_1_1InvalidArgumentException.html</filename>
    <base>SebastianBergmann::RecursionContext::Exception</base>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::InvalidArgumentException</name>
    <filename>classPHPUnit_1_1Framework_1_1InvalidArgumentException.html</filename>
    <base>PHPUnit::Framework::Exception</base>
    <member kind="function" static="yes">
      <type>static</type>
      <name>create</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1InvalidArgumentException.html</anchorfile>
      <anchor>a23313c42ad16b1c91dd4b68b21e3eb4b</anchor>
      <arglist>(int $argument, string $type)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Exception::InvalidArgumentException</name>
    <filename>classProphecy_1_1Exception_1_1InvalidArgumentException.html</filename>
    <base>Prophecy::Exception::Exception</base>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::CodeCoverage::InvalidArgumentException</name>
    <filename>classSebastianBergmann_1_1CodeCoverage_1_1InvalidArgumentException.html</filename>
    <base>SebastianBergmann::CodeCoverage::Exception</base>
    <member kind="function" static="yes">
      <type>static</type>
      <name>create</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1InvalidArgumentException.html</anchorfile>
      <anchor>a6f64a28b94fae5615ac6955cbe74ab10</anchor>
      <arglist>($argument, $type, $value=null)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Diff::InvalidArgumentExceptionTest</name>
    <filename>classSebastianBergmann_1_1Diff_1_1InvalidArgumentExceptionTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testInvalidArgumentException</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1InvalidArgumentExceptionTest.html</anchorfile>
      <anchor>a860737743c2ca6f51c9aa043be1c5057</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::InvalidArgumentExceptionTest</name>
    <filename>classPHPUnit_1_1Framework_1_1InvalidArgumentExceptionTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testUsesCorrectArticleInErrorMessage</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1InvalidArgumentExceptionTest.html</anchorfile>
      <anchor>a6099843cee8b0967b23ef11f1a1f8871</anchor>
      <arglist>(string $expected, $type)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>provider</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1InvalidArgumentExceptionTest.html</anchorfile>
      <anchor>add3a44656539f1a57c19824f2a803367</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DoctrineTest::InstantiatorTest::Exception::InvalidArgumentExceptionTest</name>
    <filename>classDoctrineTest_1_1InstantiatorTest_1_1Exception_1_1InvalidArgumentExceptionTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testFromNonExistingTypeWithNonExistingClass</name>
      <anchorfile>classDoctrineTest_1_1InstantiatorTest_1_1Exception_1_1InvalidArgumentExceptionTest.html</anchorfile>
      <anchor>aeca1d721d931ca487bc97e561169e9fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFromNonExistingTypeWithTrait</name>
      <anchorfile>classDoctrineTest_1_1InstantiatorTest_1_1Exception_1_1InvalidArgumentExceptionTest.html</anchorfile>
      <anchor>a805efc188660c1b422dfa9e89e5c8fcd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFromNonExistingTypeWithInterface</name>
      <anchorfile>classDoctrineTest_1_1InstantiatorTest_1_1Exception_1_1InvalidArgumentExceptionTest.html</anchorfile>
      <anchor>a4bcc2f6bba98c9c975922c9dcbe99c0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFromAbstractClass</name>
      <anchorfile>classDoctrineTest_1_1InstantiatorTest_1_1Exception_1_1InvalidArgumentExceptionTest.html</anchorfile>
      <anchor>a40f2e112c13e1c433305b715181d9cd2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::InvalidCoversTargetException</name>
    <filename>classPHPUnit_1_1Framework_1_1InvalidCoversTargetException.html</filename>
    <base>PHPUnit::Framework::CodeCoverageException</base>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::InvalidDataProviderException</name>
    <filename>classPHPUnit_1_1Framework_1_1InvalidDataProviderException.html</filename>
    <base>PHPUnit::Framework::Exception</base>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Util::InvalidDataSetException</name>
    <filename>classPHPUnit_1_1Util_1_1InvalidDataSetException.html</filename>
    <base>PHPUnit::Exception</base>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::InvalidEmailException</name>
    <filename>classPharIo_1_1Manifest_1_1InvalidEmailException.html</filename>
    <base>PharIo::Manifest::Exception</base>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::InvalidParameterGroupException</name>
    <filename>classPHPUnit_1_1Framework_1_1InvalidParameterGroupException.html</filename>
    <base>PHPUnit::Framework::Exception</base>
  </compound>
  <compound kind="class">
    <name>PharIo::Version::InvalidPreReleaseSuffixException</name>
    <filename>classPharIo_1_1Version_1_1InvalidPreReleaseSuffixException.html</filename>
    <base>PharIo::Version::Exception</base>
    <base>PharIo::Version::Exception</base>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocBlock::Tags::InvalidTag</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1InvalidTag.html</filename>
    <base>phpDocumentor::Reflection::DocBlock::Tag</base>
    <member kind="function">
      <type></type>
      <name>getException</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1InvalidTag.html</anchorfile>
      <anchor>a8fa54bb4edffb70bf82f33cdc76a09ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getName</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1InvalidTag.html</anchorfile>
      <anchor>ae4c5d1ae64d9f6ab0e0a97328cd72a19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>withError</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1InvalidTag.html</anchorfile>
      <anchor>ac639ee088afbe8f1243ae544491c1e60</anchor>
      <arglist>(Throwable $exception)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>render</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1InvalidTag.html</anchorfile>
      <anchor>a0d91aa198d23db6730758c7414199600</anchor>
      <arglist>(?Formatter $formatter=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1InvalidTag.html</anchorfile>
      <anchor>a0691c46065d64071e7a11dc27bb13338</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>create</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1InvalidTag.html</anchorfile>
      <anchor>ad6788a2f5368612b2a66765b2905257a</anchor>
      <arglist>(string $body, string $name=&apos;&apos;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocBlock::Tags::InvalidTagTest</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1InvalidTagTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testCreationWithoutError</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1InvalidTagTest.html</anchorfile>
      <anchor>a30861b8fa930bde0561d67b407dbef03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCreationWithError</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1InvalidTagTest.html</anchorfile>
      <anchor>a2a394c7007ea1cbdc5d6747d39452d2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCreationWithErrorContainingClosure</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1InvalidTagTest.html</anchorfile>
      <anchor>a7079a54c0f4dccfe74b9c3cfcc9bee0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCreationWithErrorContainingResource</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1InvalidTagTest.html</anchorfile>
      <anchor>a0ba825d39168b74442c290cea7d12db1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::InvalidUrlException</name>
    <filename>classPharIo_1_1Manifest_1_1InvalidUrlException.html</filename>
    <base>PharIo::Manifest::Exception</base>
  </compound>
  <compound kind="class">
    <name>PharIo::Version::InvalidVersionException</name>
    <filename>classPharIo_1_1Version_1_1InvalidVersionException.html</filename>
    <base>PharIo::Version::Exception</base>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::MockObject::Invocation</name>
    <filename>classPHPUnit_1_1Framework_1_1MockObject_1_1Invocation.html</filename>
    <base>PHPUnit::Framework::SelfDescribing</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Invocation.html</anchorfile>
      <anchor>a62f325399b825df2a968e3d8ba23a903</anchor>
      <arglist>(string $className, string $methodName, array $parameters, string $returnType, object $object, bool $cloneObjects=false, bool $proxiedCall=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getClassName</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Invocation.html</anchorfile>
      <anchor>a5b35f9b751499894808d87131891f287</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getMethodName</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Invocation.html</anchorfile>
      <anchor>a76567286381360fdcbb1e8c49a9faac3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getParameters</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Invocation.html</anchorfile>
      <anchor>a3a7565ebdb8ab59218bf4003d168bdf0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>generateReturnValue</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Invocation.html</anchorfile>
      <anchor>a84008de7934b56983b829b91c7197d02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Invocation.html</anchorfile>
      <anchor>abd53db47ac05c3469add3fc4ccd17f7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getObject</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Invocation.html</anchorfile>
      <anchor>ac922ab07f7a06c6d155331ddae279526</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::MockObject::InvocationHandler</name>
    <filename>classPHPUnit_1_1Framework_1_1MockObject_1_1InvocationHandler.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1InvocationHandler.html</anchorfile>
      <anchor>ae6884096ba0bb5d9310816fe2581cb00</anchor>
      <arglist>(array $configurableMethods, bool $returnValueGeneration)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>hasMatchers</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1InvocationHandler.html</anchorfile>
      <anchor>a75027b6b97077f43c9c0a1d4220627c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>lookupMatcher</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1InvocationHandler.html</anchorfile>
      <anchor>a7bc8c112eac3cde780b25452371fabcb</anchor>
      <arglist>(string $id)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>registerMatcher</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1InvocationHandler.html</anchorfile>
      <anchor>a39637ff1408388f3c76b00d41c657698</anchor>
      <arglist>(string $id, Matcher $matcher)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>expects</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1InvocationHandler.html</anchorfile>
      <anchor>a6fb16771bd3af6486b6e95f64169bdba</anchor>
      <arglist>(InvocationOrder $rule)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>invoke</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1InvocationHandler.html</anchorfile>
      <anchor>a3fe9b79822ae93d39f888587d2f0bc1b</anchor>
      <arglist>(Invocation $invocation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>matches</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1InvocationHandler.html</anchorfile>
      <anchor>a1572f5d4270200eb99d50c18ea309562</anchor>
      <arglist>(Invocation $invocation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>verify</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1InvocationHandler.html</anchorfile>
      <anchor>ad5d79f521490240c31b0505d70f8cb05</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::MockObject::InvocationHandlerTest</name>
    <filename>classPHPUnit_1_1Framework_1_1MockObject_1_1InvocationHandlerTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testExceptionThrownIn__ToStringIsDeferred</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1InvocationHandlerTest.html</anchorfile>
      <anchor>ad63fcfb4f07ba739b1a50282c3f16c64</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::MockObject::Builder::InvocationMocker</name>
    <filename>classPHPUnit_1_1Framework_1_1MockObject_1_1Builder_1_1InvocationMocker.html</filename>
    <base>PHPUnit::Framework::MockObject::Builder::InvocationStubber</base>
    <base>PHPUnit::Framework::MockObject::Builder::MethodNameMatch</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Builder_1_1InvocationMocker.html</anchorfile>
      <anchor>ac636f6d6e660412fb68f30c9a8924c7b</anchor>
      <arglist>(InvocationHandler $handler, Matcher $matcher, ConfigurableMethod ... $configurableMethods)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>id</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Builder_1_1InvocationMocker.html</anchorfile>
      <anchor>ab5f17396194a3aacf9636eb89c417a28</anchor>
      <arglist>($id)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>will</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Builder_1_1InvocationMocker.html</anchorfile>
      <anchor>a2653f40f74212bb7b0c22fba57167c9e</anchor>
      <arglist>(Stub $stub)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>willReturn</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Builder_1_1InvocationMocker.html</anchorfile>
      <anchor>aa838fa4e3a6f2a7dd6c56fc53e955746</anchor>
      <arglist>($value,... $nextValues)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>willReturnReference</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Builder_1_1InvocationMocker.html</anchorfile>
      <anchor>aa4063538234b3bb679906b0fc5b3ca4e</anchor>
      <arglist>(&amp;$reference)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>willReturnMap</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Builder_1_1InvocationMocker.html</anchorfile>
      <anchor>ad5527cc76fbd45ac1f2f642a202d879e</anchor>
      <arglist>(array $valueMap)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>willReturnArgument</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Builder_1_1InvocationMocker.html</anchorfile>
      <anchor>a71e696b38d1188318e1dc4e9c71e0c8f</anchor>
      <arglist>($argumentIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>willReturnCallback</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Builder_1_1InvocationMocker.html</anchorfile>
      <anchor>aea68fdb6889bb0d6d5bd8c65cd200fb0</anchor>
      <arglist>($callback)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>willReturnSelf</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Builder_1_1InvocationMocker.html</anchorfile>
      <anchor>a5b079591c9b507963199d6422f7b1ad1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>willReturnOnConsecutiveCalls</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Builder_1_1InvocationMocker.html</anchorfile>
      <anchor>af00f990ca847babecc134eeecef70ef7</anchor>
      <arglist>(... $values)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>willThrowException</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Builder_1_1InvocationMocker.html</anchorfile>
      <anchor>aa50ae7fb5b4e9b97f87a7128567974be</anchor>
      <arglist>(\Throwable $exception)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>after</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Builder_1_1InvocationMocker.html</anchorfile>
      <anchor>a358fa6604dab536eba73ec1ab91f0d99</anchor>
      <arglist>($id)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>with</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Builder_1_1InvocationMocker.html</anchorfile>
      <anchor>a670e8e454f08275596fee7a5909176f8</anchor>
      <arglist>(... $arguments)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>withConsecutive</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Builder_1_1InvocationMocker.html</anchorfile>
      <anchor>aec0b74f20044b70e6b2f0ff422beeff2</anchor>
      <arglist>(... $arguments)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>withAnyParameters</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Builder_1_1InvocationMocker.html</anchorfile>
      <anchor>aed462ade7f946f7fa0d3970983e37450</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>method</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Builder_1_1InvocationMocker.html</anchorfile>
      <anchor>ac182c2fa9867a8deb9bed9cd97fd766e</anchor>
      <arglist>($constraint)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InvocationMockerTest</name>
    <filename>classInvocationMockerTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testWillReturnWithOneValue</name>
      <anchorfile>classInvocationMockerTest.html</anchorfile>
      <anchor>ad4d90dbbf037fce56c757f74bffd02b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testWillReturnWithMultipleValues</name>
      <anchorfile>classInvocationMockerTest.html</anchorfile>
      <anchor>ac40f200df114bec8e7f0ff3afb2fa5a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testWillReturnOnConsecutiveCalls</name>
      <anchorfile>classInvocationMockerTest.html</anchorfile>
      <anchor>a7ef446f5ea28214cda124527b4280a7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testWillReturnByReference</name>
      <anchorfile>classInvocationMockerTest.html</anchorfile>
      <anchor>a28c6dfa47ac4ea31ae189a94e4c3e728</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testWillFailWhenTryingToPerformExpectationUnconfigurableMethod</name>
      <anchorfile>classInvocationMockerTest.html</anchorfile>
      <anchor>a917180ef89a64e63bb1162737c232a9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testWillReturnFailsWhenTryingToReturnSingleIncompatibleValue</name>
      <anchorfile>classInvocationMockerTest.html</anchorfile>
      <anchor>a2209c302559831c7bc023754aa508beb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testWillReturnFailsWhenTryingToReturnIncompatibleValueByConstraint</name>
      <anchorfile>classInvocationMockerTest.html</anchorfile>
      <anchor>af47d3f3716be5fad4e5934dbcf9b6eb8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testWillReturnFailsWhenTryingToReturnAtLeastOneIncompatibleValue</name>
      <anchorfile>classInvocationMockerTest.html</anchorfile>
      <anchor>a3ba82b94b5c889b71541157ccdd3ea38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testWillReturnFailsWhenTryingToReturnSingleIncompatibleClass</name>
      <anchorfile>classInvocationMockerTest.html</anchorfile>
      <anchor>a7b4c7f66e7fc13ab29b5257a824e6bf4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testWillReturnValidType</name>
      <anchorfile>classInvocationMockerTest.html</anchorfile>
      <anchor>a0a5ced3c38d9d0fa768078b59e16c6a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testWillReturnValidTypeForLowercaseCall</name>
      <anchorfile>classInvocationMockerTest.html</anchorfile>
      <anchor>a92871138dcbe27701f5ca858cb6968c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testWillReturnValidTypeForLowercaseMethod</name>
      <anchorfile>classInvocationMockerTest.html</anchorfile>
      <anchor>a6311f4794d5d2a47eca904a7be7cb1c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExpectationsAreEnabledByPreviousMethodCallWhenChainedWithAfter</name>
      <anchorfile>classInvocationMockerTest.html</anchorfile>
      <anchor>ac095bded1b57e9df99d63cb176884169</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExpectationsAreNotTriggeredUntilPreviousMethodWasCalled</name>
      <anchorfile>classInvocationMockerTest.html</anchorfile>
      <anchor>a2b4f1263a7eec3503627c6d76457d3aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testWillReturnAlreadyInstantiatedStubs</name>
      <anchorfile>classInvocationMockerTest.html</anchorfile>
      <anchor>ac5f1455322f9fc6aff1b482ad117c74d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::MockObject::Rule::InvocationOrder</name>
    <filename>classPHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1InvocationOrder.html</filename>
    <base>PHPUnit::Framework::SelfDescribing</base>
    <base>PHPUnit::Framework::MockObject::Verifiable</base>
    <member kind="function">
      <type></type>
      <name>getInvocationCount</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1InvocationOrder.html</anchorfile>
      <anchor>aa148bbce1e80ec448491502bbfad92f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>hasBeenInvoked</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1InvocationOrder.html</anchorfile>
      <anchor>a34b08de5bf299c75533b74d82f5effc5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>invoked</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1InvocationOrder.html</anchorfile>
      <anchor>ae5689e81a5dcf3fc24369ad57a7e053c</anchor>
      <arglist>(BaseInvocation $invocation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>matches</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1InvocationOrder.html</anchorfile>
      <anchor>abf506b8053bc16e9a864851b56822a0a</anchor>
      <arglist>(BaseInvocation $invocation)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>invokedDo</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1InvocationOrder.html</anchorfile>
      <anchor>a0da6947dbe5bcb3afb2cb33e74c17bde</anchor>
      <arglist>(BaseInvocation $invocation)</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>PHPUnit::Framework::MockObject::Builder::InvocationStubber</name>
    <filename>interfacePHPUnit_1_1Framework_1_1MockObject_1_1Builder_1_1InvocationStubber.html</filename>
    <member kind="function">
      <type></type>
      <name>will</name>
      <anchorfile>interfacePHPUnit_1_1Framework_1_1MockObject_1_1Builder_1_1InvocationStubber.html</anchorfile>
      <anchor>a2dbdb40b5b420005c63bab35e9d24052</anchor>
      <arglist>(Stub $stub)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>willReturn</name>
      <anchorfile>interfacePHPUnit_1_1Framework_1_1MockObject_1_1Builder_1_1InvocationStubber.html</anchorfile>
      <anchor>accca988cdcdbf370c5fed4dbdb8f76e1</anchor>
      <arglist>($value,... $nextValues)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>willReturnReference</name>
      <anchorfile>interfacePHPUnit_1_1Framework_1_1MockObject_1_1Builder_1_1InvocationStubber.html</anchorfile>
      <anchor>a093a50e1d8ca803b558e28cbf9cb09cc</anchor>
      <arglist>(&amp;$reference)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>willReturnMap</name>
      <anchorfile>interfacePHPUnit_1_1Framework_1_1MockObject_1_1Builder_1_1InvocationStubber.html</anchorfile>
      <anchor>a1949eb3289972412bb96218c0df53f34</anchor>
      <arglist>(array $valueMap)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>willReturnArgument</name>
      <anchorfile>interfacePHPUnit_1_1Framework_1_1MockObject_1_1Builder_1_1InvocationStubber.html</anchorfile>
      <anchor>ae7c7cbac31f2d8df752bcd6643e12286</anchor>
      <arglist>($argumentIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>willReturnCallback</name>
      <anchorfile>interfacePHPUnit_1_1Framework_1_1MockObject_1_1Builder_1_1InvocationStubber.html</anchorfile>
      <anchor>a83672785cf1ad94c25851e0574f39ad2</anchor>
      <arglist>($callback)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>willReturnSelf</name>
      <anchorfile>interfacePHPUnit_1_1Framework_1_1MockObject_1_1Builder_1_1InvocationStubber.html</anchorfile>
      <anchor>a75c63856b59dde690d754e418b4651d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>willReturnOnConsecutiveCalls</name>
      <anchorfile>interfacePHPUnit_1_1Framework_1_1MockObject_1_1Builder_1_1InvocationStubber.html</anchorfile>
      <anchor>a4dd5a661e73bec580624165fbe520523</anchor>
      <arglist>(... $values)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>willThrowException</name>
      <anchorfile>interfacePHPUnit_1_1Framework_1_1MockObject_1_1Builder_1_1InvocationStubber.html</anchorfile>
      <anchor>ada23d165be90f6cef3569e84240fe224</anchor>
      <arglist>(\Throwable $exception)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::MockObject::Rule::InvokedAtIndex</name>
    <filename>classPHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1InvokedAtIndex.html</filename>
    <base>PHPUnit::Framework::MockObject::Rule::InvocationOrder</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1InvokedAtIndex.html</anchorfile>
      <anchor>aa880fd11085d0039cb1aeda7681b5c42</anchor>
      <arglist>($sequenceIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1InvokedAtIndex.html</anchorfile>
      <anchor>a1767a0e19a9caf006421d57afa4e4c44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>matches</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1InvokedAtIndex.html</anchorfile>
      <anchor>a26741c4a935de84a885cefb187852b22</anchor>
      <arglist>(BaseInvocation $invocation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>verify</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1InvokedAtIndex.html</anchorfile>
      <anchor>a0160dc7d732046e8e1b74bb57d112766</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>invokedDo</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1InvokedAtIndex.html</anchorfile>
      <anchor>a249acbffd0c1927dc1949d5934c79482</anchor>
      <arglist>(BaseInvocation $invocation)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::MockObject::Rule::InvokedAtLeastCount</name>
    <filename>classPHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1InvokedAtLeastCount.html</filename>
    <base>PHPUnit::Framework::MockObject::Rule::InvocationOrder</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1InvokedAtLeastCount.html</anchorfile>
      <anchor>ad9ae693794a16489a6278d62a1134581</anchor>
      <arglist>($requiredInvocations)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1InvokedAtLeastCount.html</anchorfile>
      <anchor>a8ceed7e8ba0d7e249ae4e8948446325e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>verify</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1InvokedAtLeastCount.html</anchorfile>
      <anchor>af5597e7b217ac18daa40e4f0eee77267</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>matches</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1InvokedAtLeastCount.html</anchorfile>
      <anchor>a45c21669b83e89828b5aad8277afa5c2</anchor>
      <arglist>(BaseInvocation $invocation)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>invokedDo</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1InvokedAtLeastCount.html</anchorfile>
      <anchor>a24cee09d49fd8f125fd53bac132fcf52</anchor>
      <arglist>(BaseInvocation $invocation)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::MockObject::Rule::InvokedAtLeastOnce</name>
    <filename>classPHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1InvokedAtLeastOnce.html</filename>
    <base>PHPUnit::Framework::MockObject::Rule::InvocationOrder</base>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1InvokedAtLeastOnce.html</anchorfile>
      <anchor>a725780e34b715aece5544b6b62198c09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>verify</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1InvokedAtLeastOnce.html</anchorfile>
      <anchor>a812795bad00366da4788c90bcf371706</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>matches</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1InvokedAtLeastOnce.html</anchorfile>
      <anchor>a14d7936fa2a8bef88170a33f110d3731</anchor>
      <arglist>(BaseInvocation $invocation)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>invokedDo</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1InvokedAtLeastOnce.html</anchorfile>
      <anchor>aa0364f94427587ce04b28cb207608d1f</anchor>
      <arglist>(BaseInvocation $invocation)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::MockObject::Rule::InvokedAtMostCount</name>
    <filename>classPHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1InvokedAtMostCount.html</filename>
    <base>PHPUnit::Framework::MockObject::Rule::InvocationOrder</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1InvokedAtMostCount.html</anchorfile>
      <anchor>a8f271cf1b90773410ffee4c160109c51</anchor>
      <arglist>($allowedInvocations)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1InvokedAtMostCount.html</anchorfile>
      <anchor>aa77a25b79f5af02f3602d1ce631e3c1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>verify</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1InvokedAtMostCount.html</anchorfile>
      <anchor>abfe1da885ba2e82ab245ba4aeb5a041e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>matches</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1InvokedAtMostCount.html</anchorfile>
      <anchor>a651a1ad01c8a7e0f48f63a07500bcbb4</anchor>
      <arglist>(BaseInvocation $invocation)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>invokedDo</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1InvokedAtMostCount.html</anchorfile>
      <anchor>af32920ca6ce899b595565b7718d508a9</anchor>
      <arglist>(BaseInvocation $invocation)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::MockObject::Rule::InvokedCount</name>
    <filename>classPHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1InvokedCount.html</filename>
    <base>PHPUnit::Framework::MockObject::Rule::InvocationOrder</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1InvokedCount.html</anchorfile>
      <anchor>a38519faa273e3d70e66b26c93523aeca</anchor>
      <arglist>($expectedCount)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isNever</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1InvokedCount.html</anchorfile>
      <anchor>ae1ee3179bb8fa945bfcbe7e542e59c24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1InvokedCount.html</anchorfile>
      <anchor>a62e722185c9c4192abe117ab8519ec05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>matches</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1InvokedCount.html</anchorfile>
      <anchor>a5582d17ecef7f72ffa2d6b7be8cc2c01</anchor>
      <arglist>(BaseInvocation $invocation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>verify</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1InvokedCount.html</anchorfile>
      <anchor>afdb810713afb8134cc2c187ae2e52352</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>invokedDo</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1InvokedCount.html</anchorfile>
      <anchor>a5d4cdb6ac07e34d028bb741693c89c65</anchor>
      <arglist>(BaseInvocation $invocation)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::IsAnything</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1IsAnything.html</filename>
    <base>PHPUnit::Framework::Constraint::Constraint</base>
    <member kind="function">
      <type></type>
      <name>evaluate</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsAnything.html</anchorfile>
      <anchor>a10ee4d638bb51998751f8b5b877a6a0a</anchor>
      <arglist>($other, string $description=&apos;&apos;, bool $returnResult=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsAnything.html</anchorfile>
      <anchor>a557e3ed5183d91ca1213f35f98c6c270</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>count</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsAnything.html</anchorfile>
      <anchor>a855060c5699b6900af99d97a458f179d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::IsEmpty</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1IsEmpty.html</filename>
    <base>PHPUnit::Framework::Constraint::Constraint</base>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsEmpty.html</anchorfile>
      <anchor>abf7091851fd419a6868811fab200114b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>matches</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsEmpty.html</anchorfile>
      <anchor>a2780817f0a53b0ec19c3bbbc07fd887b</anchor>
      <arglist>($other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>failureDescription</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsEmpty.html</anchorfile>
      <anchor>a076f02c17afca5477d0b7afd633d7233</anchor>
      <arglist>($other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::IsEmptyTest</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1IsEmptyTest.html</filename>
    <base>PHPUnit::Framework::Constraint::ConstraintTestCase</base>
    <member kind="function">
      <type></type>
      <name>testConstraintIsEmpty</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsEmptyTest.html</anchorfile>
      <anchor>a3552ad1d6ba12ac4dd98f1c8900a3be1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintIsEmpty2</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsEmptyTest.html</anchorfile>
      <anchor>aafdb95a18fa58df7d52efa7ced740cf5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>test_EmptyIterator_is_handled_correctly</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsEmptyTest.html</anchorfile>
      <anchor>a0c79faa3a9380725f97a94b55b9ee2c7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::IsEqual</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1IsEqual.html</filename>
    <base>PHPUnit::Framework::Constraint::Constraint</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsEqual.html</anchorfile>
      <anchor>a024e769639126fb9c9620d60a9a64546</anchor>
      <arglist>($value, float $delta=0.0, int $maxDepth=10, bool $canonicalize=false, bool $ignoreCase=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>evaluate</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsEqual.html</anchorfile>
      <anchor>a10a634e7b4354817b74196f569b5a8a4</anchor>
      <arglist>($other, string $description=&apos;&apos;, bool $returnResult=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsEqual.html</anchorfile>
      <anchor>a6e81d1d0d90b9c38d46f951f2506f49f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::IsEqualTest</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1IsEqualTest.html</filename>
    <base>PHPUnit::Framework::Constraint::ConstraintTestCase</base>
    <member kind="function">
      <type></type>
      <name>testConstraintIsEqual</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsEqualTest.html</anchorfile>
      <anchor>a3ca07a374d63c89b98ffcebf22c85ffb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintIsEqual2</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsEqualTest.html</anchorfile>
      <anchor>ae5fb406e632fd3fab0c8de40eec18e36</anchor>
      <arglist>($expected, $actual, $message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintDeltaIsNotZero</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsEqualTest.html</anchorfile>
      <anchor>a9ff79863dc2fb0a99f94282db4f540a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isEqualProvider</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsEqualTest.html</anchorfile>
      <anchor>a2323c1484e6993ee983e013e541efb71</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::IsFalse</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1IsFalse.html</filename>
    <base>PHPUnit::Framework::Constraint::Constraint</base>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsFalse.html</anchorfile>
      <anchor>a475abe5cdbb9da1515524a39bb11e1e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>matches</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsFalse.html</anchorfile>
      <anchor>a9d5a0f617bf94507e3d6389023876785</anchor>
      <arglist>($other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::IsFinite</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1IsFinite.html</filename>
    <base>PHPUnit::Framework::Constraint::Constraint</base>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsFinite.html</anchorfile>
      <anchor>aea6b4efdae66ea46c418a3939485ce79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>matches</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsFinite.html</anchorfile>
      <anchor>a6eb0e1b9628f36ab7522f7c16738a3e6</anchor>
      <arglist>($other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::IsIdentical</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1IsIdentical.html</filename>
    <base>PHPUnit::Framework::Constraint::Constraint</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsIdentical.html</anchorfile>
      <anchor>ab289726929eaea45d3c250e933c7ae2f</anchor>
      <arglist>($value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>evaluate</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsIdentical.html</anchorfile>
      <anchor>a13718a39e2a59417ccd372bbd62c4ece</anchor>
      <arglist>($other, string $description=&apos;&apos;, bool $returnResult=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsIdentical.html</anchorfile>
      <anchor>a711d27da79c14b4d259655610fc64898</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>failureDescription</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsIdentical.html</anchorfile>
      <anchor>a352ea0c62fc6bd78f23c9b6ae39f5066</anchor>
      <arglist>($other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::IsIdenticalTest</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1IsIdenticalTest.html</filename>
    <base>PHPUnit::Framework::Constraint::ConstraintTestCase</base>
    <member kind="function">
      <type></type>
      <name>testConstraintIsIdentical</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsIdenticalTest.html</anchorfile>
      <anchor>a970b441aa61cf8cacf72aa90156d2d96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintIsIdentical2</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsIdenticalTest.html</anchorfile>
      <anchor>a7739293e7710f6688c1e0a739bf0a0ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintIsIdentical3</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsIdenticalTest.html</anchorfile>
      <anchor>a9196100fb9634d2b35be2782d2575441</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintIsIdenticalArrayDiff</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsIdenticalTest.html</anchorfile>
      <anchor>acad45d2b75392f721c21e52838cbc2b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintIsIdenticalNestedArrayDiff</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsIdenticalTest.html</anchorfile>
      <anchor>ae064714792371f0ffc3334c04d526152</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::IsInfinite</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1IsInfinite.html</filename>
    <base>PHPUnit::Framework::Constraint::Constraint</base>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsInfinite.html</anchorfile>
      <anchor>ada215c1597bd9887cbe576eb55197f0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>matches</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsInfinite.html</anchorfile>
      <anchor>a127509bf8e8e5c0f7b6f156a6f2def76</anchor>
      <arglist>($other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::IsInstanceOf</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1IsInstanceOf.html</filename>
    <base>PHPUnit::Framework::Constraint::Constraint</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsInstanceOf.html</anchorfile>
      <anchor>ad90f671bfd14f564b4a1c749ed13e246</anchor>
      <arglist>(string $className)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsInstanceOf.html</anchorfile>
      <anchor>ab82a2b49c17fe60fce82e41d2dcc044e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>matches</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsInstanceOf.html</anchorfile>
      <anchor>a84e3ec80c6e819b3c51339844187fa24</anchor>
      <arglist>($other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>failureDescription</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsInstanceOf.html</anchorfile>
      <anchor>a4c91c35a63aeb55e2ca5dc8c12ec91c5</anchor>
      <arglist>($other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::IsInstanceOfTest</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1IsInstanceOfTest.html</filename>
    <base>PHPUnit::Framework::Constraint::ConstraintTestCase</base>
    <member kind="function">
      <type></type>
      <name>testConstraintInstanceOf</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsInstanceOfTest.html</anchorfile>
      <anchor>ae030aae656fc98679d9c270d03336f30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintFailsOnString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsInstanceOfTest.html</anchorfile>
      <anchor>a8e58f0df08d94714cd5491e0818b4836</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCronstraintsThrowsReflectionException</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsInstanceOfTest.html</anchorfile>
      <anchor>a8a33a1126080335cfaaf831c7bf03e38</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::IsJson</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1IsJson.html</filename>
    <base>PHPUnit::Framework::Constraint::Constraint</base>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsJson.html</anchorfile>
      <anchor>a93361ddb77a988e5281e5d371ecdb5ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>matches</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsJson.html</anchorfile>
      <anchor>a8bfa8ae7c56f0d5ab53d86d2c5dcaad6</anchor>
      <arglist>($other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>failureDescription</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsJson.html</anchorfile>
      <anchor>a0c12fd84eab19af55f8bc4c2519951de</anchor>
      <arglist>($other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::IsJsonTest</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1IsJsonTest.html</filename>
    <base>PHPUnit::Framework::Constraint::ConstraintTestCase</base>
    <member kind="function">
      <type></type>
      <name>testEvaluate</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsJsonTest.html</anchorfile>
      <anchor>a177520e36654795a01151935f5b99400</anchor>
      <arglist>($expected, $jsonOther)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIsJsonCanBeExportedAsString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsJsonTest.html</anchorfile>
      <anchor>a65508c85c49665d5a1bb6d4d0a0de1ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIsJsonCanBeEmptyString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsJsonTest.html</anchorfile>
      <anchor>ac1032718eb993b965fd3f70d031e7325</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>evaluateDataprovider</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsJsonTest.html</anchorfile>
      <anchor>a2bbf816e7c63ba68286a113e1486c8ca</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::IsNan</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1IsNan.html</filename>
    <base>PHPUnit::Framework::Constraint::Constraint</base>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsNan.html</anchorfile>
      <anchor>a3592b2e17ffb1c35a76d50a48bc91850</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>matches</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsNan.html</anchorfile>
      <anchor>a8e5b59f78f7730060f0400b47e7554c4</anchor>
      <arglist>($other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::IsNull</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1IsNull.html</filename>
    <base>PHPUnit::Framework::Constraint::Constraint</base>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsNull.html</anchorfile>
      <anchor>a310ab0a7cea9f8f11d94f1a4ff4df530</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>matches</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsNull.html</anchorfile>
      <anchor>af1e27ee032885b6bdef2c2e709ed8853</anchor>
      <arglist>($other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::IsNullTest</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1IsNullTest.html</filename>
    <base>PHPUnit::Framework::Constraint::ConstraintTestCase</base>
    <member kind="function">
      <type></type>
      <name>testConstraintIsNull</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsNullTest.html</anchorfile>
      <anchor>a315e0205289b8c81caf917c1816a115a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintIsNull2</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsNullTest.html</anchorfile>
      <anchor>a901790b364c70f166e67ea9ceb046041</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IsolationTest</name>
    <filename>classIsolationTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testIsInIsolationReturnsFalse</name>
      <anchorfile>classIsolationTest.html</anchorfile>
      <anchor>a7f34ea6d8d07b0260de2cbd561254a39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIsInIsolationReturnsTrue</name>
      <anchorfile>classIsolationTest.html</anchorfile>
      <anchor>a6f858a9bfb9ace0a0aafb155612111c8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::IsReadable</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1IsReadable.html</filename>
    <base>PHPUnit::Framework::Constraint::Constraint</base>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsReadable.html</anchorfile>
      <anchor>ac46d5db13ed75ba6304b2c22e734ca8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>matches</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsReadable.html</anchorfile>
      <anchor>a48bc4dc218516156efe467d82232174a</anchor>
      <arglist>($other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>failureDescription</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsReadable.html</anchorfile>
      <anchor>a6760014fc724c4a5c8791d3e72901ff7</anchor>
      <arglist>($other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::IsReadableTest</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1IsReadableTest.html</filename>
    <base>PHPUnit::Framework::Constraint::ConstraintTestCase</base>
    <member kind="function">
      <type></type>
      <name>testConstraintIsReadable</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsReadableTest.html</anchorfile>
      <anchor>a6e63cdec6ae605c6054af5b98565cd28</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Issue1021Test</name>
    <filename>classIssue1021Test.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classIssue1021Test.html</anchorfile>
      <anchor>a8d531b02920c75529f50f040abecbe6f</anchor>
      <arglist>($data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSomethingElse</name>
      <anchorfile>classIssue1021Test.html</anchorfile>
      <anchor>af9ebd8ee3140bfcf7845082bbb467a8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>provider</name>
      <anchorfile>classIssue1021Test.html</anchorfile>
      <anchor>a037048dc53c1c82eae344073003286b2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Issue1149Test</name>
    <filename>classIssue1149Test.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testOne</name>
      <anchorfile>classIssue1149Test.html</anchorfile>
      <anchor>a7dbc7f67a674d37ea7c308a58bebc9de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTwo</name>
      <anchorfile>classIssue1149Test.html</anchorfile>
      <anchor>a7a15aaa838c1ff53102fb90b0fe2ce5b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Issue1216Test</name>
    <filename>classIssue1216Test.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testConfigAvailableInBootstrap</name>
      <anchorfile>classIssue1216Test.html</anchorfile>
      <anchor>a58952c7469bf81b57d7a95fe5f47bbc3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Issue1265Test</name>
    <filename>classIssue1265Test.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testTrue</name>
      <anchorfile>classIssue1265Test.html</anchorfile>
      <anchor>a9d4ddd3b1fe7827bf9387fed811cebed</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Issue1330Test</name>
    <filename>classIssue1330Test.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testTrue</name>
      <anchorfile>classIssue1330Test.html</anchorfile>
      <anchor>a9c85e487794600ecc95a6d027c61fec3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Issue1335Test</name>
    <filename>classIssue1335Test.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testGlobalString</name>
      <anchorfile>classIssue1335Test.html</anchorfile>
      <anchor>a44dde73ee417cc6bd0b2f36c3bec1e95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGlobalIntTruthy</name>
      <anchorfile>classIssue1335Test.html</anchorfile>
      <anchor>a66e73c01bd42676781dfe4d3e300335e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGlobalIntFalsey</name>
      <anchorfile>classIssue1335Test.html</anchorfile>
      <anchor>a0dc45d26afa2d4cde1e298e6cba6e1af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGlobalFloat</name>
      <anchorfile>classIssue1335Test.html</anchorfile>
      <anchor>ac377e1ac0ce59444e1a0a604bf7f2013</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGlobalBoolTrue</name>
      <anchorfile>classIssue1335Test.html</anchorfile>
      <anchor>afb556500c266863a86383908b977b2a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGlobalBoolFalse</name>
      <anchorfile>classIssue1335Test.html</anchorfile>
      <anchor>a27ee545df2945a9b8f07f473d0387ebd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGlobalNull</name>
      <anchorfile>classIssue1335Test.html</anchorfile>
      <anchor>a82bc623271aa6168efa817d41ab596cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGlobalArray</name>
      <anchorfile>classIssue1335Test.html</anchorfile>
      <anchor>a8c2d1c08b647fe508ecad449dc86df4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGlobalNestedArray</name>
      <anchorfile>classIssue1335Test.html</anchorfile>
      <anchor>abdd417467f6650022ecb5abc67fae2d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGlobalObject</name>
      <anchorfile>classIssue1335Test.html</anchorfile>
      <anchor>af386a4a6ebb9ca673b14181153166185</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGlobalObjectWithBackSlashString</name>
      <anchorfile>classIssue1335Test.html</anchorfile>
      <anchor>abab43b02882cee66b8b4d8d97e7c9314</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGlobalObjectWithDoubleBackSlashString</name>
      <anchorfile>classIssue1335Test.html</anchorfile>
      <anchor>a41dada92dae00b40bc472cc146c4a536</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Issue1337Test</name>
    <filename>classIssue1337Test.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testProvider</name>
      <anchorfile>classIssue1337Test.html</anchorfile>
      <anchor>a1367661046e67d59f7bc58f7a5a27898</anchor>
      <arglist>($a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>dataProvider</name>
      <anchorfile>classIssue1337Test.html</anchorfile>
      <anchor>a009436735a3f4f3512dc876c0498c6f4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Issue1348Test</name>
    <filename>classIssue1348Test.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testSTDOUT</name>
      <anchorfile>classIssue1348Test.html</anchorfile>
      <anchor>ac1997974967d7394a847fe8630344a78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSTDERR</name>
      <anchorfile>classIssue1348Test.html</anchorfile>
      <anchor>a392b46fe1ff02aa05a5787e162135f3c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Issue1351Test</name>
    <filename>classIssue1351Test.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testFailurePre</name>
      <anchorfile>classIssue1351Test.html</anchorfile>
      <anchor>a7acab84bff8108dda87405275d21732e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFailurePost</name>
      <anchorfile>classIssue1351Test.html</anchorfile>
      <anchor>a5ec77063f07e5c98072aae259fec036a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExceptionPre</name>
      <anchorfile>classIssue1351Test.html</anchorfile>
      <anchor>aa6bce4d2bc62805032dba26a7a3950fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExceptionPost</name>
      <anchorfile>classIssue1351Test.html</anchorfile>
      <anchor>a89f7ad4e2fa31de17b8adf35c4be3a20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testPhpCoreLanguageException</name>
      <anchorfile>classIssue1351Test.html</anchorfile>
      <anchor>a0620cf6bc74b8506e7e447e3b25fb1e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$instance</name>
      <anchorfile>classIssue1351Test.html</anchorfile>
      <anchor>a665f3ed53ea9aa15f749e4f8402e32d4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Issue1374Test</name>
    <filename>classIssue1374Test.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classIssue1374Test.html</anchorfile>
      <anchor>a6fc0819b75498a3dd35d7c9bc7f81303</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classIssue1374Test.html</anchorfile>
      <anchor>a94d8996e8e5f8bf2601d4b3dbed8c559</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>tearDown</name>
      <anchorfile>classIssue1374Test.html</anchorfile>
      <anchor>ab33db595d01daaa1df57a75c5e263286</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Issue1437Test</name>
    <filename>classIssue1437Test.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testFailure</name>
      <anchorfile>classIssue1437Test.html</anchorfile>
      <anchor>a75b98fc5cab01de8bd94425a8c8c7a03</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Issue1468Test</name>
    <filename>classIssue1468Test.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testFailure</name>
      <anchorfile>classIssue1468Test.html</anchorfile>
      <anchor>aa5df077660402e80d07642172ff41da9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Issue1471Test</name>
    <filename>classIssue1471Test.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testFailure</name>
      <anchorfile>classIssue1471Test.html</anchorfile>
      <anchor>ad0cbf58ce8084c3f19e620ec9f57ad53</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Issue1472Test</name>
    <filename>classIssue1472Test.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testAssertEqualXMLStructure</name>
      <anchorfile>classIssue1472Test.html</anchorfile>
      <anchor>a812986f5903a6fb8d3a5843003c17103</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Issue1570Test</name>
    <filename>classIssue1570Test.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testOne</name>
      <anchorfile>classIssue1570Test.html</anchorfile>
      <anchor>aae3a0a87cc1d4d0044246d6836417d3a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Issue2085Test</name>
    <filename>classIssue2085Test.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testShouldAbortSlowTestByEnforcingTimeLimit</name>
      <anchorfile>classIssue2085Test.html</anchorfile>
      <anchor>a60fad57b14557c8926f1a5f8ed1706d6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Issue2137Test</name>
    <filename>classIssue2137Test.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testBrandService</name>
      <anchorfile>classIssue2137Test.html</anchorfile>
      <anchor>a487f0118c01a41992b771cbb1efc49a1</anchor>
      <arglist>($provided, $expected)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>provideBrandService</name>
      <anchorfile>classIssue2137Test.html</anchorfile>
      <anchor>ac22aed5dd819b36b1ab42bd415debe4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSomethingElseInvalid</name>
      <anchorfile>classIssue2137Test.html</anchorfile>
      <anchor>afa5f3847526bc27197028b41d7ba75a5</anchor>
      <arglist>($provided, $expected)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Issue2145Test</name>
    <filename>classIssue2145Test.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testOne</name>
      <anchorfile>classIssue2145Test.html</anchorfile>
      <anchor>a5c8b58b7ce96d5e9f3d041166e5900f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTwo</name>
      <anchorfile>classIssue2145Test.html</anchorfile>
      <anchor>a5051caa8c86192103bafc9d38f111a70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>setUpBeforeClass</name>
      <anchorfile>classIssue2145Test.html</anchorfile>
      <anchor>aef4320a57710ff454efc40bebcd86212</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Issue2158Test</name>
    <filename>classIssue2158Test.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classIssue2158Test.html</anchorfile>
      <anchor>aa4ee4bc52379af8af069cd2b97770f6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSomethingElse</name>
      <anchorfile>classIssue2158Test.html</anchorfile>
      <anchor>a54cb350f86fb915eaaac601d5380b385</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Issue2366</name>
    <filename>classIssue2366.html</filename>
    <member kind="function">
      <type></type>
      <name>foo</name>
      <anchorfile>classIssue2366.html</anchorfile>
      <anchor>a37c3e916a3a5ba528bd091fe3f47221e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Issue2366Test</name>
    <filename>classIssue2366Test.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testOne</name>
      <anchorfile>classIssue2366Test.html</anchorfile>
      <anchor>a1a2d57d99d3c28c37655cd79c1379463</anchor>
      <arglist>($o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>provider</name>
      <anchorfile>classIssue2366Test.html</anchorfile>
      <anchor>afa90ac7a0482dada260a2e15fa727bff</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Issue2380Test</name>
    <filename>classIssue2380Test.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testGeneratorProvider</name>
      <anchorfile>classIssue2380Test.html</anchorfile>
      <anchor>ae4fd6cc842e8ae06d2dc3f6fecdf716c</anchor>
      <arglist>($data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>generatorData</name>
      <anchorfile>classIssue2380Test.html</anchorfile>
      <anchor>a31c02680e73b17e092fbe22b858b4b55</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Issue2382Test</name>
    <filename>classIssue2382Test.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testOne</name>
      <anchorfile>classIssue2382Test.html</anchorfile>
      <anchor>a2717716f98c27c4bf8dda5df77bf91b4</anchor>
      <arglist>($test)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>dataProvider</name>
      <anchorfile>classIssue2382Test.html</anchorfile>
      <anchor>aa758f6721a5c2e769781fd739027c693</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Issue2435Test</name>
    <filename>classIssue2435Test.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testOne</name>
      <anchorfile>classIssue2435Test.html</anchorfile>
      <anchor>ad3c9374ae10a82d9d3598f7733638d48</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Issue2731Test</name>
    <filename>classIssue2731Test.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testOne</name>
      <anchorfile>classIssue2731Test.html</anchorfile>
      <anchor>aa585f1d27ae42c608ace2bc30755dd5c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Issue2811Test</name>
    <filename>classIssue2811Test.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testOne</name>
      <anchorfile>classIssue2811Test.html</anchorfile>
      <anchor>a1404e0e2dd06d477831dc17ba138bd74</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Issue2830Test</name>
    <filename>classIssue2830Test.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testMethodUsesDataProvider</name>
      <anchorfile>classIssue2830Test.html</anchorfile>
      <anchor>a5d8da9b959436bb5544e53ebc4788142</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>simpleDataProvider</name>
      <anchorfile>classIssue2830Test.html</anchorfile>
      <anchor>a8dc1f07567779ef73f4fd7f788afc17c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Issue2972::Issue2972Test</name>
    <filename>classIssue2972_1_1Issue2972Test.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testHello</name>
      <anchorfile>classIssue2972_1_1Issue2972Test.html</anchorfile>
      <anchor>add0ab07278e4f49b0c63c7294bbf4f3c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Issue3093Test</name>
    <filename>classIssue3093Test.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>someDataProvider</name>
      <anchorfile>classIssue3093Test.html</anchorfile>
      <anchor>a0d3bde0d8f726980b09f9421b9495492</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFirstWithoutDependencies</name>
      <anchorfile>classIssue3093Test.html</anchorfile>
      <anchor>abd5c08390d1a64dd51488479d0969e2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSecondThatDependsOnFirstAndDataprovider</name>
      <anchorfile>classIssue3093Test.html</anchorfile>
      <anchor>a4ccb0a65e97781800a3acdaa84c08230</anchor>
      <arglist>($value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Test::Issue3156Test</name>
    <filename>classTest_1_1Issue3156Test.html</filename>
    <member kind="function">
      <type></type>
      <name>testConstants</name>
      <anchorfile>classTest_1_1Issue3156Test.html</anchorfile>
      <anchor>af49a0a479e2ef9e31f80a1ef219a8e7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>dataSelectOperatorsProvider</name>
      <anchorfile>classTest_1_1Issue3156Test.html</anchorfile>
      <anchor>a1a6856aabc2d9522233e75bd961e81a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testDependsRequire</name>
      <anchorfile>classTest_1_1Issue3156Test.html</anchorfile>
      <anchor>a638ff56c6fe55c77576deb5d6045dbfb</anchor>
      <arglist>(string $val, stdClass $obj)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Issue322Test</name>
    <filename>classIssue322Test.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testOne</name>
      <anchorfile>classIssue322Test.html</anchorfile>
      <anchor>a1060386f6337262c10a14273cb95b313</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTwo</name>
      <anchorfile>classIssue322Test.html</anchorfile>
      <anchor>a25cdb9ed8b7428b6616a23c2e18df876</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Test::Issue3379Test</name>
    <filename>classTest_1_1Issue3379Test.html</filename>
    <member kind="function">
      <type></type>
      <name>testOne</name>
      <anchorfile>classTest_1_1Issue3379Test.html</anchorfile>
      <anchor>af48ef80e66e3178e03395fde672b094d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTwo</name>
      <anchorfile>classTest_1_1Issue3379Test.html</anchorfile>
      <anchor>a32b702b77e6f9fc39a02996eec5056a9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Issue3379TestListener</name>
    <filename>classIssue3379TestListener.html</filename>
    <base>PHPUnit::Framework::TestListener</base>
    <member kind="function">
      <type></type>
      <name>addSkippedTest</name>
      <anchorfile>classIssue3379TestListener.html</anchorfile>
      <anchor>a83448ca92e5e343860941b908a0605a3</anchor>
      <arglist>(Test $test, Throwable $t, float $time)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Issue3739::Issue3739</name>
    <filename>classIssue3739_1_1Issue3739.html</filename>
    <member kind="function">
      <type></type>
      <name>unlinkFileThatDoesNotExistWithErrorSuppression</name>
      <anchorfile>classIssue3739_1_1Issue3739.html</anchorfile>
      <anchor>a8c890275b6e951280190554992726850</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>unlinkFileThatDoesNotExistWithoutErrorSuppression</name>
      <anchorfile>classIssue3739_1_1Issue3739.html</anchorfile>
      <anchor>acd657a5efd1eea952d6bafa1404c0c69</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Issue3739::Issue3739Test</name>
    <filename>classIssue3739_1_1Issue3739Test.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testWithErrorSuppression</name>
      <anchorfile>classIssue3739_1_1Issue3739Test.html</anchorfile>
      <anchor>a9f68c68621ec70e39b43a1aca9025435</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testWithoutErrorSuppression</name>
      <anchorfile>classIssue3739_1_1Issue3739Test.html</anchorfile>
      <anchor>aa2c46713fe63818a28356f587d1fe374</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Issue3881Test</name>
    <filename>classIssue3881Test.html</filename>
    <base>AbstractIssue3881Test</base>
  </compound>
  <compound kind="class">
    <name>Issue3889Test</name>
    <filename>classIssue3889Test.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testOne</name>
      <anchorfile>classIssue3889Test.html</anchorfile>
      <anchor>a40004e5f424de14e8cc812193c0ad031</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testOne</name>
      <anchorfile>classIssue3889Test.html</anchorfile>
      <anchor>a40004e5f424de14e8cc812193c0ad031</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Issue3904_2Test</name>
    <filename>classIssue3904__2Test.html</filename>
    <member kind="function">
      <type></type>
      <name>testOne</name>
      <anchorfile>classIssue3904__2Test.html</anchorfile>
      <anchor>a72ee4c3317c7ae567623227128ba3ca7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Issue3904_3TestSuiteLoader</name>
    <filename>classIssue3904__3TestSuiteLoader.html</filename>
    <member kind="function" static="yes">
      <type>static</type>
      <name>suite</name>
      <anchorfile>classIssue3904__3TestSuiteLoader.html</anchorfile>
      <anchor>a97a89917c0cd35834f1b86e0d1a4da36</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Issue3904Test</name>
    <filename>classIssue3904Test.html</filename>
    <base>Bar</base>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testOne</name>
      <anchorfile>classIssue3904Test.html</anchorfile>
      <anchor>a8751206534a71e359f0816e873332355</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testOne</name>
      <anchorfile>classIssue3904Test.html</anchorfile>
      <anchor>a8751206534a71e359f0816e873332355</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Issue3983Test</name>
    <filename>classIssue3983Test.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testOne</name>
      <anchorfile>classIssue3983Test.html</anchorfile>
      <anchor>a72beb234920dd5c49c5ad04a87c1c6e5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Issue433Test</name>
    <filename>classIssue433Test.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testOutputWithExpectationBefore</name>
      <anchorfile>classIssue433Test.html</anchorfile>
      <anchor>ab53e0a184aba6ce210fe9042a289ec8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testOutputWithExpectationAfter</name>
      <anchorfile>classIssue433Test.html</anchorfile>
      <anchor>ad17d7a5db5f2748e0fba599ae9070380</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testNotMatchingOutput</name>
      <anchorfile>classIssue433Test.html</anchorfile>
      <anchor>a34415dc5df1fe63871410d784b724ac7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Issue445Test</name>
    <filename>classIssue445Test.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testOutputWithExpectationBefore</name>
      <anchorfile>classIssue445Test.html</anchorfile>
      <anchor>a2c9969a350068288d74b1b3537d44cd4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testOutputWithExpectationAfter</name>
      <anchorfile>classIssue445Test.html</anchorfile>
      <anchor>aff6fa609adf75fdceb55007d60ddffbc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testNotMatchingOutput</name>
      <anchorfile>classIssue445Test.html</anchorfile>
      <anchor>a53fd0df0620c518d82ab09b9104bd922</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Issue498Test</name>
    <filename>classIssue498Test.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>shouldBeTrue</name>
      <anchorfile>classIssue498Test.html</anchorfile>
      <anchor>a6eb0828ca466c3dc1c8f981833e77da1</anchor>
      <arglist>($testData)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>shouldBeFalse</name>
      <anchorfile>classIssue498Test.html</anchorfile>
      <anchor>a98d900b1c2da255fac73018a888b04d5</anchor>
      <arglist>($testData)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>shouldBeTrueDataProvider</name>
      <anchorfile>classIssue498Test.html</anchorfile>
      <anchor>a1a55e1b2c9d082409aab6f7330730983</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>shouldBeFalseDataProvider</name>
      <anchorfile>classIssue498Test.html</anchorfile>
      <anchor>a9fce2ee0355ee25bf49e212efaa94e28</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Issue503Test</name>
    <filename>classIssue503Test.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testCompareDifferentLineEndings</name>
      <anchorfile>classIssue503Test.html</anchorfile>
      <anchor>ae08be565e5eee4ed50151842cd8796b0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Issue578Test</name>
    <filename>classIssue578Test.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testNoticesDoublePrintStackTrace</name>
      <anchorfile>classIssue578Test.html</anchorfile>
      <anchor>a5158af5c8f9912c6d7bcae918e585436</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testWarningsDoublePrintStackTrace</name>
      <anchorfile>classIssue578Test.html</anchorfile>
      <anchor>ac643f75a826c134639dbecec4550ea81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testUnexpectedExceptionsPrintsCorrectly</name>
      <anchorfile>classIssue578Test.html</anchorfile>
      <anchor>a97ad8262426622e8ec378eb208992868</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Issue581Test</name>
    <filename>classIssue581Test.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testExportingObjectsDoesNotBreakWindowsLineFeeds</name>
      <anchorfile>classIssue581Test.html</anchorfile>
      <anchor>a67b8345185b7501c81e6cc7d5d1c2142</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Issue74Test</name>
    <filename>classIssue74Test.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testCreateAndThrowNewExceptionInProcessIsolation</name>
      <anchorfile>classIssue74Test.html</anchorfile>
      <anchor>a39d3c6534d11ccad161bd51e1d1e4039</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Issue765Test</name>
    <filename>classIssue765Test.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testDependee</name>
      <anchorfile>classIssue765Test.html</anchorfile>
      <anchor>a4401d242d39705e910d90077575b2fcd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testDependent</name>
      <anchorfile>classIssue765Test.html</anchorfile>
      <anchor>ac2db521c82f6bc3d648cf6536518d80b</anchor>
      <arglist>($a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>dependentProvider</name>
      <anchorfile>classIssue765Test.html</anchorfile>
      <anchor>ae4f2ca94a40ecfa3a168583602680554</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Issue797Test</name>
    <filename>classIssue797Test.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testBootstrapPhpIsExecutedInIsolation</name>
      <anchorfile>classIssue797Test.html</anchorfile>
      <anchor>a8b9af1214412a6328e60b84bb116886a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$preserveGlobalState</name>
      <anchorfile>classIssue797Test.html</anchorfile>
      <anchor>ad605d3e1009ab0e860488ac1d4871281</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::IsTrue</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1IsTrue.html</filename>
    <base>PHPUnit::Framework::Constraint::Constraint</base>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsTrue.html</anchorfile>
      <anchor>aea0624901c250e1822d13475d565efd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>matches</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsTrue.html</anchorfile>
      <anchor>a6d7afeba6d3ced8bff1cbdda51c34916</anchor>
      <arglist>($other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::IsType</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1IsType.html</filename>
    <base>PHPUnit::Framework::Constraint::Constraint</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsType.html</anchorfile>
      <anchor>aaab1bfa6535a00f876d283db3fadc163</anchor>
      <arglist>(string $type)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsType.html</anchorfile>
      <anchor>a1ccd3e86caddb9ad14f010bf867f4cef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>TYPE_ARRAY</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsType.html</anchorfile>
      <anchor>a3b7e553543fe5179d82cf577fa84a649</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>TYPE_BOOL</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsType.html</anchorfile>
      <anchor>a9522eabf312dd805f0b27858251abc6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>TYPE_FLOAT</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsType.html</anchorfile>
      <anchor>ac1a6b59e6d065547a437d752492f52ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>TYPE_INT</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsType.html</anchorfile>
      <anchor>aeccaaa97e211a1c0ed0915496fc9e11a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>TYPE_NULL</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsType.html</anchorfile>
      <anchor>a2a390997bbd5b2c0713e154da1ada2ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>TYPE_NUMERIC</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsType.html</anchorfile>
      <anchor>a9ab9284db6e9604974bbc66737f8e3a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>TYPE_OBJECT</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsType.html</anchorfile>
      <anchor>a5840d95185ed1c94feda87c42327b9df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>TYPE_RESOURCE</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsType.html</anchorfile>
      <anchor>afeffce1121cde6ff7a392834583e4e0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>TYPE_STRING</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsType.html</anchorfile>
      <anchor>a396d92f6526615c09dc7a96bcb86c3a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>TYPE_SCALAR</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsType.html</anchorfile>
      <anchor>a0ee0f64451d08c06a5bde387246cdb6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>TYPE_CALLABLE</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsType.html</anchorfile>
      <anchor>a13dce815bf2eb8b5f99593f8dfc86c63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>TYPE_ITERABLE</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsType.html</anchorfile>
      <anchor>aecc31cd12159b13bcaf83150b080a5f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>matches</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsType.html</anchorfile>
      <anchor>ab3938a210be8742f83782c622ef668fd</anchor>
      <arglist>($other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::IsTypeTest</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1IsTypeTest.html</filename>
    <base>PHPUnit::Framework::Constraint::ConstraintTestCase</base>
    <member kind="function">
      <type></type>
      <name>testConstraintIsType</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsTypeTest.html</anchorfile>
      <anchor>aadeee356bb9e18d683f2c2533d786ffd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintIsType2</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsTypeTest.html</anchorfile>
      <anchor>ae05ec05325a43e90f1ce75d4bf5c466c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintIsResourceTypeEvaluatesCorrectlyWithResources</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsTypeTest.html</anchorfile>
      <anchor>a16dbfb20579cda7be25bbf1fd0b61023</anchor>
      <arglist>($resource)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>resources</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsTypeTest.html</anchorfile>
      <anchor>a14ecc4a9164b2f89a811b0de43bddbbb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIterableTypeIsSupported</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsTypeTest.html</anchorfile>
      <anchor>a8cad12d0a0a57bfade4a59647ad58902</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTypeCanBeNull</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsTypeTest.html</anchorfile>
      <anchor>a776f87cb7ddecbca9d4f8ce33e9889a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTypeCanNotBeAnUndefinedOne</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsTypeTest.html</anchorfile>
      <anchor>a7c8d4915e793080da07f0a1e6bf51f39</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::IsWritable</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1IsWritable.html</filename>
    <base>PHPUnit::Framework::Constraint::Constraint</base>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsWritable.html</anchorfile>
      <anchor>acf487568e3371dce7715949d3e5baed1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>matches</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsWritable.html</anchorfile>
      <anchor>a29fda32c08c3cc23af5cbe01041f5624</anchor>
      <arglist>($other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>failureDescription</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsWritable.html</anchorfile>
      <anchor>aefc92fa8dde2a32cbe6b286904f51f97</anchor>
      <arglist>($other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::IsWritableTest</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1IsWritableTest.html</filename>
    <base>PHPUnit::Framework::Constraint::ConstraintTestCase</base>
    <member kind="function">
      <type></type>
      <name>testConstraintIsWritable</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1IsWritableTest.html</anchorfile>
      <anchor>a43155f0d44366674789c8507a24d0320</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>iTemplate</name>
    <filename>interfaceiTemplate.html</filename>
    <member kind="function">
      <type></type>
      <name>setVariable</name>
      <anchorfile>interfaceiTemplate.html</anchorfile>
      <anchor>a4d497039d9a2e96bc83acf47eeaa7c28</anchor>
      <arglist>($name, $var)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getHtml</name>
      <anchorfile>interfaceiTemplate.html</anchorfile>
      <anchor>ad0e427b6e58ef99e36055dcf9870ceaa</anchor>
      <arglist>($template)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::Types::Iterable_</name>
    <filename>classphpDocumentor_1_1Reflection_1_1Types_1_1Iterable__.html</filename>
    <base>phpDocumentor::Reflection::Types::AbstractList</base>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1Iterable__.html</anchorfile>
      <anchor>a10cc2322dc6aba845801ea3a345b4c4d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::Types::IterableTest</name>
    <filename>classphpDocumentor_1_1Reflection_1_1Types_1_1IterableTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testIterableStringifyCorrectly</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1IterableTest.html</anchorfile>
      <anchor>ab8206efbe18d1cc680f6d3b148bc7693</anchor>
      <arglist>(Iterable_ $iterable, string $expectedString)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>provideIterables</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1IterableTest.html</anchorfile>
      <anchor>ad374d03156a6408096442e8bf588434c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Type::IterableType</name>
    <filename>classSebastianBergmann_1_1Type_1_1IterableType.html</filename>
    <base>SebastianBergmann::Type::Type</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1IterableType.html</anchorfile>
      <anchor>aa957c46a44c2b6f4c0d2d3d35c82713d</anchor>
      <arglist>(bool $nullable)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isAssignable</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1IterableType.html</anchorfile>
      <anchor>a8086d5bfffc53aecefa864fa140144a4</anchor>
      <arglist>(Type $other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getReturnTypeDeclaration</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1IterableType.html</anchorfile>
      <anchor>aff1d98e2f0ef20b91e79334b8f6c5ad7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>allowsNull</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1IterableType.html</anchorfile>
      <anchor>aaccca71a39984debf7c8e7dcd53a3bb3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Type::IterableTypeTest</name>
    <filename>classSebastianBergmann_1_1Type_1_1IterableTypeTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testMayDisallowNull</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1IterableTypeTest.html</anchorfile>
      <anchor>a4b74f1cd45a1fef0f18e0bd80832ec98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCanGenerateReturnTypeDeclaration</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1IterableTypeTest.html</anchorfile>
      <anchor>a7e55db1e8ae4eeed5b999e4e18fb2254</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testMayAllowNull</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1IterableTypeTest.html</anchorfile>
      <anchor>a45f3617ba11863773ffa6a10048eed10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCanGenerateNullableReturnTypeDeclaration</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1IterableTypeTest.html</anchorfile>
      <anchor>a7786aa605d86044822f05887015a1d06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testNullCanBeAssignedToNullableIterable</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1IterableTypeTest.html</anchorfile>
      <anchor>aa6b99e57d73e8a23a0cc81e701ced9d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIterableCanBeAssignedToIterable</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1IterableTypeTest.html</anchorfile>
      <anchor>a3aeb2dc47b77aac60920acc3170a032e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testArrayCanBeAssignedToIterable</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1IterableTypeTest.html</anchorfile>
      <anchor>a66eaf3f7276d1023285bb5277ab3ec6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIteratorCanBeAssignedToIterable</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1IterableTypeTest.html</anchorfile>
      <anchor>a64fed56c3434113bbec2e91224719b18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSomethingThatIsNotIterableCannotBeAssignedToIterable</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1IterableTypeTest.html</anchorfile>
      <anchor>a73ae3df22eff736bfad68993b664ba60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1IterableTypeTest.html</anchorfile>
      <anchor>a9ce2a351e5033701d8b529737f06ec88</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::FileIterator::Iterator</name>
    <filename>classSebastianBergmann_1_1FileIterator_1_1Iterator.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classSebastianBergmann_1_1FileIterator_1_1Iterator.html</anchorfile>
      <anchor>a4d063800443f7628164055e6d8b2e57f</anchor>
      <arglist>(string $basePath, \Iterator $iterator, array $suffixes=[], array $prefixes=[], array $exclude=[])</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>accept</name>
      <anchorfile>classSebastianBergmann_1_1FileIterator_1_1Iterator.html</anchorfile>
      <anchor>a194053cc88466001b8f16c43080c56de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>PREFIX</name>
      <anchorfile>classSebastianBergmann_1_1FileIterator_1_1Iterator.html</anchorfile>
      <anchor>ad7fbe6c5c48877d9b9bd28dd8c768789</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>SUFFIX</name>
      <anchorfile>classSebastianBergmann_1_1FileIterator_1_1Iterator.html</anchorfile>
      <anchor>a41fd4c8651b0868a9654eb3e9770b75f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Type::TestFixture::Iterator</name>
    <filename>classSebastianBergmann_1_1Type_1_1TestFixture_1_1Iterator.html</filename>
    <member kind="function">
      <type></type>
      <name>current</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1TestFixture_1_1Iterator.html</anchorfile>
      <anchor>a5940f04348312f7728b0c2188177beee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>next</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1TestFixture_1_1Iterator.html</anchorfile>
      <anchor>a5bee6328a9806b845d3fbdbe71dc9221</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>key</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1TestFixture_1_1Iterator.html</anchorfile>
      <anchor>a89dd4010ff5bdd8e50316e33ec2f8cc4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>valid</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1TestFixture_1_1Iterator.html</anchorfile>
      <anchor>a3ac6779f88ca81b8d83d8a76fb1ca9a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>rewind</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1TestFixture_1_1Iterator.html</anchorfile>
      <anchor>abefdbb60a543d27b51afb6ec3938d462</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::CodeCoverage::Node::Iterator</name>
    <filename>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1Iterator.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1Iterator.html</anchorfile>
      <anchor>a396df35a6d9bb7d424a525159729e882</anchor>
      <arglist>(Directory $node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>rewind</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1Iterator.html</anchorfile>
      <anchor>a0b34932bb7b0145e9e1ca8e520de7b40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>valid</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1Iterator.html</anchorfile>
      <anchor>a1f02ebedcd7e74d1eb985786f4cda8eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>key</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1Iterator.html</anchorfile>
      <anchor>af7f3c68d4ebf33adf238eaf814d06d17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>current</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1Iterator.html</anchorfile>
      <anchor>a4f6b24f84574c04eb4c0e7dacd6b8da8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>next</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1Iterator.html</anchorfile>
      <anchor>ab64ea422465edab00e1137ef5962f384</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getChildren</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1Iterator.html</anchorfile>
      <anchor>a75093324cb3fdecf96118f46531155cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>hasChildren</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Node_1_1Iterator.html</anchorfile>
      <anchor>a244a31079c2656bb0d2b6a0c24c83a13</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Util::Json</name>
    <filename>classPHPUnit_1_1Util_1_1Json.html</filename>
    <member kind="function" static="yes">
      <type>static</type>
      <name>prettify</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Json.html</anchorfile>
      <anchor>a008a4ed702514f12225f8cc701302903</anchor>
      <arglist>(string $json)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>canonicalize</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Json.html</anchorfile>
      <anchor>a9101a8e61e4d3228c9610e2fef5edefe</anchor>
      <arglist>(string $json)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::JsonMatches</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1JsonMatches.html</filename>
    <base>PHPUnit::Framework::Constraint::Constraint</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1JsonMatches.html</anchorfile>
      <anchor>aae334453df9106efda3e0e0ba6c0d14f</anchor>
      <arglist>(string $value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1JsonMatches.html</anchorfile>
      <anchor>a47edb2ceb50e7e0c6a78443d9cec0558</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>matches</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1JsonMatches.html</anchorfile>
      <anchor>acdd2554b4992e35e20894cf0bd7dd0e8</anchor>
      <arglist>($other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>fail</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1JsonMatches.html</anchorfile>
      <anchor>a01ba5949fd5b3cce30867ea6c09b0bd1</anchor>
      <arglist>($other, $description, ComparisonFailure $comparisonFailure=null)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::JsonMatchesErrorMessageProvider</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1JsonMatchesErrorMessageProvider.html</filename>
    <member kind="function" static="yes">
      <type>static</type>
      <name>determineJsonError</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1JsonMatchesErrorMessageProvider.html</anchorfile>
      <anchor>a530625384d147d171c91f436cc7a1265</anchor>
      <arglist>(string $error, string $prefix=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>translateTypeToPrefix</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1JsonMatchesErrorMessageProvider.html</anchorfile>
      <anchor>ad146583ae05651e2bccd99ec67566a60</anchor>
      <arglist>(string $type)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::JsonMatchesErrorMessageProviderTest</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1JsonMatchesErrorMessageProviderTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testTranslateTypeToPrefix</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1JsonMatchesErrorMessageProviderTest.html</anchorfile>
      <anchor>a6462e489701eeced683e17c4eb80a2f8</anchor>
      <arglist>($expected, $type)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testDetermineJsonError</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1JsonMatchesErrorMessageProviderTest.html</anchorfile>
      <anchor>a0259b7baac9206e843f561fb5cab4a5d</anchor>
      <arglist>($expected, $error, $prefix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>determineJsonErrorDataprovider</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1JsonMatchesErrorMessageProviderTest.html</anchorfile>
      <anchor>acbf1a30afced777c75eebd3f9430dd6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>translateTypeToPrefixDataprovider</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1JsonMatchesErrorMessageProviderTest.html</anchorfile>
      <anchor>ab5b909c5242cbae6c74a319b72a1f988</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::JsonMatchesTest</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1JsonMatchesTest.html</filename>
    <base>PHPUnit::Framework::Constraint::ConstraintTestCase</base>
    <member kind="function">
      <type></type>
      <name>testEvaluate</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1JsonMatchesTest.html</anchorfile>
      <anchor>a10fdcbf1fc7bed8978ad23526291bf23</anchor>
      <arglist>($expected, $jsonOther, $jsonValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testEvaluateThrowsExpectationFailedExceptionWhenJsonIsValidButDoesNotMatch</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1JsonMatchesTest.html</anchorfile>
      <anchor>aec267f26956ef817f6935d4182e814ba</anchor>
      <arglist>($jsonOther, $jsonValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testToString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1JsonMatchesTest.html</anchorfile>
      <anchor>a18139a49e9f6e40d076c2b40c6638ac4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFailErrorWithInvalidValueAndOther</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1JsonMatchesTest.html</anchorfile>
      <anchor>a53c95eeaaab5743f55f0ea8e0a7c2b33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFailErrorWithValidValueAndInvalidOther</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1JsonMatchesTest.html</anchorfile>
      <anchor>a3a7b40440464e1ce1646905e7e4d8bf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testEmptyObjectNotConvertedToArrayInDiff</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1JsonMatchesTest.html</anchorfile>
      <anchor>ab8e8b0cde449451aa4b2fb788442e825</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testObjectAreCanonicalizedInDiff</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1JsonMatchesTest.html</anchorfile>
      <anchor>a0ba89a5bb097450549130f7b401c2ec8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>evaluateDataprovider</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1JsonMatchesTest.html</anchorfile>
      <anchor>af7cb939db88328a9f181940a6635f977</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>evaluateThrowsExpectationFailedExceptionWhenJsonIsValidButDoesNotMatchDataprovider</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1JsonMatchesTest.html</anchorfile>
      <anchor>a2ef02c49ed729714df060c61e30fe289</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Contracts::Mock::Storage::JsonObjectMemory</name>
    <filename>classContracts_1_1Mock_1_1Storage_1_1JsonObjectMemory.html</filename>
    <base>Contracts::Mock::Storage::Memory</base>
    <base>Contracts::SorterInterface</base>
    <base>Contracts::ConditionerInterface</base>
    <base>Contracts::OffsetterInterface</base>
    <base>Contracts::LimiterInterface</base>
    <member kind="function">
      <type></type>
      <name>retrieveAll</name>
      <anchorfile>classContracts_1_1Mock_1_1Storage_1_1JsonObjectMemory.html</anchorfile>
      <anchor>ac32dae6b7b3628b8381e7840f41c421d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>store</name>
      <anchorfile>classContracts_1_1Mock_1_1Storage_1_1JsonObjectMemory.html</anchorfile>
      <anchor>a43f53a100c6024946fbbe02825fac57a</anchor>
      <arglist>($data, string $id=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>conditionByIsEqualTo</name>
      <anchorfile>classContracts_1_1Mock_1_1Storage_1_1JsonObjectMemory.html</anchorfile>
      <anchor>a9abc9f114aa71620b76ec40e3437e690</anchor>
      <arglist>(string $property, string $value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>limitTo</name>
      <anchorfile>classContracts_1_1Mock_1_1Storage_1_1JsonObjectMemory.html</anchorfile>
      <anchor>a26965b3479ccc69ae0439dd00fce4d29</anchor>
      <arglist>(int $number_of_items)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>offsetBy</name>
      <anchorfile>classContracts_1_1Mock_1_1Storage_1_1JsonObjectMemory.html</anchorfile>
      <anchor>ae5887e1d55f2156dcc5d5024a2fdfb76</anchor>
      <arglist>(int $offset)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sortByAscending</name>
      <anchorfile>classContracts_1_1Mock_1_1Storage_1_1JsonObjectMemory.html</anchorfile>
      <anchor>ab83381057a8d747723c2ab180d990f58</anchor>
      <arglist>(string $property)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sortByDescending</name>
      <anchorfile>classContracts_1_1Mock_1_1Storage_1_1JsonObjectMemory.html</anchorfile>
      <anchor>a4367cee3458244cad81c68819824d0ba</anchor>
      <arglist>(string $property)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Util::JsonTest</name>
    <filename>classPHPUnit_1_1Util_1_1JsonTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testCanonicalize</name>
      <anchorfile>classPHPUnit_1_1Util_1_1JsonTest.html</anchorfile>
      <anchor>a6c3036573ec450cc4fe1fb52a2ae6434</anchor>
      <arglist>($actual, $expected, $expectError)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>canonicalizeProvider</name>
      <anchorfile>classPHPUnit_1_1Util_1_1JsonTest.html</anchorfile>
      <anchor>a3e3bd1e82e929f0f92645c45c182e808</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testPrettify</name>
      <anchorfile>classPHPUnit_1_1Util_1_1JsonTest.html</anchorfile>
      <anchor>ad0ffec9a5f8871752bb5cde5ca789255</anchor>
      <arglist>($actual, $expected)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>prettifyProvider</name>
      <anchorfile>classPHPUnit_1_1Util_1_1JsonTest.html</anchorfile>
      <anchor>a5f216c8ae773038edff68e71e1f305d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testPrettifyException</name>
      <anchorfile>classPHPUnit_1_1Util_1_1JsonTest.html</anchorfile>
      <anchor>a978bae95f9730e9cc24ec29f99deee6c</anchor>
      <arglist>($json)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>prettifyExceptionProvider</name>
      <anchorfile>classPHPUnit_1_1Util_1_1JsonTest.html</anchorfile>
      <anchor>ace9b1b498543114550d698877285530b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Util::Log::JUnit</name>
    <filename>classPHPUnit_1_1Util_1_1Log_1_1JUnit.html</filename>
    <base>PHPUnit::Util::Printer</base>
    <base>PHPUnit::Framework::TestListener</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Log_1_1JUnit.html</anchorfile>
      <anchor>a715a199487a7408b0e9c22889de03753</anchor>
      <arglist>($out=null, bool $reportRiskyTests=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>flush</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Log_1_1JUnit.html</anchorfile>
      <anchor>a667767068acc96d118f9a67685acaa92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addError</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Log_1_1JUnit.html</anchorfile>
      <anchor>a275e1fb32552734f1a9190f48e0af600</anchor>
      <arglist>(Test $test, \Throwable $t, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addWarning</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Log_1_1JUnit.html</anchorfile>
      <anchor>a0f7fd3291411a9634e199768d623bd40</anchor>
      <arglist>(Test $test, Warning $e, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addFailure</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Log_1_1JUnit.html</anchorfile>
      <anchor>a0918640db4853104446a3a4ef828b5e6</anchor>
      <arglist>(Test $test, AssertionFailedError $e, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addIncompleteTest</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Log_1_1JUnit.html</anchorfile>
      <anchor>a4bf64b5107745eaaf413e699e752ceb8</anchor>
      <arglist>(Test $test, \Throwable $t, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addRiskyTest</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Log_1_1JUnit.html</anchorfile>
      <anchor>ab70d2593ba9c97225fed4f126db1ac39</anchor>
      <arglist>(Test $test, \Throwable $t, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addSkippedTest</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Log_1_1JUnit.html</anchorfile>
      <anchor>a93156cecfe354d6dfc26db71c9242d12</anchor>
      <arglist>(Test $test, \Throwable $t, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>startTestSuite</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Log_1_1JUnit.html</anchorfile>
      <anchor>a678ff98479392f0166d3e9652fb50206</anchor>
      <arglist>(TestSuite $suite)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>endTestSuite</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Log_1_1JUnit.html</anchorfile>
      <anchor>a59a4a53b695d1c0a4489386f626e1079</anchor>
      <arglist>(TestSuite $suite)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>startTest</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Log_1_1JUnit.html</anchorfile>
      <anchor>adcd7c1a5900b539a42843e767deb65cb</anchor>
      <arglist>(Test $test)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>endTest</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Log_1_1JUnit.html</anchorfile>
      <anchor>a556ea4521559c8b50afacc50d6ec2769</anchor>
      <arglist>(Test $test, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getXML</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Log_1_1JUnit.html</anchorfile>
      <anchor>aeef383c6220768a1ea6ea5db6e440a83</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeepCopy::Filter::KeepFilter</name>
    <filename>classDeepCopy_1_1Filter_1_1KeepFilter.html</filename>
    <base>DeepCopy::Filter::Filter</base>
    <member kind="function">
      <type></type>
      <name>apply</name>
      <anchorfile>classDeepCopy_1_1Filter_1_1KeepFilter.html</anchorfile>
      <anchor>a0b4e80dcf33c324086ba1bf650d5b857</anchor>
      <arglist>($object, $property, $objectCopier)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeepCopyTest::Filter::KeepFilterTest</name>
    <filename>classDeepCopyTest_1_1Filter_1_1KeepFilterTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>test_it_does_not_change_the_filtered_object_property</name>
      <anchorfile>classDeepCopyTest_1_1Filter_1_1KeepFilterTest.html</anchorfile>
      <anchor>a762f867c139815a9ecdac220aca69b19</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Doubler::ClassPatch::KeywordPatch</name>
    <filename>classProphecy_1_1Doubler_1_1ClassPatch_1_1KeywordPatch.html</filename>
    <base>Prophecy::Doubler::ClassPatch::ClassPatchInterface</base>
    <member kind="function">
      <type></type>
      <name>supports</name>
      <anchorfile>classProphecy_1_1Doubler_1_1ClassPatch_1_1KeywordPatch.html</anchorfile>
      <anchor>a1e1b4c22fe59712d39172f8b89ebfe8d</anchor>
      <arglist>(ClassNode $node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>apply</name>
      <anchorfile>classProphecy_1_1Doubler_1_1ClassPatch_1_1KeywordPatch.html</anchorfile>
      <anchor>a6b589c2cfe137955cc7d19a588a7fa47</anchor>
      <arglist>(ClassNode $node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getPriority</name>
      <anchorfile>classProphecy_1_1Doubler_1_1ClassPatch_1_1KeywordPatch.html</anchorfile>
      <anchor>a5909eeadeb701fbe2f89644d6499369d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileFetcher::Processor::LastResort</name>
    <filename>classFileFetcher_1_1Processor_1_1LastResort.html</filename>
    <base>FileFetcher::Processor::ProcessorInterface</base>
    <member kind="function">
      <type></type>
      <name>isServerCompatible</name>
      <anchorfile>classFileFetcher_1_1Processor_1_1LastResort.html</anchorfile>
      <anchor>a2d5b3709f2820d2249a0abcb571cd2fd</anchor>
      <arglist>(array $state)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setupState</name>
      <anchorfile>classFileFetcher_1_1Processor_1_1LastResort.html</anchorfile>
      <anchor>a49311c38dd7bf48d135588f24fdeeb18</anchor>
      <arglist>(array $state)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isTimeLimitIncompatible</name>
      <anchorfile>classFileFetcher_1_1Processor_1_1LastResort.html</anchorfile>
      <anchor>a4796d7e77c91f50513a4a087f1362ccc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copy</name>
      <anchorfile>classFileFetcher_1_1Processor_1_1LastResort.html</anchorfile>
      <anchor>a98122be32c083ec20ad57e07a12bfd2d</anchor>
      <arglist>(array $state, Result $result, int $timeLimit=PHP_INT_MAX)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileFetcher::LastResortException</name>
    <filename>classFileFetcher_1_1LastResortException.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classFileFetcher_1_1LastResortException.html</anchorfile>
      <anchor>a80b97658028ee8f5b917176e60ba0e02</anchor>
      <arglist>(string $operation, string $filename)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Doubler::LazyDouble</name>
    <filename>classProphecy_1_1Doubler_1_1LazyDouble.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classProphecy_1_1Doubler_1_1LazyDouble.html</anchorfile>
      <anchor>afd0d09dae6d7bc37ad5976dad36909ce</anchor>
      <arglist>(Doubler $doubler)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setParentClass</name>
      <anchorfile>classProphecy_1_1Doubler_1_1LazyDouble.html</anchorfile>
      <anchor>a5b93920c2d57f5cab346c234c14af676</anchor>
      <arglist>($class)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addInterface</name>
      <anchorfile>classProphecy_1_1Doubler_1_1LazyDouble.html</anchorfile>
      <anchor>ad1f8f52f194b5dec25ae421e08222c60</anchor>
      <arglist>($interface)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setArguments</name>
      <anchorfile>classProphecy_1_1Doubler_1_1LazyDouble.html</anchorfile>
      <anchor>a23818706e2499fd5833bcad82e257642</anchor>
      <arglist>(array $arguments=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getInstance</name>
      <anchorfile>classProphecy_1_1Doubler_1_1LazyDouble.html</anchorfile>
      <anchor>a8d41a90bdb6b7c600b6d6ca462376e6c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::PhpDocumentor::LegacyClassTagRetriever</name>
    <filename>classProphecy_1_1PhpDocumentor_1_1LegacyClassTagRetriever.html</filename>
    <base>Prophecy::PhpDocumentor::MethodTagRetrieverInterface</base>
    <member kind="function">
      <type></type>
      <name>getTagList</name>
      <anchorfile>classProphecy_1_1PhpDocumentor_1_1LegacyClassTagRetriever.html</anchorfile>
      <anchor>a29837e1fd1454d8eaa4507c81aca6f77</anchor>
      <arglist>(\ReflectionClass $reflectionClass)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::LessThan</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1LessThan.html</filename>
    <base>PHPUnit::Framework::Constraint::Constraint</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1LessThan.html</anchorfile>
      <anchor>affba075f5e3d6ebd67e395e9e851970f</anchor>
      <arglist>($value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1LessThan.html</anchorfile>
      <anchor>a0f8cbe483f840b9ffe1e5bac184ca2ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>matches</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1LessThan.html</anchorfile>
      <anchor>a3e981ad953591843637b8ff8bbbcb5ea</anchor>
      <arglist>($other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::LessThanTest</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1LessThanTest.html</filename>
    <base>PHPUnit::Framework::Constraint::ConstraintTestCase</base>
    <member kind="function">
      <type></type>
      <name>testConstraintLessThan</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1LessThanTest.html</anchorfile>
      <anchor>a7b7e29b12332cf326512d984cf3bded7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintLessThan2</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1LessThanTest.html</anchorfile>
      <anchor>ae53af13355e86e3e6cbbf11cfca061bd</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::Library</name>
    <filename>classPharIo_1_1Manifest_1_1Library.html</filename>
    <base>PharIo::Manifest::Type</base>
    <member kind="function">
      <type></type>
      <name>isLibrary</name>
      <anchorfile>classPharIo_1_1Manifest_1_1Library.html</anchorfile>
      <anchor>aa6194e0be835ccd20288d665b844202b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::LibraryTest</name>
    <filename>classPharIo_1_1Manifest_1_1LibraryTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testCanBeCreated</name>
      <anchorfile>classPharIo_1_1Manifest_1_1LibraryTest.html</anchorfile>
      <anchor>a57261821e1e89341c75ddcc3299c585b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIsNotApplication</name>
      <anchorfile>classPharIo_1_1Manifest_1_1LibraryTest.html</anchorfile>
      <anchor>a10ce86ac285f60077c25d3c9104745ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIsLibrary</name>
      <anchorfile>classPharIo_1_1Manifest_1_1LibraryTest.html</anchorfile>
      <anchor>acb1d44243b6f6ca3ae68658c28410ba2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIsNotExtension</name>
      <anchorfile>classPharIo_1_1Manifest_1_1LibraryTest.html</anchorfile>
      <anchor>abde2a1056a881ee091a5543a46cf84d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classPharIo_1_1Manifest_1_1LibraryTest.html</anchorfile>
      <anchor>ad992a4f9014cc0e7093da725355b72d5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::License</name>
    <filename>classPharIo_1_1Manifest_1_1License.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPharIo_1_1Manifest_1_1License.html</anchorfile>
      <anchor>aff0dcc4a7492acef8321b5d20d33b476</anchor>
      <arglist>($name, Url $url)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getName</name>
      <anchorfile>classPharIo_1_1Manifest_1_1License.html</anchorfile>
      <anchor>aeea2c7d074348779196fbb96051b5cdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getUrl</name>
      <anchorfile>classPharIo_1_1Manifest_1_1License.html</anchorfile>
      <anchor>a0b1f696ca0207a8adb0996f342b82c58</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::LicenseElement</name>
    <filename>classPharIo_1_1Manifest_1_1LicenseElement.html</filename>
    <base>PharIo::Manifest::ManifestElement</base>
    <member kind="function">
      <type></type>
      <name>getType</name>
      <anchorfile>classPharIo_1_1Manifest_1_1LicenseElement.html</anchorfile>
      <anchor>a1175ec47102273b8f6d1059b132ac52e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getUrl</name>
      <anchorfile>classPharIo_1_1Manifest_1_1LicenseElement.html</anchorfile>
      <anchor>ad74fe273b2dc9164077b2a127f9541ef</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::LicenseElementTest</name>
    <filename>classPharIo_1_1Manifest_1_1LicenseElementTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testTypeCanBeRetrieved</name>
      <anchorfile>classPharIo_1_1Manifest_1_1LicenseElementTest.html</anchorfile>
      <anchor>a42aa10dcc165f3e6aa167df2ac158442</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testUrlCanBeRetrieved</name>
      <anchorfile>classPharIo_1_1Manifest_1_1LicenseElementTest.html</anchorfile>
      <anchor>a70b2abe3849657ef40196db77f6de37f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classPharIo_1_1Manifest_1_1LicenseElementTest.html</anchorfile>
      <anchor>ad2e83bb46cf609d8a52f1e1eb07a1b97</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::LicenseTest</name>
    <filename>classPharIo_1_1Manifest_1_1LicenseTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testCanBeCreated</name>
      <anchorfile>classPharIo_1_1Manifest_1_1LicenseTest.html</anchorfile>
      <anchor>a2a7530eb7e1c769cc84907775ba53301</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testNameCanBeRetrieved</name>
      <anchorfile>classPharIo_1_1Manifest_1_1LicenseTest.html</anchorfile>
      <anchor>aa3a34bc4f02b15ab00f90385d143696e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testUrlCanBeRetrieved</name>
      <anchorfile>classPharIo_1_1Manifest_1_1LicenseTest.html</anchorfile>
      <anchor>a59d2f3be0aca4e5ac5390e1bed8b132d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classPharIo_1_1Manifest_1_1LicenseTest.html</anchorfile>
      <anchor>ad96f1c2d91cafd0ffee466bbae4eba88</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>Contracts::LimiterInterface</name>
    <filename>interfaceContracts_1_1LimiterInterface.html</filename>
    <member kind="function">
      <type></type>
      <name>limitTo</name>
      <anchorfile>interfaceContracts_1_1LimiterInterface.html</anchorfile>
      <anchor>ab02a96ff46ffee72f950a390ad8f7f67</anchor>
      <arglist>(int $number_of_items)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Diff::Line</name>
    <filename>classSebastianBergmann_1_1Diff_1_1Line.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Line.html</anchorfile>
      <anchor>a4a59b1c0ed0766ac630bd3d5933333b0</anchor>
      <arglist>(int $type=self::UNCHANGED, string $content=&apos;&apos;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getContent</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Line.html</anchorfile>
      <anchor>a93449184b46c405769a43a6954681443</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getType</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Line.html</anchorfile>
      <anchor>a96324d59faf711a49886ebd0c6d4bb40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>ADDED</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Line.html</anchorfile>
      <anchor>a94797145d34189e17edab920d9fb18f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>REMOVED</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Line.html</anchorfile>
      <anchor>a16a1db19e762fcf47b42871917e5eaa5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>UNCHANGED</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Line.html</anchorfile>
      <anchor>a26455808b300fa6c0fab75c7c37cbaed</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Diff::LineTest</name>
    <filename>classSebastianBergmann_1_1Diff_1_1LineTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testCanBeCreatedWithoutArguments</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1LineTest.html</anchorfile>
      <anchor>a5cb3fd59e10b6936deb26435297610bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTypeCanBeRetrieved</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1LineTest.html</anchorfile>
      <anchor>ae4e94a66944b6edfaa404fc0ee81fc8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testContentCanBeRetrieved</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1LineTest.html</anchorfile>
      <anchor>ab38ccd72312db81fcba7c2b74a00cfd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1LineTest.html</anchorfile>
      <anchor>ad75a9c156efdf7bb3056ce89b98c55db</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocBlock::Tags::Link</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Link.html</filename>
    <base>phpDocumentor::Reflection::DocBlock::Tags::BaseTag</base>
    <base>phpDocumentor::Reflection::DocBlock::Tags::Factory::StaticMethod</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Link.html</anchorfile>
      <anchor>ae4168c03a1ccb2660dabd5ce33f0f05f</anchor>
      <arglist>(string $link, ?Description $description=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getLink</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Link.html</anchorfile>
      <anchor>a0a2ac8dcc366b6537911098af3788b7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Link.html</anchorfile>
      <anchor>ad4160aa9cdec9b72212aefe8a6625bc4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>create</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Link.html</anchorfile>
      <anchor>a85cec0fc99d808e91671243a1bade56f</anchor>
      <arglist>(string $body, ?DescriptionFactory $descriptionFactory=null, ?TypeContext $context=null)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$name</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Link.html</anchorfile>
      <anchor>a6be7262e9ea18301ab3b59c9b1e2297f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocBlock::Tags::LinkTest</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1LinkTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>tearDown</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1LinkTest.html</anchorfile>
      <anchor>aab230cd502db45fdb08d50abd56e2ba3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIfCorrectTagNameIsReturned</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1LinkTest.html</anchorfile>
      <anchor>a0157d1baf1c4d73e0d52218843c1dc45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIfTagCanBeRenderedUsingDefaultFormatter</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1LinkTest.html</anchorfile>
      <anchor>aa236988de73747adce8044f918acae5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIfTagCanBeRenderedUsingSpecificFormatter</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1LinkTest.html</anchorfile>
      <anchor>a14c81981d9a0c7d03960b17fdd1a7300</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasLinkUrl</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1LinkTest.html</anchorfile>
      <anchor>ab3a35dde6a328cd51063157051056c80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasDescription</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1LinkTest.html</anchorfile>
      <anchor>a64f86d126fde8269595382cfd724856d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStringRepresentationIsReturned</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1LinkTest.html</anchorfile>
      <anchor>af61caad34f6ab1e8e4a1869879b655cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStringRepresentationIsReturnedWithoutDescription</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1LinkTest.html</anchorfile>
      <anchor>a303cf02c12b0d89cf3917eba176badce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethod</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1LinkTest.html</anchorfile>
      <anchor>a64ffb9a89e1147efa7661e163960cb20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodCreatesEmptyLinkTag</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1LinkTest.html</anchorfile>
      <anchor>a26ae810bd32610d21fcc538e3976c193</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileFetcher::Processor::Local</name>
    <filename>classFileFetcher_1_1Processor_1_1Local.html</filename>
    <base>FileFetcher::Processor::ProcessorInterface</base>
    <member kind="function">
      <type></type>
      <name>isServerCompatible</name>
      <anchorfile>classFileFetcher_1_1Processor_1_1Local.html</anchorfile>
      <anchor>ad700d9d6173bf9692ac6578689670ba1</anchor>
      <arglist>(array $state)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setupState</name>
      <anchorfile>classFileFetcher_1_1Processor_1_1Local.html</anchorfile>
      <anchor>a8a9101ace20d12f98f2f810be44076da</anchor>
      <arglist>(array $state)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isTimeLimitIncompatible</name>
      <anchorfile>classFileFetcher_1_1Processor_1_1Local.html</anchorfile>
      <anchor>a449cfc1365bb5d5daad4ddc57d12e0ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copy</name>
      <anchorfile>classFileFetcher_1_1Processor_1_1Local.html</anchorfile>
      <anchor>afdad12994306ac1cae4e6666025bccf5</anchor>
      <arglist>(array $state, Result $result, int $timeLimit=PHP_INT_MAX)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::Location</name>
    <filename>classphpDocumentor_1_1Reflection_1_1Location.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Location.html</anchorfile>
      <anchor>a3d8b9d0db7a0240c1bf1afb9c4d8eded</anchor>
      <arglist>(int $lineNumber, int $columnNumber=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getLineNumber</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Location.html</anchorfile>
      <anchor>abde28eb1bdd7101be65bd379d298fcec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getColumnNumber</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Location.html</anchorfile>
      <anchor>a847be68415c393e83ff7d87e58ff3a74</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::LogicalAnd</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1LogicalAnd.html</filename>
    <base>PHPUnit::Framework::Constraint::Constraint</base>
    <member kind="function">
      <type></type>
      <name>setConstraints</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1LogicalAnd.html</anchorfile>
      <anchor>afb752e55e690273df3692925c72d5c39</anchor>
      <arglist>(array $constraints)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>evaluate</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1LogicalAnd.html</anchorfile>
      <anchor>ac9b178d8b0611008edb42d22586ba4b5</anchor>
      <arglist>($other, string $description=&apos;&apos;, bool $returnResult=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1LogicalAnd.html</anchorfile>
      <anchor>a4c03dadb73293f70c4543920ac81a1e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>count</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1LogicalAnd.html</anchorfile>
      <anchor>af5987b0227f3da36d29767fde15b75ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>fromConstraints</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1LogicalAnd.html</anchorfile>
      <anchor>af9a06efe8cae2bb212b407f84acffbdd</anchor>
      <arglist>(Constraint ... $constraints)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::LogicalAndTest</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1LogicalAndTest.html</filename>
    <base>PHPUnit::Framework::Constraint::ConstraintTestCase</base>
    <member kind="function">
      <type></type>
      <name>testSetConstraintsRejectsInvalidConstraint</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1LogicalAndTest.html</anchorfile>
      <anchor>a428081e114aa597b93f2d18ff77772c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCountReturnsCountOfComposedConstraints</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1LogicalAndTest.html</anchorfile>
      <anchor>a5ded94e23fb2a4de9832722f0d137024</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testToStringReturnsImplodedStringRepresentationOfComposedConstraintsGluedWithAnd</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1LogicalAndTest.html</anchorfile>
      <anchor>a887e01831fc8c61121db90021e8d1bea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testEvaluateReturnsFalseIfAnyOfTheComposedConstraintsEvaluateToFalse</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1LogicalAndTest.html</anchorfile>
      <anchor>a817bdff3ec1a3328ff0dd87d70e24353</anchor>
      <arglist>(array $constraints)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testEvaluateReturnsTrueIfAllOfTheComposedConstraintsEvaluateToTrue</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1LogicalAndTest.html</anchorfile>
      <anchor>a06328063b3a843fd05e02f1dfd42206a</anchor>
      <arglist>(array $constraints)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testEvaluateThrowsExceptionIfAnyOfTheComposedConstraintsEvaluateToFalse</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1LogicalAndTest.html</anchorfile>
      <anchor>ae1040b5e0f9474962afb56821c2c572f</anchor>
      <arglist>(array $constraints)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testEvaluateThrowsExceptionWithCustomMessageIfAnyOfTheComposedConstraintsEvaluateToFalse</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1LogicalAndTest.html</anchorfile>
      <anchor>a7d302743d30e99e4025c96e87f5a95f2</anchor>
      <arglist>(array $constraints)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testEvaluateReturnsNothingIfAllOfTheComposedConstraintsEvaluateToTrue</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1LogicalAndTest.html</anchorfile>
      <anchor>aab9d4df361e7073174c0f1bd22dd8c34</anchor>
      <arglist>(array $constraints)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>providerFailingConstraints</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1LogicalAndTest.html</anchorfile>
      <anchor>ac5ff65002ae22e40ea4a806b441cf437</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>providerSucceedingConstraints</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1LogicalAndTest.html</anchorfile>
      <anchor>aa6059ddc2937e0f7c84232ef53364b8e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Argument::Token::LogicalAndToken</name>
    <filename>classProphecy_1_1Argument_1_1Token_1_1LogicalAndToken.html</filename>
    <base>Prophecy::Argument::Token::TokenInterface</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1LogicalAndToken.html</anchorfile>
      <anchor>a4abffa728b927737e508176d796ba60d</anchor>
      <arglist>(array $arguments)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>scoreArgument</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1LogicalAndToken.html</anchorfile>
      <anchor>a840e80e05b2352b70eae3e54fc1babd6</anchor>
      <arglist>($argument)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isLast</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1LogicalAndToken.html</anchorfile>
      <anchor>ae858ccf08aee5dd830d13ac7b0196925</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1LogicalAndToken.html</anchorfile>
      <anchor>ac98ea09c61c04a9f40700214913abc55</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::LogicalNot</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1LogicalNot.html</filename>
    <base>PHPUnit::Framework::Constraint::Constraint</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1LogicalNot.html</anchorfile>
      <anchor>a2513ee394cb3f8bde7d2a92d73aea5b7</anchor>
      <arglist>($constraint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>evaluate</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1LogicalNot.html</anchorfile>
      <anchor>a072c448c49fd229aa331eb22dc9bb3fd</anchor>
      <arglist>($other, string $description=&apos;&apos;, bool $returnResult=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1LogicalNot.html</anchorfile>
      <anchor>a7d67c92ed0416b8d9062c8af7aa3fb06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>count</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1LogicalNot.html</anchorfile>
      <anchor>abccd3438963fbaddffcaaa287212d551</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>negate</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1LogicalNot.html</anchorfile>
      <anchor>a92920b69509451b6e21fe375c7a9cbaf</anchor>
      <arglist>(string $string)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>failureDescription</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1LogicalNot.html</anchorfile>
      <anchor>a57530ce8b6b028cc2cc5a4c3db015bb4</anchor>
      <arglist>($other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::LogicalNotTest</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1LogicalNotTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testNonRestrictedConstructParameterIsTreatedAsIsEqual</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1LogicalNotTest.html</anchorfile>
      <anchor>a560af8e395b4088bcf52796c5b407062</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Argument::Token::LogicalNotToken</name>
    <filename>classProphecy_1_1Argument_1_1Token_1_1LogicalNotToken.html</filename>
    <base>Prophecy::Argument::Token::TokenInterface</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1LogicalNotToken.html</anchorfile>
      <anchor>a5135a94d3daa290d95e10bf507ade2df</anchor>
      <arglist>($value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>scoreArgument</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1LogicalNotToken.html</anchorfile>
      <anchor>a950248f923176d3aeae2aa87eef347c3</anchor>
      <arglist>($argument)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isLast</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1LogicalNotToken.html</anchorfile>
      <anchor>a1ddf8b732b1b66cad80266ea1f9025aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getOriginatingToken</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1LogicalNotToken.html</anchorfile>
      <anchor>a79b8bee2d3e72ed59b60eb966a826d51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1LogicalNotToken.html</anchorfile>
      <anchor>a0b6bb46513166a16275fb399cc5be300</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::LogicalOr</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1LogicalOr.html</filename>
    <base>PHPUnit::Framework::Constraint::Constraint</base>
    <member kind="function">
      <type></type>
      <name>setConstraints</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1LogicalOr.html</anchorfile>
      <anchor>a1fef28f3b49edb972bb25885a9e1985f</anchor>
      <arglist>(array $constraints)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>evaluate</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1LogicalOr.html</anchorfile>
      <anchor>a018e29e0e75ff3589c6c63e26e91fcc5</anchor>
      <arglist>($other, string $description=&apos;&apos;, bool $returnResult=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1LogicalOr.html</anchorfile>
      <anchor>ad2c0a0106f21f0b9ff81327ae0bf6fe0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>count</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1LogicalOr.html</anchorfile>
      <anchor>a0f35087bd52c9b83af19ee78651a0570</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>fromConstraints</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1LogicalOr.html</anchorfile>
      <anchor>a79ffdb99105923c22a1fbe055ba3beab</anchor>
      <arglist>(Constraint ... $constraints)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::LogicalOrTest</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1LogicalOrTest.html</filename>
    <base>PHPUnit::Framework::Constraint::ConstraintTestCase</base>
    <member kind="function">
      <type></type>
      <name>testSetConstraintsDecoratesNonConstraintWithIsEqual</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1LogicalOrTest.html</anchorfile>
      <anchor>a29678c7a4e5aef6d4a93f411cb75c4e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCountReturnsCountOfComposedConstraints</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1LogicalOrTest.html</anchorfile>
      <anchor>ae8832ec197d2831c6e06e0c519012bbb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testToStringReturnsImplodedStringRepresentationOfComposedConstraintsGluedWithOr</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1LogicalOrTest.html</anchorfile>
      <anchor>a64a9467a9ce1c9cd7a39f726c403002b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testEvaluateReturnsFalseIfAllOfTheComposedConstraintsEvaluateToFalse</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1LogicalOrTest.html</anchorfile>
      <anchor>a63d7e6a26a94d077fff823b1f58c8940</anchor>
      <arglist>(array $constraints)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testEvaluateReturnsTrueIfAnyOfTheComposedConstraintsEvaluateToTrue</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1LogicalOrTest.html</anchorfile>
      <anchor>a4b9e1790113b4a6987072d2cf967003b</anchor>
      <arglist>(array $constraints)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testEvaluateThrowsExceptionIfAllOfTheComposedConstraintsEvaluateToFalse</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1LogicalOrTest.html</anchorfile>
      <anchor>aa648201f89248d6dbb4db1282e6f0d7d</anchor>
      <arglist>(array $constraints)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testEvaluateThrowsExceptionWithCustomMessageIfAllOfTheComposedConstraintsEvaluateToFalse</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1LogicalOrTest.html</anchorfile>
      <anchor>aaf93188818f659628d701e76a2ef8bc3</anchor>
      <arglist>(array $constraints)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testEvaluateReturnsNothingIfAnyOfTheComposedConstraintsEvaluateToTrue</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1LogicalOrTest.html</anchorfile>
      <anchor>a6d6e9c383bf72c7ec77d119ce334626f</anchor>
      <arglist>(array $constraints)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>providerFailingConstraints</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1LogicalOrTest.html</anchorfile>
      <anchor>acc262654cfdc67712f9ec8e302b85cae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>providerSucceedingConstraints</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1LogicalOrTest.html</anchorfile>
      <anchor>aac862a4c4eacaca771bb84a481de94db</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::LogicalXor</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1LogicalXor.html</filename>
    <base>PHPUnit::Framework::Constraint::Constraint</base>
    <member kind="function">
      <type></type>
      <name>setConstraints</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1LogicalXor.html</anchorfile>
      <anchor>a54fed457b8dc1572fb5f4983985e6bad</anchor>
      <arglist>(array $constraints)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>evaluate</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1LogicalXor.html</anchorfile>
      <anchor>aeb77e22584e7c1cd01770203e858dc2b</anchor>
      <arglist>($other, string $description=&apos;&apos;, bool $returnResult=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1LogicalXor.html</anchorfile>
      <anchor>a90bdded2b64fe0ab685b792b6ec9d9ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>count</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1LogicalXor.html</anchorfile>
      <anchor>a84ef0fb1bb0ac6e1ddcbc010ca83333c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>fromConstraints</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1LogicalXor.html</anchorfile>
      <anchor>a2af980160696ee083c3e0155c291dfd0</anchor>
      <arglist>(Constraint ... $constraints)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Framework::Constraint::LogicalXorTest</name>
    <filename>classFramework_1_1Constraint_1_1LogicalXorTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testFromConstraintsReturnsConstraint</name>
      <anchorfile>classFramework_1_1Constraint_1_1LogicalXorTest.html</anchorfile>
      <anchor>ad784b3eb7bb53ac45b8ad49bc6060d4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSetConstraintsWithNonConstraintsObjectArrayIsTreatedAsIsEqual</name>
      <anchorfile>classFramework_1_1Constraint_1_1LogicalXorTest.html</anchorfile>
      <anchor>a95cf12d7565826c7738850b8685b1870</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>SebastianBergmann::Diff::LongestCommonSubsequenceCalculator</name>
    <filename>interfaceSebastianBergmann_1_1Diff_1_1LongestCommonSubsequenceCalculator.html</filename>
    <member kind="function">
      <type></type>
      <name>calculate</name>
      <anchorfile>interfaceSebastianBergmann_1_1Diff_1_1LongestCommonSubsequenceCalculator.html</anchorfile>
      <anchor>ad5ca0e11a57d0795698353cdcd4e6ff4</anchor>
      <arglist>(array $from, array $to)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Diff::LongestCommonSubsequenceTest</name>
    <filename>classSebastianBergmann_1_1Diff_1_1LongestCommonSubsequenceTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testBothEmpty</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1LongestCommonSubsequenceTest.html</anchorfile>
      <anchor>a96859b951433d2f057d01b690199e707</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIsStrictComparison</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1LongestCommonSubsequenceTest.html</anchorfile>
      <anchor>ab576cb063ef44ed747a192c72963d8a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testEqualSequences</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1LongestCommonSubsequenceTest.html</anchorfile>
      <anchor>a51cb9639852a681747822cce2196c879</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testDistinctSequences</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1LongestCommonSubsequenceTest.html</anchorfile>
      <anchor>a0795f39f6614e85d6451736bcc1ce575</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCommonSubsequence</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1LongestCommonSubsequenceTest.html</anchorfile>
      <anchor>abef4f96f6f370587b9fdd948cda69e59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSingleElementSubsequenceAtStart</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1LongestCommonSubsequenceTest.html</anchorfile>
      <anchor>af536b6977763fd78b7436f0c9b326018</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSingleElementSubsequenceAtMiddle</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1LongestCommonSubsequenceTest.html</anchorfile>
      <anchor>a6f56bfcecb84cd2d0d9ebe68a68a5f51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSingleElementSubsequenceAtEnd</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1LongestCommonSubsequenceTest.html</anchorfile>
      <anchor>aa8baa085c645042380bd7d485733f3e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testReversedSequences</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1LongestCommonSubsequenceTest.html</anchorfile>
      <anchor>a38f554b997d6fa3dcf3b48233174622f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStrictTypeCalculate</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1LongestCommonSubsequenceTest.html</anchorfile>
      <anchor>a4ce7ddc1c0efa431085488da99d452ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1LongestCommonSubsequenceTest.html</anchorfile>
      <anchor>a83cbb06ac07aedae4fd3ddf5a27eda2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>tearDown</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1LongestCommonSubsequenceTest.html</anchorfile>
      <anchor>a71018b08d4e0707e8d1fd3f6c1aed157</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>createImplementation</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1LongestCommonSubsequenceTest.html</anchorfile>
      <anchor>aca683e9f0151f07e65bdd8adeeca3a53</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Doubler::ClassPatch::MagicCallPatch</name>
    <filename>classProphecy_1_1Doubler_1_1ClassPatch_1_1MagicCallPatch.html</filename>
    <base>Prophecy::Doubler::ClassPatch::ClassPatchInterface</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classProphecy_1_1Doubler_1_1ClassPatch_1_1MagicCallPatch.html</anchorfile>
      <anchor>ace63f2c6d757d1562d6a666d7615d710</anchor>
      <arglist>(MethodTagRetrieverInterface $tagRetriever=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>supports</name>
      <anchorfile>classProphecy_1_1Doubler_1_1ClassPatch_1_1MagicCallPatch.html</anchorfile>
      <anchor>afaf3523670c7d2cb46cd6f0b54704487</anchor>
      <arglist>(ClassNode $node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>apply</name>
      <anchorfile>classProphecy_1_1Doubler_1_1ClassPatch_1_1MagicCallPatch.html</anchorfile>
      <anchor>a951c373df23a93128925fb276a1fdcda</anchor>
      <arglist>(ClassNode $node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getPriority</name>
      <anchorfile>classProphecy_1_1Doubler_1_1ClassPatch_1_1MagicCallPatch.html</anchorfile>
      <anchor>a3b578fdd9e88608e9957083b28ee96ee</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::Manifest</name>
    <filename>classPharIo_1_1Manifest_1_1Manifest.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPharIo_1_1Manifest_1_1Manifest.html</anchorfile>
      <anchor>afdeb84ac63bd7408605467edb763b645</anchor>
      <arglist>(ApplicationName $name, Version $version, Type $type, CopyrightInformation $copyrightInformation, RequirementCollection $requirements, BundledComponentCollection $bundledComponents)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getName</name>
      <anchorfile>classPharIo_1_1Manifest_1_1Manifest.html</anchorfile>
      <anchor>adeb67fdd044b3958d227c390eef79499</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getVersion</name>
      <anchorfile>classPharIo_1_1Manifest_1_1Manifest.html</anchorfile>
      <anchor>a91b65ffb509e61ebbf52a575135fce0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getType</name>
      <anchorfile>classPharIo_1_1Manifest_1_1Manifest.html</anchorfile>
      <anchor>aeed70d3e3bad8522fa6cf35791fc6a23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getCopyrightInformation</name>
      <anchorfile>classPharIo_1_1Manifest_1_1Manifest.html</anchorfile>
      <anchor>aac3a55013903c98edb69fb275d8acd58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getRequirements</name>
      <anchorfile>classPharIo_1_1Manifest_1_1Manifest.html</anchorfile>
      <anchor>ac3b022bbf6f916d789dfa12f30ee2c4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getBundledComponents</name>
      <anchorfile>classPharIo_1_1Manifest_1_1Manifest.html</anchorfile>
      <anchor>a4de812ff28869271cbdc05a58120feb7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isApplication</name>
      <anchorfile>classPharIo_1_1Manifest_1_1Manifest.html</anchorfile>
      <anchor>ab4126113932848be09c770fe234214aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isLibrary</name>
      <anchorfile>classPharIo_1_1Manifest_1_1Manifest.html</anchorfile>
      <anchor>a035de8a72c5bd0fee8580d07479eea9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isExtension</name>
      <anchorfile>classPharIo_1_1Manifest_1_1Manifest.html</anchorfile>
      <anchor>a14ee697ad344667cdd4e9bbad752d3d4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::ManifestDocument</name>
    <filename>classPharIo_1_1Manifest_1_1ManifestDocument.html</filename>
    <member kind="function">
      <type></type>
      <name>getContainsElement</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestDocument.html</anchorfile>
      <anchor>a8b29c93cd4410f86a7eaf666f427250d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getCopyrightElement</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestDocument.html</anchorfile>
      <anchor>a486ee76e8356ad50f520af95fe9516ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getRequiresElement</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestDocument.html</anchorfile>
      <anchor>a26eb7556ddb08f95206271a104ad5f75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>hasBundlesElement</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestDocument.html</anchorfile>
      <anchor>a85b4333bb6a7df15bb67eb6e3ac6962c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getBundlesElement</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestDocument.html</anchorfile>
      <anchor>ac09a9866175067a6edfa628a81ff11dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>fromFile</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestDocument.html</anchorfile>
      <anchor>a12e9f4e093b6e1f351a9d008fa7ce44a</anchor>
      <arglist>($filename)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>fromString</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestDocument.html</anchorfile>
      <anchor>a70f5c874c2c0988af7026f19bdff0a42</anchor>
      <arglist>($xmlString)</arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>XMLNS</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestDocument.html</anchorfile>
      <anchor>a3b37481d1774f0aa38b7613a34944e76</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::ManifestDocumentException</name>
    <filename>classPharIo_1_1Manifest_1_1ManifestDocumentException.html</filename>
    <base>PharIo::Manifest::Exception</base>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::ManifestDocumentLoadingException</name>
    <filename>classPharIo_1_1Manifest_1_1ManifestDocumentLoadingException.html</filename>
    <base>PharIo::Manifest::Exception</base>
    <base>PharIo::Manifest::Exception</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestDocumentLoadingException.html</anchorfile>
      <anchor>a967a218314c547df769d2d3b0ed29320</anchor>
      <arglist>(array $libxmlErrors)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getLibxmlErrors</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestDocumentLoadingException.html</anchorfile>
      <anchor>a62e0c8f582a328b6cc190a516f40fb9c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::ManifestDocumentLoadingExceptionTest</name>
    <filename>classPharIo_1_1Manifest_1_1ManifestDocumentLoadingExceptionTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testXMLErrorsCanBeRetrieved</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestDocumentLoadingExceptionTest.html</anchorfile>
      <anchor>add2c71441ec96e1d9ed38e12cda73281</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::ManifestDocumentMapper</name>
    <filename>classPharIo_1_1Manifest_1_1ManifestDocumentMapper.html</filename>
    <member kind="function">
      <type></type>
      <name>map</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestDocumentMapper.html</anchorfile>
      <anchor>a52a870502c57a5ad8133dc161c0ed38f</anchor>
      <arglist>(ManifestDocument $document)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::ManifestDocumentMapperException</name>
    <filename>classPharIo_1_1Manifest_1_1ManifestDocumentMapperException.html</filename>
    <base>PharIo::Manifest::Exception</base>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::ManifestDocumentMapperTest</name>
    <filename>classPharIo_1_1Manifest_1_1ManifestDocumentMapperTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testCanSerializeToString</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestDocumentMapperTest.html</anchorfile>
      <anchor>aada244348a5f5bdd6cdc291fcbcca1c7</anchor>
      <arglist>($expected)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>dataProvider</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestDocumentMapperTest.html</anchorfile>
      <anchor>a1576e074c8155c3489030772ed3c92ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testThrowsExceptionOnUnsupportedType</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestDocumentMapperTest.html</anchorfile>
      <anchor>a8df708e030ba63c170a0d7f37709689f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testInvalidVersionInformationThrowsException</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestDocumentMapperTest.html</anchorfile>
      <anchor>a30cc24c1b65c4b9c223635ecff553fa1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testInvalidVersionConstraintThrowsException</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestDocumentMapperTest.html</anchorfile>
      <anchor>a3a39b1184aac03258456d1be774ad0c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testInvalidCompatibleConstraintThrowsException</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestDocumentMapperTest.html</anchorfile>
      <anchor>a6426e7cec4679eac1ffdff992cc24e77</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::ManifestDocumentTest</name>
    <filename>classPharIo_1_1Manifest_1_1ManifestDocumentTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testThrowsExceptionWhenFileDoesNotExist</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestDocumentTest.html</anchorfile>
      <anchor>ac674bf1bc373ec29c0e2f1cb33d85d75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCanBeCreatedFromFile</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestDocumentTest.html</anchorfile>
      <anchor>a949306ab34d8613ac8099934244310e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCaneBeConstructedFromString</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestDocumentTest.html</anchorfile>
      <anchor>aa832bd06c28083cd16abf65ef3c8542f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testThrowsExceptionOnInvalidXML</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestDocumentTest.html</anchorfile>
      <anchor>a65a2d141c60119aa19f9e780e6af73c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testLoadingDocumentWithWrongRootNameThrowsException</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestDocumentTest.html</anchorfile>
      <anchor>a9f28b0415093b31a5825ec47201c227c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testLoadingDocumentWithWrongNamespaceThrowsException</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestDocumentTest.html</anchorfile>
      <anchor>a0ad99219683e0abff0216e103c1ceff7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testContainsElementCanBeRetrieved</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestDocumentTest.html</anchorfile>
      <anchor>a08398b6f9b68c2dd05ac58c0dc03095a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testRequiresElementCanBeRetrieved</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestDocumentTest.html</anchorfile>
      <anchor>a730e15c5465777a0616f7f95b1896ce4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCopyrightElementCanBeRetrieved</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestDocumentTest.html</anchorfile>
      <anchor>a50122cfc1e16b18fad7febc3f7ed2405</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testBundlesElementCanBeRetrieved</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestDocumentTest.html</anchorfile>
      <anchor>aa0247395a4d8efadd6bb2e87795d060b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testThrowsExceptionWhenContainsIsMissing</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestDocumentTest.html</anchorfile>
      <anchor>ab537ac12df57e24bcc420fa9f8788857</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testThrowsExceptionWhenCopyirhgtIsMissing</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestDocumentTest.html</anchorfile>
      <anchor>abc74954d4fa2522f258e655909b385f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testThrowsExceptionWhenRequiresIsMissing</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestDocumentTest.html</anchorfile>
      <anchor>a6ddaf9d775dd5fd0c7c572b104da61bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testThrowsExceptionWhenBundlesIsMissing</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestDocumentTest.html</anchorfile>
      <anchor>a7aa02c0c508f70b7cab1e23d3cd30b10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasBundlesReturnsTrueWhenBundlesNodeIsPresent</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestDocumentTest.html</anchorfile>
      <anchor>a0a9cfa8cb27b9a07c3278a4d03cdfc15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasBundlesReturnsFalseWhenBundlesNoNodeIsPresent</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestDocumentTest.html</anchorfile>
      <anchor>a1e2e131f64babc9fd6ff4500cca788fb</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::ManifestElement</name>
    <filename>classPharIo_1_1Manifest_1_1ManifestElement.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestElement.html</anchorfile>
      <anchor>ae430256b76ba94c57d543db9844eb93f</anchor>
      <arglist>(DOMElement $element)</arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>XMLNS</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestElement.html</anchorfile>
      <anchor>aed7abff78f0bb2eda38882cc257e0da9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>getAttributeValue</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestElement.html</anchorfile>
      <anchor>a7ecd57648494037ddc9f0da7fb5c7103</anchor>
      <arglist>($name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>getChildByName</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestElement.html</anchorfile>
      <anchor>a117e526edfcbd5fa18dd9b7ac3f9b6a0</anchor>
      <arglist>($elementName)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>getChildrenByName</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestElement.html</anchorfile>
      <anchor>af47f9f9b2ecfd34236f8562079f8bb46</anchor>
      <arglist>($elementName)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>hasChild</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestElement.html</anchorfile>
      <anchor>a0d8d25d995bc1b6df2c393b171c348f7</anchor>
      <arglist>($elementName)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::ManifestElementException</name>
    <filename>classPharIo_1_1Manifest_1_1ManifestElementException.html</filename>
    <base>PharIo::Manifest::Exception</base>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::ManifestLoader</name>
    <filename>classPharIo_1_1Manifest_1_1ManifestLoader.html</filename>
    <member kind="function" static="yes">
      <type>static</type>
      <name>fromFile</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestLoader.html</anchorfile>
      <anchor>a0363abfa2880a791b58acfdfba535acc</anchor>
      <arglist>($filename)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>fromPhar</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestLoader.html</anchorfile>
      <anchor>a4f24716c559188337c8c844254e2c79f</anchor>
      <arglist>($filename)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>fromString</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestLoader.html</anchorfile>
      <anchor>a0139899da054fe60402517a7b171bec3</anchor>
      <arglist>($manifest)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::ManifestLoaderException</name>
    <filename>classPharIo_1_1Manifest_1_1ManifestLoaderException.html</filename>
    <base>PharIo::Manifest::Exception</base>
    <base>PharIo::Manifest::Exception</base>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::ManifestLoaderTest</name>
    <filename>classPharIo_1_1Manifest_1_1ManifestLoaderTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testCanBeLoadedFromFile</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestLoaderTest.html</anchorfile>
      <anchor>a6eaae9028bcebcf2b3940049ef49b585</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCanBeLoadedFromString</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestLoaderTest.html</anchorfile>
      <anchor>a70513dc0ef0ac07525f37282aaec24fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCanBeLoadedFromPhar</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestLoaderTest.html</anchorfile>
      <anchor>a1d37626b7989adba35273c179aa34317</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testLoadingNonExistingFileThrowsException</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestLoaderTest.html</anchorfile>
      <anchor>ad4c6ad0cd7fd43d47d02b32362c95a23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testLoadingInvalidXmlThrowsException</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestLoaderTest.html</anchorfile>
      <anchor>aef39ccc4c8b81f7f3ed3452c90b108b5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::ManifestSerializer</name>
    <filename>classPharIo_1_1Manifest_1_1ManifestSerializer.html</filename>
    <member kind="function">
      <type></type>
      <name>serializeToFile</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestSerializer.html</anchorfile>
      <anchor>a4091c230af89eafd41a6180e784617c7</anchor>
      <arglist>(Manifest $manifest, $filename)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>serializeToString</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestSerializer.html</anchorfile>
      <anchor>adca9ee3779dc8be77f8347c710d57a5d</anchor>
      <arglist>(Manifest $manifest)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::ManifestSerializerTest</name>
    <filename>classPharIo_1_1Manifest_1_1ManifestSerializerTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testCanSerializeToString</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestSerializerTest.html</anchorfile>
      <anchor>ab773d1682d0f59e67a87366772706085</anchor>
      <arglist>($expected)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>dataProvider</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestSerializerTest.html</anchorfile>
      <anchor>ad2cf05a80475bc41c07fe8b8f0c154cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCanSerializeToFile</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestSerializerTest.html</anchorfile>
      <anchor>ad059626706be1d6b87d36755993cf386</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCanHandleUnknownType</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestSerializerTest.html</anchorfile>
      <anchor>a3c16d82efddc420d4b390b8cf56c2ee1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::ManifestTest</name>
    <filename>classPharIo_1_1Manifest_1_1ManifestTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testCanBeCreated</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestTest.html</anchorfile>
      <anchor>a020d889a06976e89e94c7c62dfa945bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testNameCanBeRetrieved</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestTest.html</anchorfile>
      <anchor>abc52f7ff8bac8e438dc0f37ad8a98eb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testVersionCanBeRetrieved</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestTest.html</anchorfile>
      <anchor>a8c76c88286f3a2f48ca04697d770f836</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTypeCanBeRetrieved</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestTest.html</anchorfile>
      <anchor>ac29468048e97082dfbe671898be80527</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTypeCanBeQueried</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestTest.html</anchorfile>
      <anchor>ad1c6a3c284487c1bf851ab344cfcb4eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCopyrightInformationCanBeRetrieved</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestTest.html</anchorfile>
      <anchor>ad76ca297add28987217c5da73c690a65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testRequirementsCanBeRetrieved</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestTest.html</anchorfile>
      <anchor>aa4c69d6bccdf49de26d8a5cc4db3bd16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testBundledComponentsCanBeRetrieved</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestTest.html</anchorfile>
      <anchor>a6b2e3892c4b5d3945f31ce0705dce64a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExtendedApplicationCanBeQueriedForExtension</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestTest.html</anchorfile>
      <anchor>aca907290f58138be235227c88c7e43dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testNonExtensionReturnsFalseWhenQueriesForExtension</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestTest.html</anchorfile>
      <anchor>aed0033757faa2f3ee4820077f73efc20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExtendedApplicationCanBeQueriedForExtensionWithVersion</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestTest.html</anchorfile>
      <anchor>a2d9e8ebd15f879d7efab24bceafc3f8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classPharIo_1_1Manifest_1_1ManifestTest.html</anchorfile>
      <anchor>aaf3ebcc1f38404f1215a32cb57f6778a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>PHPUnit::Framework::MockObject::Builder::Match</name>
    <filename>interfacePHPUnit_1_1Framework_1_1MockObject_1_1Builder_1_1Match.html</filename>
    <base>PHPUnit::Framework::MockObject::Builder::Stub</base>
    <member kind="function">
      <type></type>
      <name>after</name>
      <anchorfile>interfacePHPUnit_1_1Framework_1_1MockObject_1_1Builder_1_1Match.html</anchorfile>
      <anchor>a8952c61258f8d9e0537098765753f118</anchor>
      <arglist>($id)</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>DeepCopy::Matcher::Matcher</name>
    <filename>interfaceDeepCopy_1_1Matcher_1_1Matcher.html</filename>
    <member kind="function">
      <type></type>
      <name>matches</name>
      <anchorfile>interfaceDeepCopy_1_1Matcher_1_1Matcher.html</anchorfile>
      <anchor>afff87bedbf9039b31c51edd0502b61a5</anchor>
      <arglist>($object, $property)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::MockObject::Matcher</name>
    <filename>classPHPUnit_1_1Framework_1_1MockObject_1_1Matcher.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Matcher.html</anchorfile>
      <anchor>ae5eab5bc11cecd73d42ce98178c4ed99</anchor>
      <arglist>(InvocationOrder $rule)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>hasMatchers</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Matcher.html</anchorfile>
      <anchor>ab02fe9632abd10a2c00f05defed66389</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>hasMethodNameRule</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Matcher.html</anchorfile>
      <anchor>a45cde4ab70887971886f7f640e8cdc0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getMethodNameRule</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Matcher.html</anchorfile>
      <anchor>a0bad0a5be9e84e41127c140571568f2e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setMethodNameRule</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Matcher.html</anchorfile>
      <anchor>a033d6971d3abf578b1748121f834c457</anchor>
      <arglist>(MethodName $rule)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>hasParametersRule</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Matcher.html</anchorfile>
      <anchor>a79732ce7c582d020f83fcfe01af05578</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setParametersRule</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Matcher.html</anchorfile>
      <anchor>ac4a6f6e91c6519f7f9b81dcf6f9e3755</anchor>
      <arglist>(ParametersRule $rule)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setStub</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Matcher.html</anchorfile>
      <anchor>a19db7c5a555095e5bac32440e23114d4</anchor>
      <arglist>(Stub $stub)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setAfterMatchBuilderId</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Matcher.html</anchorfile>
      <anchor>a0a2d4cd2769f462736585035f9c7ea89</anchor>
      <arglist>(string $id)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>invoked</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Matcher.html</anchorfile>
      <anchor>a5a3573c5fd85eae539744426c6f7dd08</anchor>
      <arglist>(Invocation $invocation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>matches</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Matcher.html</anchorfile>
      <anchor>a93bd3d15fd35e8fbdb402d0f8b1eba1f</anchor>
      <arglist>(Invocation $invocation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>verify</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Matcher.html</anchorfile>
      <anchor>ae09bc50e86a9b3c9e47f3fbd659311cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Matcher.html</anchorfile>
      <anchor>ae4b62e9e10ae1a0d34dd3c685c78646d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::MockObject::MatcherTest</name>
    <filename>classPHPUnit_1_1Framework_1_1MockObject_1_1MatcherTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testParameterRuleIsAppliedToInvocation</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1MatcherTest.html</anchorfile>
      <anchor>a7a128d565a4e30c718c7d228e7e3c31a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testParametersRuleTriggersFailOfInvocation</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1MatcherTest.html</anchorfile>
      <anchor>a04cd9c975115b818d61e083cbeeddd3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testParameterRuleDoesNotInfluenceMatches</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1MatcherTest.html</anchorfile>
      <anchor>afb4b5de029dbe30747d38c68abbec745</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStubIsNotInvokedIfParametersRuleIsViolated</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1MatcherTest.html</anchorfile>
      <anchor>a1b741a99e5bc19d2d7fabc3962bf1493</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStubIsInvokedIfAllMatchersAndRulesApply</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1MatcherTest.html</anchorfile>
      <anchor>a789778b0b832627afa88bea235bb9893</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Contracts::Mock::Storage::Memory</name>
    <filename>classContracts_1_1Mock_1_1Storage_1_1Memory.html</filename>
    <base>Contracts::RetrieverInterface</base>
    <base>Contracts::StorerInterface</base>
    <base>Contracts::BulkRetrieverInterface</base>
    <member kind="function">
      <type></type>
      <name>retrieve</name>
      <anchorfile>classContracts_1_1Mock_1_1Storage_1_1Memory.html</anchorfile>
      <anchor>ae065138b45461d18129fa6c460499398</anchor>
      <arglist>(string $id)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>retrieveAll</name>
      <anchorfile>classContracts_1_1Mock_1_1Storage_1_1Memory.html</anchorfile>
      <anchor>aa722d8507d15b9208066e8eba9f0f0a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>store</name>
      <anchorfile>classContracts_1_1Mock_1_1Storage_1_1Memory.html</anchorfile>
      <anchor>a7b480b2d46af682f63d11650814e6d5b</anchor>
      <arglist>($data, string $id=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>remove</name>
      <anchorfile>classContracts_1_1Mock_1_1Storage_1_1Memory.html</anchorfile>
      <anchor>a731fe921b080bf22e3d015b402395edb</anchor>
      <arglist>(string $id)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$storage</name>
      <anchorfile>classContracts_1_1Mock_1_1Storage_1_1Memory.html</anchorfile>
      <anchor>a570aa177ef2168b93e62cf2f483d1791</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Diff::MemoryEfficientImplementationTest</name>
    <filename>classSebastianBergmann_1_1Diff_1_1MemoryEfficientImplementationTest.html</filename>
    <base>SebastianBergmann::Diff::LongestCommonSubsequenceTest</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>createImplementation</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1MemoryEfficientImplementationTest.html</anchorfile>
      <anchor>a2e36d07d7eb606934a2ecad03f347092</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Diff::MemoryEfficientLongestCommonSubsequenceCalculator</name>
    <filename>classSebastianBergmann_1_1Diff_1_1MemoryEfficientLongestCommonSubsequenceCalculator.html</filename>
    <base>SebastianBergmann::Diff::LongestCommonSubsequenceCalculator</base>
    <member kind="function">
      <type></type>
      <name>calculate</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1MemoryEfficientLongestCommonSubsequenceCalculator.html</anchorfile>
      <anchor>a4292ab1029aa4668812e6b57b40a7044</anchor>
      <arglist>(array $from, array $to)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Contracts::Mock::Storage::MemoryFactory</name>
    <filename>classContracts_1_1Mock_1_1Storage_1_1MemoryFactory.html</filename>
    <base>Contracts::FactoryInterface</base>
    <member kind="function">
      <type></type>
      <name>getInstance</name>
      <anchorfile>classContracts_1_1Mock_1_1Storage_1_1MemoryFactory.html</anchorfile>
      <anchor>a6dfcfe4ff8eaa4df9f81fee91fe6364e</anchor>
      <arglist>(string $identifier, array $config=[])</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ContractsTest::MemoryTest</name>
    <filename>classContractsTest_1_1MemoryTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testStorageMemoryException</name>
      <anchorfile>classContractsTest_1_1MemoryTest.html</anchorfile>
      <anchor>aa3ff9a46b2d6aca04eee45a67b113544</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStorageMemory</name>
      <anchorfile>classContractsTest_1_1MemoryTest.html</anchorfile>
      <anchor>aee9797392c6573ee566b71d7a7fc6075</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStorageJsonObjectMemory</name>
      <anchorfile>classContractsTest_1_1MemoryTest.html</anchorfile>
      <anchor>a47e811f015afea474a8a53e823d0ebe6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocBlock::Tags::Method</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Method.html</filename>
    <base>phpDocumentor::Reflection::DocBlock::Tags::BaseTag</base>
    <base>phpDocumentor::Reflection::DocBlock::Tags::Factory::StaticMethod</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Method.html</anchorfile>
      <anchor>a8aed5c395134f62f14d7d45b9805b1c3</anchor>
      <arglist>(string $methodName, array $arguments=[], ?Type $returnType=null, bool $static=false, ?Description $description=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getMethodName</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Method.html</anchorfile>
      <anchor>a79ffcd0b618aad479d093ec65d36513f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getArguments</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Method.html</anchorfile>
      <anchor>a30c960570151e18c27d7bed17f761d3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isStatic</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Method.html</anchorfile>
      <anchor>a3145812d61192eee2331fd85d3d9f047</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getReturnType</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Method.html</anchorfile>
      <anchor>a1a38e9e48dae9985ceac18f3e98a3c66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Method.html</anchorfile>
      <anchor>af2f9813cd673f431612724dd32af0bea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>create</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Method.html</anchorfile>
      <anchor>aeb93cac100a88a4bcf0e1b5dd833bc5f</anchor>
      <arglist>(string $body, ?TypeResolver $typeResolver=null, ?DescriptionFactory $descriptionFactory=null, ?TypeContext $context=null)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$name</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Method.html</anchorfile>
      <anchor>acdee865fa5e681ed40035cc07d332e86</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::CodeCoverage::Report::Xml::Method</name>
    <filename>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1Method.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1Method.html</anchorfile>
      <anchor>a4c8131ce68791b9ed1343b455b80eb1d</anchor>
      <arglist>(\DOMElement $context, string $name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setSignature</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1Method.html</anchorfile>
      <anchor>ac52ac805dc3e4b00cf564aeb9891df77</anchor>
      <arglist>(string $signature)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setLines</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1Method.html</anchorfile>
      <anchor>ad1d129ee4949797a17a62d27efc02ebc</anchor>
      <arglist>(string $start, ?string $end=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setTotals</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1Method.html</anchorfile>
      <anchor>af548a354d6655b9aab7ab28fd40b6a45</anchor>
      <arglist>(string $executable, string $executed, string $coverage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setCrap</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1Method.html</anchorfile>
      <anchor>a09b388e39f93d5ec95c15449dd174528</anchor>
      <arglist>(string $crap)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MethodCallback</name>
    <filename>classMethodCallback.html</filename>
    <member kind="function">
      <type></type>
      <name>nonStaticCallback</name>
      <anchorfile>classMethodCallback.html</anchorfile>
      <anchor>aeeae7bd2aefbd732afc8c8ddb7a9ae1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>staticCallback</name>
      <anchorfile>classMethodCallback.html</anchorfile>
      <anchor>af5c3eec283417ae34b6f33ce3972ba93</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MethodCallbackByReference</name>
    <filename>classMethodCallbackByReference.html</filename>
    <member kind="function">
      <type></type>
      <name>bar</name>
      <anchorfile>classMethodCallbackByReference.html</anchorfile>
      <anchor>ae8ba13757c5864eefd90a58ed3c29fa5</anchor>
      <arglist>(&amp;$a, &amp;$b, $c)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>callback</name>
      <anchorfile>classMethodCallbackByReference.html</anchorfile>
      <anchor>abd5b38cdeeb8b65d0df51bb44195a43c</anchor>
      <arglist>(&amp;$a, &amp;$b, $c)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::MockObject::Rule::MethodName</name>
    <filename>classPHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1MethodName.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1MethodName.html</anchorfile>
      <anchor>a704d57f88d5d4c4b1b24f4eb72802fbd</anchor>
      <arglist>($constraint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1MethodName.html</anchorfile>
      <anchor>aeec0f49324217bd6d6d267328b949121</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>matches</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1MethodName.html</anchorfile>
      <anchor>a4a684e670a57e3f8233550d060d2483b</anchor>
      <arglist>(BaseInvocation $invocation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>matchesName</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1MethodName.html</anchorfile>
      <anchor>a088249ea3e61ad888be905d09e1a5a47</anchor>
      <arglist>(string $methodName)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::MockObject::MethodNameConstraint</name>
    <filename>classPHPUnit_1_1Framework_1_1MockObject_1_1MethodNameConstraint.html</filename>
    <base>PHPUnit::Framework::Constraint::Constraint</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1MethodNameConstraint.html</anchorfile>
      <anchor>a61a267873e09f3512843baf089a128fc</anchor>
      <arglist>(string $methodName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1MethodNameConstraint.html</anchorfile>
      <anchor>a1d6246036d20b47023c4c73925e914e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>matches</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1MethodNameConstraint.html</anchorfile>
      <anchor>ade6015b9e7b75f0b2ec8f5005c51094c</anchor>
      <arglist>($other)</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>PHPUnit::Framework::MockObject::Builder::MethodNameMatch</name>
    <filename>interfacePHPUnit_1_1Framework_1_1MockObject_1_1Builder_1_1MethodNameMatch.html</filename>
    <base>PHPUnit::Framework::MockObject::Builder::ParametersMatch</base>
    <member kind="function">
      <type></type>
      <name>method</name>
      <anchorfile>interfacePHPUnit_1_1Framework_1_1MockObject_1_1Builder_1_1MethodNameMatch.html</anchorfile>
      <anchor>af0dfc639bcc21a3e2d5586f46a7d074d</anchor>
      <arglist>($name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Doubler::Generator::Node::MethodNode</name>
    <filename>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1MethodNode.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1MethodNode.html</anchorfile>
      <anchor>ac90300d677fcb7bb635a51ded07b8ed6</anchor>
      <arglist>($name, $code=null, TypeHintReference $typeHintReference=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getVisibility</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1MethodNode.html</anchorfile>
      <anchor>a1b3672c61f937c4ffd1f17722455a328</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setVisibility</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1MethodNode.html</anchorfile>
      <anchor>a684a0d02c82289ae07e703919c15ba8e</anchor>
      <arglist>($visibility)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isStatic</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1MethodNode.html</anchorfile>
      <anchor>ac91f95b10356cde29940088f75253f39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setStatic</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1MethodNode.html</anchorfile>
      <anchor>a7508edf24f89b7a9bfe3912b1a31c17b</anchor>
      <arglist>($static=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>returnsReference</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1MethodNode.html</anchorfile>
      <anchor>a1f5ac612721c0b82bb08166077098a7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setReturnsReference</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1MethodNode.html</anchorfile>
      <anchor>a3f04c760902224ba2c561ca09fc45e1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getName</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1MethodNode.html</anchorfile>
      <anchor>a09f94a04327c0ade30a390fedaf0690a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addArgument</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1MethodNode.html</anchorfile>
      <anchor>a3516849f8744f7d0bd26ad3a4fed2971</anchor>
      <arglist>(ArgumentNode $argument)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getArguments</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1MethodNode.html</anchorfile>
      <anchor>a5db46cb0d5ebc2b742aa19ff05a622c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>hasReturnType</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1MethodNode.html</anchorfile>
      <anchor>ac24a0cfcdaa07b1483568d2615571411</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setReturnTypeNode</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1MethodNode.html</anchorfile>
      <anchor>ae7b9412bb1a18c425ab035049a6c8662</anchor>
      <arglist>(ReturnTypeNode $returnTypeNode)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setReturnType</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1MethodNode.html</anchorfile>
      <anchor>a7ec247b49b91dc051c204ed29d68deca</anchor>
      <arglist>($type=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setNullableReturnType</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1MethodNode.html</anchorfile>
      <anchor>adcad561be5f6e79b649d6369aa51e8ec</anchor>
      <arglist>($bool=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getReturnType</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1MethodNode.html</anchorfile>
      <anchor>a1ff5a69c7c5bde8cdbc5431b7cd05dec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getReturnTypeNode</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1MethodNode.html</anchorfile>
      <anchor>a437bd4773894da627248a74c8ec70d9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>hasNullableReturnType</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1MethodNode.html</anchorfile>
      <anchor>a899d018e3aac341a37e887f8c7882dd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setCode</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1MethodNode.html</anchorfile>
      <anchor>a3a68bfe147ff4c782f9a78e6efb31d5e</anchor>
      <arglist>($code)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getCode</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1MethodNode.html</anchorfile>
      <anchor>aec14fa096720b0b1b93c51735d76c227</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>useParentCode</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1MethodNode.html</anchorfile>
      <anchor>a4a9bc416f17515da750d5aabe97c6777</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Exception::Doubler::MethodNotExtendableException</name>
    <filename>classProphecy_1_1Exception_1_1Doubler_1_1MethodNotExtendableException.html</filename>
    <base>Prophecy::Exception::Doubler::DoubleException</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classProphecy_1_1Exception_1_1Doubler_1_1MethodNotExtendableException.html</anchorfile>
      <anchor>acc583876dd34bbcc1aa9751c64a718c2</anchor>
      <arglist>($message, $className, $methodName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getMethodName</name>
      <anchorfile>classProphecy_1_1Exception_1_1Doubler_1_1MethodNotExtendableException.html</anchorfile>
      <anchor>ac9225149ff11ed48e0071ffb8cdb21e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getClassName</name>
      <anchorfile>classProphecy_1_1Exception_1_1Doubler_1_1MethodNotExtendableException.html</anchorfile>
      <anchor>a4a6e5d413e990e3f2b3ba7f88d2749a6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Exception::Doubler::MethodNotFoundException</name>
    <filename>classProphecy_1_1Exception_1_1Doubler_1_1MethodNotFoundException.html</filename>
    <base>Prophecy::Exception::Doubler::DoubleException</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classProphecy_1_1Exception_1_1Doubler_1_1MethodNotFoundException.html</anchorfile>
      <anchor>a2b0f43dbe9fdf7d7178a733929e7d893</anchor>
      <arglist>($message, $classname, $methodName, $arguments=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getClassname</name>
      <anchorfile>classProphecy_1_1Exception_1_1Doubler_1_1MethodNotFoundException.html</anchorfile>
      <anchor>a582fa5b751e3e9908b988c3aa1cab327</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getMethodName</name>
      <anchorfile>classProphecy_1_1Exception_1_1Doubler_1_1MethodNotFoundException.html</anchorfile>
      <anchor>a5f96ee9bcaf682cd426713fdc819918b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getArguments</name>
      <anchorfile>classProphecy_1_1Exception_1_1Doubler_1_1MethodNotFoundException.html</anchorfile>
      <anchor>a9d2feb908987cb40442f066fb76f0f43</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Prophecy::MethodProphecy</name>
    <filename>classProphecy_1_1Prophecy_1_1MethodProphecy.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classProphecy_1_1Prophecy_1_1MethodProphecy.html</anchorfile>
      <anchor>a5591ef1af4965f7a09765015f2f5b3c7</anchor>
      <arglist>(ObjectProphecy $objectProphecy, $methodName, $arguments=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>withArguments</name>
      <anchorfile>classProphecy_1_1Prophecy_1_1MethodProphecy.html</anchorfile>
      <anchor>a599a62144584c05ca3cb515756f9b4c7</anchor>
      <arglist>($arguments)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>will</name>
      <anchorfile>classProphecy_1_1Prophecy_1_1MethodProphecy.html</anchorfile>
      <anchor>af8e870b7ee77234f624f5c0d9402446d</anchor>
      <arglist>($promise)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>willReturn</name>
      <anchorfile>classProphecy_1_1Prophecy_1_1MethodProphecy.html</anchorfile>
      <anchor>a8a471b3554950088449e36a3e80cc2e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>willYield</name>
      <anchorfile>classProphecy_1_1Prophecy_1_1MethodProphecy.html</anchorfile>
      <anchor>ae05547806ed5675b18ed78c93449b50e</anchor>
      <arglist>($items)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>willReturnArgument</name>
      <anchorfile>classProphecy_1_1Prophecy_1_1MethodProphecy.html</anchorfile>
      <anchor>af8c11e4809ff59a839ff5ea068350cb4</anchor>
      <arglist>($index=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>willThrow</name>
      <anchorfile>classProphecy_1_1Prophecy_1_1MethodProphecy.html</anchorfile>
      <anchor>abd1ca051790a5df5e803905156cf07d5</anchor>
      <arglist>($exception)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>should</name>
      <anchorfile>classProphecy_1_1Prophecy_1_1MethodProphecy.html</anchorfile>
      <anchor>a592f56ca5e3ed982317ac50aa3f59557</anchor>
      <arglist>($prediction)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>shouldBeCalled</name>
      <anchorfile>classProphecy_1_1Prophecy_1_1MethodProphecy.html</anchorfile>
      <anchor>ab5912e5ae59fdfbb02ed426e85776f6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>shouldNotBeCalled</name>
      <anchorfile>classProphecy_1_1Prophecy_1_1MethodProphecy.html</anchorfile>
      <anchor>a87b56e0a68e5e5bb5c572dcfa46ef50a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>shouldBeCalledTimes</name>
      <anchorfile>classProphecy_1_1Prophecy_1_1MethodProphecy.html</anchorfile>
      <anchor>a33b7333272a91a1ebdbf4d8079ea9924</anchor>
      <arglist>($count)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>shouldBeCalledOnce</name>
      <anchorfile>classProphecy_1_1Prophecy_1_1MethodProphecy.html</anchorfile>
      <anchor>acdd34e7dc83278d3f9b7559377bcb832</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>shouldHave</name>
      <anchorfile>classProphecy_1_1Prophecy_1_1MethodProphecy.html</anchorfile>
      <anchor>ab97385b231517b61023974e720a7f69e</anchor>
      <arglist>($prediction)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>shouldHaveBeenCalled</name>
      <anchorfile>classProphecy_1_1Prophecy_1_1MethodProphecy.html</anchorfile>
      <anchor>a7dd1ecf4cff5e529579e0384597c4db8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>shouldNotHaveBeenCalled</name>
      <anchorfile>classProphecy_1_1Prophecy_1_1MethodProphecy.html</anchorfile>
      <anchor>a994526e5fe85e7b1f14fe5fc479d3fca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>shouldNotBeenCalled</name>
      <anchorfile>classProphecy_1_1Prophecy_1_1MethodProphecy.html</anchorfile>
      <anchor>a2f29a0161041508424188b89e81d6761</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>shouldHaveBeenCalledTimes</name>
      <anchorfile>classProphecy_1_1Prophecy_1_1MethodProphecy.html</anchorfile>
      <anchor>a42cd7c09c5086a59e6aed347225fbafe</anchor>
      <arglist>($count)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>shouldHaveBeenCalledOnce</name>
      <anchorfile>classProphecy_1_1Prophecy_1_1MethodProphecy.html</anchorfile>
      <anchor>a7f1efdc1d5fc51a44ab70d9c4ebdc5b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>checkPrediction</name>
      <anchorfile>classProphecy_1_1Prophecy_1_1MethodProphecy.html</anchorfile>
      <anchor>a20ae07350bcdd3e288544cc3c6c9defa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getPromise</name>
      <anchorfile>classProphecy_1_1Prophecy_1_1MethodProphecy.html</anchorfile>
      <anchor>a4bac7054399238e56227a54d3bf26511</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getPrediction</name>
      <anchorfile>classProphecy_1_1Prophecy_1_1MethodProphecy.html</anchorfile>
      <anchor>a702d920080eb1abf14c2b20fa41186ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getCheckedPredictions</name>
      <anchorfile>classProphecy_1_1Prophecy_1_1MethodProphecy.html</anchorfile>
      <anchor>a3a6d792ceab26d6fc09cf65b1f9f6662</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getObjectProphecy</name>
      <anchorfile>classProphecy_1_1Prophecy_1_1MethodProphecy.html</anchorfile>
      <anchor>a89712605097f35c3e9c5d833f63d3dd7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getMethodName</name>
      <anchorfile>classProphecy_1_1Prophecy_1_1MethodProphecy.html</anchorfile>
      <anchor>a3bcf6e267f50d2d0b310658c117e32a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getArgumentsWildcard</name>
      <anchorfile>classProphecy_1_1Prophecy_1_1MethodProphecy.html</anchorfile>
      <anchor>a9161ca99e246f36c09f80c833d8b7556</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>hasReturnVoid</name>
      <anchorfile>classProphecy_1_1Prophecy_1_1MethodProphecy.html</anchorfile>
      <anchor>abefe0b32f5918045489311f3a9a728c2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Exception::Prophecy::MethodProphecyException</name>
    <filename>classProphecy_1_1Exception_1_1Prophecy_1_1MethodProphecyException.html</filename>
    <base>Prophecy::Exception::Prophecy::ObjectProphecyException</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classProphecy_1_1Exception_1_1Prophecy_1_1MethodProphecyException.html</anchorfile>
      <anchor>a50e51c9eca73f6a44900b718a3e525f0</anchor>
      <arglist>($message, MethodProphecy $methodProphecy)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getMethodProphecy</name>
      <anchorfile>classProphecy_1_1Exception_1_1Prophecy_1_1MethodProphecyException.html</anchorfile>
      <anchor>a52afcdccd1a43851483cb7994415d6b3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>Prophecy::PhpDocumentor::MethodTagRetrieverInterface</name>
    <filename>interfaceProphecy_1_1PhpDocumentor_1_1MethodTagRetrieverInterface.html</filename>
    <member kind="function">
      <type></type>
      <name>getTagList</name>
      <anchorfile>interfaceProphecy_1_1PhpDocumentor_1_1MethodTagRetrieverInterface.html</anchorfile>
      <anchor>a0ac734992312721b74b7771f131e0b27</anchor>
      <arglist>(\ReflectionClass $reflectionClass)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocBlock::Tags::MethodTest</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1MethodTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>tearDown</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1MethodTest.html</anchorfile>
      <anchor>acfaca4fa2a28d5d83e0b15c5b40cd92c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIfCorrectTagNameIsReturned</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1MethodTest.html</anchorfile>
      <anchor>ab1a814b6349dd1cc3957c8a581ba64be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIfTagCanBeRenderedUsingDefaultFormatter</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1MethodTest.html</anchorfile>
      <anchor>ae93b9cc6f89191f51c312c7dd2afd1f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIfTagCanBeRenderedUsingSpecificFormatter</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1MethodTest.html</anchorfile>
      <anchor>a12f97b6b03899475e94cb3c053eae8f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasMethodName</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1MethodTest.html</anchorfile>
      <anchor>aa605a489ddc0a913d53ba62d718f5e9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasArguments</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1MethodTest.html</anchorfile>
      <anchor>ab51531f8b88d96ffbefbf8145285160d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testArgumentsMayBePassedAsString</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1MethodTest.html</anchorfile>
      <anchor>a0f259b4a9a51dc75ae0ee1f012f6f88d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testArgumentTypeCanBeInferredAsMixed</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1MethodTest.html</anchorfile>
      <anchor>ab29512a1c2fa00793bd9c5cb68c50b84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testRestArgumentIsParsedAsRegularArg</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1MethodTest.html</anchorfile>
      <anchor>ab356276baf89b99de8e626106e0da0ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasReturnType</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1MethodTest.html</anchorfile>
      <anchor>af5486d5c5902a163b2f591dd6de75538</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testReturnTypeCanBeInferredAsVoid</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1MethodTest.html</anchorfile>
      <anchor>a72368f81b43a8c90cbd3b6c912f1c420</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testMethodCanBeStatic</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1MethodTest.html</anchorfile>
      <anchor>a1dbcd4f208038d7872cd6341d6f9c70d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasDescription</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1MethodTest.html</anchorfile>
      <anchor>af9984d2b05c0cbd1813e1d52a578616e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStringRepresentationIsReturned</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1MethodTest.html</anchorfile>
      <anchor>ae63829ed2dc65cd39a475f664b79789a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStringRepresentationIsReturnedWithoutDescription</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1MethodTest.html</anchorfile>
      <anchor>ae77287c1ff69ca5dfd000a207feef388</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethod</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1MethodTest.html</anchorfile>
      <anchor>afc6cd479f2ef299c2181a7b0da78f330</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testReturnTypeThis</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1MethodTest.html</anchorfile>
      <anchor>a450b887ea573acd2ded7c19c3f6af02a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testReturnTypeNoneWithLongMethodName</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1MethodTest.html</anchorfile>
      <anchor>a9082cdfa147ed5ae04bb23cfdc64b81d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>collectionReturnTypesProvider</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1MethodTest.html</anchorfile>
      <anchor>ad3e8b0bde857658fb452e510ac0790c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCollectionReturnTypes</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1MethodTest.html</anchorfile>
      <anchor>a793f789a14dafde53fe6d9771f15e825</anchor>
      <arglist>(string $returnType, string $expectedType, ?string $expectedValueType=null, ?string $expectedKeyType=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodFailsIfBodyIsEmpty</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1MethodTest.html</anchorfile>
      <anchor>a5bb5732bfb6678ff7df97a69e16830dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodReturnsNullIfBodyIsIncorrect</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1MethodTest.html</anchorfile>
      <anchor>a0f0fad3ef2c2ad3c8b0bb1c5c0fb0f97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodFailsIfResolverIsNull</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1MethodTest.html</anchorfile>
      <anchor>a75e45ec354f3d7526713a270465fe67c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodFailsIfDescriptionFactoryIsNull</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1MethodTest.html</anchorfile>
      <anchor>a7c10f50252036e36a9d89aaf44a72e5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCreationFailsIfBodyIsEmpty</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1MethodTest.html</anchorfile>
      <anchor>a5f6ad15b32c7002a5dc6d331ec9a704e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCreationFailsIfArgumentRecordContainsInvalidEntry</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1MethodTest.html</anchorfile>
      <anchor>a52c983ab1809ea4cd7ccdfbe62d2784b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCreateMethodParenthesisMissing</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1MethodTest.html</anchorfile>
      <anchor>a7489273db3cf00259e529eb7c8333040</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCreateMethodEmptyArguments</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1MethodTest.html</anchorfile>
      <anchor>ab48b7a577f21a43b6516ab79050a00b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCreateWithoutReturnType</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1MethodTest.html</anchorfile>
      <anchor>aac9b062df291078a916a53a548cccd7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCreateWithMixedReturnTypes</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1MethodTest.html</anchorfile>
      <anchor>a4abc04a526864bd0e99831ffbe928ea3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::MissingCoversAnnotationException</name>
    <filename>classPHPUnit_1_1Framework_1_1MissingCoversAnnotationException.html</filename>
    <base>PHPUnit::Framework::RiskyTestError</base>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::CodeCoverage::MissingCoversAnnotationException</name>
    <filename>classSebastianBergmann_1_1CodeCoverage_1_1MissingCoversAnnotationException.html</filename>
    <base>SebastianBergmann::CodeCoverage::RuntimeException</base>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::Types::Mixed_</name>
    <filename>classphpDocumentor_1_1Reflection_1_1Types_1_1Mixed__.html</filename>
    <base>phpDocumentor::Reflection::Type</base>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1Mixed__.html</anchorfile>
      <anchor>a6bedfc578e628fdea53a15820e52c465</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>Webmozart::Assert::Mixin</name>
    <filename>interfaceWebmozart_1_1Assert_1_1Mixin.html</filename>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrString</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a5531240f1f9a2545e6aaf0a84ba41ba6</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allString</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>ae89a7d717fcdb356a70d5cc90566f493</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrStringNotEmpty</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>ab95f0d64b8ac1eebacc22cc60f62cbe3</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allStringNotEmpty</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>aef8cb6ef2c9f549addc05ce596123fe0</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrInteger</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>addcba736c52d01bf99300898674455e2</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allInteger</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>ad6f009c3442d054249f6f718cb9374b8</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrIntegerish</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>ad6b803f1e86ee7c5862684dcaff0d15f</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allIntegerish</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>aafc69e774b2229af588a8257244d7789</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrFloat</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>ab50c06a9dcdcb9e910c0f00786c10735</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allFloat</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a6cfe92aa642118592f954d608e4c2202</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrNumeric</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a52f60efc5ad3a5194f3ef97228b9d8e1</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allNumeric</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>ae88efd5a475652140edcd68eb853d49b</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrNatural</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>af9003dc04367917e10ab1c85d24e13e3</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allNatural</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a2442a7a3ba057aa1a0da12871fb227da</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrBoolean</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>abb7c0683d799d26d06628c39235eef0b</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allBoolean</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>aaf583402656b4c98acbb407ba83ac2f7</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrScalar</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>ac771ae2e2ffecd3ad19787c02b76066c</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allScalar</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a73e74bf6de13ee240cfcc4eb70eb92e9</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrObject</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a8cb584cb037adc76d4ef6fc4b2124629</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allObject</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>ab20aead3a041aca6ffc51745e11187a7</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrResource</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a1e769bb7072eda14d0d0005c88f65f2f</anchor>
      <arglist>($value, $type=null, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allResource</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>ae1e49f2a7c868247f09548e0e21529eb</anchor>
      <arglist>($value, $type=null, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrIsCallable</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a546d8c014ceba22eaf6a919f22e21234</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allIsCallable</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a30382835e330f2366b8bdc9805ff8ff6</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrIsArray</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>ad9e581e26293339f4d5d51a5eb2118e3</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allIsArray</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a20ad488bdb4874f6bf7e51dcf99564ed</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrIsTraversable</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a1adcc175e8b133bcaab3d3e5e8345660</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allIsTraversable</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a1e41b0b2d3e420c4bbd6468d1968c8cd</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrIsArrayAccessible</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>aaef9993208a6331926191b054838565c</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allIsArrayAccessible</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>abda053d7535c111bc9b213e2365577a5</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrIsCountable</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a0f7bf4cd702d67a3ef1d4025e1b107ed</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allIsCountable</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>ad11db885f53e3c7494e82dc58160b5dc</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrIsIterable</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a621896fe05ef2421d8f18457da88ee08</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allIsIterable</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a084fcdad142e5ef093b4f546dac17617</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrIsInstanceOf</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>afc66c51621837f30ae254e481367d652</anchor>
      <arglist>($value, $class, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allIsInstanceOf</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>ad4f1e74d6d529ad0af6030a48c8b6615</anchor>
      <arglist>($value, $class, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrNotInstanceOf</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a0c3950b6fd8dc81a2038f9bc3a3b70cf</anchor>
      <arglist>($value, $class, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allNotInstanceOf</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a33b1437ff7882b0ca4b0856b1efcb5da</anchor>
      <arglist>($value, $class, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrIsInstanceOfAny</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a84adeb6554d33f53d84c9e8184625c2f</anchor>
      <arglist>($value, $classes, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allIsInstanceOfAny</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a659d708fa6010a88c395c804ccaa19bd</anchor>
      <arglist>($value, $classes, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrIsAOf</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>ad139878e8ca592e3134756e78181d56b</anchor>
      <arglist>($value, $class, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allIsAOf</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a62fa2db49a40b3cd4a3260bd87e36ce9</anchor>
      <arglist>($value, $class, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrIsNotA</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a77c9d421bbff5c693999e498680ce940</anchor>
      <arglist>($value, $class, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allIsNotA</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>aef4ed36d319d80d970b76033180fb961</anchor>
      <arglist>($value, $class, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrIsAnyOf</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a4b4ba522728dcf78dc25541c16ae2cf9</anchor>
      <arglist>($value, $classes, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allIsAnyOf</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a2be1391cfc8dfc3bd9358cb8f89e2cb7</anchor>
      <arglist>($value, $classes, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrIsEmpty</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a4d7016aee0564f10788afbf81e47f7e8</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allIsEmpty</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a22e25c1d800a4f489ca256cc781ba831</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrNotEmpty</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a96a57db3aede5ae7a82faab7f258b1dc</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allNotEmpty</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>ae36305bc5b42bbd279e7a2c94aa3b69b</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allNull</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>aeca502882c4f86e6d11aee717364b68e</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allNotNull</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a85e65acd7b1ea26af1f93aaddb3c8be0</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrTrue</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a8a21a4ac2a5f73cf045f839f3e1dc658</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allTrue</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>adcbb1e6c634c171956315cb13bbd620f</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrFalse</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>ae6b5e6fa01bfdcfd0c0a543b02cb69a1</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allFalse</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>ae126d8d854708c5243889de7bb804326</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrNotFalse</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>ad98d67620fd7b85ab9a7c6807b8c8bec</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allNotFalse</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a083aa314b5a6e1a581b19d16a0908471</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrIp</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a3d9602a26c958434cee353bc7a97dfcc</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allIp</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a103b836cae6af7a27fb22628759fa6e2</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrIpv4</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a7284778e9107a7bd5284b6d019a5a452</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allIpv4</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a953145eccd10c01806f3807971e6c703</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrIpv6</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a760b861412f3826901ad84eada709476</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allIpv6</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a8bfadbb01f65c515e3a9c17d89ab7089</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrEmail</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>ab4c6b5943f696aac2c8855fc3c21b614</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allEmail</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a60954a945a7954f8bd6fb70300ba9e8c</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrUniqueValues</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a3c43af343f1e8bf47711290e19192a06</anchor>
      <arglist>($values, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allUniqueValues</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>ace160e7c6af5f40f358fe211626f6bf8</anchor>
      <arglist>($values, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrEq</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a1e5574e88037959d2b9dfa0422d80aa4</anchor>
      <arglist>($value, $expect, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allEq</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a48fc9f288849422fb59d58608ce4a0f0</anchor>
      <arglist>($value, $expect, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrNotEq</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a648a91b595855ca5a509540fff201bd7</anchor>
      <arglist>($value, $expect, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allNotEq</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>acc7fffca5d2be3aff28c8f111b34fa25</anchor>
      <arglist>($value, $expect, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrSame</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a3fe5426ef1fb6c5006430b1052941204</anchor>
      <arglist>($value, $expect, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allSame</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>afd67df223f6b101b83e17451cc186f75</anchor>
      <arglist>($value, $expect, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrNotSame</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a195c065b36e56c64a83ead068a235a27</anchor>
      <arglist>($value, $expect, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allNotSame</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>aedf32832fce00fac6d44b363d07666e0</anchor>
      <arglist>($value, $expect, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrGreaterThan</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a3ea6d6fe7d1449156c7255c155c46d2a</anchor>
      <arglist>($value, $limit, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allGreaterThan</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a76a08439201fa0524dc877348176328e</anchor>
      <arglist>($value, $limit, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrGreaterThanEq</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a2c8d6873f06e63a9a702392858c135cd</anchor>
      <arglist>($value, $limit, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allGreaterThanEq</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a32523603a405379a35e23d04e8561592</anchor>
      <arglist>($value, $limit, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrLessThan</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>aeb1fdd0ab4aba00ed5c5482f09f4971c</anchor>
      <arglist>($value, $limit, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allLessThan</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a2320bdf85aaaf9a9d5ea1f696390519c</anchor>
      <arglist>($value, $limit, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrLessThanEq</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a390f77ed0cfc5414958a995eff1ebb8d</anchor>
      <arglist>($value, $limit, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allLessThanEq</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a46de9af3b32b8a349cf96ef72e1c00bc</anchor>
      <arglist>($value, $limit, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrRange</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a0c5ff3cca4d4f39af018eca782033648</anchor>
      <arglist>($value, $min, $max, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allRange</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>ac84c79ece7df0d4be886dd7b01f9845e</anchor>
      <arglist>($value, $min, $max, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrOneOf</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a78ab3ad78df144c8ca4be9bbcf9f65a1</anchor>
      <arglist>($value, $values, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allOneOf</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a9d666d53bfaba0810d6bef14e3241834</anchor>
      <arglist>($value, $values, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrInArray</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a6b9d17c3708f1525b5c63ed7d8778277</anchor>
      <arglist>($value, $values, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allInArray</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>ab7adc78436cca7354138ba3d2ede6dc6</anchor>
      <arglist>($value, $values, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrContains</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a253d2aa652dba0bf1476ee72632a883c</anchor>
      <arglist>($value, $subString, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allContains</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>acfc2b19857242d15280aaa4a8c8825d5</anchor>
      <arglist>($value, $subString, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrNotContains</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a20883960c721bfb98b69c4c179eca55f</anchor>
      <arglist>($value, $subString, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allNotContains</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a1368c01b8a9987a2c8338bbf1e719837</anchor>
      <arglist>($value, $subString, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrNotWhitespaceOnly</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a3fc7d4a1b2437ff7f688f949c5e2a451</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allNotWhitespaceOnly</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>aa08bf7edccda2198b035fa137c188680</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrStartsWith</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>ac5d595b1cef6a03add836bcf7e5ab886</anchor>
      <arglist>($value, $prefix, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allStartsWith</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>ae627a48a0ce3089ce17e277cee21825b</anchor>
      <arglist>($value, $prefix, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrNotStartsWith</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a1e8a45cea8ccb8a248d1ee54ca41b2b0</anchor>
      <arglist>($value, $prefix, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allNotStartsWith</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a97e73ed22da387211ab2f88b6be734e4</anchor>
      <arglist>($value, $prefix, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrStartsWithLetter</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a453a44c45ab9076e520dba16632a6ccf</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allStartsWithLetter</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>aa651edeaa4b75554a594649697ae3d05</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrEndsWith</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>aff74595a15c25082c60cf7ab645d7a3f</anchor>
      <arglist>($value, $suffix, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allEndsWith</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a706932b656370872a88aa721deda5d75</anchor>
      <arglist>($value, $suffix, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrNotEndsWith</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a34ccf27fc91502f5fb513154eb6aa9fc</anchor>
      <arglist>($value, $suffix, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allNotEndsWith</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a6c63400a844eac49d8bcafba7b717714</anchor>
      <arglist>($value, $suffix, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrRegex</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>ac38901d7f938db0d6d62e8588f0f3e48</anchor>
      <arglist>($value, $pattern, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allRegex</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a0d9375a1108d383b1a5d990c12c085cb</anchor>
      <arglist>($value, $pattern, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrNotRegex</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a4af938b3c5a0bfee19a4c76500d5fa8b</anchor>
      <arglist>($value, $pattern, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allNotRegex</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a9f5d0c9079ddaa8cd52df7b478d9ff41</anchor>
      <arglist>($value, $pattern, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrUnicodeLetters</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a581ef8d5e0d5f518ab1a1aeda8fae9e3</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allUnicodeLetters</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a1324d91e669d1fac44d979dfa5fa37b9</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrAlpha</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a1bf738549f6c418897a61e0f3a777c60</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allAlpha</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>ae32f6752959e3c215c49a684620177af</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrDigits</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a60d587c707e159c496f11e5c765b3970</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allDigits</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a7b2d0f51d88f03cba2aa00793788fd1f</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrAlnum</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a345ceda9f45d70b794d2d0f058db0f16</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allAlnum</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a9c0adce7d807cec9ad6bba3c32bbd3e2</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrLower</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a2b276e6229ff1a9fffd56067b6a6cb4f</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allLower</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a014807fde80252ec855cd726a61a91e9</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrUpper</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a54b135423e1878bcde12b8403de1878e</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allUpper</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a1d55c7f3f4fced05b4f7a06ae31a27b4</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrLength</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>abac856cf5512523e693aa80d9db4e688</anchor>
      <arglist>($value, $length, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allLength</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>ac37708573fed43fc47112982ba48cc2f</anchor>
      <arglist>($value, $length, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrMinLength</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>ac3d99ada19cb9cb19b951372e2ba752f</anchor>
      <arglist>($value, $min, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allMinLength</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a7f9926d5b4f77e65d4c0bfcc3e2f4ae7</anchor>
      <arglist>($value, $min, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrMaxLength</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>aa7abb20f0893f30a1e1a431aeb8aa8a3</anchor>
      <arglist>($value, $max, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allMaxLength</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>aed136696598d662a4adeea971cd415f7</anchor>
      <arglist>($value, $max, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrLengthBetween</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a7a94c428b602efc3e186199f69aaf750</anchor>
      <arglist>($value, $min, $max, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allLengthBetween</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a2ec849782d79a0cb291396f99a83d548</anchor>
      <arglist>($value, $min, $max, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrFileExists</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>ae3dfcc67726b5c613fe57def0d2895f0</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allFileExists</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a225b4bd4ff77e33573e5849e7b1ef425</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrFile</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a1641bc362bfc9e2adde950066009cad0</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allFile</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>ae19ce4a1f4c47e0117974c49b15408e8</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrDirectory</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a4b9c1f9182b6f78bd287ccfcf03d1029</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allDirectory</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a4c98011ed3bdb05e75debcb971a13454</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrReadable</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a1261cb7dd4cea1585addef999e7c4f7e</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allReadable</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a361f4053c379e027ae13b808171c26ba</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrWritable</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a317236e3a6828847da514edb71b97242</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allWritable</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>af49d1deadc0d2341c8c09a6884454e76</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrClassExists</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a3f15c38fb8183f82528a4e64563b3f04</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allClassExists</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a91e5751f293b865267262040ec8f5863</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrSubclassOf</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a3c8adf9de6182218b1c8ef66a1a37577</anchor>
      <arglist>($value, $class, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allSubclassOf</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a11765161981de56a3d532df78f9c0153</anchor>
      <arglist>($value, $class, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrInterfaceExists</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>aacc6327956a9299ede9fbfa150b81646</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allInterfaceExists</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a80a14aa3919c66dfcb56bf06a7cba220</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrImplementsInterface</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>aeea42ab46eff6d9f8a2f94691a367fb1</anchor>
      <arglist>($value, $interface, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allImplementsInterface</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a7122ac9c34afbecfbd065952860f841f</anchor>
      <arglist>($value, $interface, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrPropertyExists</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>aa56a67374a342dcc97798932bb7d6f14</anchor>
      <arglist>($classOrObject, $property, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allPropertyExists</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a98027b731f7ff292b84543ae58a9dd03</anchor>
      <arglist>($classOrObject, $property, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrPropertyNotExists</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>aa20198b1036cdd48783687a17a4005a6</anchor>
      <arglist>($classOrObject, $property, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allPropertyNotExists</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>ae43f872d4f81e6b6036f3db4bd09f0b2</anchor>
      <arglist>($classOrObject, $property, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrMethodExists</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>ab7853a66dfeefaa967a68388bc518e29</anchor>
      <arglist>($classOrObject, $method, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allMethodExists</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>abfd53d4f7a62c94604c7763650b1764c</anchor>
      <arglist>($classOrObject, $method, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrMethodNotExists</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a3136ac5db18475fa346ffbe5286a6a70</anchor>
      <arglist>($classOrObject, $method, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allMethodNotExists</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a5cbdc9a0cd0c70b8eb6ea78c7ea128c1</anchor>
      <arglist>($classOrObject, $method, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrKeyExists</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a06abe67696eb26b9252cdceee2604d93</anchor>
      <arglist>($array, $key, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allKeyExists</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>ad0707a5238fbc31241c5d61f29be1703</anchor>
      <arglist>($array, $key, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrKeyNotExists</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a2faf8bfca159211178722b89dd017b4d</anchor>
      <arglist>($array, $key, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allKeyNotExists</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a410fb6941a6dfe9d88a162be5454e342</anchor>
      <arglist>($array, $key, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrValidArrayKey</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a26bd1428ee87d961c3dd9d74fc577176</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allValidArrayKey</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>ad26bde94e52bf89d2f6a5edd73294405</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrCount</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a571502e3132956ef893fc7fc5fb99364</anchor>
      <arglist>($array, $number, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allCount</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>ab0c8d11ea6dc44fcf75b1877f5d255c5</anchor>
      <arglist>($array, $number, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrMinCount</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a1c1ba8d41400b56a12e84c32e41f2779</anchor>
      <arglist>($array, $min, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allMinCount</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a388711c1a054c98d692f2bf4a707d801</anchor>
      <arglist>($array, $min, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrMaxCount</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>aab0891fee885f9659f2b1cd9c0fe649d</anchor>
      <arglist>($array, $max, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allMaxCount</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>ad494672a58813ae59c80a38a7f0d59d4</anchor>
      <arglist>($array, $max, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrCountBetween</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>ada3010d4c6295a6ca9d32acce9afd4c3</anchor>
      <arglist>($array, $min, $max, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allCountBetween</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>aa47eaa4f6257529ec3097cf427010701</anchor>
      <arglist>($array, $min, $max, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrIsList</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a6e115aa407fba63c9cd3683ff769a889</anchor>
      <arglist>($array, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allIsList</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a9fda03904040dc8b14f41f38e96aa06c</anchor>
      <arglist>($array, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrIsNonEmptyList</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a558f7664c71b4ee1c125adca7c07b1cc</anchor>
      <arglist>($array, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allIsNonEmptyList</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a53901ef107d7d5bf000f09bb610df7c2</anchor>
      <arglist>($array, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrIsMap</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a75b8252f3db8b0a0210b9bac6d6f4c97</anchor>
      <arglist>($array, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allIsMap</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a9f9f2552c2377b92a1679cbef9aa2200</anchor>
      <arglist>($array, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrIsNonEmptyMap</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a0e79f0223e76f42a0133431465865e64</anchor>
      <arglist>($array, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allIsNonEmptyMap</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a0783d844eda18f4cfe0f0aff90298015</anchor>
      <arglist>($array, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrUuid</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a4cebdb1e51aadeb643b5c7c682db20d2</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allUuid</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>af4e5623de8d5695fad2613a85a26d705</anchor>
      <arglist>($value, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>nullOrThrows</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>ab93bf682c4fcf6b2a25a53905be6c307</anchor>
      <arglist>($expression, $class=&apos;Exception&apos;, $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>allThrows</name>
      <anchorfile>interfaceWebmozart_1_1Assert_1_1Mixin.html</anchorfile>
      <anchor>a6a6f0e0e2b8de598e719949f17308966</anchor>
      <arglist>($expression, $class=&apos;Exception&apos;, $message=&apos;&apos;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Mockable</name>
    <filename>classMockable.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classMockable.html</anchorfile>
      <anchor>afbba6ce3e6f4364a2289c4993671e975</anchor>
      <arglist>($arg1=null, $arg2=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__clone</name>
      <anchorfile>classMockable.html</anchorfile>
      <anchor>a15b0df6ee3f24826b24305fc6214fdb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mockableMethod</name>
      <anchorfile>classMockable.html</anchorfile>
      <anchor>ad9eefde032804786768348043afd4e89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>anotherMockableMethod</name>
      <anchorfile>classMockable.html</anchorfile>
      <anchor>ae57b3de58e46f9331fb438021ea38125</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$constructorArgs</name>
      <anchorfile>classMockable.html</anchorfile>
      <anchor>abc36092f6d1bf32daa7ebc60f473f1a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$cloned</name>
      <anchorfile>classMockable.html</anchorfile>
      <anchor>acf5cb6479b992466d424f28fcfabd0d5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::MockObject::MockBuilder</name>
    <filename>classPHPUnit_1_1Framework_1_1MockObject_1_1MockBuilder.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1MockBuilder.html</anchorfile>
      <anchor>a5c77dcb5d80a9304469432915ed22240</anchor>
      <arglist>(TestCase $testCase, $type)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getMock</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1MockBuilder.html</anchorfile>
      <anchor>ac393188f9764cffab480c6d330ab8703</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getMockForAbstractClass</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1MockBuilder.html</anchorfile>
      <anchor>a1999fb9cdf3ae5a77c4e7df046ffa9ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getMockForTrait</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1MockBuilder.html</anchorfile>
      <anchor>afff4d5a02933a9e6344c03a761256ec1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setMethods</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1MockBuilder.html</anchorfile>
      <anchor>a3c195ca8f022982009cddaf00843e591</anchor>
      <arglist>(?array $methods=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>onlyMethods</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1MockBuilder.html</anchorfile>
      <anchor>a5bcc1e468ac6baf4698ab5d6e5dd7905</anchor>
      <arglist>(array $methods)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addMethods</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1MockBuilder.html</anchorfile>
      <anchor>ab48607b8ff0bf3b6502921774dac186b</anchor>
      <arglist>(array $methods)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setMethodsExcept</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1MockBuilder.html</anchorfile>
      <anchor>a38ac49f53fc075c180c817786fbfcac4</anchor>
      <arglist>(array $methods=[])</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setConstructorArgs</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1MockBuilder.html</anchorfile>
      <anchor>a9e87b4105464a10feb9f0bc46453abff</anchor>
      <arglist>(array $args)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setMockClassName</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1MockBuilder.html</anchorfile>
      <anchor>a41d86ed2ffebe110fa71870cf0006870</anchor>
      <arglist>(string $name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>disableOriginalConstructor</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1MockBuilder.html</anchorfile>
      <anchor>a5df197f9998891470d804c25ec0349ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>enableOriginalConstructor</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1MockBuilder.html</anchorfile>
      <anchor>abb386fbdba253e77cd8c5078890196b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>disableOriginalClone</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1MockBuilder.html</anchorfile>
      <anchor>a2d013142e642ccfa966eb666f02aad95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>enableOriginalClone</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1MockBuilder.html</anchorfile>
      <anchor>a8f47ca3d73bbdbe6bda54587c283d5d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>disableAutoload</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1MockBuilder.html</anchorfile>
      <anchor>ab34ae5d4595685b661bcab5b5d8e946d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>enableAutoload</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1MockBuilder.html</anchorfile>
      <anchor>a78b887a89c6e4895cfe060f02769d1e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>disableArgumentCloning</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1MockBuilder.html</anchorfile>
      <anchor>ab7cb55c1ba637d627f42a5298764580b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>enableArgumentCloning</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1MockBuilder.html</anchorfile>
      <anchor>a645b6632f8417369415d419c1bab610e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>enableProxyingToOriginalMethods</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1MockBuilder.html</anchorfile>
      <anchor>a0503b60976d2708b5fa9b70282ad6335</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>disableProxyingToOriginalMethods</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1MockBuilder.html</anchorfile>
      <anchor>a6ed0a5caed76c9b07646ce190aa729fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setProxyTarget</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1MockBuilder.html</anchorfile>
      <anchor>ac21c47b0d71532e7c031344bbbdcb84b</anchor>
      <arglist>(object $object)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>allowMockingUnknownTypes</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1MockBuilder.html</anchorfile>
      <anchor>adbb82863329753e83fc548c5216a1f58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>disallowMockingUnknownTypes</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1MockBuilder.html</anchorfile>
      <anchor>a164a242c0f8e9f35f3e45a83334163ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>enableAutoReturnValueGeneration</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1MockBuilder.html</anchorfile>
      <anchor>ad5e9e46eb594633c8d91106807e7c991</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>disableAutoReturnValueGeneration</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1MockBuilder.html</anchorfile>
      <anchor>afcfb3d9e91cb0feceace1fc6c93729cc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MockBuilderTest</name>
    <filename>classMockBuilderTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testMockBuilderRequiresClassName</name>
      <anchorfile>classMockBuilderTest.html</anchorfile>
      <anchor>aa05cacd555c8b6bf35245f0b90b4a21c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testByDefaultMocksAllMethods</name>
      <anchorfile>classMockBuilderTest.html</anchorfile>
      <anchor>a6c8d3f3db9a69752d3d4853f75b2a752</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testMethodsToMockCanBeSpecified</name>
      <anchorfile>classMockBuilderTest.html</anchorfile>
      <anchor>ae3b0c22d28960cefacba945f5f7d207f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testMethodExceptionsToMockCanBeSpecified</name>
      <anchorfile>classMockBuilderTest.html</anchorfile>
      <anchor>ab5a8109164fcbb5875576a3e30f54e6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSetMethodsAllowsNonExistentMethodNames</name>
      <anchorfile>classMockBuilderTest.html</anchorfile>
      <anchor>a904db8eaf51b6cc171ed90f379720b27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testOnlyMethodsWithNonExistentMethodNames</name>
      <anchorfile>classMockBuilderTest.html</anchorfile>
      <anchor>a2f72d47a245f7e8c97f0319c87a49469</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testOnlyMethodsWithExistingMethodNames</name>
      <anchorfile>classMockBuilderTest.html</anchorfile>
      <anchor>ad4818c94ff7d09053c703516bfda3770</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testOnlyMethodsWithEmptyArray</name>
      <anchorfile>classMockBuilderTest.html</anchorfile>
      <anchor>aceaea80092ff40923b7574f392010695</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAddMethodsWithNonExistentMethodNames</name>
      <anchorfile>classMockBuilderTest.html</anchorfile>
      <anchor>a2deb43992ddee88abef73e71536cc596</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAddMethodsWithExistingMethodNames</name>
      <anchorfile>classMockBuilderTest.html</anchorfile>
      <anchor>aca5732a135d122e7f8c51702e8d7c3e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAddMethodsWithEmptyArray</name>
      <anchorfile>classMockBuilderTest.html</anchorfile>
      <anchor>ae756d61183aea52b93e028927622eaa2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testEmptyMethodExceptionsToMockCanBeSpecified</name>
      <anchorfile>classMockBuilderTest.html</anchorfile>
      <anchor>a12a6e22c041095a12b25ed25e0562a06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAbleToUseAddMethodsAfterOnlyMethods</name>
      <anchorfile>classMockBuilderTest.html</anchorfile>
      <anchor>aa39e2b463128914fe48288c1b012cd6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAbleToUseOnlyMethodsAfterAddMethods</name>
      <anchorfile>classMockBuilderTest.html</anchorfile>
      <anchor>a2189799cb39fc01965f8096881c65edc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAbleToUseSetMethodsAfterOnlyMethods</name>
      <anchorfile>classMockBuilderTest.html</anchorfile>
      <anchor>a531f5560c40c5dbbe1edd298c43fc8c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAbleToUseSetMethodsAfterAddMethods</name>
      <anchorfile>classMockBuilderTest.html</anchorfile>
      <anchor>a12b1faf3493905d89b860e9e5fbfdbcd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAbleToUseAddMethodsAfterSetMethods</name>
      <anchorfile>classMockBuilderTest.html</anchorfile>
      <anchor>a8367302a57790ef34766ce34a2a5334a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAbleToUseOnlyMethodsAfterSetMethods</name>
      <anchorfile>classMockBuilderTest.html</anchorfile>
      <anchor>a3d69f9c6907ac0e0ec1ad99bc33f9119</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAbleToUseAddMethodsAfterSetMethodsWithNull</name>
      <anchorfile>classMockBuilderTest.html</anchorfile>
      <anchor>abf09ef3445929ef2a5d7b22ca445dcbc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testByDefaultDoesNotPassArgumentsToTheConstructor</name>
      <anchorfile>classMockBuilderTest.html</anchorfile>
      <anchor>a5f5f74c61b16c03e4041368b0c8fd56b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testMockClassNameCanBeSpecified</name>
      <anchorfile>classMockBuilderTest.html</anchorfile>
      <anchor>a3bc7fc7a9c0f82f422d6d5657dcb9c4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstructorArgumentsCanBeSpecified</name>
      <anchorfile>classMockBuilderTest.html</anchorfile>
      <anchor>a6e9bb5bc60245ab0f2bc1530f35be752</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testOriginalConstructorCanBeDisabled</name>
      <anchorfile>classMockBuilderTest.html</anchorfile>
      <anchor>a222e60b09e506a2bfe33c9cbb82a38c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testByDefaultOriginalCloneIsPreserved</name>
      <anchorfile>classMockBuilderTest.html</anchorfile>
      <anchor>a7c29739f9412e7b6f730a5c906f00f5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testOriginalCloneCanBeDisabled</name>
      <anchorfile>classMockBuilderTest.html</anchorfile>
      <anchor>aa6f3d7724efe7ebf6723f01a0e4472d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testProvidesAFluentInterface</name>
      <anchorfile>classMockBuilderTest.html</anchorfile>
      <anchor>a75a442219cdc5fc7f17059cfd324749b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::MockObject::MockClass</name>
    <filename>classPHPUnit_1_1Framework_1_1MockObject_1_1MockClass.html</filename>
    <base>PHPUnit::Framework::MockObject::MockType</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1MockClass.html</anchorfile>
      <anchor>a2fb6a4222316ee4a5352188f864ed4b7</anchor>
      <arglist>(string $classCode, string $mockName, array $configurableMethods)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>generate</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1MockClass.html</anchorfile>
      <anchor>a5dd9c4cc553228f29ee800ba3111cb27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getClassCode</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1MockClass.html</anchorfile>
      <anchor>a1f3a53632e43ab117655aae4be1d523f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::MockObject::MockClassTest</name>
    <filename>classPHPUnit_1_1Framework_1_1MockObject_1_1MockClassTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testGenerateClassFromSource</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1MockClassTest.html</anchorfile>
      <anchor>a7d800abc7321ad642ffb1dabc4f7981a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGenerateReturnsNameOfGeneratedClass</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1MockClassTest.html</anchorfile>
      <anchor>a549a6644d7c85a45555d2316e878bb36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConfigurableMethodsAreInitalized</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1MockClassTest.html</anchorfile>
      <anchor>a6cceae2f78ee36e0902f1f359f666b44</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::TestFixture::MockObject::MockClassWithConfigurableMethods</name>
    <filename>classPHPUnit_1_1TestFixture_1_1MockObject_1_1MockClassWithConfigurableMethods.html</filename>
    <member kind="function" static="yes">
      <type>static</type>
      <name>getConfigurableMethods</name>
      <anchorfile>classPHPUnit_1_1TestFixture_1_1MockObject_1_1MockClassWithConfigurableMethods.html</anchorfile>
      <anchor>af0c1b77c27b99c2518e95894d43d5b8b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::MockObject::MockMethod</name>
    <filename>classPHPUnit_1_1Framework_1_1MockObject_1_1MockMethod.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1MockMethod.html</anchorfile>
      <anchor>a3ad252abbaaf7859e6616914d92c1785</anchor>
      <arglist>(string $className, string $methodName, bool $cloneArguments, string $modifier, string $argumentsForDeclaration, string $argumentsForCall, Type $returnType, string $reference, bool $callOriginalMethod, bool $static, ?string $deprecation, bool $allowsReturnNull)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getName</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1MockMethod.html</anchorfile>
      <anchor>a3b2d914215d3b9e4c37d28c0d38ab5a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>generateCode</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1MockMethod.html</anchorfile>
      <anchor>aa10ca4e32e8cec0a9033ca8fffc47de5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getReturnType</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1MockMethod.html</anchorfile>
      <anchor>a01a3e1dac802a76d37dd96ae66580a1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>fromReflection</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1MockMethod.html</anchorfile>
      <anchor>a0fddcb22c8c57d53d445713192ac5a30</anchor>
      <arglist>(\ReflectionMethod $method, bool $callOriginalMethod, bool $cloneArguments)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>fromName</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1MockMethod.html</anchorfile>
      <anchor>ab67be2a50233f0ecc43d846f086296cb</anchor>
      <arglist>(string $fullClassName, string $methodName, bool $cloneArguments)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::MockObject::MockMethodSet</name>
    <filename>classPHPUnit_1_1Framework_1_1MockObject_1_1MockMethodSet.html</filename>
    <member kind="function">
      <type></type>
      <name>addMethods</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1MockMethodSet.html</anchorfile>
      <anchor>aa96ca73f1f366ae92f64426fa4bfc7f4</anchor>
      <arglist>(MockMethod ... $methods)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>asArray</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1MockMethodSet.html</anchorfile>
      <anchor>a12f3b94562da516ec746ca2825980d9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>hasMethod</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1MockMethodSet.html</anchorfile>
      <anchor>a03591f70006efd43208ab95fc776bb28</anchor>
      <arglist>(string $methodName)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::MockObject::MockMethodTest</name>
    <filename>classPHPUnit_1_1Framework_1_1MockObject_1_1MockMethodTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testGetNameReturnsMethodName</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1MockMethodTest.html</anchorfile>
      <anchor>ae335748b79789ded7cc39c28af45326e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFailWhenReturnTypeIsParentButThereIsNoParentClass</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1MockMethodTest.html</anchorfile>
      <anchor>ae780ba7bd91a0eb06a0a18249180ad90</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>PHPUnit::Framework::MockObject::MockObject</name>
    <filename>interfacePHPUnit_1_1Framework_1_1MockObject_1_1MockObject.html</filename>
    <base>PHPUnit::Framework::MockObject::Stub::Stub</base>
    <member kind="function">
      <type></type>
      <name>__phpunit_setOriginalObject</name>
      <anchorfile>interfacePHPUnit_1_1Framework_1_1MockObject_1_1MockObject.html</anchorfile>
      <anchor>ae8fe88f38760e3d7b9d7bddd93bee063</anchor>
      <arglist>($originalObject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__phpunit_verify</name>
      <anchorfile>interfacePHPUnit_1_1Framework_1_1MockObject_1_1MockObject.html</anchorfile>
      <anchor>a3a1b4227393f04752aaf0c5970028b3a</anchor>
      <arglist>(bool $unsetInvocationMocker=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>expects</name>
      <anchorfile>interfacePHPUnit_1_1Framework_1_1MockObject_1_1MockObject.html</anchorfile>
      <anchor>a0832520b992ffb0753a78dca6047af79</anchor>
      <arglist>(InvocationOrder $invocationRule)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Comparator::MockObjectComparator</name>
    <filename>classSebastianBergmann_1_1Comparator_1_1MockObjectComparator.html</filename>
    <base>SebastianBergmann::Comparator::ObjectComparator</base>
    <member kind="function">
      <type></type>
      <name>accepts</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1MockObjectComparator.html</anchorfile>
      <anchor>a1dbb3083e1e758682b44124e889b8048</anchor>
      <arglist>($expected, $actual)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>toArray</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1MockObjectComparator.html</anchorfile>
      <anchor>a973d814bc1930c9f99e5c2d57ef0a944</anchor>
      <arglist>($object)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Comparator::MockObjectComparatorTest</name>
    <filename>classSebastianBergmann_1_1Comparator_1_1MockObjectComparatorTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>acceptsSucceedsProvider</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1MockObjectComparatorTest.html</anchorfile>
      <anchor>ad4eae6a2e5cdf88ed594a8fe11645258</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>acceptsFailsProvider</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1MockObjectComparatorTest.html</anchorfile>
      <anchor>a376568ca55943ae5359027ea1cf3ab22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>assertEqualsSucceedsProvider</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1MockObjectComparatorTest.html</anchorfile>
      <anchor>a52f40a531728ce74b0e1810ccfab2cee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>assertEqualsFailsProvider</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1MockObjectComparatorTest.html</anchorfile>
      <anchor>aaf1921134c9c701386afbd5b6c1adf07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAcceptsSucceeds</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1MockObjectComparatorTest.html</anchorfile>
      <anchor>a71efd025f6f211bf4bc5668a0b00cf69</anchor>
      <arglist>($expected, $actual)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAcceptsFails</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1MockObjectComparatorTest.html</anchorfile>
      <anchor>a3733544f9c7ca64017d5de50d1491a63</anchor>
      <arglist>($expected, $actual)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertEqualsSucceeds</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1MockObjectComparatorTest.html</anchorfile>
      <anchor>afc350d1a07d4dcb51ff75db6ec1a6fd7</anchor>
      <arglist>($expected, $actual, $delta=0.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertEqualsFails</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1MockObjectComparatorTest.html</anchorfile>
      <anchor>abc8fb80b6e2b1f713e6666ed8a58793b</anchor>
      <arglist>($expected, $actual, $message, $delta=0.0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1MockObjectComparatorTest.html</anchorfile>
      <anchor>a764c22a170e6b80d955cd17cf9bd574e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MockObjectTest</name>
    <filename>classMockObjectTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testMockedMethodIsNeverCalled</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>a71eacb6bf3c317eefd7c233bbd3cecfd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testMockedMethodIsNeverCalledWithParameter</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>a15ed5d8ba568b54871d64263de0cf965</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testMockedMethodIsNotCalledWhenExpectsAnyWithParameter</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>afd00b1d72bf687d004a35531f61d9d21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testMockedMethodIsNotCalledWhenMethodSpecifiedDirectlyWithParameter</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>af47cdf088937514d9840b9bc6be9e71d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testMockedMethodIsCalledAtLeastOnce</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>af32f682042a58fd31d9b6fb442cc00b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testMockedMethodIsCalledAtLeastOnce2</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>a1c2b481f583f0cc8b976653c5cfda7b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testMockedMethodIsCalledAtLeastTwice</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>ade0b6649f13ef647b6faec0b714f1f54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testMockedMethodIsCalledAtLeastTwice2</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>a3ab3c02f4cf079b81d63a9daf9d49a46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testMockedMethodIsCalledAtMostTwice</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>a3313a4fbd435a93398be122848d4a753</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testMockedMethodIsCalledAtMosttTwice2</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>a29bbd3797974f365a61a844b41ad0c94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testMockedMethodIsCalledOnce</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>a0359dfca6a5de0ce1dea487edc910e62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testMockedMethodIsCalledOnceWithParameter</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>a1ed2398d8d94dbe4ce38186432794f87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testMockedMethodIsCalledExactly</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>af2cb53d30f262d204f6646f0be96551c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStubbedException</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>ad36121b7d0d5c3843e842ed2a648892c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStubbedWillThrowException</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>a024ca0658c25b4b393031439b9dddd41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStubbedReturnValue</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>a82ea520645775678edf23cd5bbb41f04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStubbedReturnValueMap</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>aded6879e93ade507b46c235414d40674</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStubbedReturnArgument</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>a32f3ceccfdcd7fa54967f46eb7821a63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFunctionCallback</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>a3ffb825ac90841613d4ec7b0374d4f66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStubbedReturnSelf</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>a3f42c0ee54d5a12ee8d6e7d02dfc5458</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStubbedReturnOnConsecutiveCalls</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>af8fd8b78a003eff1ef0673036bbcbab1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStaticMethodCallback</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>a244a819e60eea6db9d67320b02478c91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testPublicMethodCallback</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>ac9ef5506364fac82f2e6ad7bb897990c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testMockClassOnlyGeneratedOnce</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>a274f91c875fca75981e7152be178baa0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testMockClassDifferentForPartialMocks</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>aa4c95ee932282774f13076fedc5c5a87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testMockClassStoreOverrulable</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>a14757975099784c4d6059345c9f8db10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetMockWithFixedClassNameCanProduceTheSameMockTwice</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>ae2c0765d1fd8a5417b756bcff955e435</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testOriginalConstructorSettingConsidered</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>a76465e24c9e7a6b0e32fd66da45978be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testOriginalCloneSettingConsidered</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>a0f7fa76833c1560f46da547b672061a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetMockForAbstractClass</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>aa93565fe2f7aea45394734f56ccda140</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetMockForTraversable</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>a7c87615f756989fc4ea3719ba464bed8</anchor>
      <arglist>($type)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetMockForTrait</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>aeb68183800c1a8965dbc2eb5f8837adb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testClonedMockObjectShouldStillEqualTheOriginal</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>a4a0e08361757bbc5ce11ac7499ec0dd6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testMockObjectsConstructedIndepentantlyShouldBeEqual</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>ab7b77bb494c65c933a270bafeca0ae4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testMockObjectsConstructedIndepentantlyShouldNotBeTheSame</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>ac4552f6e501a887167c11aba12873e26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testClonedMockObjectCanBeUsedInPlaceOfOriginalOne</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>acd6ee0b9042f7c36d505e49259915a65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testClonedMockObjectIsNotIdenticalToOriginalOne</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>aea8064c937ae6211ec57faf249bfa908</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testObjectMethodCallWithArgumentCloningEnabled</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>a12819d7cd52512ecba5a87876ac2b1d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testObjectMethodCallWithArgumentCloningDisabled</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>ac675f1fe79e58257b3a078a8ef2b7174</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testArgumentCloningOptionGeneratesUniqueMock</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>aab92c83aff8cdd96f7c90345efdb5ab7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testVerificationOfMethodNameFailsWithoutParameters</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>ab70f563908b7c166b22daefabb6097b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testVerificationOfMethodNameFailsWithParameters</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>a0136c09f40b8b8c0a1c5ae0c5b828900</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testVerificationOfMethodNameFailsWithWrongParameters</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>a95c240b87130de625c5c9e7006f869d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testVerificationOfNeverFailsWithEmptyParameters</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>aad5babfdfc257e0978640089c01fde63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testVerificationOfNeverFailsWithAnyParameters</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>aae50102526500ccd67bb17c50b4b3c89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testWithAnythingInsteadOfWithAnyParameters</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>a0bdfae767b7264ae3566187da4192ca3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testMockArgumentsPassedByReference</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>a5108bb6104597c143ed73f2387bf5f7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testMockArgumentsPassedByReference2</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>a093d2dd60b1e434212b1d0be8ebcabc4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testMockArgumentsPassedByReference3</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>a508d168d63e7b0e148c15d22a7d62b2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testMockArgumentsPassedByReference4</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>a6a7836ea97955ac7864d098a654eae2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCreateMockFromWsdl</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>a0949c188cf006e598035179aa74d046d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCreateNamespacedMockFromWsdl</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>a9f2ffe613b2dd97fcab42ce35d5e5d02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCreateTwoMocksOfOneWsdlFile</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>a3f8fcc84ab6643ca9ce4ba3f567a079a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCreateMockOfWsdlFileWithSpecialChars</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>a396d4cfccf14fffa33c4e86c405a477f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testInterfaceWithStaticMethodCanBeStubbed</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>aaec48f276c09f27e076cf32f0213b282</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testInvokingStubbedStaticMethodRaisesException</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>a606b6989a3e106a236251bcbc027c8af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStubForClassThatImplementsSerializableCanBeCreatedWithoutInvokingTheConstructor</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>a05e17ba4bd5c302cd42483fcb08f304c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetMockForClassWithSelfTypeHint</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>a75c42e2311747cf110d846348c372845</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>traversableProvider</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>aaf252c5f9556888d204bdbd3bfd93f22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testParameterCallbackConstraintOnlyEvaluatedOnce</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>ab7cc1e3a1cf96c819365e510e97fb73d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testDisableAutomaticReturnValueGeneration</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>ac8ba4483563bf2f4d47f79ad8e4e036a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTraitCanBeDoubled</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>acd45f9874cd3635d0c92151287e5f4eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTraitWithConstructorCanBeDoubled</name>
      <anchorfile>classMockObjectTest.html</anchorfile>
      <anchor>a627ebe068e74a047abaf71014985758f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MockRunner</name>
    <filename>classMockRunner.html</filename>
    <base>PHPUnit::Runner::BaseTestRunner</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>runFailed</name>
      <anchorfile>classMockRunner.html</anchorfile>
      <anchor>a5afd76ef721c28017eb32177c370c339</anchor>
      <arglist>($message)</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>MockTestInterface</name>
    <filename>interfaceMockTestInterface.html</filename>
    <member kind="function">
      <type></type>
      <name>returnAnything</name>
      <anchorfile>interfaceMockTestInterface.html</anchorfile>
      <anchor>a4d9770150663c685184e60b7c604f230</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>returnAnythingElse</name>
      <anchorfile>interfaceMockTestInterface.html</anchorfile>
      <anchor>a2fbb0c5ef29906aa9f6e3f950ae2af50</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::MockObject::MockTrait</name>
    <filename>classPHPUnit_1_1Framework_1_1MockObject_1_1MockTrait.html</filename>
    <base>PHPUnit::Framework::MockObject::MockType</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1MockTrait.html</anchorfile>
      <anchor>a0898a30278d8502fa84392eee1b05dc8</anchor>
      <arglist>(string $classCode, string $mockName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>generate</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1MockTrait.html</anchorfile>
      <anchor>a2f6c99873387ab92ef9d527783114468</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getClassCode</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1MockTrait.html</anchorfile>
      <anchor>a94e342ed5bc393620a251d2d4767f6b7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::MockObject::MockTraitTest</name>
    <filename>classPHPUnit_1_1Framework_1_1MockObject_1_1MockTraitTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testGenerateClassFromSource</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1MockTraitTest.html</anchorfile>
      <anchor>a184bf0df6e3be50d3db7faba37910847</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGenerateReturnsNameOfGeneratedClass</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1MockTraitTest.html</anchorfile>
      <anchor>a29cade70ab1064b8c31016e739acd787</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>PHPUnit::Framework::MockObject::MockType</name>
    <filename>interfacePHPUnit_1_1Framework_1_1MockObject_1_1MockType.html</filename>
    <member kind="function">
      <type></type>
      <name>generate</name>
      <anchorfile>interfacePHPUnit_1_1Framework_1_1MockObject_1_1MockType.html</anchorfile>
      <anchor>a097212a29db7fefc16fb3ca1c2f653b5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ModifiedConstructorTestCase</name>
    <filename>classModifiedConstructorTestCase.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classModifiedConstructorTestCase.html</anchorfile>
      <anchor>a3139517109998fcde6cae1ced678329e</anchor>
      <arglist>(?string $name=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCase</name>
      <anchorfile>classModifiedConstructorTestCase.html</anchorfile>
      <anchor>a193ae8d68eebc399a8b40fdcc250575a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::ModifyBackTraceSafeTest</name>
    <filename>classphpDocumentor_1_1Reflection_1_1ModifyBackTraceSafeTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testBackTraceModificationDoesNotImpactFunctionArguments</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1ModifyBackTraceSafeTest.html</anchorfile>
      <anchor>a532e565458e33cb18376f8303f503033</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Mpdf::Mpdf</name>
    <filename>classMpdf_1_1Mpdf.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a87dbce4db55fbfac7bf04ad969637182</anchor>
      <arglist>(array $config=[])</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cleanup</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aaac01d1bbf25cc7d37e91874e6875dc5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setLogger</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a83c0040a2a3c3c5745f66b7566051276</anchor>
      <arglist>(LoggerInterface $logger)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_setPageSize</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aedd736839b2efc2d21c38170d084d5f9</anchor>
      <arglist>($format, &amp;$orientation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RestrictUnicodeFonts</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ace4dd4625b830818f884f72d938eb442</anchor>
      <arglist>($res)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setMBencoding</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a6cf0e94bac0bd944e0be68b7d827bc33</anchor>
      <arglist>($enc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetMargins</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a0222166efc68310d8e476771be93a761</anchor>
      <arglist>($left, $right, $top)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ResetMargins</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a9a78cfbe15261549b6cd915ebbbd45b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetLeftMargin</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a1a3ec597e14d2277f5c1d734e82cb446</anchor>
      <arglist>($margin)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetTopMargin</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a553fda407e845a9c994998a7bf3d1e07</anchor>
      <arglist>($margin)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetRightMargin</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a4acb742875611f254cc3f72746a2a2f9</anchor>
      <arglist>($margin)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetAutoPageBreak</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ad52a3022ffb9fec1ef5a933c55f0b34c</anchor>
      <arglist>($auto, $margin=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetDisplayMode</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a1c65f99be47c064c263dadee22c45312</anchor>
      <arglist>($zoom, $layout=&apos;continuous&apos;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetCompression</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a6c14c3c5b8ac05d95f6bcd163971d205</anchor>
      <arglist>($compress)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetTitle</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a847623b642580d7f2f4082df21b637af</anchor>
      <arglist>($title)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetSubject</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a33c077f846f8b73a79717a40c833c188</anchor>
      <arglist>($subject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetAuthor</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a7b9c695e5a785714a8c701f0cb8b5783</anchor>
      <arglist>($author)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetKeywords</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a2fce785419b626c9e82b42ad75e2182f</anchor>
      <arglist>($keywords)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetCreator</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a7114af4ffd0e17fd2769346905bb7e7d</anchor>
      <arglist>($creator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AddCustomProperty</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ae3766ef618ff55ae25140b7e4cf08c27</anchor>
      <arglist>($key, $value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetAssociatedFiles</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a2efc473fee9ae24ecf02b8055e497c9b</anchor>
      <arglist>(array $files)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetAdditionalXmpRdf</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a08c45215e1479128e2da756e5800568b</anchor>
      <arglist>($s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetAnchor2Bookmark</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>af176463b28603d0eb3142b0ebc8b65ce</anchor>
      <arglist>($x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AliasNbPages</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a26f9592ae8dd5163f80b422a27a3d9c7</anchor>
      <arglist>($alias=&apos;{nb}&apos;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AliasNbPageGroups</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a572ff2b9813b172b80e87777b5a78294</anchor>
      <arglist>($alias=&apos;{nbpg}&apos;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetAlpha</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a0697d8a909871ad4928bc2e8aaf5326e</anchor>
      <arglist>($alpha, $bm=&apos;Normal&apos;, $return=false, $mode=&apos;B&apos;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AddExtGState</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a538da23917f7174e15a75937533a710d</anchor>
      <arglist>($parms)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetVisibility</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ab3914e7df48c699cd66a75f188b6ae07</anchor>
      <arglist>($v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Open</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a2e7f959386449b9731e6210538ede002</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Close</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a8a2cf7e208527b20a8138870c0861433</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_resizeBackgroundImage</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a76f3adeb5b1abbcc2c33d691dfd1097b</anchor>
      <arglist>($imw, $imh, $cw, $ch, $resize, $repx, $repy, $pba=[], $size=[])</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetBackground</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aaa54c3b8453df19f275424c692d0ca59</anchor>
      <arglist>(&amp;$properties, &amp;$maxwidth)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrintBodyBackgrounds</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a91b9775dfa357a1d4bf34e8e828435a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_setClippingPath</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a304080823922e32d90c52900d800e85f</anchor>
      <arglist>($clx, $cly, $clw, $clh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrintPageBackgrounds</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aa5bb7188448218319711e848d780d968</anchor>
      <arglist>($adjustmenty=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrintTableBackgrounds</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a9380dbf43832361bbcba6ffb3ebd09c1</anchor>
      <arglist>($adjustmenty=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BeginLayer</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aaef30051684431616a3408b9d7e5befb</anchor>
      <arglist>($id)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EndLayer</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a65301c08d52adcfcf19e7ed0ef89549f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AddPageByArray</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a07d5fd3ee4cb273f8ec12c80a34a5e64</anchor>
      <arglist>($a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_preForcedPagebreak</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>abbc55de854a8ad9a6510a9a5a3ffa70d</anchor>
      <arglist>($pagebreaktype)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_postForcedPagebreak</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a70a6b4ceec619a0473b2daa95d482308</anchor>
      <arglist>($pagebreaktype, $startpage, $save_blk, $save_blklvl)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AddPage</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aeebe81df96971b92605448b461365a3d</anchor>
      <arglist>( $orientation=&apos;&apos;, $condition=&apos;&apos;, $resetpagenum=&apos;&apos;, $pagenumstyle=&apos;&apos;, $suppress=&apos;&apos;, $mgl=&apos;&apos;, $mgr=&apos;&apos;, $mgt=&apos;&apos;, $mgb=&apos;&apos;, $mgh=&apos;&apos;, $mgf=&apos;&apos;, $ohname=&apos;&apos;, $ehname=&apos;&apos;, $ofname=&apos;&apos;, $efname=&apos;&apos;, $ohvalue=0, $ehvalue=0, $ofvalue=0, $efvalue=0, $pagesel=&apos;&apos;, $newformat=&apos;&apos;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PageNo</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a99ff1d9d5562d4dcd3f36216292cb612</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AddSpotColorsFromFile</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aff8c0d6d9324a9e14e301d5ec71420b4</anchor>
      <arglist>($file)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AddSpotColor</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a8e1ac69d95e54be045ec3969c9b7cd93</anchor>
      <arglist>($name, $c, $m, $y, $k)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetColor</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aaf7a08ac164266dabf7a4eff6cb248b2</anchor>
      <arglist>($col, $type=&apos;&apos;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetDColor</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a1837f987ec895812bc445470e1d4aebd</anchor>
      <arglist>($col, $return=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetFColor</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a4935e04988a83d3f8345f8ceaeffa9db</anchor>
      <arglist>($col, $return=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetTColor</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a72c1796ba5faf767f48a6b5c12543728</anchor>
      <arglist>($col, $return=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetDrawColor</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a19c1ddb2a09cd68a43f5fddecaaf8a1f</anchor>
      <arglist>($r, $g=-1, $b=-1, $col4=-1, $return=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetFillColor</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aa846d11830b684c58de772cc70c49004</anchor>
      <arglist>($r, $g=-1, $b=-1, $col4=-1, $return=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetTextColor</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a902eba24305fef530b08e3b2a639ea09</anchor>
      <arglist>($r, $g=-1, $b=-1, $col4=-1, $return=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_getCharWidth</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aaa3598b2daa79c0e6bee3c472e210091</anchor>
      <arglist>(&amp;$cw, $u, $isdef=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_charDefined</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ada5979c5bca726b93f9f1a2f2cd9771e</anchor>
      <arglist>(&amp;$cw, $u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GetCharWidthCore</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ac1366da6e4e6e4a95308e03e2de82c49</anchor>
      <arglist>($c)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GetCharWidthNonCore</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a2760d7ec04bdb575a4c55bc680670113</anchor>
      <arglist>($c, $addSubset=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GetCharWidth</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a447b7920926c7d13f3179a256e52f713</anchor>
      <arglist>($c, $addSubset=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GetStringWidth</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ae6a05ccf6fd620c22cc29b0f58026bde</anchor>
      <arglist>($s, $addSubset=true, $OTLdata=false, $textvar=0, $includeKashida=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetLineWidth</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a00fcc1fcfb419824fd13a08c4821cd83</anchor>
      <arglist>($width)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Line</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a219a318de2dd986fffc284be5e387a52</anchor>
      <arglist>($x1, $y1, $x2, $y2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Arrow</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a8657fb5535231e4e3fb0107da6c48819</anchor>
      <arglist>($x1, $y1, $x2, $y2, $headsize=3, $fill=&apos;B&apos;, $angle=25)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rect</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a31cca943aa584134431113affb5def61</anchor>
      <arglist>($x, $y, $w, $h, $style=&apos;&apos;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AddFontDirectory</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a14f62a870e9546d7552a35a1a6680127</anchor>
      <arglist>($directory)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AddFont</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aeab365655a6616ddc6c588294bab312d</anchor>
      <arglist>($family, $style=&apos;&apos;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetFont</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a7eb09fa17ba0f551c63200462de92127</anchor>
      <arglist>($family, $style=&apos;&apos;, $size=0, $write=true, $forcewrite=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetFontSize</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a73cf782a1be201220c7639b21671cca2</anchor>
      <arglist>($size, $write=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AddLink</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a5ff9a65955991c0236b9632c149b7d51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetLink</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>adbae1ff582068b99b7c62b7ff61738a2</anchor>
      <arglist>($link, $y=0, $page=-1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Link</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a5fdc022bd56e852f839cd32b5f7df376</anchor>
      <arglist>($x, $y, $w, $h, $link)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Text</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aef14a717589f1f949ed7a161b3f30605</anchor>
      <arglist>($x, $y, $txt, $OTLdata=[], $textvar=0, $aixextra=&apos;&apos;, $coordsys=&apos;&apos;, $return=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WriteText</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aa6f95f184e293fce4d48cc8ac460cc6f</anchor>
      <arglist>($x, $y, $txt)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WriteCell</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>abc553fafa8521d2c391fe6721e006e14</anchor>
      <arglist>($w, $h=0, $txt=&apos;&apos;, $border=0, $ln=0, $align=&apos;&apos;, $fill=0, $link=&apos;&apos;, $currentx=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ResetSpacing</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ac18c30e41cacf49a84082143afd78d66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetSpacing</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>abd0c6a163ed2d40e52157ace847c1b14</anchor>
      <arglist>($cs, $ws)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GetJspacing</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a98d8a2bdb83f4110f82ea950aba0fb01</anchor>
      <arglist>($nc, $ns, $w, $inclCursive, &amp;$cOTLdata)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cell</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a99da4c1c2dcaff538697a5b44f41cd82</anchor>
      <arglist>($w, $h=0, $txt=&apos;&apos;, $border=0, $ln=0, $align=&apos;&apos;, $fill=0, $link=&apos;&apos;, $currentx=0, $lcpaddingL=0, $lcpaddingR=0, $valign=&apos;M&apos;, $spanfill=0, $exactWidth=false, $OTLdata=false, $textvar=0, $lineBox=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>applyGPOSpdf</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ae25921d866ef06382998b94af04d35eb</anchor>
      <arglist>($txt, $aix, $x, $y, $OTLdata, $textvar=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_kern</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aabdaedf0070aa6d9dcbc534d65747e48</anchor>
      <arglist>($txt, $mode, $aix, $x, $y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiCell</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ab31fd307dbba0a3359fddad5e5403fd2</anchor>
      <arglist>($w, $h, $txt, $border=0, $align=&apos;&apos;, $fill=0, $link=&apos;&apos;, $directionality=&apos;ltr&apos;, $encoded=false, $OTLdata=false, $maxrows=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Write</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a73a0714a9b9d3de49d29919a041b0072</anchor>
      <arglist>($h, $txt, $currentx=0, $link=&apos;&apos;, $directionality=&apos;ltr&apos;, $align=&apos;&apos;, $fill=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>saveInlineProperties</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a6e2fef853ddae061063668de7d5adebf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>restoreInlineProperties</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>abe8dd044324a03783e4be39970495599</anchor>
      <arglist>(&amp;$saved)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GetFirstBlockFill</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a38f7142d03635c99b218fba4d7208a2e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>saveFont</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aba2f18e8352534a292476c2821a87f75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>restoreFont</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a688c7202a8e218ffe0c3d50838680bea</anchor>
      <arglist>(&amp;$saved, $write=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>newFlowingBlock</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>acb83b8e44b8ede135195094cc89bc4b2</anchor>
      <arglist>($w, $h, $a=&apos;&apos;, $is_table=false, $blockstate=0, $newblock=true, $blockdir=&apos;ltr&apos;, $table_draft=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>finishFlowingBlock</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a1b8058a2f08e59ef43c15e7950c3b487</anchor>
      <arglist>($endofblock=false, $next=&apos;&apos;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>printobjectbuffer</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a4b45034f7ceae7726ae986f6376eb575</anchor>
      <arglist>($is_table=false, $blockdir=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_printListBullet</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a0d5b68e560b93da21e052f24fda337b5</anchor>
      <arglist>($x, $y, $size, $type, $color)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_moveToPrevChar</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ac050be9a513d39071858e2cd9211e35e</anchor>
      <arglist>(&amp;$contentctr, &amp;$charctr, $content)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_getPrevChar</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a4aa6b002e2f9f4b3d67d09a98bfb1083</anchor>
      <arglist>($contentctr, $charctr, $content)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WriteFlowingBlock</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a202160c9ff77e215ddfcf9ca9b15ad42</anchor>
      <arglist>($s, $sOTLdata)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_advanceFloatMargins</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a2a280affa556e5600ea9db751a865146</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_SetTextRendering</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a2c8658f522e92fdac1a06903e66e79ec</anchor>
      <arglist>($mode)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetTextOutline</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a1712df8d5f6f49eac2f3dda87f8994eb</anchor>
      <arglist>($params=[])</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Image</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a398a84a3322782dda1490d15ade7843c</anchor>
      <arglist>($file, $x, $y, $w=0, $h=0, $type=&apos;&apos;, $link=&apos;&apos;, $paint=true, $constrain=true, $watermark=false, $shownoimg=true, $allowvector=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_getObjAttr</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a814c999cfd1799f0f705c83ca9650cfb</anchor>
      <arglist>($t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>inlineObject</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a1d4dde2ba34f960a49cfe47c1a5c9030</anchor>
      <arglist>($type, $x, $y, $objattr, $Lmargin, $widthUsed, $maxWidth, $lineHeight, $paint=false, $is_table=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetLineJoin</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a5e7288944c400d8c272f830317ea293e</anchor>
      <arglist>($mode=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetLineCap</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a265610bbe506f51b6d2644e99ac568cd</anchor>
      <arglist>($mode=2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetDash</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ada819eaf1458543de60c511e1fd80615</anchor>
      <arglist>($black=false, $white=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetDisplayPreferences</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a50274123bf5b178231629086b2b17661</anchor>
      <arglist>($preferences)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ln</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aadc0ae0f49d1de5fd7df9fb1f3023c85</anchor>
      <arglist>($h=&apos;&apos;, $collapsible=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DivLn</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>af789fce26b4460902a01928bf58b68da</anchor>
      <arglist>($h, $level=-3, $move_y=true, $collapsible=false, $state=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetX</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aecd1576cf7db9c916513e8dd990c7886</anchor>
      <arglist>($x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetY</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a2bd437cb4170ca9ae35bce40af40136a</anchor>
      <arglist>($y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetXY</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a3c1c6fe22caec7b9fa851b72fe24c6e7</anchor>
      <arglist>($x, $y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Output</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a0fcf1d209bb289dd58c924baf057f471</anchor>
      <arglist>($name=&apos;&apos;, $dest=&apos;&apos;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_dochecks</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a6d42fa446177a4eee2a1e733bcc5d06e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_puthtmlheaders</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ab050b9d9c4fb4dcf36b5d66ce940423e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Annotation</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a9a7cc7bd01d5e9c70678dacf6329c302</anchor>
      <arglist>($text, $x=0, $y=0, $icon=&apos;Note&apos;, $author=&apos;&apos;, $subject=&apos;&apos;, $opacity=0, $colarray=false, $popup=&apos;&apos;, $file=&apos;&apos;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_enddoc</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>af241a7d77067333ebcd31ae1ec6d32c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_beginpage</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a1ffe313627593cdd545950bd298edc04</anchor>
      <arglist>( $orientation, $mgl=&apos;&apos;, $mgr=&apos;&apos;, $mgt=&apos;&apos;, $mgb=&apos;&apos;, $mgh=&apos;&apos;, $mgf=&apos;&apos;, $ohname=&apos;&apos;, $ehname=&apos;&apos;, $ofname=&apos;&apos;, $efname=&apos;&apos;, $ohvalue=0, $ehvalue=0, $ofvalue=0, $efvalue=0, $pagesel=&apos;&apos;, $newformat=&apos;&apos;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_setAutoHeaderHeight</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a1f502a677c28562a9452d6709dbcee03</anchor>
      <arglist>(&amp;$htmlh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_setAutoFooterHeight</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a360abfd7e5bbb4292f95a9804649075d</anchor>
      <arglist>(&amp;$htmlf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_endpage</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a750cfb847652639b4920549a29656dee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_dounderline</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aac5dbc63211cf150c54145957b74ae89</anchor>
      <arglist>($x, $y, $txt, $OTLdata=false, $textvar=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>watermark</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aa65013a4ecd2d3630c20f45a0e31f06b</anchor>
      <arglist>($texte, $angle=45, $fontsize=96, $alpha=0.2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>watermarkImg</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a28f12c9fd80cb5eebf9a95b2c9a1a025</anchor>
      <arglist>($src, $alpha=0.2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rotate</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a2c1be2bb5bda14f1e1aafdca299ce20b</anchor>
      <arglist>($angle, $x=-1, $y=-1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CircularText</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a45971cf24289aae57271925136cb4015</anchor>
      <arglist>($x, $y, $r, $text, $align=&apos;top&apos;, $fontfamily=&apos;&apos;, $fontsize=0, $fontstyle=&apos;&apos;, $kerning=120, $fontwidth=100, $divider=&apos;&apos;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RoundedRect</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ae02a6e9a8504bab662a2e500da09ffad</anchor>
      <arglist>($x, $y, $w, $h, $r, $style=&apos;&apos;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_Arc</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a872a0d103644004836de4f70c40b9a65</anchor>
      <arglist>($x1, $y1, $x2, $y2, $x3, $y3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Shaded_box</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a0c2aa4398ffda853202752103d9a0788</anchor>
      <arglist>($text, $font=&apos;&apos;, $fontstyle=&apos;B&apos;, $szfont=&apos;&apos;, $width=&apos;70%&apos;, $style=&apos;DF&apos;, $radius=2.5, $fill=&apos;#FFFFFF&apos;, $color=&apos;#000000&apos;, $pad=2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UTF8StringToArray</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aab646d5c02fbebe375ada99e06888062</anchor>
      <arglist>($str, $addSubset=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UTF8toSubset</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a878443df476bb45db7b6fa4d11b42eff</anchor>
      <arglist>($str)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AddCIDFont</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a3ba6643c92fafbd92776e00ee76758aa</anchor>
      <arglist>($family, $style, $name, &amp;$cw, $CMap, $registry, $desc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AddCJKFont</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a671b7d8adb9dddce1f60fdf36ab39e5c</anchor>
      <arglist>($family)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AddBig5Font</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ae6e01ca27f772bc99d275e378cb03899</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AddGBFont</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aee50070f8fea7bd6f40fa0984eaf0dbc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AddSJISFont</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a3b72b791cc05ad757ef7f0f01033bca3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AddUHCFont</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a16302462c045f503e53464fda507fe89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetDefaultFont</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ac89ecd10658d27eb856dbbf1daed7a3f</anchor>
      <arglist>($font)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetDefaultFontSize</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>abc01fba7c37b945d75230004e528e920</anchor>
      <arglist>($fontsize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetDefaultBodyCSS</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aacd24d6f569ea4398d2b25f7d0a311c8</anchor>
      <arglist>($prop, $val)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetDirectionality</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ab45878d48a6808cadf51bd803bdcbc6f</anchor>
      <arglist>($dir=&apos;ltr&apos;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fixLineheight</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a867fa024cc40fd5d1e40bee93795a901</anchor>
      <arglist>($v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_getNormalLineheight</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a308792986e140c5bb57c18681c3424dc</anchor>
      <arglist>($desc=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetLineHeight</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a9e4054b5275ea08867fac094db17b72f</anchor>
      <arglist>($FontPt=&apos;&apos;, $lh=&apos;&apos;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_computeLineheight</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a79dd66865ea60be4c6d2a5d99c0419d5</anchor>
      <arglist>($lh, $fs=&apos;&apos;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_setLineYpos</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a76a182147a4aa96f24d3d0242cfcc96e</anchor>
      <arglist>(&amp;$fontsize, &amp;$fontdesc, &amp;$CSSlineheight, $blockYpos=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_setInlineBlockHeights</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a842e582ac65de571ecbeab1e1c2809e1</anchor>
      <arglist>(&amp;$lineBox, &amp;$stackHeight, &amp;$content, &amp;$font, $is_table)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetBasePath</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a65ea6f4823f058fcb198f3256db483a1</anchor>
      <arglist>($str=&apos;&apos;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GetFullPath</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>afee0434d1011c28958b912d2c1c13773</anchor>
      <arglist>(&amp;$path, $basepath=&apos;&apos;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>docPageNum</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a00f1469f2f30baf0fdcf50786dee729a</anchor>
      <arglist>($num=0, $extras=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>docPageNumTotal</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a64d03e67821be99659feb342dd7a16de</anchor>
      <arglist>($num=0, $extras=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_getStyledNumber</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ad764d1897c05065efc3d99534f6e398c</anchor>
      <arglist>($ppgno, $type, $listmarker=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>docPageSettings</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a659ab7066fe14260343675d6c88c952e</anchor>
      <arglist>($num=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RestartDocTemplate</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ab1896dc7e5048f7d59f1b9dc3762836c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Header</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a61a4992b69da76d4cf45af4012914d1d</anchor>
      <arglist>($content=&apos;&apos;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TableHeaderFooter</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ad116d3f6fbeacbf793fc29c982004ba0</anchor>
      <arglist>($content=&apos;&apos;, $tablestartpage=&apos;&apos;, $tablestartcolumn=&apos;&apos;, $horf=&apos;H&apos;, $level=0, $firstSpread=true, $finalSpread=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetHTMLHeader</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a11875d313a11c489927ce2068295c05d</anchor>
      <arglist>($header=&apos;&apos;, $OE=&apos;&apos;, $write=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetHTMLFooter</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ad488ad33edba76348d1de2072f4d955e</anchor>
      <arglist>($footer=&apos;&apos;, $OE=&apos;&apos;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_getHtmlHeight</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>af11b5fadaa6f7778bd0591c37371c0e5</anchor>
      <arglist>($html)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>writeHTMLHeaders</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a542cd4eef1d14824fb83119dc1e10cca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>writeHTMLFooters</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ada52d5feab0e62ab5193923f88f6a817</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_shareHeaderFooterWidth</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a14f519f3d558331ef0358a447fbad4fa</anchor>
      <arglist>($cl, $cc, $cr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_createHTMLheaderFooter</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>acc165182157feea703b4f96232cfa8c3</anchor>
      <arglist>($arr, $hf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DefHeaderByName</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a79ec7836cb4f343ffe96c34bdbf29f92</anchor>
      <arglist>($name, $arr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DefFooterByName</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a214519e76b830d31a568deb1b033d05c</anchor>
      <arglist>($name, $arr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetHeaderByName</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ac866afe22573f392f89f6bc1db553a07</anchor>
      <arglist>($name, $side=&apos;O&apos;, $write=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetFooterByName</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a8961b921c1b2575f61c7877ae505a3b6</anchor>
      <arglist>($name, $side=&apos;O&apos;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DefHTMLHeaderByName</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a7d0d57abdfc85285b7289116c3445ec7</anchor>
      <arglist>($name, $html)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DefHTMLFooterByName</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a44059e1aed5b6692ab8442acac2bcd4b</anchor>
      <arglist>($name, $html)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetHTMLHeaderByName</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a8834657bc72cdfa846af63f6029f40a2</anchor>
      <arglist>($name, $side=&apos;O&apos;, $write=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetHTMLFooterByName</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>afc077f8123b42ac1d5a69bfc179e77d3</anchor>
      <arglist>($name, $side=&apos;O&apos;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetHeader</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a5f324bb84763ae3166352cc555dfce07</anchor>
      <arglist>($Harray=[], $side=&apos;&apos;, $write=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetFooter</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a6f4b3729bcbeb2b72917b41cf1b99cb2</anchor>
      <arglist>($Farray=[], $side=&apos;&apos;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetWatermarkText</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aa45a3ff2dec20101131aaae4c74cc84c</anchor>
      <arglist>($txt=&apos;&apos;, $alpha=-1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetWatermarkImage</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a96125c0936d5c171faebaa2728b77914</anchor>
      <arglist>($src, $alpha=-1, $size=&apos;D&apos;, $pos=&apos;F&apos;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Footer</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>acff1656521214a1ef506361a1ac7cbc0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WriteHTML</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a1168be8f62535980687c06a73a92131e</anchor>
      <arglist>($html, $mode=HTMLParserMode::DEFAULT_MODE, $init=true, $close=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WriteFixedPosHTML</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aa348232b8ffde526ebd089ea5b14b037</anchor>
      <arglist>($html, $x, $y, $w, $h, $overflow=&apos;visible&apos;, $bounding=[])</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>initialiseBlock</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ab73984af927765d02003c504989429d1</anchor>
      <arglist>(&amp;$blk)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>border_details</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ab9c87032f4cec588f03d8696f6bc76c5</anchor>
      <arglist>($bd)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_borderPadding</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a0df757227bf2cf8b6c0e2b59cddc8e85</anchor>
      <arglist>($a, $b, &amp;$px, &amp;$py)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetPagedMediaCSS</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a2ed783c6e3e24c750b55e955a59e1136</anchor>
      <arglist>($name, $first, $oddEven)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClearFloats</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a44ff425c1adadc1113ff09553a54f88c</anchor>
      <arglist>($clear, $blklvl=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GetFloatDivInfo</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a595f6fdc046368c9b5b9b134664e2b8d</anchor>
      <arglist>($blklvl=0, $clear=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_setListMarker</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a951a5cd778f6acac6116414fc45628ef</anchor>
      <arglist>($listitemtype, $listitemimage, $listitemposition)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_getListMarkerWidth</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a4196f17af055f20c06c15f69551fe57b</anchor>
      <arglist>(&amp;$currblk, &amp;$a, &amp;$i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_saveTextBuffer</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a49f4ba45d2f3411b69a13fbb25d7063f</anchor>
      <arglist>($t, $link=&apos;&apos;, $intlink=&apos;&apos;, $return=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_saveCellTextBuffer</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>af779c9cce54eac427f3994b9ddc234f3</anchor>
      <arglist>($t, $link=&apos;&apos;, $intlink=&apos;&apos;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>printbuffer</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a1db720507c633b80479565f5b86a1ff6</anchor>
      <arglist>($arrayaux, $blockstate=0, $is_table=false, $table_draft=false, $cell_dir=&apos;&apos;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_setDashBorder</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ac65dce5c033c6afa627b3269d87e271c</anchor>
      <arglist>($style, $div, $cp, $side)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_setBorderLine</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>af061da26baadf696af0c05b8682b5ed1</anchor>
      <arglist>($b, $k=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PaintDivBB</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a04fd1b0c80b10d04422726236c4fe5f3</anchor>
      <arglist>($divider=&apos;&apos;, $blockstate=0, $blvl=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_EllipseArc</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>afb3ecad5a0ed5564c847917efd8681de</anchor>
      <arglist>($x0, $y0, $rx, $ry, $seg=1, $part=false, $start=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PaintDivLnBorder</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a837009e816c3c3cfc5e6e709eaa1c52a</anchor>
      <arglist>($state=0, $blvl=0, $h=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PaintImgBorder</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a4e459f9aa43d6a9c6b1844ee2bc67bc0</anchor>
      <arglist>($objattr, $is_table)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Reset</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a0bea42a99490a00bd649eedb593b4a56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReadMetaTags</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ad42481ca8f3f333ec8a5ee02f67ea7ba</anchor>
      <arglist>($html)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReadCharset</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aabb68d263a1d18c2578857a9a7cc4715</anchor>
      <arglist>($html)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setCSS</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ae43c1a51c0b580fceb8697855aada750</anchor>
      <arglist>($arrayaux, $type=&apos;&apos;, $tag=&apos;&apos;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetStyle</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a929331a72c33ba41d82328bb77e7d997</anchor>
      <arglist>($tag, $enable)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetStylesArray</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a8581a8f6fa178a4f05f544ec389849aa</anchor>
      <arglist>($arr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetStyles</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aaffbfd1e8e30a735abead7e78b6327fa</anchor>
      <arglist>($str)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ResetStyles</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>af556291f3a9c5236b4f4167b47d5cbbc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DisableTags</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a0f3042a30d3236c73d4172bebcf902b3</anchor>
      <arglist>($str=&apos;&apos;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TableCheckMinWidth</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ae972c6005db2bd3d2ce8a778d8f03c45</anchor>
      <arglist>($maxwidth, $forcewrap=0, $textbuffer=[], $checkletter=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>shrinkTable</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a5dc7b244b7dcf733bc860b388aad4a67</anchor>
      <arglist>(&amp;$table, $k)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>read_short</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a51f97cb8c2d5b333a5457ab4c1c10d4c</anchor>
      <arglist>(&amp;$fh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_packCellBorder</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a7ebe7ae790f5e229f069678ca174ea47</anchor>
      <arglist>($cell)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_getBorderWidths</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ab2aa7463f50cb6276da6c3cd018ab1b5</anchor>
      <arglist>($bindata)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_unpackCellBorder</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a44f85913d46faec053307985a0b49644</anchor>
      <arglist>($bindata)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_tableColumnWidth</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a91dbddb313565c7fc36ab5651734e416</anchor>
      <arglist>(&amp;$table, $firstpass=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_tableWidth</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a6af8f12b929c7a2e315ac34548427861</anchor>
      <arglist>(&amp;$table)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_tableHeight</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a24591f597dfe659f45e4488267e86252</anchor>
      <arglist>(&amp;$table)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_tableGetWidth</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a3ce02ac3a2ab9cf03643569057ae471c</anchor>
      <arglist>(&amp;$table, $i, $j)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_splitTableGetWidth</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ae168bcbcc7f97f79f2eb60c8b3350bb1</anchor>
      <arglist>(&amp;$table, $i, $j)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_tableGetHeight</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>abf3a87079c0f03f598b379c4ef829020</anchor>
      <arglist>(&amp;$table, $i, $j)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_tableGetMaxRowHeight</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a5b2e7ded9c1fddec127cfc386e8706dc</anchor>
      <arglist>($table, $row)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_tableRect</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a901f8a326bc5b3b750940632bdb1f1b0</anchor>
      <arglist>($x, $y, $w, $h, $bord=-1, $details=[], $buffer=false, $bSeparate=false, $cort=&apos;cell&apos;, $tablecorner=&apos;&apos;, $bsv=0, $bsh=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setBorder</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aa60b0ad20803713e6a0237de853aeed3</anchor>
      <arglist>(&amp;$var, $flag, $set=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>issetBorder</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a391d4fb0603acfb8414dd07a1641465c</anchor>
      <arglist>($var, $flag)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_table2cellBorder</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a05666c9e07faa0795270f0f0ea56aa87</anchor>
      <arglist>(&amp;$tableb, &amp;$cbdb, &amp;$cellb, $bval)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_fixTableBorders</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>afb96a1867d5a90e0b1e9fa8242444577</anchor>
      <arglist>(&amp;$table)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_reverseTableDir</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a69cf5360d82a1869c0620d1497847604</anchor>
      <arglist>(&amp;$table)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_tableWrite</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ab2929cd9aa04aea3a01fbe821dd62e9b</anchor>
      <arglist>(&amp;$table, $split=false, $startrow=0, $startcol=0, $splitpg=0, $rety=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_putextgstates</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a8243ebfb04933f7a3aed8cf6064e8efa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetProtection</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a13b89de3fe9f21b5d483df8bd2528bc3</anchor>
      <arglist>($permissions=[], $user_pass=&apos;&apos;, $owner_pass=null, $length=40)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Bookmark</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a658227d61ac286df6f5f53caac30d4d4</anchor>
      <arglist>($txt, $level=0, $y=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TOC</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a572ec5f07d50b4dff74b14bef0986fd0</anchor>
      <arglist>( $tocfont=&apos;&apos;, $tocfontsize=0, $tocindent=0, $resetpagenum=&apos;&apos;, $pagenumstyle=&apos;&apos;, $suppress=&apos;&apos;, $toc_orientation=&apos;&apos;, $TOCusePaging=true, $TOCuseLinking=false, $toc_id=0, $tocoutdent=&apos;&apos;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TOCpagebreakByArray</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>adc230a5f14cd246822169d40b16c0a70</anchor>
      <arglist>($a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TOCpagebreak</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a69491e9fd30a5f4766a8647b69b2a4c5</anchor>
      <arglist>($tocfont=&apos;&apos;, $tocfontsize=&apos;&apos;, $tocindent=&apos;&apos;, $TOCusePaging=true, $TOCuseLinking=&apos;&apos;, $toc_orientation=&apos;&apos;, $toc_mgl=&apos;&apos;, $toc_mgr=&apos;&apos;, $toc_mgt=&apos;&apos;, $toc_mgb=&apos;&apos;, $toc_mgh=&apos;&apos;, $toc_mgf=&apos;&apos;, $toc_ohname=&apos;&apos;, $toc_ehname=&apos;&apos;, $toc_ofname=&apos;&apos;, $toc_efname=&apos;&apos;, $toc_ohvalue=0, $toc_ehvalue=0, $toc_ofvalue=0, $toc_efvalue=0, $toc_preHTML=&apos;&apos;, $toc_postHTML=&apos;&apos;, $toc_bookmarkText=&apos;&apos;, $resetpagenum=&apos;&apos;, $pagenumstyle=&apos;&apos;, $suppress=&apos;&apos;, $orientation=&apos;&apos;, $mgl=&apos;&apos;, $mgr=&apos;&apos;, $mgt=&apos;&apos;, $mgb=&apos;&apos;, $mgh=&apos;&apos;, $mgf=&apos;&apos;, $ohname=&apos;&apos;, $ehname=&apos;&apos;, $ofname=&apos;&apos;, $efname=&apos;&apos;, $ohvalue=0, $ehvalue=0, $ofvalue=0, $efvalue=0, $toc_id=0, $pagesel=&apos;&apos;, $toc_pagesel=&apos;&apos;, $sheetsize=&apos;&apos;, $toc_sheetsize=&apos;&apos;, $tocoutdent=&apos;&apos;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TOC_Entry</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a3f226e9317dca5ce5280321a6f51cdd3</anchor>
      <arglist>($txt, $level=0, $toc_id=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MovePages</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aa513c6e3e2c2f4bfc380cf7e2c664392</anchor>
      <arglist>($target_page, $start_page, $end_page=-1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DeletePages</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a565e2e8419cb0a556e2aff8e43d56405</anchor>
      <arglist>($start_page, $end_page=-1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndexEntry</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a0769d233a7a30942a7929fd83fecdee1</anchor>
      <arglist>($txt, $xref=&apos;&apos;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndexEntrySee</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ae82338cf447e220dfbcd23b77c6a6649</anchor>
      <arglist>($txta, $txtb)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InsertIndex</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aefb1c1683e8804262b3c0988015f177c</anchor>
      <arglist>($usedivletters=1, $useLinking=false, $indexCollationLocale=&apos;&apos;, $indexCollationGroup=&apos;&apos;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AcceptPageBreak</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ab90fea1f88c2f33583585b818b543d22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetColumns</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a6ad283bc6127489a8f19d97a06dce22d</anchor>
      <arglist>($NbCol, $vAlign=&apos;&apos;, $gap=5)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetCol</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>af1800d97ac655be93e139990202ce7e4</anchor>
      <arglist>($CurrCol)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AddColumn</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>af6446f8df8d83bb375f3a92ee5d2c126</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NewColumn</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a67004fef33c662385c0efcf1d98ffca8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>printcolumnbuffer</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aa832b89513bfd67b7d90b4f4ae87f6dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>columnAdjustPregReplace</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a2d4ecea9310e8a9b25146878d3f77db5</anchor>
      <arglist>($type, $xadj, $yadj, $pattern, $subject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>printcellbuffer</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a4795103ec1e335bf47601c3d0d010435</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>printtablebuffer</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a3b89d9767b7741d75456aaea3c1c31a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>printkwtbuffer</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a8fed1a458969c2d57b40f22349c416ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>printfloatbuffer</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a39729ba8b757c2aec0e24b7eabf71882</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Circle</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a56d43cdc6d42774bc11c1afdf502da55</anchor>
      <arglist>($x, $y, $r, $style=&apos;S&apos;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ellipse</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>abe38384b7d8b69a106f8b28729a00947</anchor>
      <arglist>($x, $y, $rx, $ry, $style=&apos;S&apos;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AutosizeText</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a901a57f10ff47835642f4aff26a650ca</anchor>
      <arglist>($text, $w, $font, $style, $szfont=72)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>magic_reverse_dir</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a49e6c66365dc6b90560aa756360e466f</anchor>
      <arglist>(&amp;$chunk, $dir, &amp;$chunkOTLdata)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getBasicOTLdata</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a183d3865a9d66a4ce418ea610216a7c4</anchor>
      <arglist>(&amp;$chunkOTLdata, $unicode, &amp;$is_strong)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_setBidiCodes</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>af179e8b106bd40515c32a637ee52dde9</anchor>
      <arglist>($mode=&apos;start&apos;, $bdf=&apos;&apos;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetSubstitutions</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a96108c4251f5803fb4d6cb77fd11abc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SubstituteChars</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aa45444dd981896fb5eab5f22754752cf</anchor>
      <arglist>($html)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SubstituteCharsSIP</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a2c137a576f65d30879414e462427f638</anchor>
      <arglist>(&amp;$writehtml_a, &amp;$writehtml_i, &amp;$writehtml_e)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SubstituteCharsNonCore</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ad344f85357c0cacddb4cdcab13bc1b03</anchor>
      <arglist>(&amp;$writehtml_a, &amp;$writehtml_i, &amp;$writehtml_e)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SubstituteCharsMB</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a4a7ce8dc3066cbc2cd0336cde60ea270</anchor>
      <arglist>(&amp;$writehtml_a, &amp;$writehtml_i, &amp;$writehtml_e)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setHiEntitySubstitutions</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a1a2774030837bfdda189f9be04fb1509</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SubstituteHiEntities</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a0a0429fe76f2567b7c911e3fe968e060</anchor>
      <arglist>($html)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>is_utf8</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a4e3ff85886b0f2edc6fa828337afd83f</anchor>
      <arglist>(&amp;$string)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>purify_utf8</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a6a3beab573d69f9d116e6b5b21be5044</anchor>
      <arglist>($html, $lo=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>purify_utf8_text</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ac04469e1ec5a61104f6fe3478e62a88e</anchor>
      <arglist>($txt)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>all_entities_to_utf8</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a03849cec1c15d8321d50c215e0ae1cd5</anchor>
      <arglist>($txt)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WriteBarcode</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a0a3347d9014f094da1e30a7fd2fcbefa</anchor>
      <arglist>($code, $showtext=1, $x=&apos;&apos;, $y=&apos;&apos;, $size=1, $border=0, $paddingL=1, $paddingR=1, $paddingT=2, $paddingB=2, $height=1, $bgcol=false, $col=false, $btype=&apos;ISBN&apos;, $supplement=&apos;0&apos;, $supplement_code=&apos;&apos;, $k=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WriteBarcode2</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>af784841a139d8fe63c1e3e60b65813d9</anchor>
      <arglist>($code, $x=&apos;&apos;, $y=&apos;&apos;, $size=1, $height=1, $bgcol=false, $col=false, $btype=&apos;IMB&apos;, $print_ratio=&apos;&apos;, $k=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StartTransform</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a012a6b998677b92282a0a0b04b72dfe8</anchor>
      <arglist>($returnstring=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StopTransform</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a608921ef4452c57d939ca0f5b1846d58</anchor>
      <arglist>($returnstring=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>transformScale</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a8b863706b9b25ec66b711d5c64d5f847</anchor>
      <arglist>($s_x, $s_y, $x=&apos;&apos;, $y=&apos;&apos;, $returnstring=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>transformTranslate</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a0db7c3bea8a037497c2804763daf833a</anchor>
      <arglist>($t_x, $t_y, $returnstring=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>transformRotate</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a39cb1527d84099cfadfd4ea8440641ee</anchor>
      <arglist>($angle, $x=&apos;&apos;, $y=&apos;&apos;, $returnstring=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>transformSkew</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>af813a6d8ec014058d1a9b132b050ad5e</anchor>
      <arglist>($angle_x, $angle_y, $x=&apos;&apos;, $y=&apos;&apos;, $returnstring=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_transform</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a13c3f7a8768969db885ebb6714e97512</anchor>
      <arglist>($tm, $returnstring=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>markScriptToLang</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ad9f5c89f4b709e40335bee30237cca3f</anchor>
      <arglist>($html)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>columnAdjustAdd</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a3928257a379358a5beac83f5ef513877</anchor>
      <arglist>($type, $k, $xadj, $yadj, $a, $b, $c=0, $d=0, $e=0, $f=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConvertAngle</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a24d3d80ade61a7faff5b1aae093ebc08</anchor>
      <arglist>($s, $makepositive=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>lesser_entity_decode</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aa933cc32770bc6813a7f5b484cfaca73</anchor>
      <arglist>($html)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AdjustHTML</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a1471ad39237d8263b2d575f815332cae</anchor>
      <arglist>($html, $tabSpaces=8)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>tabs2spaces_callback</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a70f3a0acd0aa4363bed0a5a1a5d499f2</anchor>
      <arglist>($matches)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>date_callback</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a34dc43c1d2d8f8cba130ff338e0cf117</anchor>
      <arglist>($matches)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OverWrite</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ab071acff5a0da323365b041af22eb184</anchor>
      <arglist>($file_in, $search, $replacement, $dest=Destination::DOWNLOAD, $file_out=&quot;mpdf&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Thumbnail</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a1717bdec030f6e79fa199fe6322dfff9</anchor>
      <arglist>($file, $npr=3, $spacing=10)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetPageTemplate</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ae6e288f71cf3a5de88575e2511b670db</anchor>
      <arglist>($tplidx=&apos;&apos;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetDocTemplate</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a32cd6a3bf48238b9219fb1bb613f348c</anchor>
      <arglist>($file=&apos;&apos;, $continue=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_set_object_javascript</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a34391a45c4df213169fcc41809bfcd5b</anchor>
      <arglist>($string)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetJS</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a03e81259010a73bd122136e533ee6da6</anchor>
      <arglist>($script)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toFloat</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a18dbd903474cc9e2a5306a18f72c713e</anchor>
      <arglist>($num)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getFontDescriptor</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a6cf94fbed0a1a00c97f90e976e914493</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_out</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a65e145d6033b89fb576461ae8b2b84cc</anchor>
      <arglist>($s)</arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>VERSION</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a9cfe5b966ad2851cc320bc4182094e45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>SCALE</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>af14aa06c03c75b902a0f07a57afa3eaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$useFixedNormalLineHeight</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ad511c442eb042ff661dcecea52103730</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$useFixedTextBaseline</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a147d496e641d00ae1a66c41baf88af15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$adjustFontDescLineheight</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>abc14c208302c3e0baddb0da3ce8c32c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$interpolateImages</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a0ec90c518946d889259182c3517af27e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$defaultPagebreakType</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a228b9813fa6ed04762be5fa2789416d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$indexUseSubentries</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ae4a052bbb6b71eaf8611321dcff7192e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$autoScriptToLang</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aec5c105afeb3be8b2f69d779460432a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$baseScript</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ab8f1f575e167fa2968af3a0969c90eef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$autoVietnamese</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ad6798c40d9d84d9fcaac58d6b3d6567f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$autoArabic</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a732b113fc04d3116fdd8000bd0b6e8aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$CJKforceend</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a74ec01e8ffea1dbbf135873e5320e296</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$h2bookmarks</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>afc9dc0ce6b86b9fbfea01894f1bf1354</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$h2toc</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a53d6c795d323b66a849cb032f01874ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$decimal_align</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a6ce5a264120f347efb7770eafc31c27a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$margBuffer</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>af7d481f7ee8a60686a473328c740fa57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$splitTableBorderWidth</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aece4e73f2318ddfc1f356649effb69f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$bookmarkStyles</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a9bf8edf8f3fed9849f82cc1c7b9edc91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$useActiveForms</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ab52681b051f0d256033abd7294eca973</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$repackageTTF</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a40a8bc012b6f68732f28d6341892fe96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$allowCJKorphans</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a6be23a9918159edc4114fbd442b23ce6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$allowCJKoverflow</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a3c9d522f6ef672d9e27d771dbbd0b277</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$useKerning</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a4fba720530181f62b4625f557a03eb08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$restrictColorSpace</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a552f9f3ddc11cd2b0d46739eee576f11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$bleedMargin</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ab263987d7480f9a368b623e2ae8fc2aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$crossMarkMargin</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a1ee1cb2bf36baef7bc0a8dcee3ed5097</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$cropMarkMargin</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a7972abd4f70788c99d7b7913252a89c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$cropMarkLength</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aad939670c5b319a2d49c48db189eff3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$nonPrintMargin</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>abb21f2023be4a95447535e570984774d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$PDFX</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>af286672b181b50a0861a41db43350524</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$PDFXauto</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>af3a32a717c079439b6788e798a0848c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$PDFA</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a22a07d19957327ef2813d7a790ed9304</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$PDFAversion</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a80b8a62be3dd988da6a2be7af3534246</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$PDFAauto</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a73c08cf28601576261b4df108d02e8cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$ICCProfile</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a9d340db4b2ef6b26fb0e26cafed13e18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$printers_info</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ac0fd617509a810f16ca23ea8cecd9fee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$iterationCounter</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aba21fee7350bbaab02b2cb4a091a645a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$smCapsScale</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a5db38a466a46590225320538af5f8ae9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$smCapsStretch</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ab55c118b183f03a7ed9c24d8ef67ad7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$backupSubsFont</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a8de2d13da39ba6c30dc691fd06e86b07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$backupSIPFont</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a92b9ba3a553ab45bc2ae33abc9a980cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$fonttrans</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a7042b092c7c8c02279c20e566a3c84d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$debugfonts</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ae384597fb64f19c5bb51e6b6dc5eff44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$useAdobeCJK</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a93bb0c0f895ce96884ba7c7930e726dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$percentSubset</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a9b12c895b93bc784f90b20f0ee8dc23e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$maxTTFFilesize</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ac15646bd30fb2333b6d0eb8bc00e4a02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$BMPonly</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a0e004433812ba34d8b17db70049fcae4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$tableMinSizePriority</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a70d4103fc0be1454874046f16c52a8aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$dpi</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a490ff848d1fb4f6e94c08dfb8e1e696b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$watermarkImgAlphaBlend</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>af2e47c91fa15615bd18a2a9f227cf648</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$watermarkImgBehind</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a6604992eed1e5a5ce5a360f7a29f7485</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$justifyB4br</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aebd85aa27119bedc070789e5e86be7fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$packTableData</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a180e1d887f85ffd42cec57b3eb606048</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$pgsIns</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a246868bb7854b707d3a8991fa6f326e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$simpleTables</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>afdf3265f56c630135500e3ecbae4083b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$enableImports</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aadeec6926a7041428779fc77461a2743</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$debug</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aebbc4297d6eb6c38c848582eb21e20f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$setAutoTopMargin</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ac0709acd4a78a7763911da334c96f15c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$setAutoBottomMargin</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a69ce180255577aaded25f63fd63aec29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$autoMarginPadding</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a342c51f024d0f8493fea940f00243344</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$collapseBlockMargins</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a2fa7bd9b08ff0637fd22a5bf4c3e7ee1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$falseBoldWeight</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>abe4a33540e042e8a9be488ea86d5dd32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$normalLineheight</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ae9a961e246f880f88c2b8c761d6a3a51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$incrementFPR1</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a8b84cfbd35dcc15d1bf281f9264edc49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$incrementFPR2</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>acafd26e6cc94186b20d289a9e3e115ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$incrementFPR3</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a24e15c718bcf7b44bfe1492e28948491</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$incrementFPR4</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a6c72249f43fe4b383ef07005d06d6e29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$SHYlang</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aad9ed089072e76f8f6a0f7a3f0576180</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$SHYleftmin</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a46c47977a83ecb5b5e9894ff731f3921</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$SHYrightmin</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a1a64d6b28a892f53bf8927ce5e858297</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$SHYcharmin</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a484e6b60c9a42a1ed077a9841e9b0196</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$SHYcharmax</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a656900066be2d1b7760b8edaab4d788f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$SHYlanguages</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a37df4c70f239507ee193e94ace45737e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$pagenumPrefix</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a9b76649fb774f849ea2046b3de590679</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$pagenumSuffix</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aac1d0f83da6069857dfcf6761e115680</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$nbpgPrefix</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aba8537b28f454bee388e23fd302134e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$nbpgSuffix</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a06ea4ddcfe727ee4ee42724493fe423b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$showImageErrors</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aa268103ad808b4493030412a6f14cd66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$allow_output_buffering</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a0e81857e069a5916c6fcb178076c38e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$autoPadding</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a9caf21af25caf878953e6c2a25a3da50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$tabSpaces</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a7ef0d4daab83f6e27ba45231d8ade6cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$autoLangToFont</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a85ee5edc32ee2673311a9d3651a626ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$watermarkTextAlpha</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>abffc0d25f069405248c54a1cad17cf9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$watermarkImageAlpha</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a4a84017419e872e06280131a26d305e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$watermark_size</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ac185c52052a0ecff33c31a3134ef1103</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$watermark_pos</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ae4931e13f744142734b7b72dbfaf0a06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$annotSize</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a49ce9bff151f63a8198f232f32b0276b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$annotMargin</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a805693a0eff699a6bbe12a7e1cf9b3b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$annotOpacity</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a358ee6b9b749731b35c66e83fbc345e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$title2annots</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ac54bb1532bf7f6243f4d6769e708dd73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$keepColumns</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a040ff2d35b744154cf07e49662bce16e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$keep_table_proportions</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a6cf85fe3d8d9b27705dc95b5ef8cc2c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$ignore_table_widths</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ac31cd5b0495c2ab52e937ebad493edbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$ignore_table_percents</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a187337127baed5a4125dbb34ca065cb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$list_number_suffix</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a2dd9c2a889f462a68adb10cc13df1cd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$list_auto_mode</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a76ba88bc941ad42e22fafc0bfd8f1e0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$list_indent_first_level</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ab2e5d150cd909a53627d1813899d8dc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$list_indent_default</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a8eaa5514ab2ae4190c6f1f094fca41fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$list_indent_default_mpdf</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a71695a99f2faf68eb6283ecd2beb3b32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$list_marker_offset</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>add2620f7d9ebc3d0c42e438cff97f76e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$list_symbol_size</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a7b7fa0edc590f6a136b40d75fa8ded8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$useSubstitutions</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a7191df019739e9f98fdd85b7e5b2acf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$CSSselectMedia</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ada48d65a7158862e0385cf507304e2a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$forcePortraitHeaders</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a1473d790ecbbd329265e12f133432a8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$forcePortraitMargins</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a4376f33c4d100559ea786958ddd79bcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$displayDefaultOrientation</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>addff36bd6ca651d96e6dc07a817adc36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$ignore_invalid_utf8</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a76e6f60f82ff52dc36491ad6abfc01e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$allowedCSStags</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ab5379c4897b7c10930953bb154f9f50a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$onlyCoreFonts</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ac99ecd564aca9761c512a77e186cee8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$allow_charset_conversion</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ad466d5db0004611589d1a69e4174291d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$jSWord</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a3e407c3d0990b0d569e5af54831056c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$jSmaxChar</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a37bdc7645481d140c6a035e503d1462f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$jSmaxCharLast</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>adcdd983d6385b2a54fba8c0d0ac055c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$jSmaxWordLast</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aecc871274fe944609072ce25738098d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$max_colH_correction</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a14a9f82697e1a315aa4b8b13fcc10707</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$table_error_report</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a0f657c4f301e3a40d37f35908660b39f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$table_error_report_param</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a0884b3376a7c3b549155e971ad7d4dd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$biDirectional</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a351262fcd88f1fc02cad9d2f17a5789b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$text_input_as_HTML</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a77c3f523762ac81ffaab7d1d25f17ceb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$anchor2Bookmark</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a3014cddbeb298c285e82853d40ab9936</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$shrink_tables_to_fit</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a632106be6976dc89807e751335166be0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$allow_html_optional_endtags</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aac420e4bdb12d0ae4496949560789f82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$img_dpi</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a7674a327d926c4f00a53855dfd50026b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$whitelistStreamWrappers</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a1d67fb0dedbf749ce1e9413cb483b0c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$defaultheaderfontsize</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a407a74eb7d342bc01e2f5acb6282a671</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$defaultheaderfontstyle</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a279aa7b01df70569127dd3dd266fe427</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$defaultheaderline</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>af441cffee4ddcf684b44973ba9547486</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$defaultfooterfontsize</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a5c02a9fddb1e07bfa0da652c9c781dc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$defaultfooterfontstyle</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a549dca102ce930e675f1ede12052f422</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$defaultfooterline</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ade3d7b69951061a4cb9cadafcd643456</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$header_line_spacing</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a1a38bc5cdcd341d49a3657539615e5a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$footer_line_spacing</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ad234d575bcf0aa8a9528da79020d31c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$pregCJKchars</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ab043cac5f6ca2960cd8ccdf81536068d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$pregRTLchars</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ae5a974f7019bd77d5365ddb8519a59c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$pregCURSchars</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ad0b86a0af65a88d40f4ee6d392d39164</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$mirrorMargins</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ad68c6a52a313ae4dd20b2ce73e8f478e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$watermarkText</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a7e8a66e3c85a366483a747c8cd092b84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$watermarkAngle</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a1093ee85e83f9e8f599d3560025e075f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$watermarkImage</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a4e54ca7fa9eac699865eb7e35dc15f57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$showWatermarkText</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>af5c8df060918f6aca1a646695c82f28e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$showWatermarkImage</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a8934d4828683f41103bd3ecbd9680c1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$svgAutoFont</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aeae151f986ed53f3119ef17416547a87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$svgClasses</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a89cb85402d914fba2acf63322824feb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$fontsizes</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ab0dfb3df41c3f9145481c8f4e59b413a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$defaultPageNumStyle</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a569a8765af66cb40c42032be7d7f89cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$extrapagebreak</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ae83068fcdcb939e322bae95b794921de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$uniqstr</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a5ccc3cebc6e468f521151f3466917177</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$hasOC</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a893ab9f74eacc74e12f4b16315ecf1a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$textvar</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a0970b783c7a849862f587c702fd089b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$fontLanguageOverride</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aff887e1f33114b1b170de785972df16d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$OTLtags</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>af9fbe346c391835cce19883ec33994e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$OTLdata</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a17a0b9d740a41715de1abbbede07fc46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$useDictionaryLBR</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>af4c6f0072a5c8410d3f4d8744aeee7be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$useTibetanLBR</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a4d2f1569486f56c725340276576dce49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$writingToC</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a5e8371199f223cd23d15804c51ed11b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$layers</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a2c4eef0a7033711f156b4682c3875b1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$layerDetails</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a32fd287ba5f714d8ab90c19024939358</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$current_layer</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ab4ab2fb3f96fd8560d6dacd3de6e069c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$open_layer_pane</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a7df44cf367c58846432263692c49bf80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$decimal_offset</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ae7cd97166e129e25345b7815e01379ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$inMeter</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a246a387a6c69b644d73850e64b0330bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$CJKleading</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ad348f3335f67eccad68e20eb56a65aa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$CJKfollowing</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a193231c2a0c93e447b1078386aab581e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$CJKoverflow</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a015a1a2fca78538b304acececb2d8c3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$textshadow</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a17f33635576e9941a8bf7f9db7c89720</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$colsums</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a8a8d2680f524325205b32bb6414c71f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$spanborder</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a645570a292afefd7b30ec3db18a15d36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$spanborddet</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a387a99ffcff36256d1cb8fad54e32abe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$visibility</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aaaae8df1731e49832bba53ad69342264</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$kerning</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ae79765a39dbcf6e52271e9cea2571623</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$fixedlSpacing</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>adfc91e8abe6816dccbaba372521da5d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$minwSpacing</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ad00c2bf4588a1ff1158c036b979c910e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$lSpacingCSS</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a488f115f2f5ad47cd5224c5062b58bc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$wSpacingCSS</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>afc0b1161d9ee3a89d7bac4fee801edca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$spotColorIDs</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a9880ba0e307a7a31bb453ea4ba734d92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$SVGcolors</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a6af9a699d414ac60d5ceb1d7705e12cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$spotColors</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a67059b224ed83e800879fcc6f659adee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$defTextColor</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ac9210c7e87cf9adfe5a8d294584c1574</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$defDrawColor</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ae8e043a757b254ec1d119875c90b1adb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$defFillColor</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a1b5159e537df5f024351259974fd9e72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$tableBackgrounds</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ae20836ce015a42368510e49c521b38d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$inlineDisplayOff</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a41a013adb717c8875b8924927c9f5aea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$kt_y00</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a886e7397653cb78a25c17af6258343ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$kt_p00</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a7977f92081cd745d6235cbacde79fb7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$upperCase</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a1b7e9433c6ed352d0023b2ebcd7b7542</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$checkSIP</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ad820a59d3910cf1d1a2148428c1281aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$checkSMP</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a61c8b84d4df4e881a15d8b2f2a4d7fe3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$checkCJK</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aacd1e634efd1b11c8539b66bce410e1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$watermarkImgAlpha</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a373739e1c07f3f16968ef013714a3b8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$PDFAXwarnings</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ac9c643dbb63fb1f2d44d6918f2e0255f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$MetadataRoot</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a70894c9e6f337dd39ef944353ec3f6b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$OutputIntentRoot</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a36db714acc867ba7bb6a7a8e2c8df643</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$InfoRoot</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>abc30c6dd4c04fe61ea489027643a1918</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$associatedFilesRoot</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a011e225ab6169ed7149dde978004611e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$pdf_version</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a75f4b8e08143bca212c1a2810a552154</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$tempDir</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a837e89465103c0c2b8c65ad57e95195d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$allowAnnotationFiles</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>afad525c155d395cb42c1e4f4ea3b9707</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$fontdata</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a39a1d7f404a7d99ea02f203134f226dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$noImageFile</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a6d0c98dec2fd1de43fe797b2fa22ff54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$lastblockbottommargin</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a443ca32e7ac85beff182c0fa226fb54d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$baselineC</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>af616fea3f2c1032e7e2a95eb7246ecb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$baselineSup</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>afe44d8c28e0116758ef7a4d30d63b62a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$baselineSub</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a0ed313aed028ab0d7f98bb19295adc0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$baselineS</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>acd5cc962586a471e4287e856624f5ca9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$baselineO</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a676e067f8233f9aeef26e6c717ae2b30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$subPos</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a4b89d80563a695e502288c84f736dd2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$subArrMB</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a4a84b8a685106da2f582a34e76aaa236</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$ReqFontStyle</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a3f506bd9b42acea5696ec25afbe11a8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$tableClipPath</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a0cd370456ca70866236cd4858cb95cc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$fullImageHeight</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a3dce0aca52876b4a89f65fa5f7ee1055</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$inFixedPosBlock</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ae13d225475d43657a3c9e7a0b16ba3f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$fixedPosBlock</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>af3f5fa98e050746b7bf6a9242da39cae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$fixedPosBlockDepth</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a3b00ddc6bf9d093091dacbf855912cbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$fixedPosBlockBBox</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aa83fe2e2bf2ade0f900c69f4d1f6f17f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$fixedPosBlockSave</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a8986b22c695f48f44221a598a5a15e5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$maxPosL</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aec253364c269205b54470ed2736017e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$maxPosR</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a11e3cb90967c9b35ec0d271651fdb0e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$loaded</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a703e7dad246ae8dfb060e71552da3cf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$extraFontSubsets</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a33db7d46dd3068b4ded2fa53971a48cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$docTemplateStart</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a31e67209f7ed2251fcce6f6ed925a6cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$time0</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a4b00aa69c50434e3f9d35a9dc4a7d6c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$hyphenationDictionaryFile</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a821b46f35057fbfb489db614b4955908</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$spanbgcolorarray</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aa8eee345209d618ef46a435b7c61523a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$default_font</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a776992f4d6190c3d5b9f7a316c9d4780</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$headerbuffer</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a5a7e01b4b209a8da2fc6d20eb7a2e66c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$lastblocklevelchange</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a861578afc2cd68163e922474471ba4c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$nestedtablejustfinished</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aaf4c6d95e2a549d5cd6ff6ae09d73c26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$linebreakjustfinished</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a2417963d9e058792319cff517b6bc4fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$cell_border_dominance_L</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a2488a7d09928ccfae38ee6ad67a30fca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$cell_border_dominance_R</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a4ccfbf08a0c4244ef614d4e8c775ae1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$cell_border_dominance_T</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a07b99a70e46a2303e0b5ff1bfccd6dc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$cell_border_dominance_B</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a8238b868583fd9d6375e7fa4821d82a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$table_keep_together</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a74ae547cd8713f09bea4d7d9e456829f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$plainCell_properties</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a9e63c82af4e1d9515c9d52ad03a2cdfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$shrin_k1</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a475edf54d576df6661c4d8e121758914</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$outerfilled</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a892663c6952cc3ea834e2f4c60bf4421</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$blockContext</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a45f7bb03107846d89b1c5c1571d1e200</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$floatDivs</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a454be7b6342ee88dd15748363306bafe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$patterns</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>afd251f99c23a43e5fd736dd032d5747a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$pageBackgrounds</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a0d6a05e4297e3d9dd0abb49b66c21d7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$bodyBackgroundGradient</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ab44bc94d6e8584d360ced23ec03ff103</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$bodyBackgroundImage</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a4c3941e5ea934cd57e42945bd3fb7962</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$bodyBackgroundColor</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ae4675ca77750daa974605f7f4f53eda2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$writingHTMLheader</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ae959bd3c46ac6952e961fb0b3a133999</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$writingHTMLfooter</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a4bf719083bafc3bfbca911835cb4a145</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$angle</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ad40b1a0b51aabb33ff7877b334be1e0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$gradients</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a85376689d6f8ea78aaeabf526418fb9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$kwt_Reference</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a01f548350efdc2014c1b381753de09ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$kwt_BMoutlines</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a1505ed3b1366cd27f7bf52ac31cb366f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$kwt_toc</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a5931b46a4c5a005044ec3b66eb1be139</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$tbrot_BMoutlines</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a84139130c1ed93a2b1cfb5854075eeaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$tbrot_toc</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ac216dfe2919abecf25975c8caed5194f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$col_BMoutlines</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>adb8e3138db3c85421ae860e0c816a0f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$col_toc</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a3c9bb75f61e09467a7a861c8c125fa20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$floatbuffer</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a8aeb12c5ef754c563b5927835dcdcb02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$floatmargins</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ac2fede00c4960c3d24baace80f5da0e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$bullet</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>acf12e7de711268fdebc6053724270b29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$bulletarray</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a4320e284b5bbb6e67f573388dfd2efb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$currentLang</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>af9efb313ca7aac69120e256f551bab56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$default_lang</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a510fa41bce4bce4c289aab99b901d471</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$default_available_fonts</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aa6a01987f0e8a5c3a635f44f18d86c5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$pageTemplate</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a2046962368f6e247bbac3e3bc2a4888b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$docTemplate</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a3f4d19bb9ff9aa761f9e9d3672becd96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$docTemplateContinue</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aa896b2c718720c9bc26b7b39ca4211c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$arabGlyphs</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ab5e2372e6f1bbd444c7c8b8bb9ef1a9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$arabHex</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a1475a25e9742dbb1565d50f56afca718</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$persianGlyphs</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ae65f6a34df471ce4073217ccb74e5f1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$persianHex</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a0c58056bbcaa71c506b96d2de7c1c9b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$arabVowels</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>accd98e08d7fa708f5280f42666f570d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$arabPrevLink</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a09dee73acabf42bda08120d697ec5e5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$arabNextLink</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ac8940385f42bd7620f538721bfcda512</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$formobjects</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a3d9ddd4c411ca9292d47f31564643fee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$InlineProperties</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aef3c9ca67e819d35dae8b25122a8ed87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$InlineAnnots</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a214d81f8299c38aeadc64fa71f7f2be0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$InlineBDF</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a6002f7cf766d57aad4737915dad5f0e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$InlineBDFctr</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a11427d7ea4f6e6ddfd2653d896f9a833</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$ktAnnots</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a9c59e01ed95146f3415fc965d09aaa9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$tbrot_Annots</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a865668eff76a794120c0e5e4106a5af7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$kwt_Annots</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a586715bd5acd54589fb2a5ec65063014</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$columnAnnots</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a5c46dc78b18508de97942e1f7bf03d6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$columnForms</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a602ef486b0670f5e6ae15a71b30c86aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$tbrotForms</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a0e74bccef19489767c33d43e739d6537</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$PageAnnots</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a1b7fb5cdb0c962bf038990a14195301d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$pageDim</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a77286b5de8bf894b6c267bca11fa5412</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$breakpoints</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a5ce812d7cc874a97a217560051c2efd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$tableLevel</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a0b4f6a3af040924aee5fc26c38dbc113</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$tbctr</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a5677d5cecfe45ac30e6118c9609c061d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$innermostTableLevel</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>afb224480413deaa16a8b599a92791f9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$saveTableCounter</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ae3fb8646890b8fd0b1dcc583b3fc1d1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$cellBorderBuffer</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ae1b6e87a1591d18c4f6cb45d8414a2d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$saveHTMLFooter_height</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a933c3c3abb609ff957bb057ccb6f586a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$saveHTMLFooterE_height</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>af9948b1b7f1e737c9620829fd9e3dfc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$firstPageBoxHeader</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>acbd737992fcea5e939bf4a84f7563012</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$firstPageBoxHeaderEven</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a41557740ad2c3673c0b83f7d67c91989</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$firstPageBoxFooter</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>abb6ed9b0489e85d4a046d074175b4a58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$firstPageBoxFooterEven</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ab986065ac1315b3182b1c6d4f86a5c0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$page_box</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>adefb6ca009548d74e18eaa330e189259</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$show_marks</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a1acc0ba72b977f52f4cc1f286e6d5e21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$basepathIsLocal</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ace9c956c92816dc4fb1fa82cf0f6b77c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$use_kwt</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a563b27a4734f63a7bc04ff0373ed4857</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$kwt</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a6692c108c7cebeeb9afa3a447823261d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$kwt_height</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a7bd41c41150b576b66f6c1b96bb65fd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$kwt_y0</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a9723cd11c145ae809003046e4c0aa61d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$kwt_x0</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a8358f0435d4a6898d723f6a04599cee0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$kwt_buffer</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>af75e694bbf85e5f3a6bd05e37884005e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$kwt_Links</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ab3a42e0833824a02bfe80aa95c6b6112</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$kwt_moved</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ac7b0e077c29d24b804bb4cf34a04c1f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$kwt_saved</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a04ebc5c2d44188bb6864b240dc418c1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$PageNumSubstitutions</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ad5be176916ea33d7144da92bf75c6b97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$table_borders_separate</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>abc0aba4ee5e4dfbfe847f57ab1ba8c20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$base_table_properties</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>afd4c956c371c92037ed9892fb3a8c819</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$borderstyles</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aebf4dda870c5813e83b175fc1cd8f4f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$blockjustfinished</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a3d77ae93fe1645120b6f1bbd21f6e503</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$orig_bMargin</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ae8c84f115c8288ce72439168ec0458dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$orig_tMargin</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ae2f8e815dbbb5befe8ddd9cc2020de46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$orig_lMargin</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a453ca647d4abe3fafab7735772297700</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$orig_rMargin</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aa69aa8ae6a96d9ed7204e25c220c1077</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$orig_hMargin</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aa44dd2695b884564dc23602bc9454fb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$orig_fMargin</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a0568f606e062caa55db7f5cd860ce800</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$pageHTMLheaders</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a4f3d65bd5599f11bd8686dac307b0901</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$pageHTMLfooters</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a5d908633a68647ab3d3b862fa66137c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$saveHTMLHeader</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ae7be195c7d3d208115c6349a66249205</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$saveHTMLFooter</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a1a1048d75310cd833043dfad5222c4c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$HTMLheaderPageLinks</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>af50c930ccac544e6b0bea60153415699</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$HTMLheaderPageAnnots</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a233125914b9e7e5d4ee7dd34e3114d2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$HTMLheaderPageForms</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a099e6db614007055c1c347fd7fe597c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$available_unifonts</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a668c85186a919f8a88096654e748dc3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$sans_fonts</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ab3ab7104bd3178f7bbf6c4322bdd40e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$serif_fonts</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aff9c1f91f3f05c2ca8cbd8e2e9f12958</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$mono_fonts</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a3fb1b6edf4990ad241331d96abfb5a98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$defaultSubsFont</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a702a5c65233666384a336bb9225db081</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$available_CJK_fonts</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ad660cd1b05084d20b6148ca52e038d6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$HTMLHeader</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ac2f6008acb51c40feb6ef69b282f6552</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$HTMLFooter</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a61b9dbd9334dbef8394ea888cf742d1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$HTMLHeaderE</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a18f8385a26a49d62428bab51425b9c15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$HTMLFooterE</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>afe37869ac77119814f27db00f2dd01ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$bufferoutput</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>abd1f6f8fcc0a85f0f8ab364b84fe12f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$Big5_widths</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a4208b234ad13b306d05850d65d150e46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$GB_widths</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a70975d0dbeff8ca7bef94e3b73eacddd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$SJIS_widths</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>afa5f5f83b53c2b5e3d9e8b6089cd3487</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$UHC_widths</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a7b7309fb72454b9b1ed8ea48e4ec0bfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$encrypted</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a4db24b4744e9a8e31a61ce5acd712719</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$enc_obj_id</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a2fff1677d6c077d510e281b606e9ddba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$BMoutlines</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a0c2abb6f4c3515518dab49c468f3ffb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$OutlineRoot</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a81ddce17bbe0bdf355a0709508a52be0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$ColActive</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a1f323458d1d14c814fd37dae0508c0ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$Reference</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a1240653bd2cfabc1c5d67acc51fa6d13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$CurrCol</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ad5f90bf65b6740ee788d313a356ea7b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$NbCol</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aedab60e37b1456f63666d95178ed3c08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$y0</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a3115d0fc9d4be9f69658de61cfd068e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$ColL</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aa777b3f4f38cfdf7cd8d5f35b4b09b36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$ColWidth</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a98e082bb7b099b20389afaa93d0fbb54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$ColGap</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a6a8a9938fc53542eaf08dfcf0044ad82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$ColR</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ac4605351eb83228cd28d387d5479462a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$ChangeColumn</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a8b4b1996e161e05c84420ff9e8f96102</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$columnbuffer</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a94bc0cbd36abc3316d40bfef1e2494ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$ColDetails</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ab09521379621a59c304c7f8424280ef2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$columnLinks</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ac2ed042dc1e5eb9049ac10e1ec59a231</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$colvAlign</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ab64aab327768aa6ebbf297f0b191b0eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$substitute</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aac4725f61402a0618e157eec2e119195</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$entsearch</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ac2f88c1a145521b1395a097cec6ddc97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$entsubstitute</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a9a2742f41c019eafe623cf102a38867d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$defaultCSS</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a4bc8ea58bfc3d0abd82b1551e4110588</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$defaultCssFile</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ae8aee42ab606dcf48b7dac9df7a5cb27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$lastoptionaltag</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aefbc253a94a43a959565f164e2ec69db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$pageoutput</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ad772709a7b4aaa05f3527f37bbd8236b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$charset_in</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a2d9f81796a6c72a57cd0232dbf3f0297</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$blk</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a9295b5159be23d7fb27e0e3363089f38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$blklvl</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a19e48c47dbe61111d173f3dcbcedb36b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$ColumnAdjust</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a7988b3af18ee56d6aecc6d51b54a0ef8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$ws</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a8011e740b1634595bbabff5979e4ce6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$HREF</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a3055882494ee57a0965e1ace1b997cfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$pgwidth</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ad2e4bb8eaf33a120258aca38459c66e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$fontlist</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a10b39baf795011a339e9c8656e5551af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$oldx</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aeee5e7ab62fe8dcaa76866f3738ddc91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$oldy</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a294db2a2f62208d9dea9cbb80912e636</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$B</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a259dfc93e76feb1012ed285b422f649b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$I</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a8fb2ba5b0f28de3d664fdfa04b9756cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$tdbegin</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a2332b251b3042648b474f49343fac8c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$table</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a72ccac8cc93f4301c0b3bbb38d97e4e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$cell</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ad9a95b63bb2c35f36d3e77d356cc4275</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$col</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a159b5f429eaf433609e9c4808456cd4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$row</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a30476bcba312b177782342601f89904b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$divbegin</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ae919425734efd4383d9b3980bb51e345</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$divwidth</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a5c89fdebe02867dfca590010bc5f80da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$divheight</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aae7eed9976a95eccfa5ecd1c6db8fffa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$spanbgcolor</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a422863a1cccbe0183b755107c9b8f06f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$cellTextAlign</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a73cefcd4e1fe3cd4fc8c3d11587a4241</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$cellLineHeight</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a96eb59c44e8c60b7259389457e7250b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$cellLineStackingStrategy</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a51bfa8d50ebcb786b6c75bb0aa14b8c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$cellLineStackingShift</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ad2281ab933a731224a8f6d5f7e5548a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$listcounter</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a3d96a45d2f113f9e0c2d64db72be2487</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$listlvl</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a8f1cf5ab79bdb1430b989113f12526cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$listtype</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a60ff70f85f9b4ea79147cb247039654c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$listitem</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a977e4b4050a18455e91515c4bdc4cdff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$pjustfinished</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>acdec63a9fc5371228ac03d36d831d5ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$ignorefollowingspaces</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a02838c19d0869f3f9e5c3e34f99ad033</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$SMALL</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a0d121d5e2cbd6226d918bbe619e1c982</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$BIG</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aba52fa3c6f6890ca6d56e54673d4e621</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$dash_on</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a31ac7e2be292952d2db53cae6dccfb31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$dotted_on</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a392fe6ece35084a5be30fdfeb32ba824</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$textbuffer</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>afb50e0a3afb6934fb0a416cbedeb0317</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$currentfontstyle</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a810dd93b574ea1379dd3a7d4df88f436</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$currentfontfamily</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ae1dd95dc8c51291e1577dbcf18be6dbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$currentfontsize</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a552063fbb3fde9813cdda760878125d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$colorarray</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a03f328429179861b4d9a9ac5fc96482a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$bgcolorarray</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>abc827ff4e4c2445776f24393ba56c340</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$internallink</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a69a570346b6eff58dac42d56d7fdeacd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$enabledtags</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>abdc90dffa263324d540afe882970450b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$lineheight</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a4a9ef6772e24239db937d7309050b054</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$default_lineheight_correction</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a9e33767cf0b0788a10d1001b515d9e78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$basepath</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ad5ede117edf299cb7f0ebdb45d335fcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$textparam</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a8bd223e4ccd9677f059a9d9d0ffb8ee1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$specialcontent</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a9a78796a11f763a6145dcabd0cd0c349</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$selectoption</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>afe0746235e18bfb0d3ab1a742e940770</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$objectbuffer</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a4dfb9e45bda7d9501713bb9fe27091d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$table_rotate</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a5df34d5aff55a55f1550a41f10b0cfd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$tbrot_maxw</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a26055c8379db8fd025d8e9ca39801a79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$tbrot_maxh</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ae116b0ccc93ea843a85b6c91b8312579</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$tablebuffer</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ab700dabb7e1f87a26a8fd1a965dc858d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$tbrot_align</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a22ebaddea3b9c4ffdc069df32cd0d8ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$tbrot_Links</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>affa3674fb362dff63f7e1ecd75840849</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$keep_block_together</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a8a7f81eea5a1e69c352149e7dfd8848d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$tbrot_y0</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a84c655212194a7f6f8874b85a19587ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$tbrot_x0</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ab328b6dbda6482eb671ea5526dff7647</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$tbrot_w</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a23b5b4cd5c31a8c5012870c337f9f4ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$tbrot_h</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a210ceaf9d141d4cbef5961df115e877a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$mb_enc</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>accb0c88f0eae9d87f8859fab2cd10632</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$originalMbEnc</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ad900272b6ea54d0fb822807821938dc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$originalMbRegexEnc</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ad41ebefe750df2999e767c917d98d8b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$directionality</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a0c4ccb83a3d7b6fbd49fd6fa1e8d9bd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$extgstates</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a389e5fba7678d5d7c621a37c95f2b639</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$mgl</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a40f99db683a82cdd11fd34112c616458</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$mgt</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a8642633bc2e4fbef4aecd4eb19740fdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$mgr</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a476d1f6b786969b198774d6ff691bca0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$mgb</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ab4213d4743a6869864f1bb5dfcbeb843</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$tts</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a12715148eeedb6f5561263c234ee3c57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$ttz</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ab92374cd4cc822e2a2c5dbee4ae07358</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$tta</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a9141c1a29fbb5c5c4c3c12f09300ddd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$page_break_after_avoid</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a816cb4c766a3e44079d95492055317c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$margin_bottom_collapse</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a50dab6271d94941fedc9cc9a17407df6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$default_font_size</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a6cee373921880308d62327d59aadf75f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$original_default_font_size</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a70fc28926ced4eb94a8d8c16b1088b13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$original_default_font</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aa00d00239f9ebd8682a5fea574422b25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$watermark_font</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ab126987c4da111252964d7d7e31c2af2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$defaultAlign</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a2a4d5535fc8a48420dac851a36876b35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$defaultTableAlign</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a45051222a13c75881678222b97c3a5f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$tablethead</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a21a42ee594152a1207943d84341f73fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$thead_font_weight</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a26f0e34d2402f0615c70b1bbd9d311c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$thead_font_style</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a0fb1e6066a240044a93a7075ee709526</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$thead_font_smCaps</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a1d72f12ba2e6075b2d38cd9f6ae78d5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$thead_valign_default</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a913542ed7c9b5e0d54e3de86ae436fc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$thead_textalign_default</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ab29999d7398da0dbec3b5d5f544571c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$tabletfoot</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a5220195c84484e455a7de98c752a93a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$tfoot_font_weight</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>acdeed2dd68a723fe423d5ac9b3b83e09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$tfoot_font_style</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ae01d215f4a7edf4d2aafc6495ba46aca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$tfoot_font_smCaps</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a0cd6a60a135be1df972033b289ab9791</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$tfoot_valign_default</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a7d54c62ada4f38b6f3218b1e7fe49425</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$tfoot_textalign_default</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a65f3e81446ab2ce2a4bd305600898e1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$trow_text_rotate</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a88ab7e6779fff6f38300c7b4e3ac9363</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$cellPaddingL</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a561ed28232255fb1b7a749ca4433d35c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$cellPaddingR</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a6796e55c02ccb28665cc9b526cd0666d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$cellPaddingT</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ac9c317dda61674993beeb7973cbf0734</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$cellPaddingB</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a7c85308ecfac5c048ef90918e9bfa929</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$table_border_attr_set</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a922ababc75eadd2b69a6636589514e9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$table_border_css_set</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ae68d2960c9ce8bb7b7ca76d6badd6619</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$shrin_k</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aba62acc0ec104db8d2419c103a488ca3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$shrink_this_table_to_fit</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ae5f15b317246b5e4deb2fea98348df1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$MarginCorrection</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ae8926bd21bf3a9c146995dce839bddfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$margin_footer</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>acf92bd08194b8980b5386f5aa9196b9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$margin_header</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a080774cf033b0116b51bfb025acef65f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$tabletheadjustfinished</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a36b1be37ef3c91f9089512b8fb7dfce5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$usingCoreFont</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ab0455f675aa5e7e919dafe02e7813e30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$charspacing</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a2e807eeef88b063415fdb81cdf657120</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$js</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a647263a0d48f170cca65c089e0881458</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$curlTimeout</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>afa4721d208d2f57b5ba88a2255dbf916</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$curlFollowLocation</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a9b0a3881c735e2127f63aa2998ef9778</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$curlCaCertificate</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ae6d519daae31c5ffd5c948952bfcd9c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$curlAllowUnsafeSslRequests</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a300b507d47bcb98ca093b4cf57c102d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$curlProxy</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a5140f4ffb480e861e4d6b67f68f79bdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$curlProxyAuth</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a6299c8cf6d8486a997c0d675427d39a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$DisplayPreferences</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a3614c8a095647616b68582155d6e870f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$flowingBlockAttr</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a5b8d1a108c43f0cd76e28801ba2f4725</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$page</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a7f9884b984d8f6bf2ce32c6177ded4c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$n</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aef815d502f999b8c4ffedb80fa78133b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$n_js</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a83eb3d20fa7e78631d6f8e2cf2d7f292</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$n_ocg_hidden</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a60427bde033247c9fd751ccb285ca88f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$n_ocg_print</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>af80792131619fa997dd996acee5309e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$n_ocg_view</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a4c8de7b42fe79c4f032b4dd5372f466b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$offsets</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ab815792800634fbac4279c1e2dc3cfac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$buffer</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a68fc0c030b460acac53e08f379e39d8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$pages</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>af14eefc2aee22c1241617b7dfce7ee67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$state</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a15eb686680acb3464bf28a63112f54d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$compress</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ab1ed0b92ee7171b85f7ab536831ea058</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$DefOrientation</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a9f3aa4adb2f4d6ceb1a7d20f22a0683e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$CurOrientation</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a536e02249b8894ab20b00dd71f339bf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$OrientationChanges</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a9f6ecf5d61a08d7cc28f04312f779647</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$fwPt</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aa425502211d3c77e6253146550cc7ae3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$fhPt</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ab9b6ad7d07f175dbf501ae092cbcfdb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$fw</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a624f2ea2937e3e1f0122ff24d2044709</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$fh</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ada238276c635bee9b05d7437c84f3f81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$wPt</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a9da04b387e2ed54f16d8d03a4e1132f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$hPt</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aa14abb8285ed0c9726387cf8e5f27ae4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$w</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aa5ac39897143beec94874d86ae6bdbda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$h</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a943954d5980ed76d4b7099a12f58631d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$lMargin</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ae3f838f706262bdc2adbc4d1c5e6d3fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$tMargin</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>af135986aed8f34551c222341232be279</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$rMargin</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>adbab4e6af2fb05c3052c1a9205be5c97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$bMargin</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a4f753d92dd5f024c4b4b7769726bfa1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$cMarginL</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>adff192d0a675f0ec693283e015b2cd35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$cMarginR</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a319685af4ded5dd704fb44f68038e510</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$cMarginT</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a81c9c4ed1ae2c09cfba2813397259430</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$cMarginB</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ad40817d133de1b8dbfe75728bc7c6bd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$DeflMargin</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a6c2591d5c3fbf79bb62d8f6f49567d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$DefrMargin</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>af13bea87a6bee49da095f800e8ce553f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$x</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a33bd6a439597b14ae46ebc6c7c38c5bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$y</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>af40ee62204f5e3def6f9a9c18e64d221</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$lasth</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a56aeea6caf4a23085b059eed64e24849</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$LineWidth</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a816890a6fa321ffc299dda638dc0b6de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$CoreFonts</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a838cdb5c0fa4769c99562b76145f26c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$fonts</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a84eb25828450133a5ddda41f06ea0143</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$FontFiles</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a5e336a8d1cfdeeeeaf0c59edddf9f718</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$images</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a9352d281a0b3b37c75df8247cff729d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$imageVars</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a61655a289de16711853675ffb84cf0db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$PageLinks</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ac6d0a997de9a252ffaf3a823f583a0fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$links</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>acec675418ea0aeb0c7dee240b6d740c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$FontFamily</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ab1e84b1447511feabcc241dd27917d3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$FontStyle</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a956ad84feb252631044b839164e9486b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$CurrentFont</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a8bb69fb22325167e45aa5ce7ad45bc3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$FontSizePt</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a3b0adf4d20312df0b511e5f1351dfa76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$FontSize</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a8097010a7deb1f1addc34fb927d64e87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$DrawColor</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ab166a8748b0cb51d7688040288f2fc8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$FillColor</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a2d504aded2c31ac902b6bf7569549423</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$TextColor</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a2a1207fca76950034ec7452413a9323d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$ColorFlag</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a5ba18d1bda27c0d898b96f5acb4e8413</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$autoPageBreak</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a2ffe0271cc8644baa9b7b6d4d72c2a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$PageBreakTrigger</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>acdf8310cbd764f5a3cd3a7ad5795b1b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$InFooter</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a762398cd4d9b5c3f43857a6d60e70094</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$InHTMLFooter</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a4c29ceafc60ab3b92a10fd2dce77a0b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$processingFooter</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a1436d2a179da25f1c6a33d461533d86c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$processingHeader</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>af2b468e6ea500e0a64e4c60c2ead78b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$ZoomMode</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a39d4f6b7c6620ea810f47596487bb279</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$LayoutMode</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a11c8f8a04f56119a3b6665e08a4671e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$title</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a3f1bef033ffb0516b449a50db991105a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$subject</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a1d810f7680798b8802a4587865b15444</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$author</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a0f59eb751007bab600fbd7229a474f71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$keywords</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>ab0b5d9a4f6e113fc6334fba90b35b553</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$creator</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a474d1582dcc49389a492a6eebf3c5619</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$customProperties</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a34009b1dad669d5ef46d3351a49a949e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$associatedFiles</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a18016488dc497aeacbc260be54515711</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$additionalXmpRdf</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a009606fd31c44e1c0c85b059d6ecc3c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$aliasNbPg</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a1d86980e0ac53f9acd31d428471db5b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$aliasNbPgGp</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a7fe2530081aa442d0c28d7d4d71445b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$ispre</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a53a1ef588db62e3ef40b971500105c1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$outerblocktags</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a695f592a041a92dc44f0cdd1d600d712</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$innerblocktags</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a6e764ae617e3e218b9b8826053653867</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$exposeVersion</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>a37dd3bd50945a6bbb87371f97077b54f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$barcode</name>
      <anchorfile>classMpdf_1_1Mpdf.html</anchorfile>
      <anchor>aefd579badfa7a68b193884b94a20fc07</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MultiDependencyTest</name>
    <filename>classMultiDependencyTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testOne</name>
      <anchorfile>classMultiDependencyTest.html</anchorfile>
      <anchor>afd1230a7904b2640be8178260e335e33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTwo</name>
      <anchorfile>classMultiDependencyTest.html</anchorfile>
      <anchor>a0629abe65bdda8138987b23cf5132e30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testThree</name>
      <anchorfile>classMultiDependencyTest.html</anchorfile>
      <anchor>a4092f8507458d8603f1d8a6235658dce</anchor>
      <arglist>($a, $b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFour</name>
      <anchorfile>classMultiDependencyTest.html</anchorfile>
      <anchor>a45957fdbc21da0560d7e4f7457f8794a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFive</name>
      <anchorfile>classMultiDependencyTest.html</anchorfile>
      <anchor>a0dea77041ecbd394f53f387b535866d3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MultipleDataProviderTest</name>
    <filename>classMultipleDataProviderTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testOne</name>
      <anchorfile>classMultipleDataProviderTest.html</anchorfile>
      <anchor>ab86f65cf96ace95a03d5509e90d9aafa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTwo</name>
      <anchorfile>classMultipleDataProviderTest.html</anchorfile>
      <anchor>a826ee2eeec3eb6db66d0c0531bdd868d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>providerA</name>
      <anchorfile>classMultipleDataProviderTest.html</anchorfile>
      <anchor>a8048749726c15fc4998eb6b41d733046</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>providerB</name>
      <anchorfile>classMultipleDataProviderTest.html</anchorfile>
      <anchor>ae51834bc246a712daa8c2243b09065e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>providerC</name>
      <anchorfile>classMultipleDataProviderTest.html</anchorfile>
      <anchor>a4b7f3edd4345b43b50f341e3412d34db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>providerD</name>
      <anchorfile>classMultipleDataProviderTest.html</anchorfile>
      <anchor>a7da63e5cb8a1c305fdd318c459bed365</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>providerE</name>
      <anchorfile>classMultipleDataProviderTest.html</anchorfile>
      <anchor>ae11df872988a84697e59ca744f7a21a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>providerF</name>
      <anchorfile>classMultipleDataProviderTest.html</anchorfile>
      <anchor>a23f48d1f9f4a31ad667ac29fcead7d09</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MyCommand</name>
    <filename>classMyCommand.html</filename>
    <base>PHPUnit::TextUI::Command</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classMyCommand.html</anchorfile>
      <anchor>a1a946ddb2dcecf737df7d946322d9190</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>myHandler</name>
      <anchorfile>classMyCommand.html</anchorfile>
      <anchor>a1c0f27811bf82e84f68ea86bf9665da3</anchor>
      <arglist>($value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MyTag</name>
    <filename>classMyTag.html</filename>
    <base>phpDocumentor::Reflection::DocBlock::Tags::BaseTag</base>
    <base>phpDocumentor::Reflection::DocBlock::Tags::Factory::StaticMethod</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classMyTag.html</anchorfile>
      <anchor>a2faf36d5fe620d420df5da7872d2bd34</anchor>
      <arglist>(Description $description=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classMyTag.html</anchorfile>
      <anchor>a98990266cc471a101bc682927abe2d02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>create</name>
      <anchorfile>classMyTag.html</anchorfile>
      <anchor>a1223cc1176be497baf0f16b8863389f9</anchor>
      <arglist>(string $body, DescriptionFactory $descriptionFactory=null, Context $context=null)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$name</name>
      <anchorfile>classMyTag.html</anchorfile>
      <anchor>a2bb35f21644bed4bed7208516917498d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MyTestListener</name>
    <filename>classMyTestListener.html</filename>
    <base>PHPUnit::Framework::TestListener</base>
    <member kind="function">
      <type></type>
      <name>addError</name>
      <anchorfile>classMyTestListener.html</anchorfile>
      <anchor>a4bfc7f636f6b148141e290cacfaa1533</anchor>
      <arglist>(Test $test, Throwable $t, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addWarning</name>
      <anchorfile>classMyTestListener.html</anchorfile>
      <anchor>a700c1919410c2532d4de928874e8b6f2</anchor>
      <arglist>(Test $test, Warning $e, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addFailure</name>
      <anchorfile>classMyTestListener.html</anchorfile>
      <anchor>a397ea9db5d9aed8df5855f8ad62038e9</anchor>
      <arglist>(Test $test, AssertionFailedError $e, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addIncompleteTest</name>
      <anchorfile>classMyTestListener.html</anchorfile>
      <anchor>a8beb68179eeaa068c7c82d8f17fc1f29</anchor>
      <arglist>(Test $test, Throwable $t, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addRiskyTest</name>
      <anchorfile>classMyTestListener.html</anchorfile>
      <anchor>acb85f17d1ba1b51d43a4b7ab530a6bba</anchor>
      <arglist>(Test $test, Throwable $t, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addSkippedTest</name>
      <anchorfile>classMyTestListener.html</anchorfile>
      <anchor>a017fd0954f4bd185e672b74324047156</anchor>
      <arglist>(Test $test, Throwable $t, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>startTestSuite</name>
      <anchorfile>classMyTestListener.html</anchorfile>
      <anchor>accaa9fa3e87c57a2d090676ed2db1947</anchor>
      <arglist>(TestSuite $suite)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>endTestSuite</name>
      <anchorfile>classMyTestListener.html</anchorfile>
      <anchor>af5951d7ca1630ff88d5604112b889751</anchor>
      <arglist>(TestSuite $suite)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>startTest</name>
      <anchorfile>classMyTestListener.html</anchorfile>
      <anchor>a6e31fffa85d7d5b03dd43d288dcb14ea</anchor>
      <arglist>(Test $test)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>endTest</name>
      <anchorfile>classMyTestListener.html</anchorfile>
      <anchor>a038e705ca44773f9f7ebd1cd2e9d1825</anchor>
      <arglist>(Test $test, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>endCount</name>
      <anchorfile>classMyTestListener.html</anchorfile>
      <anchor>aa015088a2f4210937845e9f6b9380821</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>errorCount</name>
      <anchorfile>classMyTestListener.html</anchorfile>
      <anchor>a15f2b8b87fe9b5c141ff2448d0e18b9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>failureCount</name>
      <anchorfile>classMyTestListener.html</anchorfile>
      <anchor>a5ddaa526452f291c0145b5b9b5dc0acc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>warningCount</name>
      <anchorfile>classMyTestListener.html</anchorfile>
      <anchor>a4d97c11dfd82bd3334fd2747adb39330</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>notImplementedCount</name>
      <anchorfile>classMyTestListener.html</anchorfile>
      <anchor>a18b99b344d3c252fe3fb0fd02fdc246b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>riskyCount</name>
      <anchorfile>classMyTestListener.html</anchorfile>
      <anchor>a383a57b3d820363a6df3c6044160a453</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>skippedCount</name>
      <anchorfile>classMyTestListener.html</anchorfile>
      <anchor>acbe8cbb8ae78883f36c2d44fe6be6520</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>startCount</name>
      <anchorfile>classMyTestListener.html</anchorfile>
      <anchor>a56852f1e04581bab49a874e5a7f974ed</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NamedConstraint</name>
    <filename>classNamedConstraint.html</filename>
    <base>PHPUnit::Framework::Constraint::Constraint</base>
    <member kind="function">
      <type></type>
      <name>matches</name>
      <anchorfile>classNamedConstraint.html</anchorfile>
      <anchor>a81f01977bc51cc6a9625e9f0920ab9d4</anchor>
      <arglist>($other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classNamedConstraint.html</anchorfile>
      <anchor>aa82ab5936c12149b04d269cac92ebf74</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>fromName</name>
      <anchorfile>classNamedConstraint.html</anchorfile>
      <anchor>abde639819194eeac530cea1f3a9a6c8d</anchor>
      <arglist>(string $name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Runner::Filter::NameFilterIterator</name>
    <filename>classPHPUnit_1_1Runner_1_1Filter_1_1NameFilterIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1Filter_1_1NameFilterIterator.html</anchorfile>
      <anchor>af217fb56a8f65643be3051bdc836f8e0</anchor>
      <arglist>(RecursiveIterator $iterator, string $filter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>accept</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1Filter_1_1NameFilterIterator.html</anchorfile>
      <anchor>a5db2287dfa10f3a9cb4309eed10fa8da</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Runner::Filter::NameFilterIteratorTest</name>
    <filename>classPHPUnit_1_1Runner_1_1Filter_1_1NameFilterIteratorTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testCaseSensitiveMatch</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1Filter_1_1NameFilterIteratorTest.html</anchorfile>
      <anchor>a2698162a11c8de646f322fe271cfc245</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCaseInsensitiveMatch</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1Filter_1_1NameFilterIteratorTest.html</anchorfile>
      <anchor>a8546d6938f3ce692f42ca1248831019b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Doubler::NameGenerator</name>
    <filename>classProphecy_1_1Doubler_1_1NameGenerator.html</filename>
    <member kind="function">
      <type></type>
      <name>name</name>
      <anchorfile>classProphecy_1_1Doubler_1_1NameGenerator.html</anchorfile>
      <anchor>adde7000a67c87251f5677b8a53081754</anchor>
      <arglist>(ReflectionClass $class=null, array $interfaces)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Util::TestDox::NamePrettifier</name>
    <filename>classPHPUnit_1_1Util_1_1TestDox_1_1NamePrettifier.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1NamePrettifier.html</anchorfile>
      <anchor>a8f5b7507b0474466a9aebd7496a89f4f</anchor>
      <arglist>($useColor=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>prettifyTestClass</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1NamePrettifier.html</anchorfile>
      <anchor>aab373d2f686004df2173d4af497df489</anchor>
      <arglist>(string $className)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>prettifyTestCase</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1NamePrettifier.html</anchorfile>
      <anchor>acc68cfb3164f756b1348f693e3c99616</anchor>
      <arglist>(TestCase $test)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>prettifyDataSet</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1NamePrettifier.html</anchorfile>
      <anchor>aa1b47e7314cda1591e1d7fc86b2e90da</anchor>
      <arglist>(TestCase $test)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>prettifyTestMethod</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1NamePrettifier.html</anchorfile>
      <anchor>aeff9567b2ca3d90212542a68502859be</anchor>
      <arglist>(string $name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Util::TestDox::NamePrettifierTest</name>
    <filename>classPHPUnit_1_1Util_1_1TestDox_1_1NamePrettifierTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testTitleHasSensibleDefaults</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1NamePrettifierTest.html</anchorfile>
      <anchor>aa36edb4f8199b516e28211106d08eecc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTestNameIsConvertedToASentence</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1NamePrettifierTest.html</anchorfile>
      <anchor>aa2c98bacc6d5e9181432ac617e99a9d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTestNameIsNotGroupedWhenNotInSequence</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1NamePrettifierTest.html</anchorfile>
      <anchor>ae0b101693313fa899996f70ff1281024</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testPhpDoxIgnoreDataKeys</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1NamePrettifierTest.html</anchorfile>
      <anchor>aaac5f0fab45f8fe7cd3df4e89b6e9d9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testPhpDoxUsesDefaultValue</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1NamePrettifierTest.html</anchorfile>
      <anchor>a0c247e14167d9825e8bfb5db97f35c71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testPhpDoxArgumentExporting</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1NamePrettifierTest.html</anchorfile>
      <anchor>a908e49619fa3fc9d172b3dd76bcd66df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testPhpDoxReplacesLongerVariablesFirst</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1NamePrettifierTest.html</anchorfile>
      <anchor>ab3d7b3cc304427aa91f11c682ff2f2d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1NamePrettifierTest.html</anchorfile>
      <anchor>a64349be6ee5ce5ad211dfbed672d040f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>tearDown</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1NamePrettifierTest.html</anchorfile>
      <anchor>aad3c977cb05093c4477aa92e6365c1e1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NamespaceCoverageClassExtendedTest</name>
    <filename>classNamespaceCoverageClassExtendedTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classNamespaceCoverageClassExtendedTest.html</anchorfile>
      <anchor>acc261abdf36207a9d6f262aab4bc02fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classNamespaceCoverageClassExtendedTest.html</anchorfile>
      <anchor>acc261abdf36207a9d6f262aab4bc02fd</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NamespaceCoverageClassTest</name>
    <filename>classNamespaceCoverageClassTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classNamespaceCoverageClassTest.html</anchorfile>
      <anchor>a9f6de735ec4a31399096de4b5b21d9c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classNamespaceCoverageClassTest.html</anchorfile>
      <anchor>a9f6de735ec4a31399096de4b5b21d9c6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NamespaceCoverageCoversClassPublicTest</name>
    <filename>classNamespaceCoverageCoversClassPublicTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classNamespaceCoverageCoversClassPublicTest.html</anchorfile>
      <anchor>a7704784c3179a95cb36defd23e5d42e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classNamespaceCoverageCoversClassPublicTest.html</anchorfile>
      <anchor>a7704784c3179a95cb36defd23e5d42e5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NamespaceCoverageCoversClassTest</name>
    <filename>classNamespaceCoverageCoversClassTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classNamespaceCoverageCoversClassTest.html</anchorfile>
      <anchor>add8a6c80699d6d13e1c08d2bd9ace429</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classNamespaceCoverageCoversClassTest.html</anchorfile>
      <anchor>add8a6c80699d6d13e1c08d2bd9ace429</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NamespaceCoverageMethodTest</name>
    <filename>classNamespaceCoverageMethodTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classNamespaceCoverageMethodTest.html</anchorfile>
      <anchor>a355bb8938cab36f6c9491e96d2ce0777</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classNamespaceCoverageMethodTest.html</anchorfile>
      <anchor>a355bb8938cab36f6c9491e96d2ce0777</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NamespaceCoverageNotPrivateTest</name>
    <filename>classNamespaceCoverageNotPrivateTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classNamespaceCoverageNotPrivateTest.html</anchorfile>
      <anchor>ab34fd524a0f98ed925482aa71c9348c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classNamespaceCoverageNotPrivateTest.html</anchorfile>
      <anchor>ab34fd524a0f98ed925482aa71c9348c1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NamespaceCoverageNotProtectedTest</name>
    <filename>classNamespaceCoverageNotProtectedTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classNamespaceCoverageNotProtectedTest.html</anchorfile>
      <anchor>a93940dfe363d4b02167605188b6b8736</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classNamespaceCoverageNotProtectedTest.html</anchorfile>
      <anchor>a93940dfe363d4b02167605188b6b8736</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NamespaceCoverageNotPublicTest</name>
    <filename>classNamespaceCoverageNotPublicTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classNamespaceCoverageNotPublicTest.html</anchorfile>
      <anchor>af995e83a9f324000cffb544fe93e149f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classNamespaceCoverageNotPublicTest.html</anchorfile>
      <anchor>af995e83a9f324000cffb544fe93e149f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NamespaceCoveragePrivateTest</name>
    <filename>classNamespaceCoveragePrivateTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classNamespaceCoveragePrivateTest.html</anchorfile>
      <anchor>aa56c2fabd8275fa4ef5d49f5c030e11f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classNamespaceCoveragePrivateTest.html</anchorfile>
      <anchor>aa56c2fabd8275fa4ef5d49f5c030e11f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NamespaceCoverageProtectedTest</name>
    <filename>classNamespaceCoverageProtectedTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classNamespaceCoverageProtectedTest.html</anchorfile>
      <anchor>ac63e9246c139d4a8afbdd0fafbc0a5d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classNamespaceCoverageProtectedTest.html</anchorfile>
      <anchor>ac63e9246c139d4a8afbdd0fafbc0a5d9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NamespaceCoveragePublicTest</name>
    <filename>classNamespaceCoveragePublicTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classNamespaceCoveragePublicTest.html</anchorfile>
      <anchor>a16476c8cb42ed4aaac9d4fcb5439f01a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classNamespaceCoveragePublicTest.html</anchorfile>
      <anchor>a16476c8cb42ed4aaac9d4fcb5439f01a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>someNamespaceA::NamespacedClass</name>
    <filename>classsomeNamespaceA_1_1NamespacedClass.html</filename>
  </compound>
  <compound kind="class">
    <name>someNamespaceB::NamespacedClass</name>
    <filename>classsomeNamespaceB_1_1NamespacedClass.html</filename>
  </compound>
  <compound kind="class">
    <name>TheSeer::Tokenizer::NamespaceUri</name>
    <filename>classTheSeer_1_1Tokenizer_1_1NamespaceUri.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classTheSeer_1_1Tokenizer_1_1NamespaceUri.html</anchorfile>
      <anchor>ae1cac699fc3298aabc81b6bb852e0b1b</anchor>
      <arglist>(string $value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>asString</name>
      <anchorfile>classTheSeer_1_1Tokenizer_1_1NamespaceUri.html</anchorfile>
      <anchor>a9791267743b0cf7980aec5f5b364a09d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TheSeer::Tokenizer::NamespaceUriException</name>
    <filename>classTheSeer_1_1Tokenizer_1_1NamespaceUriException.html</filename>
    <base>TheSeer::Tokenizer::Exception</base>
  </compound>
  <compound kind="class">
    <name>NewException</name>
    <filename>classNewException.html</filename>
  </compound>
  <compound kind="class">
    <name>NoArgTestCaseTest</name>
    <filename>classNoArgTestCaseTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testNothing</name>
      <anchorfile>classNoArgTestCaseTest.html</anchorfile>
      <anchor>a0266aa2a38a81656fcf972a944191f2f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Exception::Prediction::NoCallsException</name>
    <filename>classProphecy_1_1Exception_1_1Prediction_1_1NoCallsException.html</filename>
    <base>Prophecy::Exception::Prophecy::MethodProphecyException</base>
    <base>Prophecy::Exception::Prediction::PredictionException</base>
  </compound>
  <compound kind="class">
    <name>Prophecy::Prediction::NoCallsPrediction</name>
    <filename>classProphecy_1_1Prediction_1_1NoCallsPrediction.html</filename>
    <base>Prophecy::Prediction::PredictionInterface</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classProphecy_1_1Prediction_1_1NoCallsPrediction.html</anchorfile>
      <anchor>a8ead8142fc9ea1983d8d443256eee8ad</anchor>
      <arglist>(StringUtil $util=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>check</name>
      <anchorfile>classProphecy_1_1Prediction_1_1NoCallsPrediction.html</anchorfile>
      <anchor>a9457af6617db15127b5f51be09d13d35</anchor>
      <arglist>(array $calls, ObjectProphecy $object, MethodProphecy $method)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::NoChildTestSuiteException</name>
    <filename>classPHPUnit_1_1Framework_1_1NoChildTestSuiteException.html</filename>
    <base>PHPUnit::Framework::Exception</base>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::Node</name>
    <filename>classphpDocumentor_1_1Reflection_1_1Node.html</filename>
    <member kind="variable">
      <type></type>
      <name>$children</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Node.html</anchorfile>
      <anchor>a87fc1509f3c7230d37c20f494d2641b9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::CodeCoverage::Report::Xml::Node</name>
    <filename>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1Node.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1Node.html</anchorfile>
      <anchor>a65b475da72d78df96327b6f13fdeb8eb</anchor>
      <arglist>(\DOMElement $context)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getDom</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1Node.html</anchorfile>
      <anchor>acfdbb8ca4075d43343bf658a4500a4f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getTotals</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1Node.html</anchorfile>
      <anchor>ad31f025695e90eb622c7ddca65fcf70c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addDirectory</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1Node.html</anchorfile>
      <anchor>aa687c3d95d66ca692487220031745dd0</anchor>
      <arglist>(string $name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addFile</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1Node.html</anchorfile>
      <anchor>ac6bd2c8ab0db6a1470e1dbfc0a127a82</anchor>
      <arglist>(string $name, string $href)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setContextNode</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1Node.html</anchorfile>
      <anchor>ac89f67b3f0fd9c87663943c610fbf99b</anchor>
      <arglist>(\DOMElement $context)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>getContextNode</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1Node.html</anchorfile>
      <anchor>a063eb3cadb576fd4c1e6146838302187</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NonStatic</name>
    <filename>classNonStatic.html</filename>
    <member kind="function">
      <type></type>
      <name>suite</name>
      <anchorfile>classNonStatic.html</anchorfile>
      <anchor>a56dc77bc4c2c27a2258e8026d0f6b27f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NoTestCaseClass</name>
    <filename>classNoTestCaseClass.html</filename>
  </compound>
  <compound kind="class">
    <name>NoTestCases</name>
    <filename>classNoTestCases.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>noTestCase</name>
      <anchorfile>classNoTestCases.html</anchorfile>
      <anchor>acc25faaade3967d420ac0b9753c837f6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NotExistingCoveredElementTest</name>
    <filename>classNotExistingCoveredElementTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testOne</name>
      <anchorfile>classNotExistingCoveredElementTest.html</anchorfile>
      <anchor>a84c65c860f83af71e0d8c8d446bd3688</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTwo</name>
      <anchorfile>classNotExistingCoveredElementTest.html</anchorfile>
      <anchor>ac0198fb0198e05874319b23a6358a4d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testThree</name>
      <anchorfile>classNotExistingCoveredElementTest.html</anchorfile>
      <anchor>a7ad032a279f150ef28ba195207f3b3a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testOne</name>
      <anchorfile>classNotExistingCoveredElementTest.html</anchorfile>
      <anchor>a84c65c860f83af71e0d8c8d446bd3688</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTwo</name>
      <anchorfile>classNotExistingCoveredElementTest.html</anchorfile>
      <anchor>ac0198fb0198e05874319b23a6358a4d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testThree</name>
      <anchorfile>classNotExistingCoveredElementTest.html</anchorfile>
      <anchor>a7ad032a279f150ef28ba195207f3b3a3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NothingTest</name>
    <filename>classNothingTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testNothing</name>
      <anchorfile>classNothingTest.html</anchorfile>
      <anchor>a20662c2b3618e191aeed99d36f1be6fd</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Error::Notice</name>
    <filename>classPHPUnit_1_1Framework_1_1Error_1_1Notice.html</filename>
    <base>PHPUnit::Framework::Error::Error</base>
  </compound>
  <compound kind="class">
    <name>Prophecy::Argument::Token::NotInArrayToken</name>
    <filename>classProphecy_1_1Argument_1_1Token_1_1NotInArrayToken.html</filename>
    <base>Prophecy::Argument::Token::TokenInterface</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1NotInArrayToken.html</anchorfile>
      <anchor>acbdeea0e3d12dbd06933f2570b5d3852</anchor>
      <arglist>(array $arguments, $strict=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>scoreArgument</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1NotInArrayToken.html</anchorfile>
      <anchor>a7c2c989e608a020f4ed0a498e97402c6</anchor>
      <arglist>($argument)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isLast</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1NotInArrayToken.html</anchorfile>
      <anchor>a95be12c0b6ccdee3e8495f5985c73659</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1NotInArrayToken.html</anchorfile>
      <anchor>a1ee1a3c73c0211ef937e3e9f3fd35d6f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NotPublicTestCase</name>
    <filename>classNotPublicTestCase.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testPublic</name>
      <anchorfile>classNotPublicTestCase.html</anchorfile>
      <anchor>abcfe63b17fa5f4ca2c283b5293371ec0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>testNotPublic</name>
      <anchorfile>classNotPublicTestCase.html</anchorfile>
      <anchor>ad25d5d236ce0ba6af3f49340ce305e7f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NotSelfDescribingTest</name>
    <filename>classNotSelfDescribingTest.html</filename>
    <base>PHPUnit::Framework::Test</base>
    <member kind="function">
      <type></type>
      <name>log</name>
      <anchorfile>classNotSelfDescribingTest.html</anchorfile>
      <anchor>a80ed26ba940adf22e6f1fa0b9ab18a7d</anchor>
      <arglist>($msg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>count</name>
      <anchorfile>classNotSelfDescribingTest.html</anchorfile>
      <anchor>a9960cdc04bba5e201916064ac0369edc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>run</name>
      <anchorfile>classNotSelfDescribingTest.html</anchorfile>
      <anchor>a9bc30a75237c1c83a8199dcc83a7fc7c</anchor>
      <arglist>(TestResult $result=null)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NotVoidTestCase</name>
    <filename>classNotVoidTestCase.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::Types::Null_</name>
    <filename>classphpDocumentor_1_1Reflection_1_1Types_1_1Null__.html</filename>
    <base>phpDocumentor::Reflection::Type</base>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1Null__.html</anchorfile>
      <anchor>ad0ccbc3def9974a82b281ef894d3db6b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::Types::Nullable</name>
    <filename>classphpDocumentor_1_1Reflection_1_1Types_1_1Nullable.html</filename>
    <base>phpDocumentor::Reflection::Type</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1Nullable.html</anchorfile>
      <anchor>a2cc792266bc19f5a9c30f649364043ac</anchor>
      <arglist>(Type $realType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getActualType</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1Nullable.html</anchorfile>
      <anchor>af4ef8ab8ac6523d34f3716309a93b9a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1Nullable.html</anchorfile>
      <anchor>a81070455894473a24af9f7479ea7de9f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::Types::NullableTest</name>
    <filename>classphpDocumentor_1_1Reflection_1_1Types_1_1NullableTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testNullableTypeWrapsCorrectly</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1NullableTest.html</anchorfile>
      <anchor>a4c14c9bd936d0d555a4c2d9cb25cad2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testNullableStringifyCorrectly</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1NullableTest.html</anchorfile>
      <anchor>aff028789a42eb5f70219b0e1079d68f5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Test::NullPrinter</name>
    <filename>classPHPUnit_1_1Test_1_1NullPrinter.html</filename>
    <base>PHPUnit::Util::Printer</base>
    <base>PHPUnit::Framework::TestListener</base>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Runner::NullTestResultCache</name>
    <filename>classPHPUnit_1_1Runner_1_1NullTestResultCache.html</filename>
    <base>PHPUnit::Runner::TestResultCache</base>
    <member kind="function">
      <type></type>
      <name>setState</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1NullTestResultCache.html</anchorfile>
      <anchor>a25e5752ffea0fc4ca556270eab654f6a</anchor>
      <arglist>(string $testName, int $state)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getState</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1NullTestResultCache.html</anchorfile>
      <anchor>a2b52be4097a223b29b3f50821d5136cc</anchor>
      <arglist>(string $testName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setTime</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1NullTestResultCache.html</anchorfile>
      <anchor>a9cc90e86d40d95ba24a2375e0f79bc33</anchor>
      <arglist>(string $testName, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getTime</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1NullTestResultCache.html</anchorfile>
      <anchor>a7bd56ef398e32088773bcda0418a939a</anchor>
      <arglist>(string $testName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>load</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1NullTestResultCache.html</anchorfile>
      <anchor>a6f1fbae7fd5728f20bacbc1c047f65c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>persist</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1NullTestResultCache.html</anchorfile>
      <anchor>acff620f4dff87f47b77733ca0d4efd1a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NullTestResultCacheTest</name>
    <filename>classNullTestResultCacheTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testHasWorkingStubs</name>
      <anchorfile>classNullTestResultCacheTest.html</anchorfile>
      <anchor>a70b9c48e0cb3de223d85895a95b006c9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Type::NullType</name>
    <filename>classSebastianBergmann_1_1Type_1_1NullType.html</filename>
    <base>SebastianBergmann::Type::Type</base>
    <member kind="function">
      <type></type>
      <name>isAssignable</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1NullType.html</anchorfile>
      <anchor>a4d2290508f66de8e3378b2f1365862e6</anchor>
      <arglist>(Type $other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getReturnTypeDeclaration</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1NullType.html</anchorfile>
      <anchor>a59e0462a44ec9e46bdc5c5931a7b4134</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>allowsNull</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1NullType.html</anchorfile>
      <anchor>a4fa8720ccea0c9b10c4ad1c154512cbf</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Type::NullTypeTest</name>
    <filename>classSebastianBergmann_1_1Type_1_1NullTypeTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testIsAssignable</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1NullTypeTest.html</anchorfile>
      <anchor>ad5658656b64de16fd5a4b72226ce5be1</anchor>
      <arglist>(Type $assignableType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>assignableTypes</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1NullTypeTest.html</anchorfile>
      <anchor>a1e59d8cedca4dd3f890a5528c8102a6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIsNotAssignable</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1NullTypeTest.html</anchorfile>
      <anchor>ab04b0fd16653c479cf92be1a32f2b2b0</anchor>
      <arglist>(Type $assignedType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>notAssignable</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1NullTypeTest.html</anchorfile>
      <anchor>ac42277adc5de78d06fced1dd35da4a95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAllowsNull</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1NullTypeTest.html</anchorfile>
      <anchor>a8ba5b9102b6336f133dc2435e9b5a1b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCanGenerateReturnTypeDeclaration</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1NullTypeTest.html</anchorfile>
      <anchor>ad79ea50d446fdcb516c6ab55f665669e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1NullTypeTest.html</anchorfile>
      <anchor>a4dc36f2ede6688c3fc6956909f0bc6af</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Comparator::NumericComparator</name>
    <filename>classSebastianBergmann_1_1Comparator_1_1NumericComparator.html</filename>
    <base>SebastianBergmann::Comparator::ScalarComparator</base>
    <member kind="function">
      <type></type>
      <name>accepts</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1NumericComparator.html</anchorfile>
      <anchor>abe48c3a316e0b81fa297b2dbac8ca226</anchor>
      <arglist>($expected, $actual)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>assertEquals</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1NumericComparator.html</anchorfile>
      <anchor>a16d34515c1422362b085915068caba0e</anchor>
      <arglist>($expected, $actual, $delta=0.0, $canonicalize=false, $ignoreCase=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Comparator::NumericComparatorTest</name>
    <filename>classSebastianBergmann_1_1Comparator_1_1NumericComparatorTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>acceptsSucceedsProvider</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1NumericComparatorTest.html</anchorfile>
      <anchor>a4d6de8f02ff4e08e1958b9023434578b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>acceptsFailsProvider</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1NumericComparatorTest.html</anchorfile>
      <anchor>a8c17c9e26614c5f90ba41cf1bcdf3dac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>assertEqualsSucceedsProvider</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1NumericComparatorTest.html</anchorfile>
      <anchor>aee6e4569fb343e5accc1c1c4a3f06998</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>assertEqualsFailsProvider</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1NumericComparatorTest.html</anchorfile>
      <anchor>a81f01774fa98e7ddd98fa7c3eb1752e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAcceptsSucceeds</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1NumericComparatorTest.html</anchorfile>
      <anchor>af6a94570388b27851addacb0f6115d2a</anchor>
      <arglist>($expected, $actual)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAcceptsFails</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1NumericComparatorTest.html</anchorfile>
      <anchor>abeaee4ac9921696662a303f6980f483f</anchor>
      <arglist>($expected, $actual)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertEqualsSucceeds</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1NumericComparatorTest.html</anchorfile>
      <anchor>a3448a1bc383c05edc0c008e1fd5e2efe</anchor>
      <arglist>($expected, $actual, $delta=0.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertEqualsFails</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1NumericComparatorTest.html</anchorfile>
      <anchor>a67552721fc1a6b849ab7c0f69c5e6e83</anchor>
      <arglist>($expected, $actual, $delta=0.0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1NumericComparatorTest.html</anchorfile>
      <anchor>a19b6c007432dc17cd9fb63f9658152b9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NumericGroupAnnotationTest</name>
    <filename>classNumericGroupAnnotationTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testTicketAnnotationSupportsNumericValue</name>
      <anchorfile>classNumericGroupAnnotationTest.html</anchorfile>
      <anchor>a7831b85dedb8430b901a2efe710458b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGroupAnnotationSupportsNumericValue</name>
      <anchorfile>classNumericGroupAnnotationTest.html</anchorfile>
      <anchor>aa071718bad84365fa5baa9fe6a29f493</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testDummyTestThatShouldNotRun</name>
      <anchorfile>classNumericGroupAnnotationTest.html</anchorfile>
      <anchor>abb182f87502d3a8c12df22a153e369eb</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::Types::Object_</name>
    <filename>classphpDocumentor_1_1Reflection_1_1Types_1_1Object__.html</filename>
    <base>phpDocumentor::Reflection::Type</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1Object__.html</anchorfile>
      <anchor>a67a1985f21bd9863300e59250928707d</anchor>
      <arglist>(?Fqsen $fqsen=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getFqsen</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1Object__.html</anchorfile>
      <anchor>a12a2fe518602c2fd8d5d65342a4c8648</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1Object__.html</anchorfile>
      <anchor>a53b9d78100de1ec69af616dfa099b4ab</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Comparator::ObjectComparator</name>
    <filename>classSebastianBergmann_1_1Comparator_1_1ObjectComparator.html</filename>
    <base>SebastianBergmann::Comparator::ArrayComparator</base>
    <member kind="function">
      <type></type>
      <name>accepts</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ObjectComparator.html</anchorfile>
      <anchor>a074be1fd6bab6c17cf2c8d5b8f5cbfd4</anchor>
      <arglist>($expected, $actual)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>assertEquals</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ObjectComparator.html</anchorfile>
      <anchor>a76889686e0db3ad5bc983cf168093a97</anchor>
      <arglist>($expected, $actual, $delta=0.0, $canonicalize=false, $ignoreCase=false, array &amp;$processed=[])</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>toArray</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ObjectComparator.html</anchorfile>
      <anchor>ac9b3d18b69bce12616727dd0f38d6956</anchor>
      <arglist>($object)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Comparator::ObjectComparatorTest</name>
    <filename>classSebastianBergmann_1_1Comparator_1_1ObjectComparatorTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>acceptsSucceedsProvider</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ObjectComparatorTest.html</anchorfile>
      <anchor>a30ed6b7c20449f133ea483207bc8b1d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>acceptsFailsProvider</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ObjectComparatorTest.html</anchorfile>
      <anchor>a55277c3edaed319a23039ec21aba57a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>assertEqualsSucceedsProvider</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ObjectComparatorTest.html</anchorfile>
      <anchor>a2dcbb05eac0eccc5326037679d3bb38e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>assertEqualsFailsProvider</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ObjectComparatorTest.html</anchorfile>
      <anchor>a1e29247964980b4e4be16e2352b68fa3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAcceptsSucceeds</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ObjectComparatorTest.html</anchorfile>
      <anchor>ae3f5f6b82d99b7f92668c4839071c1eb</anchor>
      <arglist>($expected, $actual)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAcceptsFails</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ObjectComparatorTest.html</anchorfile>
      <anchor>a30ae8cd7617ad5a6e4d4e9c60305dfe6</anchor>
      <arglist>($expected, $actual)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertEqualsSucceeds</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ObjectComparatorTest.html</anchorfile>
      <anchor>ae027d8c2fd6dac49ba1c9c5f04f8a14d</anchor>
      <arglist>($expected, $actual, $delta=0.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertEqualsFails</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ObjectComparatorTest.html</anchorfile>
      <anchor>a03c358e6c96a27022ce1ad658ca780eb</anchor>
      <arglist>($expected, $actual, $message, $delta=0.0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ObjectComparatorTest.html</anchorfile>
      <anchor>a8162ae4889cb1773efbb046e18cdf393</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::ObjectHasAttribute</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1ObjectHasAttribute.html</filename>
    <base>PHPUnit::Framework::Constraint::ClassHasAttribute</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>matches</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1ObjectHasAttribute.html</anchorfile>
      <anchor>a8cb91899f9f2e737e705898187dc9bae</anchor>
      <arglist>($other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::ObjectHasAttributeTest</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1ObjectHasAttributeTest.html</filename>
    <base>PHPUnit::Framework::Constraint::ConstraintTestCase</base>
    <member kind="function">
      <type></type>
      <name>testConstraintObjectHasAttribute</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1ObjectHasAttributeTest.html</anchorfile>
      <anchor>ac53e3e180ebe16e176e4add02c4b152d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintObjectHasAttribute2</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1ObjectHasAttributeTest.html</anchorfile>
      <anchor>a66e92dfadbf46f1304bc12cd9441b051</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Prophecy::ObjectProphecy</name>
    <filename>classProphecy_1_1Prophecy_1_1ObjectProphecy.html</filename>
    <base>Prophecy::Prophecy::ProphecyInterface</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classProphecy_1_1Prophecy_1_1ObjectProphecy.html</anchorfile>
      <anchor>a2c1b1742b83cefd53d3faeae44a06ddd</anchor>
      <arglist>(LazyDouble $lazyDouble, CallCenter $callCenter=null, RevealerInterface $revealer=null, ComparatorFactory $comparatorFactory=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>willExtend</name>
      <anchorfile>classProphecy_1_1Prophecy_1_1ObjectProphecy.html</anchorfile>
      <anchor>add88800b6bc9f4b8d407154c4af5754e</anchor>
      <arglist>($class)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>willImplement</name>
      <anchorfile>classProphecy_1_1Prophecy_1_1ObjectProphecy.html</anchorfile>
      <anchor>a01c030b07b69597dd1eb3d3049972cb1</anchor>
      <arglist>($interface)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>willBeConstructedWith</name>
      <anchorfile>classProphecy_1_1Prophecy_1_1ObjectProphecy.html</anchorfile>
      <anchor>a1e48a854fb33bd7c32c213f4329be56c</anchor>
      <arglist>(array $arguments=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>reveal</name>
      <anchorfile>classProphecy_1_1Prophecy_1_1ObjectProphecy.html</anchorfile>
      <anchor>af1392ec4d683e710a389db2ec3292e0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addMethodProphecy</name>
      <anchorfile>classProphecy_1_1Prophecy_1_1ObjectProphecy.html</anchorfile>
      <anchor>abb9148662b21de7ccb51ebd0e98b25a0</anchor>
      <arglist>(MethodProphecy $methodProphecy)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getMethodProphecies</name>
      <anchorfile>classProphecy_1_1Prophecy_1_1ObjectProphecy.html</anchorfile>
      <anchor>a33c4dbe97dcbe104a23d541432214345</anchor>
      <arglist>($methodName=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>makeProphecyMethodCall</name>
      <anchorfile>classProphecy_1_1Prophecy_1_1ObjectProphecy.html</anchorfile>
      <anchor>a43ed33df921f39b63df7cafb06754012</anchor>
      <arglist>($methodName, array $arguments)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>findProphecyMethodCalls</name>
      <anchorfile>classProphecy_1_1Prophecy_1_1ObjectProphecy.html</anchorfile>
      <anchor>a9d219989b7e98300460515af854c75bd</anchor>
      <arglist>($methodName, ArgumentsWildcard $wildcard)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>checkProphecyMethodsPredictions</name>
      <anchorfile>classProphecy_1_1Prophecy_1_1ObjectProphecy.html</anchorfile>
      <anchor>af37cadd4ff1ea698af6c55a1b694910a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__call</name>
      <anchorfile>classProphecy_1_1Prophecy_1_1ObjectProphecy.html</anchorfile>
      <anchor>acc299c2a67a255e556240c7a126a003c</anchor>
      <arglist>($methodName, array $arguments)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__get</name>
      <anchorfile>classProphecy_1_1Prophecy_1_1ObjectProphecy.html</anchorfile>
      <anchor>a162b51fe62bf1630163cdce6ade4fb00</anchor>
      <arglist>($name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__set</name>
      <anchorfile>classProphecy_1_1Prophecy_1_1ObjectProphecy.html</anchorfile>
      <anchor>ab7043d079bf24a92ef44076431011c44</anchor>
      <arglist>($name, $value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Exception::Prophecy::ObjectProphecyException</name>
    <filename>classProphecy_1_1Exception_1_1Prophecy_1_1ObjectProphecyException.html</filename>
    <base>Prophecy::Exception::Prophecy::ProphecyException</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classProphecy_1_1Exception_1_1Prophecy_1_1ObjectProphecyException.html</anchorfile>
      <anchor>a7bacf3c59645c333b387a0b6a63da084</anchor>
      <arglist>($message, ObjectProphecy $objectProphecy)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getObjectProphecy</name>
      <anchorfile>classProphecy_1_1Exception_1_1Prophecy_1_1ObjectProphecyException.html</anchorfile>
      <anchor>af2e2a930a5ef60a58b0aabe0296b161e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::ObjectReflector::ObjectReflector</name>
    <filename>classSebastianBergmann_1_1ObjectReflector_1_1ObjectReflector.html</filename>
    <member kind="function">
      <type></type>
      <name>getAttributes</name>
      <anchorfile>classSebastianBergmann_1_1ObjectReflector_1_1ObjectReflector.html</anchorfile>
      <anchor>a75a84bef385b05c49b26c97f5cc1be24</anchor>
      <arglist>($object)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::ObjectReflector::ObjectReflectorTest</name>
    <filename>classSebastianBergmann_1_1ObjectReflector_1_1ObjectReflectorTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testReflectsAttributesOfObject</name>
      <anchorfile>classSebastianBergmann_1_1ObjectReflector_1_1ObjectReflectorTest.html</anchorfile>
      <anchor>a6ccf44a44e21054e57ac7e2d9705dd0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testReflectsAttributeWithIntegerName</name>
      <anchorfile>classSebastianBergmann_1_1ObjectReflector_1_1ObjectReflectorTest.html</anchorfile>
      <anchor>a71326ab4747b4c754285fd545285768a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testRaisesExceptionWhenPassedArgumentIsNotAnObject</name>
      <anchorfile>classSebastianBergmann_1_1ObjectReflector_1_1ObjectReflectorTest.html</anchorfile>
      <anchor>ab3c380504da53ef2ba0ac82704a1774c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classSebastianBergmann_1_1ObjectReflector_1_1ObjectReflectorTest.html</anchorfile>
      <anchor>a3503fcdd7d7121e685085f0180f41e3a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Argument::Token::ObjectStateToken</name>
    <filename>classProphecy_1_1Argument_1_1Token_1_1ObjectStateToken.html</filename>
    <base>Prophecy::Argument::Token::TokenInterface</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1ObjectStateToken.html</anchorfile>
      <anchor>ac679400fa9e35c9599a3380887b35417</anchor>
      <arglist>( $methodName, $value, StringUtil $util=null, ComparatorFactory $comparatorFactory=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>scoreArgument</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1ObjectStateToken.html</anchorfile>
      <anchor>a690ef6d94575978d4be4809c592660f6</anchor>
      <arglist>($argument)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isLast</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1ObjectStateToken.html</anchorfile>
      <anchor>aff0aab8ef271ce314a6b7fb96713e1e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1ObjectStateToken.html</anchorfile>
      <anchor>a19208444e9d721f0a5fd31eb944a525b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Type::ObjectType</name>
    <filename>classSebastianBergmann_1_1Type_1_1ObjectType.html</filename>
    <base>SebastianBergmann::Type::Type</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1ObjectType.html</anchorfile>
      <anchor>ab07ee5d0ccd21c31505e415ecc6b60ec</anchor>
      <arglist>(TypeName $className, bool $allowsNull)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isAssignable</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1ObjectType.html</anchorfile>
      <anchor>a0a776ae8d3fbb36e0a8f3bcb15f4c40a</anchor>
      <arglist>(Type $other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getReturnTypeDeclaration</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1ObjectType.html</anchorfile>
      <anchor>a5ce466036752d82ff17d088fcb83f5b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>allowsNull</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1ObjectType.html</anchorfile>
      <anchor>aa0a00f2c63ef87a228e6e03bd592facd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>className</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1ObjectType.html</anchorfile>
      <anchor>a147d1a9c3cffbc3dec0a4c9f9401e479</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Type::ObjectTypeTest</name>
    <filename>classSebastianBergmann_1_1Type_1_1ObjectTypeTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testParentIsNotAssignableToChild</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1ObjectTypeTest.html</anchorfile>
      <anchor>a66646f3c724e288bd258af534201155f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testChildIsAssignableToParent</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1ObjectTypeTest.html</anchorfile>
      <anchor>ae2066b1f2032e30dc9a1fa014799a242</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testClassIsAssignableToSelf</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1ObjectTypeTest.html</anchorfile>
      <anchor>a528f69a1ea742c9f71452fa41f2fa9e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSimpleTypeIsNotAssignableToClass</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1ObjectTypeTest.html</anchorfile>
      <anchor>acf8609f0e6a93efedd505dc2587e313a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testClassFromOneNamespaceIsNotAssignableToClassInOtherNamespace</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1ObjectTypeTest.html</anchorfile>
      <anchor>a7602bdf9e44bbbcdd57bf82de8775d7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testClassIsAssignableToSelfCaseInsensitively</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1ObjectTypeTest.html</anchorfile>
      <anchor>a0adfced770b09a068966369ae63078e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testNullIsAssignableToNullableType</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1ObjectTypeTest.html</anchorfile>
      <anchor>a891e167297d84605c48420e69b2e0368</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testNullIsNotAssignableToNotNullableType</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1ObjectTypeTest.html</anchorfile>
      <anchor>ad129c7ad2bc2480c4ff2d9d07d6cfae9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testPreservesNullNotAllowed</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1ObjectTypeTest.html</anchorfile>
      <anchor>a529e615e1e5cba5c6cf9264cf3b66cca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testPreservesNullAllowed</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1ObjectTypeTest.html</anchorfile>
      <anchor>af2ed51cbf6604a6196ecc98bc226a1dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCanGenerateReturnTypeDeclaration</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1ObjectTypeTest.html</anchorfile>
      <anchor>a8ddc4b04dfaf97e2a3f672d171e43394</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasClassName</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1ObjectTypeTest.html</anchorfile>
      <anchor>aae0f8ff97ea0c00a2d54aa2a44d796bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1ObjectTypeTest.html</anchorfile>
      <anchor>a3e4fbf79e6a26d9b80c593b898dc16be</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>Contracts::OffsetterInterface</name>
    <filename>interfaceContracts_1_1OffsetterInterface.html</filename>
    <member kind="function">
      <type></type>
      <name>offsetBy</name>
      <anchorfile>interfaceContracts_1_1OffsetterInterface.html</anchorfile>
      <anchor>a946afaa4071a23cb5321f137b9a23c9e</anchor>
      <arglist>(int $offset)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OneTest</name>
    <filename>classOneTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testOne</name>
      <anchorfile>classOneTest.html</anchorfile>
      <anchor>a544f8f83a5ae42fbd52f974de9416445</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classOneTest.html</anchorfile>
      <anchor>a03c6fd1fa78d2f97891f84523cec80d0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OneTestCase</name>
    <filename>classOneTestCase.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>noTestCase</name>
      <anchorfile>classOneTestCase.html</anchorfile>
      <anchor>a794ebb97c584b49d365b0d6a54d3a565</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCase</name>
      <anchorfile>classOneTestCase.html</anchorfile>
      <anchor>a42737bba79d9f0d8eb8293f50df92c48</anchor>
      <arglist>($arg=&apos;&apos;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Environment::OperatingSystem</name>
    <filename>classSebastianBergmann_1_1Environment_1_1OperatingSystem.html</filename>
    <member kind="function">
      <type></type>
      <name>getFamily</name>
      <anchorfile>classSebastianBergmann_1_1Environment_1_1OperatingSystem.html</anchorfile>
      <anchor>a116c10eb14487fcef1e6fabbcf575f0e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Environment::OperatingSystemTest</name>
    <filename>classSebastianBergmann_1_1Environment_1_1OperatingSystemTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testFamilyCanBeRetrieved</name>
      <anchorfile>classSebastianBergmann_1_1Environment_1_1OperatingSystemTest.html</anchorfile>
      <anchor>a6c4f3d450bad61aa64a43630944f6c4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFamilyReturnsDarwinWhenRunningOnDarwin</name>
      <anchorfile>classSebastianBergmann_1_1Environment_1_1OperatingSystemTest.html</anchorfile>
      <anchor>ada0e26b3f3f9d705556403db10c1778c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetFamilyReturnsWindowsWhenRunningOnWindows</name>
      <anchorfile>classSebastianBergmann_1_1Environment_1_1OperatingSystemTest.html</anchorfile>
      <anchor>a178fb99bb57ccd4581483c0ab80babb2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetFamilyReturnsPhpOsFamilyWhenRunningOnPhp72AndGreater</name>
      <anchorfile>classSebastianBergmann_1_1Environment_1_1OperatingSystemTest.html</anchorfile>
      <anchor>ab84a6358f1da4efc3ac6784408c091d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classSebastianBergmann_1_1Environment_1_1OperatingSystemTest.html</anchorfile>
      <anchor>a718417eb1baa1733c3f35039286ab8e8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Version::OrVersionConstraintGroup</name>
    <filename>classPharIo_1_1Version_1_1OrVersionConstraintGroup.html</filename>
    <base>PharIo::Version::AbstractVersionConstraint</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPharIo_1_1Version_1_1OrVersionConstraintGroup.html</anchorfile>
      <anchor>a3b223a760e37121b3c4807e815947e96</anchor>
      <arglist>($originalValue, array $constraints)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>complies</name>
      <anchorfile>classPharIo_1_1Version_1_1OrVersionConstraintGroup.html</anchorfile>
      <anchor>a400e2603eb9c895e79fd52cc5d39c3fd</anchor>
      <arglist>(Version $version)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Version::OrVersionConstraintGroupTest</name>
    <filename>classPharIo_1_1Version_1_1OrVersionConstraintGroupTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testReturnsTrueIfOneConstraintReturnsFalse</name>
      <anchorfile>classPharIo_1_1Version_1_1OrVersionConstraintGroupTest.html</anchorfile>
      <anchor>ac29eb94178da2a6f4f9cce9615e970d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testReturnsTrueIfAllConstraintsReturnsTrue</name>
      <anchorfile>classPharIo_1_1Version_1_1OrVersionConstraintGroupTest.html</anchorfile>
      <anchor>a4b2657859ffd547930d9eee2bd6d1709</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testReturnsFalseIfAllConstraintsReturnsFalse</name>
      <anchorfile>classPharIo_1_1Version_1_1OrVersionConstraintGroupTest.html</anchorfile>
      <anchor>aa203e48f1251f8909a8bf86b5bd149e9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::OutputError</name>
    <filename>classPHPUnit_1_1Framework_1_1OutputError.html</filename>
    <base>PHPUnit::Framework::AssertionFailedError</base>
  </compound>
  <compound kind="class">
    <name>OutputTestCase</name>
    <filename>classOutputTestCase.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testExpectOutputStringFooActualFoo</name>
      <anchorfile>classOutputTestCase.html</anchorfile>
      <anchor>afd9b99149e85cde645c8b3810544bbb8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExpectOutputStringFooActualBar</name>
      <anchorfile>classOutputTestCase.html</anchorfile>
      <anchor>a06fbac991ab9c215b65d85af49ec6717</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExpectOutputRegexFooActualFoo</name>
      <anchorfile>classOutputTestCase.html</anchorfile>
      <anchor>a2fe5934f67debf89336e74facac09525</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExpectOutputRegexFooActualBar</name>
      <anchorfile>classOutputTestCase.html</anchorfile>
      <anchor>a42b9c0793cbc7ffec42aa83287059bff</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OverrideTestCase</name>
    <filename>classOverrideTestCase.html</filename>
    <base>OneTestCase</base>
    <member kind="function">
      <type></type>
      <name>testCase</name>
      <anchorfile>classOverrideTestCase.html</anchorfile>
      <anchor>adf60f1941e660d00308f445132629d40</anchor>
      <arglist>($arg=&apos;&apos;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocBlock::Tags::Param</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Param.html</filename>
    <base>phpDocumentor::Reflection::DocBlock::Tags::TagWithType</base>
    <base>phpDocumentor::Reflection::DocBlock::Tags::Factory::StaticMethod</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Param.html</anchorfile>
      <anchor>a2eb66095cf632740513f4aad2e14816a</anchor>
      <arglist>(?string $variableName, ?Type $type=null, bool $isVariadic=false, ?Description $description=null, bool $isReference=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getVariableName</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Param.html</anchorfile>
      <anchor>ad908ed1d9073f9d5cff966e87e90b8d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isVariadic</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Param.html</anchorfile>
      <anchor>a5952fcdf2ca90e47a1d3d39fd0bfc10f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isReference</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Param.html</anchorfile>
      <anchor>a0d8ae1d37f460db04519502e5586c23e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Param.html</anchorfile>
      <anchor>a78e6056646716327b8e8308497097098</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>create</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Param.html</anchorfile>
      <anchor>ab739b1c32478a530db20ddeff7e85e0f</anchor>
      <arglist>(string $body, ?TypeResolver $typeResolver=null, ?DescriptionFactory $descriptionFactory=null, ?TypeContext $context=null)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::MockObject::Rule::Parameters</name>
    <filename>classPHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1Parameters.html</filename>
    <base>PHPUnit::Framework::MockObject::Rule::ParametersRule</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1Parameters.html</anchorfile>
      <anchor>a1c72930dd3c960d99aa62e4fd045e8ec</anchor>
      <arglist>(array $parameters)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1Parameters.html</anchorfile>
      <anchor>af6137b7c8979a48a5e01947d82ebaac7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>apply</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1Parameters.html</anchorfile>
      <anchor>a898a05ed3ca7a036ca1c954dde624f57</anchor>
      <arglist>(BaseInvocation $invocation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>verify</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1Parameters.html</anchorfile>
      <anchor>a72adc96da1bdb11558fba61d072c24fe</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>PHPUnit::Framework::MockObject::Builder::ParametersMatch</name>
    <filename>interfacePHPUnit_1_1Framework_1_1MockObject_1_1Builder_1_1ParametersMatch.html</filename>
    <base>PHPUnit::Framework::MockObject::Builder::Match</base>
    <member kind="function">
      <type></type>
      <name>with</name>
      <anchorfile>interfacePHPUnit_1_1Framework_1_1MockObject_1_1Builder_1_1ParametersMatch.html</anchorfile>
      <anchor>ac624d7f9730faaf4b893cb66cfb602f8</anchor>
      <arglist>(... $arguments)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>withAnyParameters</name>
      <anchorfile>interfacePHPUnit_1_1Framework_1_1MockObject_1_1Builder_1_1ParametersMatch.html</anchorfile>
      <anchor>aee985070d0201e1b7483858ae92359de</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>PHPUnit::Framework::MockObject::Rule::ParametersRule</name>
    <filename>interfacePHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1ParametersRule.html</filename>
    <base>PHPUnit::Framework::SelfDescribing</base>
    <base>PHPUnit::Framework::MockObject::Verifiable</base>
    <member kind="function">
      <type></type>
      <name>apply</name>
      <anchorfile>interfacePHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1ParametersRule.html</anchorfile>
      <anchor>a3c0d869b486292095081f2b21df134cd</anchor>
      <arglist>(BaseInvocation $invocation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>verify</name>
      <anchorfile>interfacePHPUnit_1_1Framework_1_1MockObject_1_1Rule_1_1ParametersRule.html</anchorfile>
      <anchor>aa3fcfce3608a68317dab3158b9454db3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocBlock::Tags::ParamTest</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1ParamTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>tearDown</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1ParamTest.html</anchorfile>
      <anchor>a8a780ce434e9441e5bff4c516d840764</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIfCorrectTagNameIsReturned</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1ParamTest.html</anchorfile>
      <anchor>acc56aa461cb8bd0927730b60fda96fc4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIfTagCanBeRenderedUsingDefaultFormatter</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1ParamTest.html</anchorfile>
      <anchor>a3ca41bec08b5fe39ada480c2502e2617</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIfTagCanBeRenderedUsingSpecificFormatter</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1ParamTest.html</anchorfile>
      <anchor>ae793da4396af095cef492afe1e4e4ee7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasVariableName</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1ParamTest.html</anchorfile>
      <anchor>a05f431a2a1842543828d9c07e3ad9620</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasType</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1ParamTest.html</anchorfile>
      <anchor>a33bfd74873ecbd995107b0bffc0535df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIfParameterIsVariadic</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1ParamTest.html</anchorfile>
      <anchor>a5a2ed531a2d9b1569446f6ca9c19197b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasDescription</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1ParamTest.html</anchorfile>
      <anchor>ac8304d3387682fc6a3d846b5f06dfc31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStringRepresentationIsReturned</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1ParamTest.html</anchorfile>
      <anchor>a45fc9e63160a361602d669cb5b5233b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethod</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1ParamTest.html</anchorfile>
      <anchor>abb5f0430a04edc9a8169e6d0a11ccd6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodWithVariadic</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1ParamTest.html</anchorfile>
      <anchor>a50b671aaa819bc74344e3e1ab34d3430</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodWithReference</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1ParamTest.html</anchorfile>
      <anchor>a0543ceecf43fb80f4c325a00c1cf8119</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodWithVariadicReference</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1ParamTest.html</anchorfile>
      <anchor>a19d750b17c96e5996c6c5a7b01486d5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodWithReferenceWithoutType</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1ParamTest.html</anchorfile>
      <anchor>a17f6f91bad9d02703875b573d950f595</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodWithVariadicReferenceWithoutType</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1ParamTest.html</anchorfile>
      <anchor>aad4e1fd6b3575703d62c6093b751377b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodWithoutType</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1ParamTest.html</anchorfile>
      <anchor>a39d1a630662c695bffb9660cc4150c25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodWithType</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1ParamTest.html</anchorfile>
      <anchor>a064c10366c7dd30577f8a193094425dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodFailsIfEmptyBodyIsGiven</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1ParamTest.html</anchorfile>
      <anchor>a840d2ca6b3356b12d3dcda0739a89c24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodFailsIfResolverIsNull</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1ParamTest.html</anchorfile>
      <anchor>aa9509bd595d100577fdd0d9aed938af9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodFailsIfDescriptionFactoryIsNull</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1ParamTest.html</anchorfile>
      <anchor>afa2f441b4255d94949b58f0bd8dd74c7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::Types::Parent_</name>
    <filename>classphpDocumentor_1_1Reflection_1_1Types_1_1Parent__.html</filename>
    <base>phpDocumentor::Reflection::Type</base>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1Parent__.html</anchorfile>
      <anchor>a651fcf5c0fb15fe62add33df3421be71</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::TestFixture::MockObject::ParentClass</name>
    <filename>classPHPUnit_1_1TestFixture_1_1MockObject_1_1ParentClass.html</filename>
    <member kind="function">
      <type></type>
      <name>foo</name>
      <anchorfile>classPHPUnit_1_1TestFixture_1_1MockObject_1_1ParentClass.html</anchorfile>
      <anchor>a8deecdf987922aec068f14a9428eac6d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::ObjectReflector::TestFixture::ParentClass</name>
    <filename>classSebastianBergmann_1_1ObjectReflector_1_1TestFixture_1_1ParentClass.html</filename>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Type::TestFixture::ParentClass</name>
    <filename>classSebastianBergmann_1_1Type_1_1TestFixture_1_1ParentClass.html</filename>
    <member kind="function">
      <type></type>
      <name>foo</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1TestFixture_1_1ParentClass.html</anchorfile>
      <anchor>ae637e36955e7d0eb5383bcb4aeea105f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ParentClassWithPrivateAttributes</name>
    <filename>classParentClassWithPrivateAttributes.html</filename>
  </compound>
  <compound kind="class">
    <name>ParentClassWithProtectedAttributes</name>
    <filename>classParentClassWithProtectedAttributes.html</filename>
    <base>ParentClassWithPrivateAttributes</base>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$protectedParentAttribute</name>
      <anchorfile>classParentClassWithProtectedAttributes.html</anchorfile>
      <anchor>a66c4cad0d975b96620c9f0dff09c01d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static</type>
      <name>$protectedStaticParentAttribute</name>
      <anchorfile>classParentClassWithProtectedAttributes.html</anchorfile>
      <anchor>a8635283e0fc1c687e6fec3214eae4d6b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ParentSuite</name>
    <filename>classParentSuite.html</filename>
    <member kind="function" static="yes">
      <type>static</type>
      <name>suite</name>
      <anchorfile>classParentSuite.html</anchorfile>
      <anchor>a4849302c7f32d975a4cd0705395c0246</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Diff::Parser</name>
    <filename>classSebastianBergmann_1_1Diff_1_1Parser.html</filename>
    <member kind="function">
      <type></type>
      <name>parse</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Parser.html</anchorfile>
      <anchor>aba7daf9b5004aea57b38890c946f37e4</anchor>
      <arglist>(string $string)</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>Contracts::ParserInterface</name>
    <filename>interfaceContracts_1_1ParserInterface.html</filename>
    <member kind="function">
      <type></type>
      <name>feed</name>
      <anchorfile>interfaceContracts_1_1ParserInterface.html</anchorfile>
      <anchor>ac3e95f97f252f87048ac17ef025886ff</anchor>
      <arglist>(string $chunk)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getRecord</name>
      <anchorfile>interfaceContracts_1_1ParserInterface.html</anchorfile>
      <anchor>a89a67feff1879b2d8f21fd6a73c71121</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>reset</name>
      <anchorfile>interfaceContracts_1_1ParserInterface.html</anchorfile>
      <anchor>a053c26ae5bd635e856591dc171af4cf6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>finish</name>
      <anchorfile>interfaceContracts_1_1ParserInterface.html</anchorfile>
      <anchor>a426d261201149954870d876c9a2d6473</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Diff::ParserTest</name>
    <filename>classSebastianBergmann_1_1Diff_1_1ParserTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testParse</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1ParserTest.html</anchorfile>
      <anchor>ac8958b051973d1e632bc8f055cc95d5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testParseWithMultipleChunks</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1ParserTest.html</anchorfile>
      <anchor>a9e771a4828950bfe9828fbc4fcd13f01</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testParser</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1ParserTest.html</anchorfile>
      <anchor>ae5fc32fe1498a69bb65997e4be405bca</anchor>
      <arglist>(string $diff, array $expected)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>diffProvider</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1ParserTest.html</anchorfile>
      <anchor>a775ae11a3066e9aee96c2d7cda5eeb83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1ParserTest.html</anchorfile>
      <anchor>a07871d2416aaac319df9fbf29f2c6627</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ParseTestMethodAnnotationsMock</name>
    <filename>classParseTestMethodAnnotationsMock.html</filename>
  </compound>
  <compound kind="class">
    <name>PartialMockTestClass</name>
    <filename>classPartialMockTestClass.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPartialMockTestClass.html</anchorfile>
      <anchor>a819515f06fd79410e6bd77acb1079df8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>doSomething</name>
      <anchorfile>classPartialMockTestClass.html</anchorfile>
      <anchor>af4026ab63729687ec6732588bd5c99bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>doAnotherThing</name>
      <anchorfile>classPartialMockTestClass.html</anchorfile>
      <anchor>ab03b1fa94fae6dc841fc546ff44174ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$constructorCalled</name>
      <anchorfile>classPartialMockTestClass.html</anchorfile>
      <anchor>a16e6e1ab8b7a025ba6b7402b982a1c36</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocBlock::Tags::Formatter::PassthroughFormatter</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Formatter_1_1PassthroughFormatter.html</filename>
    <base>phpDocumentor::Reflection::DocBlock::Tags::Formatter</base>
    <member kind="function">
      <type></type>
      <name>format</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Formatter_1_1PassthroughFormatter.html</anchorfile>
      <anchor>a0715889113250712aa32fa1a90141ad0</anchor>
      <arglist>(Tag $tag)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocBlock::Tags::Formatter::PassthroughFormatterTest</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Formatter_1_1PassthroughFormatterTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>tearDown</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Formatter_1_1PassthroughFormatterTest.html</anchorfile>
      <anchor>a2503c9cd57a8afffd5d52c9461999a16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFormatterCallsToStringAndReturnsAStandardRepresentation</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Formatter_1_1PassthroughFormatterTest.html</anchorfile>
      <anchor>afa0f7f5c7daf2f883566231618b1f999</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFormatterToStringWitoutDescription</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Formatter_1_1PassthroughFormatterTest.html</anchorfile>
      <anchor>ae6821dd39aee88f57dc743f7cc42820b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::CodeCoverage::Driver::PCOV</name>
    <filename>classSebastianBergmann_1_1CodeCoverage_1_1Driver_1_1PCOV.html</filename>
    <base>SebastianBergmann::CodeCoverage::Driver::Driver</base>
    <member kind="function">
      <type></type>
      <name>start</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Driver_1_1PCOV.html</anchorfile>
      <anchor>ae978c303f52189477d4445d8cae27077</anchor>
      <arglist>(bool $determineUnusedAndDead=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>stop</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Driver_1_1PCOV.html</anchorfile>
      <anchor>a9652ab2ba1d81f5622ef604db98a2e13</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::Exception::PcreException</name>
    <filename>classphpDocumentor_1_1Reflection_1_1Exception_1_1PcreException.html</filename>
    <member kind="function" static="yes">
      <type>static</type>
      <name>createFromPhpError</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Exception_1_1PcreException.html</anchorfile>
      <anchor>aaaea36e0f2e259a7bdf7e24a1b0dd1b3</anchor>
      <arglist>(int $errorCode)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::Exception::PcreExceptionTest</name>
    <filename>classphpDocumentor_1_1Reflection_1_1Exception_1_1PcreExceptionTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testErrorConversion</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Exception_1_1PcreExceptionTest.html</anchorfile>
      <anchor>a958b607d72ea233076e3b0ed25cf3e3a</anchor>
      <arglist>(int $errorCode, string $message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>errorCodeProvider</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Exception_1_1PcreExceptionTest.html</anchorfile>
      <anchor>a7e3682e41033cfdca92e0c8600c82cb7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DoctrineTest::InstantiatorTestAsset::PharAsset</name>
    <filename>classDoctrineTest_1_1InstantiatorTestAsset_1_1PharAsset.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classDoctrineTest_1_1InstantiatorTestAsset_1_1PharAsset.html</anchorfile>
      <anchor>ac1ff8429f7af17052cc2c4d4344128b7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DoctrineTest::InstantiatorTestAsset::PharExceptionAsset</name>
    <filename>classDoctrineTest_1_1InstantiatorTestAsset_1_1PharExceptionAsset.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classDoctrineTest_1_1InstantiatorTestAsset_1_1PharExceptionAsset.html</anchorfile>
      <anchor>a836f3b8f740e610ed70462b020ec1194</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHP_Token</name>
    <filename>classPHP__Token.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHP__Token.html</anchorfile>
      <anchor>a72d54b4d6ad84006a7afd6d18c27bde3</anchor>
      <arglist>($text, $line, PHP_Token_Stream $tokenStream, $id)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classPHP__Token.html</anchorfile>
      <anchor>acaceb755d410d45b3b701ff0d13c6b76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getLine</name>
      <anchorfile>classPHP__Token.html</anchorfile>
      <anchor>a65b3ac33c6861378ee7aa071ba6539eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getId</name>
      <anchorfile>classPHP__Token.html</anchorfile>
      <anchor>a2a16dabb2bbd437c2ba1f83d05af3a8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$text</name>
      <anchorfile>classPHP__Token.html</anchorfile>
      <anchor>a52fcabfee4075dbc86fc6c97e6f60392</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$line</name>
      <anchorfile>classPHP__Token.html</anchorfile>
      <anchor>a3aa3f1bbba559575f53b7b29a50ffa09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$tokenStream</name>
      <anchorfile>classPHP__Token.html</anchorfile>
      <anchor>a1ea1335cc828e933eb6d49c816a3b9cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$id</name>
      <anchorfile>classPHP__Token.html</anchorfile>
      <anchor>a7ae1d600ed52531dc679f700a7af5d24</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHP_Token_ABSTRACT</name>
    <filename>classPHP__Token__ABSTRACT.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_AMPERSAND</name>
    <filename>classPHP__Token__AMPERSAND.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_AND_EQUAL</name>
    <filename>classPHP__Token__AND__EQUAL.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_ARRAY</name>
    <filename>classPHP__Token__ARRAY.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_ARRAY_CAST</name>
    <filename>classPHP__Token__ARRAY__CAST.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_AS</name>
    <filename>classPHP__Token__AS.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_AT</name>
    <filename>classPHP__Token__AT.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_BACKTICK</name>
    <filename>classPHP__Token__BACKTICK.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_BAD_CHARACTER</name>
    <filename>classPHP__Token__BAD__CHARACTER.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_BOOL_CAST</name>
    <filename>classPHP__Token__BOOL__CAST.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_BOOLEAN_AND</name>
    <filename>classPHP__Token__BOOLEAN__AND.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_BOOLEAN_OR</name>
    <filename>classPHP__Token__BOOLEAN__OR.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_BREAK</name>
    <filename>classPHP__Token__BREAK.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_CALLABLE</name>
    <filename>classPHP__Token__CALLABLE.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_CARET</name>
    <filename>classPHP__Token__CARET.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_CASE</name>
    <filename>classPHP__Token__CASE.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_CATCH</name>
    <filename>classPHP__Token__CATCH.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_CHARACTER</name>
    <filename>classPHP__Token__CHARACTER.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_CLASS</name>
    <filename>classPHP__Token__CLASS.html</filename>
    <base>PHP_Token_INTERFACE</base>
    <member kind="function">
      <type></type>
      <name>getName</name>
      <anchorfile>classPHP__Token__CLASS.html</anchorfile>
      <anchor>a1e22cb39b089a356627b10044fd31f95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isAnonymous</name>
      <anchorfile>classPHP__Token__CLASS.html</anchorfile>
      <anchor>a25b4bc6c8deb0cbd9f555c8cab39c8b6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHP_Token_CLASS_C</name>
    <filename>classPHP__Token__CLASS__C.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_CLASS_NAME_CONSTANT</name>
    <filename>classPHP__Token__CLASS__NAME__CONSTANT.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_ClassTest</name>
    <filename>classPHP__Token__ClassTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testGetClassKeywords</name>
      <anchorfile>classPHP__Token__ClassTest.html</anchorfile>
      <anchor>aad5bbd65009bdc2c0a6192d08f24308d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetFunctionKeywords</name>
      <anchorfile>classPHP__Token__ClassTest.html</anchorfile>
      <anchor>a5f528b9a8643264f978d8a7ef4bc2890</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetFunctionVisibility</name>
      <anchorfile>classPHP__Token__ClassTest.html</anchorfile>
      <anchor>ae496e3ac20f991ec20b51709e29c3934</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIssue19</name>
      <anchorfile>classPHP__Token__ClassTest.html</anchorfile>
      <anchor>a54729b0df92161ae0254783961e27724</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIssue30</name>
      <anchorfile>classPHP__Token__ClassTest.html</anchorfile>
      <anchor>a57e64b79885a1bb136ec10a66863e849</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAnonymousClassesAreHandledCorrectly</name>
      <anchorfile>classPHP__Token__ClassTest.html</anchorfile>
      <anchor>a815053ab8999e6857b56a1c795dd4887</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAnonymousClassesAreHandledCorrectly2</name>
      <anchorfile>classPHP__Token__ClassTest.html</anchorfile>
      <anchor>ad6595cae95e872f23ab75c1427d41ae0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testImportedFunctionsAreHandledCorrectly</name>
      <anchorfile>classPHP__Token__ClassTest.html</anchorfile>
      <anchor>a491353b8ac7aa8a7aa729a0cfae289a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testClassWithMultipleAnonymousClassesAndFunctionsIsHandledCorrectly</name>
      <anchorfile>classPHP__Token__ClassTest.html</anchorfile>
      <anchor>aec669cb1cafbe525724b381ef1876585</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testClassWithMethodNamedEmptyIsHandledCorrectly</name>
      <anchorfile>classPHP__Token__ClassTest.html</anchorfile>
      <anchor>ac78c6bef6247b52673a23a2b7b55b6f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAnonymousFunctionDoesNotAffectStartAndEndLineOfMethod</name>
      <anchorfile>classPHP__Token__ClassTest.html</anchorfile>
      <anchor>a5c164b0ef74a349fa44293a49366d24b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classPHP__Token__ClassTest.html</anchorfile>
      <anchor>a51bfe1217db18fe5f3b1924245f8c3c5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHP_Token_CLONE</name>
    <filename>classPHP__Token__CLONE.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_CLOSE_BRACKET</name>
    <filename>classPHP__Token__CLOSE__BRACKET.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_CLOSE_CURLY</name>
    <filename>classPHP__Token__CLOSE__CURLY.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_CLOSE_SQUARE</name>
    <filename>classPHP__Token__CLOSE__SQUARE.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_CLOSE_TAG</name>
    <filename>classPHP__Token__CLOSE__TAG.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_ClosureTest</name>
    <filename>classPHP__Token__ClosureTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testGetArguments</name>
      <anchorfile>classPHP__Token__ClosureTest.html</anchorfile>
      <anchor>a0a874641289d493ff65638dedab78e95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetName</name>
      <anchorfile>classPHP__Token__ClosureTest.html</anchorfile>
      <anchor>a5d0e85be63c342cf3d8047ea0aeeabb3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetLine</name>
      <anchorfile>classPHP__Token__ClosureTest.html</anchorfile>
      <anchor>a10be7e5ee46a2f3a7efcc00c6f1cdb1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetEndLine</name>
      <anchorfile>classPHP__Token__ClosureTest.html</anchorfile>
      <anchor>adc9a168c7c6881f017dd4e3038fae614</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classPHP__Token__ClosureTest.html</anchorfile>
      <anchor>a976c2c6aba1c34fbc771821351b32bf2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHP_Token_COALESCE</name>
    <filename>classPHP__Token__COALESCE.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_COALESCE_EQUAL</name>
    <filename>classPHP__Token__COALESCE__EQUAL.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_COLON</name>
    <filename>classPHP__Token__COLON.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_COMMA</name>
    <filename>classPHP__Token__COMMA.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_COMMENT</name>
    <filename>classPHP__Token__COMMENT.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_CONCAT_EQUAL</name>
    <filename>classPHP__Token__CONCAT__EQUAL.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_CONST</name>
    <filename>classPHP__Token__CONST.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_CONSTANT_ENCAPSED_STRING</name>
    <filename>classPHP__Token__CONSTANT__ENCAPSED__STRING.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_CONTINUE</name>
    <filename>classPHP__Token__CONTINUE.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_CURLY_OPEN</name>
    <filename>classPHP__Token__CURLY__OPEN.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_DEC</name>
    <filename>classPHP__Token__DEC.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_DECLARE</name>
    <filename>classPHP__Token__DECLARE.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_DEFAULT</name>
    <filename>classPHP__Token__DEFAULT.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_DIR</name>
    <filename>classPHP__Token__DIR.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_DIV</name>
    <filename>classPHP__Token__DIV.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_DIV_EQUAL</name>
    <filename>classPHP__Token__DIV__EQUAL.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_DNUMBER</name>
    <filename>classPHP__Token__DNUMBER.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_DO</name>
    <filename>classPHP__Token__DO.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_DOC_COMMENT</name>
    <filename>classPHP__Token__DOC__COMMENT.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_DOLLAR</name>
    <filename>classPHP__Token__DOLLAR.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_DOLLAR_OPEN_CURLY_BRACES</name>
    <filename>classPHP__Token__DOLLAR__OPEN__CURLY__BRACES.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_DOT</name>
    <filename>classPHP__Token__DOT.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_DOUBLE_ARROW</name>
    <filename>classPHP__Token__DOUBLE__ARROW.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_DOUBLE_CAST</name>
    <filename>classPHP__Token__DOUBLE__CAST.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_DOUBLE_COLON</name>
    <filename>classPHP__Token__DOUBLE__COLON.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_DOUBLE_QUOTES</name>
    <filename>classPHP__Token__DOUBLE__QUOTES.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_ECHO</name>
    <filename>classPHP__Token__ECHO.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_ELLIPSIS</name>
    <filename>classPHP__Token__ELLIPSIS.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_ELSE</name>
    <filename>classPHP__Token__ELSE.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_ELSEIF</name>
    <filename>classPHP__Token__ELSEIF.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_EMPTY</name>
    <filename>classPHP__Token__EMPTY.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_ENCAPSED_AND_WHITESPACE</name>
    <filename>classPHP__Token__ENCAPSED__AND__WHITESPACE.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_END_HEREDOC</name>
    <filename>classPHP__Token__END__HEREDOC.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_ENDDECLARE</name>
    <filename>classPHP__Token__ENDDECLARE.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_ENDFOR</name>
    <filename>classPHP__Token__ENDFOR.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_ENDFOREACH</name>
    <filename>classPHP__Token__ENDFOREACH.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_ENDIF</name>
    <filename>classPHP__Token__ENDIF.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_ENDSWITCH</name>
    <filename>classPHP__Token__ENDSWITCH.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_ENDWHILE</name>
    <filename>classPHP__Token__ENDWHILE.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_EQUAL</name>
    <filename>classPHP__Token__EQUAL.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_EVAL</name>
    <filename>classPHP__Token__EVAL.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_EXCLAMATION_MARK</name>
    <filename>classPHP__Token__EXCLAMATION__MARK.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_EXIT</name>
    <filename>classPHP__Token__EXIT.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_EXTENDS</name>
    <filename>classPHP__Token__EXTENDS.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_FILE</name>
    <filename>classPHP__Token__FILE.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_FINAL</name>
    <filename>classPHP__Token__FINAL.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_FINALLY</name>
    <filename>classPHP__Token__FINALLY.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_FN</name>
    <filename>classPHP__Token__FN.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_FOR</name>
    <filename>classPHP__Token__FOR.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_FOREACH</name>
    <filename>classPHP__Token__FOREACH.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_FUNC_C</name>
    <filename>classPHP__Token__FUNC__C.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_FUNCTION</name>
    <filename>classPHP__Token__FUNCTION.html</filename>
    <base>PHP_TokenWithScopeAndVisibility</base>
    <member kind="function">
      <type></type>
      <name>getArguments</name>
      <anchorfile>classPHP__Token__FUNCTION.html</anchorfile>
      <anchor>a2ca6d607b3be9a4c8a781a168f44baac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getName</name>
      <anchorfile>classPHP__Token__FUNCTION.html</anchorfile>
      <anchor>a3e9e3ab31103188f008e75747a7dbf8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getCCN</name>
      <anchorfile>classPHP__Token__FUNCTION.html</anchorfile>
      <anchor>a245ecbd5071614c61a768a537e887d27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getSignature</name>
      <anchorfile>classPHP__Token__FUNCTION.html</anchorfile>
      <anchor>ac2e9a1afa0b766d5489b565af0f2c0de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isAnonymous</name>
      <anchorfile>classPHP__Token__FUNCTION.html</anchorfile>
      <anchor>a754341a13b403726ca5eb5ee6a53fa4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$arguments</name>
      <anchorfile>classPHP__Token__FUNCTION.html</anchorfile>
      <anchor>aaaa1bbd7a4febeff18e82c7611ae5e83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$ccn</name>
      <anchorfile>classPHP__Token__FUNCTION.html</anchorfile>
      <anchor>aa23302cec82b64f1b24ff8454859278c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$name</name>
      <anchorfile>classPHP__Token__FUNCTION.html</anchorfile>
      <anchor>a7f41e0dd310db02e1665f5904e8d451d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$signature</name>
      <anchorfile>classPHP__Token__FUNCTION.html</anchorfile>
      <anchor>a944e11eb3bc264af30d2145077f864a9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHP_Token_FunctionTest</name>
    <filename>classPHP__Token__FunctionTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testGetArguments</name>
      <anchorfile>classPHP__Token__FunctionTest.html</anchorfile>
      <anchor>aa85616e5ba1d7822c6bd77be66bc196e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetName</name>
      <anchorfile>classPHP__Token__FunctionTest.html</anchorfile>
      <anchor>a58d3b223d62a55ca314303fdc76b5493</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetLine</name>
      <anchorfile>classPHP__Token__FunctionTest.html</anchorfile>
      <anchor>a025ab5c36eac311d29666934fbce9472</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetEndLine</name>
      <anchorfile>classPHP__Token__FunctionTest.html</anchorfile>
      <anchor>afcfa692228b747c63e24064fd51b5303</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetDocblock</name>
      <anchorfile>classPHP__Token__FunctionTest.html</anchorfile>
      <anchor>ad814340b69787d0259b9cdbe63caecd7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSignature</name>
      <anchorfile>classPHP__Token__FunctionTest.html</anchorfile>
      <anchor>a1729817e599d17a0e3ac7ff3e17e7c2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classPHP__Token__FunctionTest.html</anchorfile>
      <anchor>a1797e85ae15a73cb38049141cf90fec2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHP_Token_GLOBAL</name>
    <filename>classPHP__Token__GLOBAL.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_GOTO</name>
    <filename>classPHP__Token__GOTO.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_GT</name>
    <filename>classPHP__Token__GT.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_HALT_COMPILER</name>
    <filename>classPHP__Token__HALT__COMPILER.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_IF</name>
    <filename>classPHP__Token__IF.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_IMPLEMENTS</name>
    <filename>classPHP__Token__IMPLEMENTS.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_INC</name>
    <filename>classPHP__Token__INC.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_INCLUDE</name>
    <filename>classPHP__Token__INCLUDE.html</filename>
    <base>PHP_Token_Includes</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_INCLUDE_ONCE</name>
    <filename>classPHP__Token__INCLUDE__ONCE.html</filename>
    <base>PHP_Token_Includes</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_Includes</name>
    <filename>classPHP__Token__Includes.html</filename>
    <base>PHP_Token</base>
    <member kind="function">
      <type></type>
      <name>getName</name>
      <anchorfile>classPHP__Token__Includes.html</anchorfile>
      <anchor>ac465e5555c711bcde0c7f301061d86e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getType</name>
      <anchorfile>classPHP__Token__Includes.html</anchorfile>
      <anchor>aac98f782294f053cd8821dc0edafdce1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$name</name>
      <anchorfile>classPHP__Token__Includes.html</anchorfile>
      <anchor>a370785441442d86c788e3a662c484450</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$type</name>
      <anchorfile>classPHP__Token__Includes.html</anchorfile>
      <anchor>ad989cd9ef13cffc8c4919badb51fd7ba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHP_Token_IncludeTest</name>
    <filename>classPHP__Token__IncludeTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testGetIncludes</name>
      <anchorfile>classPHP__Token__IncludeTest.html</anchorfile>
      <anchor>a6feab83101db1e4b05aaadc219374be5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetIncludesCategorized</name>
      <anchorfile>classPHP__Token__IncludeTest.html</anchorfile>
      <anchor>a8908e02cafcbcb5469dccda434925aea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetIncludesCategory</name>
      <anchorfile>classPHP__Token__IncludeTest.html</anchorfile>
      <anchor>a169c4b3994b0517a94d5caae63430e26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classPHP__Token__IncludeTest.html</anchorfile>
      <anchor>a2d3d3b395fa701ba6daf63c2c0f77b25</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHP_Token_INLINE_HTML</name>
    <filename>classPHP__Token__INLINE__HTML.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_INSTANCEOF</name>
    <filename>classPHP__Token__INSTANCEOF.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_INSTEADOF</name>
    <filename>classPHP__Token__INSTEADOF.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_INT_CAST</name>
    <filename>classPHP__Token__INT__CAST.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_INTERFACE</name>
    <filename>classPHP__Token__INTERFACE.html</filename>
    <base>PHP_TokenWithScopeAndVisibility</base>
    <member kind="function">
      <type></type>
      <name>getName</name>
      <anchorfile>classPHP__Token__INTERFACE.html</anchorfile>
      <anchor>a537954277787147e6f4eaacc15f84b8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>hasParent</name>
      <anchorfile>classPHP__Token__INTERFACE.html</anchorfile>
      <anchor>a8467423335f1784aa1d7fc2fbc12a7c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getPackage</name>
      <anchorfile>classPHP__Token__INTERFACE.html</anchorfile>
      <anchor>a5162ab2a6c11b3166b0b7f45285918d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getParent</name>
      <anchorfile>classPHP__Token__INTERFACE.html</anchorfile>
      <anchor>a4dcbe206e69b8f8ec301a3a205fe1f16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>hasInterfaces</name>
      <anchorfile>classPHP__Token__INTERFACE.html</anchorfile>
      <anchor>a3e93df42b99a711de8a3c373534c5352</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getInterfaces</name>
      <anchorfile>classPHP__Token__INTERFACE.html</anchorfile>
      <anchor>a600cc0b641d191f4aed46d0dad6b2d54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>arrayToName</name>
      <anchorfile>classPHP__Token__INTERFACE.html</anchorfile>
      <anchor>a1f2adbc994405689515aa7c81ac0b55f</anchor>
      <arglist>(array $parts, $join=&apos;\\&apos;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$interfaces</name>
      <anchorfile>classPHP__Token__INTERFACE.html</anchorfile>
      <anchor>a6f818f738b24cf10f205633aab59a0a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHP_Token_InterfaceTest</name>
    <filename>classPHP__Token__InterfaceTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testGetName</name>
      <anchorfile>classPHP__Token__InterfaceTest.html</anchorfile>
      <anchor>adcd7c398076b10cf11398f8989c2d5ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetParentNotExists</name>
      <anchorfile>classPHP__Token__InterfaceTest.html</anchorfile>
      <anchor>a25b06ea3108fabc49935f105a2f7d45a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasParentNotExists</name>
      <anchorfile>classPHP__Token__InterfaceTest.html</anchorfile>
      <anchor>ac7716a3f805df167ac4f256e480aa286</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetParentExists</name>
      <anchorfile>classPHP__Token__InterfaceTest.html</anchorfile>
      <anchor>a35af212646825e662f4c852bf36d6355</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasParentExists</name>
      <anchorfile>classPHP__Token__InterfaceTest.html</anchorfile>
      <anchor>a9906298f1d3df3a7b0f418d2394356e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetInterfacesExists</name>
      <anchorfile>classPHP__Token__InterfaceTest.html</anchorfile>
      <anchor>a4da8035edebf47ce2fa2f3aa7ca23ff1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasInterfacesExists</name>
      <anchorfile>classPHP__Token__InterfaceTest.html</anchorfile>
      <anchor>a1a7a158371b273e29cbb3c48b5970e3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetPackageNamespace</name>
      <anchorfile>classPHP__Token__InterfaceTest.html</anchorfile>
      <anchor>a5d7189a02b3b93e2abf9afe76ba39660</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>provideFilesWithClassesWithinMultipleNamespaces</name>
      <anchorfile>classPHP__Token__InterfaceTest.html</anchorfile>
      <anchor>a205fddd753f51294b45108856fb640ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetPackageNamespaceForFileWithMultipleNamespaces</name>
      <anchorfile>classPHP__Token__InterfaceTest.html</anchorfile>
      <anchor>abacbeff9f54bfc82adb4c86848e4e3aa</anchor>
      <arglist>($filepath)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetPackageNamespaceIsEmptyForInterfacesThatAreNotWithinNamespaces</name>
      <anchorfile>classPHP__Token__InterfaceTest.html</anchorfile>
      <anchor>a33aacfd770a24c936b412364dea01a02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetPackageNamespaceWhenExtentingFromNamespaceClass</name>
      <anchorfile>classPHP__Token__InterfaceTest.html</anchorfile>
      <anchor>a5c332702c4b0a70eed3aa3dac414fddf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classPHP__Token__InterfaceTest.html</anchorfile>
      <anchor>aaa19ed219aa46c6b8ce0aebde66b2e14</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHP_Token_IS_EQUAL</name>
    <filename>classPHP__Token__IS__EQUAL.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_IS_GREATER_OR_EQUAL</name>
    <filename>classPHP__Token__IS__GREATER__OR__EQUAL.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_IS_IDENTICAL</name>
    <filename>classPHP__Token__IS__IDENTICAL.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_IS_NOT_EQUAL</name>
    <filename>classPHP__Token__IS__NOT__EQUAL.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_IS_NOT_IDENTICAL</name>
    <filename>classPHP__Token__IS__NOT__IDENTICAL.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_IS_SMALLER_OR_EQUAL</name>
    <filename>classPHP__Token__IS__SMALLER__OR__EQUAL.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_ISSET</name>
    <filename>classPHP__Token__ISSET.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_LINE</name>
    <filename>classPHP__Token__LINE.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_LIST</name>
    <filename>classPHP__Token__LIST.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_LNUMBER</name>
    <filename>classPHP__Token__LNUMBER.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_LOGICAL_AND</name>
    <filename>classPHP__Token__LOGICAL__AND.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_LOGICAL_OR</name>
    <filename>classPHP__Token__LOGICAL__OR.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_LOGICAL_XOR</name>
    <filename>classPHP__Token__LOGICAL__XOR.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_LT</name>
    <filename>classPHP__Token__LT.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_METHOD_C</name>
    <filename>classPHP__Token__METHOD__C.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_MINUS</name>
    <filename>classPHP__Token__MINUS.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_MINUS_EQUAL</name>
    <filename>classPHP__Token__MINUS__EQUAL.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_MOD_EQUAL</name>
    <filename>classPHP__Token__MOD__EQUAL.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_MUL_EQUAL</name>
    <filename>classPHP__Token__MUL__EQUAL.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_MULT</name>
    <filename>classPHP__Token__MULT.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_NAMESPACE</name>
    <filename>classPHP__Token__NAMESPACE.html</filename>
    <base>PHP_TokenWithScope</base>
    <member kind="function">
      <type></type>
      <name>getName</name>
      <anchorfile>classPHP__Token__NAMESPACE.html</anchorfile>
      <anchor>a81f6ec9de9d0f46713d628598230d57f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHP_Token_NamespaceTest</name>
    <filename>classPHP__Token__NamespaceTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testGetName</name>
      <anchorfile>classPHP__Token__NamespaceTest.html</anchorfile>
      <anchor>a51345643afdd76fcf7495c42940995e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetStartLineWithUnscopedNamespace</name>
      <anchorfile>classPHP__Token__NamespaceTest.html</anchorfile>
      <anchor>a0e84a644f87f3fcc95b750b5c3accafd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetEndLineWithUnscopedNamespace</name>
      <anchorfile>classPHP__Token__NamespaceTest.html</anchorfile>
      <anchor>a3bc65f334f812da4370fdc6f62f5acc0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetStartLineWithScopedNamespace</name>
      <anchorfile>classPHP__Token__NamespaceTest.html</anchorfile>
      <anchor>a1e43d45160f4277503273686e75c51de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetEndLineWithScopedNamespace</name>
      <anchorfile>classPHP__Token__NamespaceTest.html</anchorfile>
      <anchor>aa2e753d5ea5c3cc01bab099763f003ef</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHP_Token_NEW</name>
    <filename>classPHP__Token__NEW.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_NS_C</name>
    <filename>classPHP__Token__NS__C.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_NS_SEPARATOR</name>
    <filename>classPHP__Token__NS__SEPARATOR.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_NUM_STRING</name>
    <filename>classPHP__Token__NUM__STRING.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_OBJECT_CAST</name>
    <filename>classPHP__Token__OBJECT__CAST.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_OBJECT_OPERATOR</name>
    <filename>classPHP__Token__OBJECT__OPERATOR.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_OPEN_BRACKET</name>
    <filename>classPHP__Token__OPEN__BRACKET.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_OPEN_CURLY</name>
    <filename>classPHP__Token__OPEN__CURLY.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_OPEN_SQUARE</name>
    <filename>classPHP__Token__OPEN__SQUARE.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_OPEN_TAG</name>
    <filename>classPHP__Token__OPEN__TAG.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_OPEN_TAG_WITH_ECHO</name>
    <filename>classPHP__Token__OPEN__TAG__WITH__ECHO.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_OR_EQUAL</name>
    <filename>classPHP__Token__OR__EQUAL.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_PAAMAYIM_NEKUDOTAYIM</name>
    <filename>classPHP__Token__PAAMAYIM__NEKUDOTAYIM.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_PERCENT</name>
    <filename>classPHP__Token__PERCENT.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_PIPE</name>
    <filename>classPHP__Token__PIPE.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_PLUS</name>
    <filename>classPHP__Token__PLUS.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_PLUS_EQUAL</name>
    <filename>classPHP__Token__PLUS__EQUAL.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_POW</name>
    <filename>classPHP__Token__POW.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_POW_EQUAL</name>
    <filename>classPHP__Token__POW__EQUAL.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_PRINT</name>
    <filename>classPHP__Token__PRINT.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_PRIVATE</name>
    <filename>classPHP__Token__PRIVATE.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_PROTECTED</name>
    <filename>classPHP__Token__PROTECTED.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_PUBLIC</name>
    <filename>classPHP__Token__PUBLIC.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_QUESTION_MARK</name>
    <filename>classPHP__Token__QUESTION__MARK.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_REQUIRE</name>
    <filename>classPHP__Token__REQUIRE.html</filename>
    <base>PHP_Token_Includes</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_REQUIRE_ONCE</name>
    <filename>classPHP__Token__REQUIRE__ONCE.html</filename>
    <base>PHP_Token_Includes</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_RETURN</name>
    <filename>classPHP__Token__RETURN.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_SEMICOLON</name>
    <filename>classPHP__Token__SEMICOLON.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_SL</name>
    <filename>classPHP__Token__SL.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_SL_EQUAL</name>
    <filename>classPHP__Token__SL__EQUAL.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_SPACESHIP</name>
    <filename>classPHP__Token__SPACESHIP.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_SR</name>
    <filename>classPHP__Token__SR.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_SR_EQUAL</name>
    <filename>classPHP__Token__SR__EQUAL.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_START_HEREDOC</name>
    <filename>classPHP__Token__START__HEREDOC.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_STATIC</name>
    <filename>classPHP__Token__STATIC.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_Stream</name>
    <filename>classPHP__Token__Stream.html</filename>
  </compound>
  <compound kind="class">
    <name>PHP_Token_Stream_CachingFactory</name>
    <filename>classPHP__Token__Stream__CachingFactory.html</filename>
    <member kind="function" static="yes">
      <type>static</type>
      <name>get</name>
      <anchorfile>classPHP__Token__Stream__CachingFactory.html</anchorfile>
      <anchor>afec79a75291d1181f432cfed43389520</anchor>
      <arglist>($filename)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>clear</name>
      <anchorfile>classPHP__Token__Stream__CachingFactory.html</anchorfile>
      <anchor>a27b786ab7cbe5ffa0587831362f8bcbc</anchor>
      <arglist>($filename=null)</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static</type>
      <name>$cache</name>
      <anchorfile>classPHP__Token__Stream__CachingFactory.html</anchorfile>
      <anchor>a9e71a6f734e0862db214d8eb7aed3a69</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHP_Token_STRING</name>
    <filename>classPHP__Token__STRING.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_STRING_CAST</name>
    <filename>classPHP__Token__STRING__CAST.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_STRING_VARNAME</name>
    <filename>classPHP__Token__STRING__VARNAME.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_SWITCH</name>
    <filename>classPHP__Token__SWITCH.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_THROW</name>
    <filename>classPHP__Token__THROW.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_TILDE</name>
    <filename>classPHP__Token__TILDE.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_TRAIT</name>
    <filename>classPHP__Token__TRAIT.html</filename>
    <base>PHP_Token_INTERFACE</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_TRAIT_C</name>
    <filename>classPHP__Token__TRAIT__C.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_TRY</name>
    <filename>classPHP__Token__TRY.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_UNSET</name>
    <filename>classPHP__Token__UNSET.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_UNSET_CAST</name>
    <filename>classPHP__Token__UNSET__CAST.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_USE</name>
    <filename>classPHP__Token__USE.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_USE_FUNCTION</name>
    <filename>classPHP__Token__USE__FUNCTION.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_Util</name>
    <filename>classPHP__Token__Util.html</filename>
    <member kind="function" static="yes">
      <type>static</type>
      <name>getClass</name>
      <anchorfile>classPHP__Token__Util.html</anchorfile>
      <anchor>a950b0fc44586838a886af59a7205f498</anchor>
      <arglist>($object)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHP_Token_VAR</name>
    <filename>classPHP__Token__VAR.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_VARIABLE</name>
    <filename>classPHP__Token__VARIABLE.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_WHILE</name>
    <filename>classPHP__Token__WHILE.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_WHITESPACE</name>
    <filename>classPHP__Token__WHITESPACE.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_XOR_EQUAL</name>
    <filename>classPHP__Token__XOR__EQUAL.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_YIELD</name>
    <filename>classPHP__Token__YIELD.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_Token_YIELD_FROM</name>
    <filename>classPHP__Token__YIELD__FROM.html</filename>
    <base>PHP_Token</base>
  </compound>
  <compound kind="class">
    <name>PHP_TokenWithScope</name>
    <filename>classPHP__TokenWithScope.html</filename>
    <base>PHP_Token</base>
    <member kind="function">
      <type></type>
      <name>getDocblock</name>
      <anchorfile>classPHP__TokenWithScope.html</anchorfile>
      <anchor>ab9c03167b404bba3f507346aa61392a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getEndTokenId</name>
      <anchorfile>classPHP__TokenWithScope.html</anchorfile>
      <anchor>aca28eba84f5f3e7a9fa120460aa58c92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getEndLine</name>
      <anchorfile>classPHP__TokenWithScope.html</anchorfile>
      <anchor>a6bcbff361b84319ddf7ba0ed651d9b1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$endTokenId</name>
      <anchorfile>classPHP__TokenWithScope.html</anchorfile>
      <anchor>aefb8e6e4ceac82aa111dc0d3045fa4b6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHP_TokenWithScopeAndVisibility</name>
    <filename>classPHP__TokenWithScopeAndVisibility.html</filename>
    <base>PHP_TokenWithScope</base>
    <member kind="function">
      <type></type>
      <name>getVisibility</name>
      <anchorfile>classPHP__TokenWithScopeAndVisibility.html</anchorfile>
      <anchor>a44c9d182cfdef9257bf1bd9c1ce4184b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getKeywords</name>
      <anchorfile>classPHP__TokenWithScopeAndVisibility.html</anchorfile>
      <anchor>a5a62f6058d591f4630ee17c418c6daf1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::CodeCoverage::Driver::PHPDBG</name>
    <filename>classSebastianBergmann_1_1CodeCoverage_1_1Driver_1_1PHPDBG.html</filename>
    <base>SebastianBergmann::CodeCoverage::Driver::Driver</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Driver_1_1PHPDBG.html</anchorfile>
      <anchor>a46d7f861532c2aa3726107ed2b56fb1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>start</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Driver_1_1PHPDBG.html</anchorfile>
      <anchor>aa63b120ce91c81cd700ad659f5e4a32a</anchor>
      <arglist>(bool $determineUnusedAndDead=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>stop</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Driver_1_1PHPDBG.html</anchorfile>
      <anchor>a9edeab0c672f7413931fe668fbb584be</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::PhpElement</name>
    <filename>classPharIo_1_1Manifest_1_1PhpElement.html</filename>
    <base>PharIo::Manifest::ManifestElement</base>
    <member kind="function">
      <type></type>
      <name>getVersion</name>
      <anchorfile>classPharIo_1_1Manifest_1_1PhpElement.html</anchorfile>
      <anchor>ae1913739bbe0fef4c9822a63998dd0cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>hasExtElements</name>
      <anchorfile>classPharIo_1_1Manifest_1_1PhpElement.html</anchorfile>
      <anchor>aea417df58ecc0e249827106284225710</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getExtElements</name>
      <anchorfile>classPharIo_1_1Manifest_1_1PhpElement.html</anchorfile>
      <anchor>a3314a27b87daf5bc79bb4cf7dfa96396</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::PhpElementTest</name>
    <filename>classPharIo_1_1Manifest_1_1PhpElementTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testVersionConstraintCanBeRetrieved</name>
      <anchorfile>classPharIo_1_1Manifest_1_1PhpElementTest.html</anchorfile>
      <anchor>ac213da2f8579501102bc38ca6bbc902c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasExtElementsReturnsFalseWhenNoExtensionsAreRequired</name>
      <anchorfile>classPharIo_1_1Manifest_1_1PhpElementTest.html</anchorfile>
      <anchor>a50103fc99b546eb2972762263b1840f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasExtElementsReturnsTrueWhenExtensionsAreRequired</name>
      <anchorfile>classPharIo_1_1Manifest_1_1PhpElementTest.html</anchorfile>
      <anchor>a487fee6a837c616727c8764fa7f90ab8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetExtElementsReturnsExtElementCollection</name>
      <anchorfile>classPharIo_1_1Manifest_1_1PhpElementTest.html</anchorfile>
      <anchor>a36fb988291f76ff54de7a28e57d84e85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classPharIo_1_1Manifest_1_1PhpElementTest.html</anchorfile>
      <anchor>a9262e92c6789c09805da80e8573cc8d1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::PhpExtensionRequirement</name>
    <filename>classPharIo_1_1Manifest_1_1PhpExtensionRequirement.html</filename>
    <base>PharIo::Manifest::Requirement</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPharIo_1_1Manifest_1_1PhpExtensionRequirement.html</anchorfile>
      <anchor>ac5d52607d95dfad836b2b06f452bc1b8</anchor>
      <arglist>($extension)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classPharIo_1_1Manifest_1_1PhpExtensionRequirement.html</anchorfile>
      <anchor>aa91b76da31c4737d8527fad05e62a966</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::PhpExtensionRequirementTest</name>
    <filename>classPharIo_1_1Manifest_1_1PhpExtensionRequirementTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testCanBeCreated</name>
      <anchorfile>classPharIo_1_1Manifest_1_1PhpExtensionRequirementTest.html</anchorfile>
      <anchor>ade317abe6b411ce9c955289a26e91660</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCanBeUsedAsString</name>
      <anchorfile>classPharIo_1_1Manifest_1_1PhpExtensionRequirementTest.html</anchorfile>
      <anchor>a7008b3c750f26532dc4810cb81de6526</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::PHPTAssertionFailedError</name>
    <filename>classPHPUnit_1_1Framework_1_1PHPTAssertionFailedError.html</filename>
    <base>PHPUnit::Framework::SyntheticError</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1PHPTAssertionFailedError.html</anchorfile>
      <anchor>ac3cc77f1684d14795c6cebc47854e6d5</anchor>
      <arglist>(string $message, int $code, string $file, int $line, array $trace, string $diff)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getDiff</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1PHPTAssertionFailedError.html</anchorfile>
      <anchor>a764e111eee3863e222ac7ab006d47398</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Runner::PhptTestCase</name>
    <filename>classPHPUnit_1_1Runner_1_1PhptTestCase.html</filename>
    <base>PHPUnit::Framework::SelfDescribing</base>
    <base>PHPUnit::Framework::Test</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1PhptTestCase.html</anchorfile>
      <anchor>ad26911a21b2827130d31e616514bcd52</anchor>
      <arglist>(string $filename, AbstractPhpProcess $phpUtil=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>count</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1PhptTestCase.html</anchorfile>
      <anchor>af6c4eccfb5c9164af6f884f7c6ccf010</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>run</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1PhptTestCase.html</anchorfile>
      <anchor>ae97a7cf8af7e4daf5c4ef2f9f32cb68f</anchor>
      <arglist>(TestResult $result=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getName</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1PhptTestCase.html</anchorfile>
      <anchor>acc63f0992c839b4419db34673811a1d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1PhptTestCase.html</anchorfile>
      <anchor>a47b3225df13145ef06e4ae689ea85051</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>usesDataProvider</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1PhptTestCase.html</anchorfile>
      <anchor>a38d8f48d8c5ae8ea101d69d10ac35414</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getNumAssertions</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1PhptTestCase.html</anchorfile>
      <anchor>ab1f580646a27c91ba6030e18295ca1bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getActualOutput</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1PhptTestCase.html</anchorfile>
      <anchor>ad8d30ef389520bfbc200afe1bebeadb8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>hasOutput</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1PhptTestCase.html</anchorfile>
      <anchor>a47286dec2bdd400f3b35b36e8a121ce6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Runner::PhptTestCaseTest</name>
    <filename>classPHPUnit_1_1Runner_1_1PhptTestCaseTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testAlwaysReportsNumberOfAssertionsIsOne</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1PhptTestCaseTest.html</anchorfile>
      <anchor>aa95ef5dca648929a48ef0c8f68061f83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAlwaysReportsItDoesNotUseADataprovider</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1PhptTestCaseTest.html</anchorfile>
      <anchor>a7784c498a2ef22e6744485042886cfd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testShouldRunFileSectionAsTest</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1PhptTestCaseTest.html</anchorfile>
      <anchor>ab859b562f53e5c824da269540274b7f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testRenderFileSection</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1PhptTestCaseTest.html</anchorfile>
      <anchor>ac70e72f14310f44a8bfcbd530531d4ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testRenderSkipifSection</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1PhptTestCaseTest.html</anchorfile>
      <anchor>aa9071ce566789428e1e1dac4d3d5e1f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testShouldRunSkipifSectionWhenExists</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1PhptTestCaseTest.html</anchorfile>
      <anchor>a04f82f21e12af002d6bfdd14953fef1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testShouldNotRunTestSectionIfSkipifSectionReturnsOutputWithSkipWord</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1PhptTestCaseTest.html</anchorfile>
      <anchor>af1235f727df1fe81fa40edb7d85539d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testShouldRunCleanSectionWhenDefined</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1PhptTestCaseTest.html</anchorfile>
      <anchor>a94ab7aa1695c109052bdf534035bded7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testShouldSkipTestWhenPhptFileIsEmpty</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1PhptTestCaseTest.html</anchorfile>
      <anchor>a5196e99a93bb0f8219a1629caa645a0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testShouldSkipTestWhenFileSectionIsMissing</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1PhptTestCaseTest.html</anchorfile>
      <anchor>a5eac24df9fd9e2151c6fdb6a7522be84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testShouldSkipTestWhenThereIsNoExpecOrExpectifOrExpecregexSectionInPhptFile</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1PhptTestCaseTest.html</anchorfile>
      <anchor>a35a3d2773d7ef938d6b10abb9da1d418</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testShouldSkipTestWhenSectionHeaderIsMalformed</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1PhptTestCaseTest.html</anchorfile>
      <anchor>aefa252da1d5828364a39c36a729e730b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testShouldValidateExpectSession</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1PhptTestCaseTest.html</anchorfile>
      <anchor>afb59938460b5c3e706dadda14148991b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testShouldValidateExpectfSession</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1PhptTestCaseTest.html</anchorfile>
      <anchor>aeb8eb9ac84cef67074c4159550c16ec2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testShouldValidateExpectregexSession</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1PhptTestCaseTest.html</anchorfile>
      <anchor>abc29562616151ba5143d4c9461439a37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1PhptTestCaseTest.html</anchorfile>
      <anchor>a0dc65d7681a6734e5123632ea2dab8f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>tearDown</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1PhptTestCaseTest.html</anchorfile>
      <anchor>a583264d1ba696e91057c4a94022383bd</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::PhpVersionRequirement</name>
    <filename>classPharIo_1_1Manifest_1_1PhpVersionRequirement.html</filename>
    <base>PharIo::Manifest::Requirement</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPharIo_1_1Manifest_1_1PhpVersionRequirement.html</anchorfile>
      <anchor>ae45d64996d037025a2e6440078e57759</anchor>
      <arglist>(VersionConstraint $versionConstraint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getVersionConstraint</name>
      <anchorfile>classPharIo_1_1Manifest_1_1PhpVersionRequirement.html</anchorfile>
      <anchor>aac487c9ac45abf77f2b5f962c21d4611</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::PhpVersionRequirementTest</name>
    <filename>classPharIo_1_1Manifest_1_1PhpVersionRequirementTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testCanBeCreated</name>
      <anchorfile>classPharIo_1_1Manifest_1_1PhpVersionRequirementTest.html</anchorfile>
      <anchor>a28a19375944924f638d0e4e3213b011e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testVersionConstraintCanBeRetrieved</name>
      <anchorfile>classPharIo_1_1Manifest_1_1PhpVersionRequirementTest.html</anchorfile>
      <anchor>ac4a1eafcbc8dc9b9790f4791177e930a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classPharIo_1_1Manifest_1_1PhpVersionRequirementTest.html</anchorfile>
      <anchor>a134e6037ee821902b105f4aa8584a131</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>Prophecy::Exception::Prediction::PredictionException</name>
    <filename>interfaceProphecy_1_1Exception_1_1Prediction_1_1PredictionException.html</filename>
    <base>Prophecy::Exception::Exception</base>
  </compound>
  <compound kind="interface">
    <name>Prophecy::Prediction::PredictionInterface</name>
    <filename>interfaceProphecy_1_1Prediction_1_1PredictionInterface.html</filename>
    <member kind="function">
      <type></type>
      <name>check</name>
      <anchorfile>interfaceProphecy_1_1Prediction_1_1PredictionInterface.html</anchorfile>
      <anchor>ad2e9e68d270233b3bf5eecdbe09a7782</anchor>
      <arglist>(array $calls, ObjectProphecy $object, MethodProphecy $method)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::PregSplitTest</name>
    <filename>classphpDocumentor_1_1Reflection_1_1PregSplitTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testSimplePregSplit</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1PregSplitTest.html</anchorfile>
      <anchor>a821013920a3c7b1f37c8eabf1a807d3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testPregSplitThrowsOnError</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1PregSplitTest.html</anchorfile>
      <anchor>a414f63dd612f56f68ea8addda9166225</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>tearDown</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1PregSplitTest.html</anchorfile>
      <anchor>a3ea1ac3ae6a9a8cffd31060fbfffd1c6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Version::PreReleaseSuffix</name>
    <filename>classPharIo_1_1Version_1_1PreReleaseSuffix.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPharIo_1_1Version_1_1PreReleaseSuffix.html</anchorfile>
      <anchor>a70d598d54bee98991691fc33448c67ea</anchor>
      <arglist>($value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getValue</name>
      <anchorfile>classPharIo_1_1Version_1_1PreReleaseSuffix.html</anchorfile>
      <anchor>aef874e85a7c465dc6876b73e71ddb3df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getNumber</name>
      <anchorfile>classPharIo_1_1Version_1_1PreReleaseSuffix.html</anchorfile>
      <anchor>a962dc98aa15b1e95240437316a00417a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isGreaterThan</name>
      <anchorfile>classPharIo_1_1Version_1_1PreReleaseSuffix.html</anchorfile>
      <anchor>af107ce3b10d0a054d236d24fe30b5b2c</anchor>
      <arglist>(PreReleaseSuffix $suffix)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Version::PreReleaseSuffixTest</name>
    <filename>classPharIo_1_1Version_1_1PreReleaseSuffixTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testGreaterThanReturnsExpectedResult</name>
      <anchorfile>classPharIo_1_1Version_1_1PreReleaseSuffixTest.html</anchorfile>
      <anchor>aaa5471d897363cfd4826031d040ba74d</anchor>
      <arglist>( $leftSuffixValue, $rightSuffixValue, $expectedResult)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>greaterThanProvider</name>
      <anchorfile>classPharIo_1_1Version_1_1PreReleaseSuffixTest.html</anchorfile>
      <anchor>a3be189c44ee7613c1e5826691b3b535f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Util::Printer</name>
    <filename>classPHPUnit_1_1Util_1_1Printer.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Printer.html</anchorfile>
      <anchor>a801204f50c90e0907b111c9be3faeda2</anchor>
      <arglist>($out=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>flush</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Printer.html</anchorfile>
      <anchor>ac842d8978b06b582771b33d5fa581661</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>incrementalFlush</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Printer.html</anchorfile>
      <anchor>aed829801702c9ad956cbee69b630d584</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>write</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Printer.html</anchorfile>
      <anchor>ad76a2ee67aad8d6731b05c61c6a3b106</anchor>
      <arglist>(string $buffer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getAutoFlush</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Printer.html</anchorfile>
      <anchor>aae195bfb7fdf7be14ffa6edd03e470a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setAutoFlush</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Printer.html</anchorfile>
      <anchor>a4c5653ad1de422a6901555a86f77c3f3</anchor>
      <arglist>(bool $autoFlush)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$autoFlush</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Printer.html</anchorfile>
      <anchor>a75c4c6e9de970d1e27f6f1174738acb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$out</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Printer.html</anchorfile>
      <anchor>ad5dcf551fcc18c03df3a0ea5460ab763</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$outTarget</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Printer.html</anchorfile>
      <anchor>a87392e122dbf145b08248b8888ab0bdd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>FileFetcher::Processor::ProcessorInterface</name>
    <filename>interfaceFileFetcher_1_1Processor_1_1ProcessorInterface.html</filename>
    <member kind="function">
      <type></type>
      <name>isServerCompatible</name>
      <anchorfile>interfaceFileFetcher_1_1Processor_1_1ProcessorInterface.html</anchorfile>
      <anchor>aa1174260f2093cc426ad9ebf27130cb7</anchor>
      <arglist>(array $state)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setupState</name>
      <anchorfile>interfaceFileFetcher_1_1Processor_1_1ProcessorInterface.html</anchorfile>
      <anchor>a4aeb4ed3b71452d94003386d508de32f</anchor>
      <arglist>(array $state)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copy</name>
      <anchorfile>interfaceFileFetcher_1_1Processor_1_1ProcessorInterface.html</anchorfile>
      <anchor>acea2aa34ad3ffc45cde79eaba7896d7b</anchor>
      <arglist>(array $state, Result $result, int $timeLimit=PHP_INT_MAX)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isTimeLimitIncompatible</name>
      <anchorfile>interfaceFileFetcher_1_1Processor_1_1ProcessorInterface.html</anchorfile>
      <anchor>a133a1e253986f9d1f6f1c7f4e1d9d360</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::CodeCoverage::Report::Xml::Project</name>
    <filename>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1Project.html</filename>
    <base>SebastianBergmann::CodeCoverage::Report::Xml::Node</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1Project.html</anchorfile>
      <anchor>a3e83d8dd6692bad2c60a873357592e38</anchor>
      <arglist>(string $directory)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getProjectSourceDirectory</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1Project.html</anchorfile>
      <anchor>a554cc45233474e7380230643fd9171f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getBuildInformation</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1Project.html</anchorfile>
      <anchor>a2f0e4c101a9f4443e19c474b4cdc20fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getTests</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1Project.html</anchorfile>
      <anchor>a75ee40ce67c67ff228fb4258f5c8905d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>asDom</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1Project.html</anchorfile>
      <anchor>ab2b1d6b19550463b02e992fa3538db26</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>phpDocumentor::Reflection::Project</name>
    <filename>interfacephpDocumentor_1_1Reflection_1_1Project.html</filename>
    <member kind="function">
      <type></type>
      <name>getName</name>
      <anchorfile>interfacephpDocumentor_1_1Reflection_1_1Project.html</anchorfile>
      <anchor>a47a7f0e0902af48fe5447311d9d0ea76</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>phpDocumentor::Reflection::ProjectFactory</name>
    <filename>interfacephpDocumentor_1_1Reflection_1_1ProjectFactory.html</filename>
    <member kind="function">
      <type></type>
      <name>create</name>
      <anchorfile>interfacephpDocumentor_1_1Reflection_1_1ProjectFactory.html</anchorfile>
      <anchor>af627bf2fa76b7862eb77c10c4403b503</anchor>
      <arglist>(string $name, array $files)</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>Prophecy::Promise::PromiseInterface</name>
    <filename>interfaceProphecy_1_1Promise_1_1PromiseInterface.html</filename>
    <member kind="function">
      <type></type>
      <name>execute</name>
      <anchorfile>interfaceProphecy_1_1Promise_1_1PromiseInterface.html</anchorfile>
      <anchor>aa7662474497d0ce06120d58d287be23b</anchor>
      <arglist>(array $args, ObjectProphecy $object, MethodProphecy $method)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocBlock::Tags::Property</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Property.html</filename>
    <base>phpDocumentor::Reflection::DocBlock::Tags::TagWithType</base>
    <base>phpDocumentor::Reflection::DocBlock::Tags::Factory::StaticMethod</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Property.html</anchorfile>
      <anchor>ade75200fb2fdcda294392f076574dd41</anchor>
      <arglist>(?string $variableName, ?Type $type=null, ?Description $description=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getVariableName</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Property.html</anchorfile>
      <anchor>a459fb07b202e3c8d97cac9c02069e152</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Property.html</anchorfile>
      <anchor>a4f86673b344be1f904bcedbe8f6b2c82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>create</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Property.html</anchorfile>
      <anchor>a518c40c1e88950aba0e7e5562893d19f</anchor>
      <arglist>(string $body, ?TypeResolver $typeResolver=null, ?DescriptionFactory $descriptionFactory=null, ?TypeContext $context=null)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$variableName</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Property.html</anchorfile>
      <anchor>ab3f6a4460f019740579282ca69af07f0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeepCopy::Exception::PropertyException</name>
    <filename>classDeepCopy_1_1Exception_1_1PropertyException.html</filename>
  </compound>
  <compound kind="class">
    <name>DeepCopy::Matcher::PropertyMatcher</name>
    <filename>classDeepCopy_1_1Matcher_1_1PropertyMatcher.html</filename>
    <base>DeepCopy::Matcher::Matcher</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classDeepCopy_1_1Matcher_1_1PropertyMatcher.html</anchorfile>
      <anchor>a11ed09830334e8c4926e527233ac5741</anchor>
      <arglist>($class, $property)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>matches</name>
      <anchorfile>classDeepCopy_1_1Matcher_1_1PropertyMatcher.html</anchorfile>
      <anchor>a68330d638ee2fab2eb50534f702a327c</anchor>
      <arglist>($object, $property)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeepCopyTest::Matcher::PropertyMatcherTest</name>
    <filename>classDeepCopyTest_1_1Matcher_1_1PropertyMatcherTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>test_it_matches_the_given_objects</name>
      <anchorfile>classDeepCopyTest_1_1Matcher_1_1PropertyMatcherTest.html</anchorfile>
      <anchor>a23862c3924fcb4641744fd7427e9126c</anchor>
      <arglist>($object, $prop, $expected)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>providePairs</name>
      <anchorfile>classDeepCopyTest_1_1Matcher_1_1PropertyMatcherTest.html</anchorfile>
      <anchor>ab0a225247f0826272378bbceca89b4a1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeepCopy::Matcher::PropertyNameMatcher</name>
    <filename>classDeepCopy_1_1Matcher_1_1PropertyNameMatcher.html</filename>
    <base>DeepCopy::Matcher::Matcher</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classDeepCopy_1_1Matcher_1_1PropertyNameMatcher.html</anchorfile>
      <anchor>af4eae530bae8ba3d4894c9fbcbf5bbe8</anchor>
      <arglist>($property)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>matches</name>
      <anchorfile>classDeepCopy_1_1Matcher_1_1PropertyNameMatcher.html</anchorfile>
      <anchor>a45317668f93efb691ff9ed72d56b1a8c</anchor>
      <arglist>($object, $property)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeepCopyTest::Matcher::PropertyNameMatcherTest</name>
    <filename>classDeepCopyTest_1_1Matcher_1_1PropertyNameMatcherTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>test_it_matches_the_given_property</name>
      <anchorfile>classDeepCopyTest_1_1Matcher_1_1PropertyNameMatcherTest.html</anchorfile>
      <anchor>ab4485bad243261ea74224bbbd59b1d7b</anchor>
      <arglist>($object, $prop, $expected)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>providePairs</name>
      <anchorfile>classDeepCopyTest_1_1Matcher_1_1PropertyNameMatcherTest.html</anchorfile>
      <anchor>a9e0f9c5cfdad1143f2650ee5f978ab8f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocBlock::Tags::PropertyRead</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1PropertyRead.html</filename>
    <base>phpDocumentor::Reflection::DocBlock::Tags::TagWithType</base>
    <base>phpDocumentor::Reflection::DocBlock::Tags::Factory::StaticMethod</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1PropertyRead.html</anchorfile>
      <anchor>a94e1e6e767af5d6e6d99d5e095502b53</anchor>
      <arglist>(?string $variableName, ?Type $type=null, ?Description $description=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getVariableName</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1PropertyRead.html</anchorfile>
      <anchor>abf0b6f146a4c3281dfc536af6ce9a82b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1PropertyRead.html</anchorfile>
      <anchor>aa442bcc076ef389547fa8778c17199c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>create</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1PropertyRead.html</anchorfile>
      <anchor>a0203ae0c4f94d27e9d68cc9d64be2c16</anchor>
      <arglist>(string $body, ?TypeResolver $typeResolver=null, ?DescriptionFactory $descriptionFactory=null, ?TypeContext $context=null)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$variableName</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1PropertyRead.html</anchorfile>
      <anchor>a812d51a061c0cdc34d9eda9bc59263ae</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocBlock::Tags::PropertyReadTest</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1PropertyReadTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>tearDown</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1PropertyReadTest.html</anchorfile>
      <anchor>a9608acac7694d50def515b13776325da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIfCorrectTagNameIsReturned</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1PropertyReadTest.html</anchorfile>
      <anchor>af028a93fa4e8436cbb4618af5becc562</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIfTagCanBeRenderedUsingDefaultFormatter</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1PropertyReadTest.html</anchorfile>
      <anchor>a67636393c8a2109fffcb7051dd87df71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIfTagCanBeRenderedUsingSpecificFormatter</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1PropertyReadTest.html</anchorfile>
      <anchor>abeb0ff5062ff3b25c511bee7f217d498</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasVariableName</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1PropertyReadTest.html</anchorfile>
      <anchor>af1fecaff46d8aa03ca9a07d93e7d9cb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasType</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1PropertyReadTest.html</anchorfile>
      <anchor>a30b8902fd22c9f6005b6239e6bfe405c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasDescription</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1PropertyReadTest.html</anchorfile>
      <anchor>a7b0548970121f9a7101bb0ce7e8a1178</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStringRepresentationIsReturned</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1PropertyReadTest.html</anchorfile>
      <anchor>a7d27dced4d1e35c383b75154f921625c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethod</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1PropertyReadTest.html</anchorfile>
      <anchor>abbf1725c1361e441ef6e10b127b46e7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodWithoutType</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1PropertyReadTest.html</anchorfile>
      <anchor>a9f218d785aa9ea2b769ab7f524dc56cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodWithType</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1PropertyReadTest.html</anchorfile>
      <anchor>a37afa80b1d2673f8d20951bb08192870</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodFailsIfEmptyBodyIsGiven</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1PropertyReadTest.html</anchorfile>
      <anchor>ae15f1873e063dcbbfebd9a12ff8fddc8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodFailsIfResolverIsNull</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1PropertyReadTest.html</anchorfile>
      <anchor>af3008d009d6082e26abed65705b865a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodFailsIfDescriptionFactoryIsNull</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1PropertyReadTest.html</anchorfile>
      <anchor>a512908a6541af9405d455c14d644ebce</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocBlock::Tags::PropertyTest</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1PropertyTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>tearDown</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1PropertyTest.html</anchorfile>
      <anchor>a7cc83fa53a02459e85e2d54cb73dc522</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIfCorrectTagNameIsReturned</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1PropertyTest.html</anchorfile>
      <anchor>a16bdebca79acfa4fbb137257ede6fe86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIfTagCanBeRenderedUsingDefaultFormatter</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1PropertyTest.html</anchorfile>
      <anchor>aca33efd3d2f686495d8d9a856649dce6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIfTagCanBeRenderedUsingSpecificFormatter</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1PropertyTest.html</anchorfile>
      <anchor>a717ceb8d34891ac5486331ad93723be0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasVariableName</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1PropertyTest.html</anchorfile>
      <anchor>afebded4acc27339fceac2f25459ebba3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasType</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1PropertyTest.html</anchorfile>
      <anchor>a5e5bdfb9e69f4c9ac5e97c3c14fe91bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasDescription</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1PropertyTest.html</anchorfile>
      <anchor>a59ab59e892e3b2c82518e11d5663f1b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStringRepresentationIsReturned</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1PropertyTest.html</anchorfile>
      <anchor>a80dd570c68b5460493ebfe1aa9b6c49e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethod</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1PropertyTest.html</anchorfile>
      <anchor>a2c65c181aa79e6ad5b7639e9af11606b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodWithoutType</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1PropertyTest.html</anchorfile>
      <anchor>ae72f66bb847d17da65af44526303fb19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodWithType</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1PropertyTest.html</anchorfile>
      <anchor>ad87aa047a743c36f519961a88a22f44f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodFailsIfEmptyBodyIsGiven</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1PropertyTest.html</anchorfile>
      <anchor>afd606abc15f95751d14cc8af4a1a439c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodFailsIfResolverIsNull</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1PropertyTest.html</anchorfile>
      <anchor>a5a70e0f37360dcf71421d8f74c70d23b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodFailsIfDescriptionFactoryIsNull</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1PropertyTest.html</anchorfile>
      <anchor>a281345d2828017b528fc586b125e774b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeepCopy::Matcher::PropertyTypeMatcher</name>
    <filename>classDeepCopy_1_1Matcher_1_1PropertyTypeMatcher.html</filename>
    <base>DeepCopy::Matcher::Matcher</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classDeepCopy_1_1Matcher_1_1PropertyTypeMatcher.html</anchorfile>
      <anchor>a23a6380ee6cb26a8b41eb86e511e9726</anchor>
      <arglist>($propertyType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>matches</name>
      <anchorfile>classDeepCopy_1_1Matcher_1_1PropertyTypeMatcher.html</anchorfile>
      <anchor>a59d82c2384a0c556b09cef4ca4794a89</anchor>
      <arglist>($object, $property)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeepCopyTest::Matcher::PropertyTypeMatcherTest</name>
    <filename>classDeepCopyTest_1_1Matcher_1_1PropertyTypeMatcherTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>test_it_matches_the_given_property</name>
      <anchorfile>classDeepCopyTest_1_1Matcher_1_1PropertyTypeMatcherTest.html</anchorfile>
      <anchor>ad8fd8266a64ddd6a40b7b1d603e0a8a3</anchor>
      <arglist>($object, $expected)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>providePairs</name>
      <anchorfile>classDeepCopyTest_1_1Matcher_1_1PropertyTypeMatcherTest.html</anchorfile>
      <anchor>af4461c9a5a15a6ee169a0293ff44873b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeepCopyTest::Matcher::PropertyTypeMatcherTestFixture1</name>
    <filename>classDeepCopyTest_1_1Matcher_1_1PropertyTypeMatcherTestFixture1.html</filename>
    <member kind="variable">
      <type></type>
      <name>$foo</name>
      <anchorfile>classDeepCopyTest_1_1Matcher_1_1PropertyTypeMatcherTestFixture1.html</anchorfile>
      <anchor>a841ef5dc477abc58d0163c39041bf683</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeepCopyTest::Matcher::PropertyTypeMatcherTestFixture2</name>
    <filename>classDeepCopyTest_1_1Matcher_1_1PropertyTypeMatcherTestFixture2.html</filename>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocBlock::Tags::PropertyWrite</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1PropertyWrite.html</filename>
    <base>phpDocumentor::Reflection::DocBlock::Tags::TagWithType</base>
    <base>phpDocumentor::Reflection::DocBlock::Tags::Factory::StaticMethod</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1PropertyWrite.html</anchorfile>
      <anchor>a4f24dc5e3042ff818855fd4659f1cd2e</anchor>
      <arglist>(?string $variableName, ?Type $type=null, ?Description $description=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getVariableName</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1PropertyWrite.html</anchorfile>
      <anchor>abea4a01bbc884ae2826a040e2fedd123</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1PropertyWrite.html</anchorfile>
      <anchor>a4536c2f0d829b08032279d5a9c4e8990</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>create</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1PropertyWrite.html</anchorfile>
      <anchor>abb2099769c29b0609958668484c9719a</anchor>
      <arglist>(string $body, ?TypeResolver $typeResolver=null, ?DescriptionFactory $descriptionFactory=null, ?TypeContext $context=null)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$variableName</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1PropertyWrite.html</anchorfile>
      <anchor>a122ac3aee6ddc791ff92964ad6ea0fb6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocBlock::Tags::PropertyWriteTest</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1PropertyWriteTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>tearDown</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1PropertyWriteTest.html</anchorfile>
      <anchor>adc098b73533da5c182022cf106284c78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIfCorrectTagNameIsReturned</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1PropertyWriteTest.html</anchorfile>
      <anchor>a758a661f408d64b4855ae86762444a65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIfTagCanBeRenderedUsingDefaultFormatter</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1PropertyWriteTest.html</anchorfile>
      <anchor>a8cab7c50df9b34f5407d4de1fde55242</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIfTagCanBeRenderedUsingSpecificFormatter</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1PropertyWriteTest.html</anchorfile>
      <anchor>a2a752ea64e045e8b0c1767515e1da827</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasVariableName</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1PropertyWriteTest.html</anchorfile>
      <anchor>a28a300c50ddaf737666570f790fa2be3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasType</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1PropertyWriteTest.html</anchorfile>
      <anchor>abda60661e7c28578e827a01039f2160c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasDescription</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1PropertyWriteTest.html</anchorfile>
      <anchor>a98a7af04df5b3eafb9df47ca361a4bd6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStringRepresentationIsReturned</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1PropertyWriteTest.html</anchorfile>
      <anchor>aaf0ccf59e82cdfdabadcaffc982424d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethod</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1PropertyWriteTest.html</anchorfile>
      <anchor>a171d1a9f2ca923a30ee261c4e2337eda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodWithoutType</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1PropertyWriteTest.html</anchorfile>
      <anchor>a0cc6607edbfcff7613714c4fb1853bb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodWithType</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1PropertyWriteTest.html</anchorfile>
      <anchor>a106b9bc59d3cacbfb80b90f856cb18a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodFailsIfEmptyBodyIsGiven</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1PropertyWriteTest.html</anchorfile>
      <anchor>abfa2a276732abaa63cc77d549f3c5dd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodFailsIfResolverIsNull</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1PropertyWriteTest.html</anchorfile>
      <anchor>ad7af9d85ff63f1cde6f226daddfe8f91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodFailsIfDescriptionFactoryIsNull</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1PropertyWriteTest.html</anchorfile>
      <anchor>af78cbc28934775fd10748592d85bba7e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Comparator::ProphecyComparator</name>
    <filename>classProphecy_1_1Comparator_1_1ProphecyComparator.html</filename>
    <base>SebastianBergmann::Comparator::ObjectComparator</base>
    <member kind="function">
      <type></type>
      <name>accepts</name>
      <anchorfile>classProphecy_1_1Comparator_1_1ProphecyComparator.html</anchorfile>
      <anchor>a37a324d150e258551f3509bf50134aa8</anchor>
      <arglist>($expected, $actual)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>assertEquals</name>
      <anchorfile>classProphecy_1_1Comparator_1_1ProphecyComparator.html</anchorfile>
      <anchor>a0894fb54a5cff6eef38b6fa48aaaf2fb</anchor>
      <arglist>($expected, $actual, $delta=0.0, $canonicalize=false, $ignoreCase=false, array &amp;$processed=array())</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>Prophecy::Exception::Prophecy::ProphecyException</name>
    <filename>interfaceProphecy_1_1Exception_1_1Prophecy_1_1ProphecyException.html</filename>
    <base>Prophecy::Exception::Exception</base>
  </compound>
  <compound kind="interface">
    <name>Prophecy::Prophecy::ProphecyInterface</name>
    <filename>interfaceProphecy_1_1Prophecy_1_1ProphecyInterface.html</filename>
    <member kind="function">
      <type></type>
      <name>reveal</name>
      <anchorfile>interfaceProphecy_1_1Prophecy_1_1ProphecyInterface.html</anchorfile>
      <anchor>a429c62cc5a2dbdbd19782e51955c53e8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>Prophecy::Prophecy::ProphecySubjectInterface</name>
    <filename>interfaceProphecy_1_1Prophecy_1_1ProphecySubjectInterface.html</filename>
    <member kind="function">
      <type></type>
      <name>setProphecy</name>
      <anchorfile>interfaceProphecy_1_1Prophecy_1_1ProphecySubjectInterface.html</anchorfile>
      <anchor>aa127f8fee3e21a8696e71f6f5b5f35dc</anchor>
      <arglist>(ProphecyInterface $prophecy)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getProphecy</name>
      <anchorfile>interfaceProphecy_1_1Prophecy_1_1ProphecySubjectInterface.html</anchorfile>
      <anchor>a9c7bdff599220d9c84f072a09649067e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Doubler::ClassPatch::ProphecySubjectPatch</name>
    <filename>classProphecy_1_1Doubler_1_1ClassPatch_1_1ProphecySubjectPatch.html</filename>
    <base>Prophecy::Doubler::ClassPatch::ClassPatchInterface</base>
    <member kind="function">
      <type></type>
      <name>supports</name>
      <anchorfile>classProphecy_1_1Doubler_1_1ClassPatch_1_1ProphecySubjectPatch.html</anchorfile>
      <anchor>a9a378c75dd5995ddb9d780948db3d897</anchor>
      <arglist>(ClassNode $node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>apply</name>
      <anchorfile>classProphecy_1_1Doubler_1_1ClassPatch_1_1ProphecySubjectPatch.html</anchorfile>
      <anchor>a542d23f2c6d2ccbce6f2a3e69c032257</anchor>
      <arglist>(ClassNode $node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getPriority</name>
      <anchorfile>classProphecy_1_1Doubler_1_1ClassPatch_1_1ProphecySubjectPatch.html</anchorfile>
      <anchor>a972a1f55e76ead446fad2dea8837d486</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Prophet</name>
    <filename>classProphecy_1_1Prophet.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classProphecy_1_1Prophet.html</anchorfile>
      <anchor>a338179a65c1a7dc00f6394d55991d8b9</anchor>
      <arglist>(Doubler $doubler=null, RevealerInterface $revealer=null, StringUtil $util=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>prophesize</name>
      <anchorfile>classProphecy_1_1Prophet.html</anchorfile>
      <anchor>a5f218addcd8bd9e13f3a1ac3aae7c62d</anchor>
      <arglist>($classOrInterface=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getProphecies</name>
      <anchorfile>classProphecy_1_1Prophet.html</anchorfile>
      <anchor>ab68c9afb8d4b55a972da30985b247431</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getDoubler</name>
      <anchorfile>classProphecy_1_1Prophet.html</anchorfile>
      <anchor>a594d1992ab34a8e1b12f42f5c848d0c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>checkPredictions</name>
      <anchorfile>classProphecy_1_1Prophet.html</anchorfile>
      <anchor>addbbbc78c841b3e6a0f7c7ecaeb45798</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ProxyObjectTest</name>
    <filename>classProxyObjectTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testProxyingWorksForMethodThatReturnsUndeclaredScalarValue</name>
      <anchorfile>classProxyObjectTest.html</anchorfile>
      <anchor>aebd10f74e46229d5ee5e67aa64c5eae2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testProxyingWorksForMethodThatReturnsDeclaredScalarValue</name>
      <anchorfile>classProxyObjectTest.html</anchorfile>
      <anchor>abe3e707297f56a9593c4eddc914eb648</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testProxyingWorksForMethodThatReturnsUndeclaredObject</name>
      <anchorfile>classProxyObjectTest.html</anchorfile>
      <anchor>a4119435ded7778477eb82d008958ac1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testProxyingWorksForMethodThatReturnsDeclaredObject</name>
      <anchorfile>classProxyObjectTest.html</anchorfile>
      <anchor>a9a59d8849693faeb257e71c90988a05d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testProxyingWorksForMethodThatReturnsUndeclaredObjectOfFinalClass</name>
      <anchorfile>classProxyObjectTest.html</anchorfile>
      <anchor>a8c3a1c9a3e7aac3b4be479f113beb35b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testProxyingWorksForMethodThatReturnsDeclaredObjectOfFinalClass</name>
      <anchorfile>classProxyObjectTest.html</anchorfile>
      <anchor>a85f0155a10982f3bdb87737ee0c4158b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>phpDocumentor::Reflection::PseudoType</name>
    <filename>interfacephpDocumentor_1_1Reflection_1_1PseudoType.html</filename>
    <base>phpDocumentor::Reflection::Type</base>
    <member kind="function">
      <type></type>
      <name>underlyingType</name>
      <anchorfile>interfacephpDocumentor_1_1Reflection_1_1PseudoType.html</anchorfile>
      <anchor>a9cc4b0d6193550d717b49f365a8fe169</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::ReconstitutingADocBlockTest</name>
    <filename>classphpDocumentor_1_1Reflection_1_1ReconstitutingADocBlockTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>tearDown</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1ReconstitutingADocBlockTest.html</anchorfile>
      <anchor>a5fd71c19f682902cd34abd2586ebab8d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>phpDocumentor::Reflection::DocBlock::Tags::Reference::Reference</name>
    <filename>interfacephpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Reference_1_1Reference.html</filename>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>interfacephpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Reference_1_1Reference.html</anchorfile>
      <anchor>a95ae252f4e48cdfcb1e08600654cc7aa</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Doubler::ClassPatch::ReflectionClassNewInstancePatch</name>
    <filename>classProphecy_1_1Doubler_1_1ClassPatch_1_1ReflectionClassNewInstancePatch.html</filename>
    <base>Prophecy::Doubler::ClassPatch::ClassPatchInterface</base>
    <member kind="function">
      <type></type>
      <name>supports</name>
      <anchorfile>classProphecy_1_1Doubler_1_1ClassPatch_1_1ReflectionClassNewInstancePatch.html</anchorfile>
      <anchor>a8a2e05a7f7a88b7d32527d703c0a115d</anchor>
      <arglist>(ClassNode $node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>apply</name>
      <anchorfile>classProphecy_1_1Doubler_1_1ClassPatch_1_1ReflectionClassNewInstancePatch.html</anchorfile>
      <anchor>a9ced9a8ae883fab31629c029c7ff58c8</anchor>
      <arglist>(ClassNode $node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getPriority</name>
      <anchorfile>classProphecy_1_1Doubler_1_1ClassPatch_1_1ReflectionClassNewInstancePatch.html</anchorfile>
      <anchor>a5391d32a6e08ce187cdcce053d75128c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeepCopy::Reflection::ReflectionHelper</name>
    <filename>classDeepCopy_1_1Reflection_1_1ReflectionHelper.html</filename>
    <member kind="function" static="yes">
      <type>static</type>
      <name>getProperties</name>
      <anchorfile>classDeepCopy_1_1Reflection_1_1ReflectionHelper.html</anchorfile>
      <anchor>a0475992ac93c2d0a69447391f96277fa</anchor>
      <arglist>(ReflectionClass $ref)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>getProperty</name>
      <anchorfile>classDeepCopy_1_1Reflection_1_1ReflectionHelper.html</anchorfile>
      <anchor>a5e3914eb80dc5734a24ef2a9a5780dc4</anchor>
      <arglist>($object, $name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeepCopyTest::Reflection::ReflectionHelperTest</name>
    <filename>classDeepCopyTest_1_1Reflection_1_1ReflectionHelperTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>test_it_retrieves_the_object_properties</name>
      <anchorfile>classDeepCopyTest_1_1Reflection_1_1ReflectionHelperTest.html</anchorfile>
      <anchor>ae4a64ed4c6ed4c29e5fb885dde190dec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>test_it_can_retrieve_an_object_property</name>
      <anchorfile>classDeepCopyTest_1_1Reflection_1_1ReflectionHelperTest.html</anchorfile>
      <anchor>a25bb7acc8167fa77a6600b04632ae420</anchor>
      <arglist>($name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>provideProperties</name>
      <anchorfile>classDeepCopyTest_1_1Reflection_1_1ReflectionHelperTest.html</anchorfile>
      <anchor>a0fbcec3615691021d5f2bad96a68ead8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>test_it_cannot_retrieve_a_non_existent_prperty</name>
      <anchorfile>classDeepCopyTest_1_1Reflection_1_1ReflectionHelperTest.html</anchorfile>
      <anchor>a9c39baf6aaa843bc7541fdf786cbabcd</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeepCopyTest::Reflection::ReflectionHelperTestChild</name>
    <filename>classDeepCopyTest_1_1Reflection_1_1ReflectionHelperTestChild.html</filename>
    <base>DeepCopyTest::Reflection::ReflectionHelperTestParent</base>
    <member kind="variable">
      <type></type>
      <name>$a1</name>
      <anchorfile>classDeepCopyTest_1_1Reflection_1_1ReflectionHelperTestChild.html</anchorfile>
      <anchor>a0815c6914c1c72522971da084de54522</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$a100</name>
      <anchorfile>classDeepCopyTest_1_1Reflection_1_1ReflectionHelperTestChild.html</anchorfile>
      <anchor>abb699ed4f2a0904b772c785259fa5f9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$a2</name>
      <anchorfile>classDeepCopyTest_1_1Reflection_1_1ReflectionHelperTestChild.html</anchorfile>
      <anchor>a6652e4f849f1c868fcbea43a5d1e8c48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$a101</name>
      <anchorfile>classDeepCopyTest_1_1Reflection_1_1ReflectionHelperTestChild.html</anchorfile>
      <anchor>a86f72c43d7c291a85f611a521d7fec5e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeepCopyTest::Reflection::ReflectionHelperTestParent</name>
    <filename>classDeepCopyTest_1_1Reflection_1_1ReflectionHelperTestParent.html</filename>
    <member kind="variable">
      <type></type>
      <name>$a1</name>
      <anchorfile>classDeepCopyTest_1_1Reflection_1_1ReflectionHelperTestParent.html</anchorfile>
      <anchor>acd69f553c842a6498325f90e5658560b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$a10</name>
      <anchorfile>classDeepCopyTest_1_1Reflection_1_1ReflectionHelperTestParent.html</anchorfile>
      <anchor>a7b030ad37ebe05e30d8b1b9219b1da70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static</type>
      <name>$a20</name>
      <anchorfile>classDeepCopyTest_1_1Reflection_1_1ReflectionHelperTestParent.html</anchorfile>
      <anchor>a0c8b0bd1df8ff67023c760aa67932e62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$a2</name>
      <anchorfile>classDeepCopyTest_1_1Reflection_1_1ReflectionHelperTestParent.html</anchorfile>
      <anchor>a1df4a58ac2861748caeaf5deb2a9574d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$a11</name>
      <anchorfile>classDeepCopyTest_1_1Reflection_1_1ReflectionHelperTestParent.html</anchorfile>
      <anchor>a8617f889571e33d5db439d25edbcb026</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static</type>
      <name>$a21</name>
      <anchorfile>classDeepCopyTest_1_1Reflection_1_1ReflectionHelperTestParent.html</anchorfile>
      <anchor>ab93bc64429a2e23462ccb88200737e88</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>Prophecy::Doubler::Generator::ReflectionInterface</name>
    <filename>interfaceProphecy_1_1Doubler_1_1Generator_1_1ReflectionInterface.html</filename>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Util::Annotation::Registry</name>
    <filename>classPHPUnit_1_1Util_1_1Annotation_1_1Registry.html</filename>
    <member kind="function">
      <type></type>
      <name>forClassName</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Annotation_1_1Registry.html</anchorfile>
      <anchor>a215c9956e0d869cdc2c4a22146ce116b</anchor>
      <arglist>(string $class)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>forMethod</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Annotation_1_1Registry.html</anchorfile>
      <anchor>a5c850099f63f91b0ff73892aad321bf6</anchor>
      <arglist>(string $classInHierarchy, string $method)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>getInstance</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Annotation_1_1Registry.html</anchorfile>
      <anchor>af26c9d97b10d8677c806172fad76067d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Util::Annotation::RegistryTest</name>
    <filename>classPHPUnit_1_1Util_1_1Annotation_1_1RegistryTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testRegistryLookupWithExistingClassAnnotation</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Annotation_1_1RegistryTest.html</anchorfile>
      <anchor>a7012a50d6160b96053c9ecdd44e12b3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testRegistryLookupWithExistingMethodAnnotation</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Annotation_1_1RegistryTest.html</anchorfile>
      <anchor>af6d8f4b437aeff5d7a6d328fbc9be3cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testClassLookupForAClassThatDoesNotExistFails</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Annotation_1_1RegistryTest.html</anchorfile>
      <anchor>a6cfa44749befdec5d89761c849460f81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testMethodLookupForAMethodThatDoesNotExistFails</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Annotation_1_1RegistryTest.html</anchorfile>
      <anchor>ad62465eedb77870fd70ca6d986b3fb52</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::RegularExpression</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1RegularExpression.html</filename>
    <base>PHPUnit::Framework::Constraint::Constraint</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1RegularExpression.html</anchorfile>
      <anchor>a1748f438685f258b4df82cbebdfa141d</anchor>
      <arglist>(string $pattern)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1RegularExpression.html</anchorfile>
      <anchor>aa21f7e5d47bc0a89b914267d96bfb98d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>matches</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1RegularExpression.html</anchorfile>
      <anchor>a9d00a173c6684e053f76323871c4432d</anchor>
      <arglist>($other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Util::RegularExpression</name>
    <filename>classPHPUnit_1_1Util_1_1RegularExpression.html</filename>
    <member kind="function" static="yes">
      <type>static</type>
      <name>safeMatch</name>
      <anchorfile>classPHPUnit_1_1Util_1_1RegularExpression.html</anchorfile>
      <anchor>a3777208f3613a7c9afb7f405d9a522a5</anchor>
      <arglist>(string $pattern, string $subject)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Util::RegularExpressionTest</name>
    <filename>classPHPUnit_1_1Util_1_1RegularExpressionTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>validRegexpProvider</name>
      <anchorfile>classPHPUnit_1_1Util_1_1RegularExpressionTest.html</anchorfile>
      <anchor>ade9beded1384d22e0408bfd8df76f8a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>invalidRegexpProvider</name>
      <anchorfile>classPHPUnit_1_1Util_1_1RegularExpressionTest.html</anchorfile>
      <anchor>a74c120a6207245bcdce821dc0fc00b49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testValidRegex</name>
      <anchorfile>classPHPUnit_1_1Util_1_1RegularExpressionTest.html</anchorfile>
      <anchor>a65c3bcb2c8c83a29010b6107e2aa3a3c</anchor>
      <arglist>($pattern, $subject, $return)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testInvalidRegex</name>
      <anchorfile>classPHPUnit_1_1Util_1_1RegularExpressionTest.html</anchorfile>
      <anchor>ad413beb178615d68e3d56b4a5b122b6c</anchor>
      <arglist>($pattern, $subject)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::RegularExpressionTest</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1RegularExpressionTest.html</filename>
    <base>PHPUnit::Framework::Constraint::ConstraintTestCase</base>
    <member kind="function">
      <type></type>
      <name>testConstraintRegularExpression</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1RegularExpressionTest.html</anchorfile>
      <anchor>a5d0d8beb22dd5486cc9fcc25ab4566c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintRegularExpression2</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1RegularExpressionTest.html</anchorfile>
      <anchor>a3bbc882610c6bd59352ffe83e5221b9a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::TestFixture::MockObject::ReinitializeConfigurableMethods</name>
    <filename>classPHPUnit_1_1TestFixture_1_1MockObject_1_1ReinitializeConfigurableMethods.html</filename>
  </compound>
  <compound kind="class">
    <name>FileFetcher::Processor::Remote</name>
    <filename>classFileFetcher_1_1Processor_1_1Remote.html</filename>
    <base>FileFetcher::Processor::ProcessorInterface</base>
    <member kind="function">
      <type></type>
      <name>isServerCompatible</name>
      <anchorfile>classFileFetcher_1_1Processor_1_1Remote.html</anchorfile>
      <anchor>a21c98a0b3aa3b66310551871c584512a</anchor>
      <arglist>(array $state)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setupState</name>
      <anchorfile>classFileFetcher_1_1Processor_1_1Remote.html</anchorfile>
      <anchor>a76b0fec2742a58fd83ca0a3f4c98f2ba</anchor>
      <arglist>(array $state)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isTimeLimitIncompatible</name>
      <anchorfile>classFileFetcher_1_1Processor_1_1Remote.html</anchorfile>
      <anchor>a39342c4fcc5e1b11073ec13ce31e335d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copy</name>
      <anchorfile>classFileFetcher_1_1Processor_1_1Remote.html</anchorfile>
      <anchor>a55dbe11413337604c72b50fd0622bcdd</anchor>
      <arglist>(array $state, Result $result, int $timeLimit=PHP_INT_MAX)</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>Contracts::RemoverInterface</name>
    <filename>interfaceContracts_1_1RemoverInterface.html</filename>
    <member kind="function">
      <type></type>
      <name>remove</name>
      <anchorfile>interfaceContracts_1_1RemoverInterface.html</anchorfile>
      <anchor>a9377a33e33bebd40873ba8ee554d93b7</anchor>
      <arglist>(string $id)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::CodeCoverage::Report::Html::Renderer</name>
    <filename>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Html_1_1Renderer.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Html_1_1Renderer.html</anchorfile>
      <anchor>ab6b7286d144bfaa97b4478be6006fcee</anchor>
      <arglist>(string $templatePath, string $generator, string $date, int $lowUpperBound, int $highLowerBound)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>renderItemTemplate</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Html_1_1Renderer.html</anchorfile>
      <anchor>a156c663817359f7890641b7bd7fa93d4</anchor>
      <arglist>(\Text_Template $template, array $data)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setCommonTemplateVariables</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Html_1_1Renderer.html</anchorfile>
      <anchor>a5880bfb93264b9d869acdd8a6ce485ea</anchor>
      <arglist>(\Text_Template $template, AbstractNode $node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>getBreadcrumbs</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Html_1_1Renderer.html</anchorfile>
      <anchor>afdd050a8a20210d877a624d2d1a738da</anchor>
      <arglist>(AbstractNode $node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>getActiveBreadcrumb</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Html_1_1Renderer.html</anchorfile>
      <anchor>a6ef13a8626f1c95e6cba63ac598b6cc4</anchor>
      <arglist>(AbstractNode $node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>getInactiveBreadcrumb</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Html_1_1Renderer.html</anchorfile>
      <anchor>ab4a4752b859f116177fcea53c422b4c7</anchor>
      <arglist>(AbstractNode $node, string $pathToRoot)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>getPathToRoot</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Html_1_1Renderer.html</anchorfile>
      <anchor>a0f68b0f53682e8d66835f9109dc44ca8</anchor>
      <arglist>(AbstractNode $node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>getCoverageBar</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Html_1_1Renderer.html</anchorfile>
      <anchor>aa56b34d34c9f4fbda434104ad079fc85</anchor>
      <arglist>(float $percent)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>getColorLevel</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Html_1_1Renderer.html</anchorfile>
      <anchor>aeb6553faf5296dc7d50d2b715fed19fa</anchor>
      <arglist>(float $percent)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$templatePath</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Html_1_1Renderer.html</anchorfile>
      <anchor>a8f86ae628cd9c2f0e2379c2ccd74e307</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$generator</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Html_1_1Renderer.html</anchorfile>
      <anchor>aa0c7322dcb25b497be2d3af70404f596</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$date</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Html_1_1Renderer.html</anchorfile>
      <anchor>a97b168e7e5bf81ab39ed1f2323bf89a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$lowUpperBound</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Html_1_1Renderer.html</anchorfile>
      <anchor>a295e402341842170911172613505f6e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$highLowerBound</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Html_1_1Renderer.html</anchorfile>
      <anchor>af473094e8c171760502b7fa03549b46b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$version</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Html_1_1Renderer.html</anchorfile>
      <anchor>a46f0ab64c41ffcd370abe668a34cebf3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeepCopy::TypeFilter::ReplaceFilter</name>
    <filename>classDeepCopy_1_1TypeFilter_1_1ReplaceFilter.html</filename>
    <base>DeepCopy::TypeFilter::TypeFilter</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classDeepCopy_1_1TypeFilter_1_1ReplaceFilter.html</anchorfile>
      <anchor>a2b44e0045664e2794b0e0e19c4b7d865</anchor>
      <arglist>(callable $callable)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>apply</name>
      <anchorfile>classDeepCopy_1_1TypeFilter_1_1ReplaceFilter.html</anchorfile>
      <anchor>a88c76a099ece7fbc562425126e4cf393</anchor>
      <arglist>($element)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$callback</name>
      <anchorfile>classDeepCopy_1_1TypeFilter_1_1ReplaceFilter.html</anchorfile>
      <anchor>a77bd116eddd0ab412be8176964032f87</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeepCopy::Filter::ReplaceFilter</name>
    <filename>classDeepCopy_1_1Filter_1_1ReplaceFilter.html</filename>
    <base>DeepCopy::Filter::Filter</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classDeepCopy_1_1Filter_1_1ReplaceFilter.html</anchorfile>
      <anchor>af45ce8eebdb82a0bea6562955625c555</anchor>
      <arglist>(callable $callable)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>apply</name>
      <anchorfile>classDeepCopy_1_1Filter_1_1ReplaceFilter.html</anchorfile>
      <anchor>a99800f4204778b341b9b60181f5de004</anchor>
      <arglist>($object, $property, $objectCopier)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$callback</name>
      <anchorfile>classDeepCopy_1_1Filter_1_1ReplaceFilter.html</anchorfile>
      <anchor>a0869d2ca63dd0d6cfb2ab5dda25f2e21</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeepCopyTest::Filter::ReplaceFilterTest</name>
    <filename>classDeepCopyTest_1_1Filter_1_1ReplaceFilterTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>test_it_applies_the_callback_to_the_specified_property</name>
      <anchorfile>classDeepCopyTest_1_1Filter_1_1ReplaceFilterTest.html</anchorfile>
      <anchor>a67c58d7d2c162576f062c3424a89702e</anchor>
      <arglist>(callable $callback, array $expected)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>provideCallbacks</name>
      <anchorfile>classDeepCopyTest_1_1Filter_1_1ReplaceFilterTest.html</anchorfile>
      <anchor>a801713578efaaa467f1e8ad901a6daea</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeepCopyTest::TypeFilter::ReplaceFilterTest</name>
    <filename>classDeepCopyTest_1_1TypeFilter_1_1ReplaceFilterTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>test_it_returns_the_callback_called_with_the_given_object</name>
      <anchorfile>classDeepCopyTest_1_1TypeFilter_1_1ReplaceFilterTest.html</anchorfile>
      <anchor>a931f52b138b8574618962c992f0a75a2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::CodeCoverage::Report::Xml::Report</name>
    <filename>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1Report.html</filename>
    <base>SebastianBergmann::CodeCoverage::Report::Xml::File</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1Report.html</anchorfile>
      <anchor>a4c6b6e1aaf8ad429f2a1b606d8029fbc</anchor>
      <arglist>(string $name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>asDom</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1Report.html</anchorfile>
      <anchor>adc90eff379778808030da4a37bce3e86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getFunctionObject</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1Report.html</anchorfile>
      <anchor>a40bc9d2a8eafbb6e9af9c392e6ae5be7</anchor>
      <arglist>($name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getClassObject</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1Report.html</anchorfile>
      <anchor>aca60593ad0fec554d6920e48339ea4d0</anchor>
      <arglist>($name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getTraitObject</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1Report.html</anchorfile>
      <anchor>a31aeba11e46b948303187aede2776f89</anchor>
      <arglist>($name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getSource</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1Report.html</anchorfile>
      <anchor>a43109bf3162c4c67fad271a10c38d951</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>PharIo::Manifest::Requirement</name>
    <filename>interfacePharIo_1_1Manifest_1_1Requirement.html</filename>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::RequirementCollection</name>
    <filename>classPharIo_1_1Manifest_1_1RequirementCollection.html</filename>
    <member kind="function">
      <type></type>
      <name>add</name>
      <anchorfile>classPharIo_1_1Manifest_1_1RequirementCollection.html</anchorfile>
      <anchor>a0e44fb5bb24eb379d73a8f83f1a7ae32</anchor>
      <arglist>(Requirement $requirement)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getRequirements</name>
      <anchorfile>classPharIo_1_1Manifest_1_1RequirementCollection.html</anchorfile>
      <anchor>a50ffd28cdb5e5bd475b8fafe96fa5aae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>count</name>
      <anchorfile>classPharIo_1_1Manifest_1_1RequirementCollection.html</anchorfile>
      <anchor>a5bbb97c9ce14380076e5764c4d0da591</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getIterator</name>
      <anchorfile>classPharIo_1_1Manifest_1_1RequirementCollection.html</anchorfile>
      <anchor>a166e6aa20d5d9d2e2baad622452a7b21</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::RequirementCollectionIterator</name>
    <filename>classPharIo_1_1Manifest_1_1RequirementCollectionIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPharIo_1_1Manifest_1_1RequirementCollectionIterator.html</anchorfile>
      <anchor>a483393b213849d64fd489f2bcdf9827a</anchor>
      <arglist>(RequirementCollection $requirements)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>rewind</name>
      <anchorfile>classPharIo_1_1Manifest_1_1RequirementCollectionIterator.html</anchorfile>
      <anchor>a7df6d40ffb0740aa00e0f34e81835b5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>valid</name>
      <anchorfile>classPharIo_1_1Manifest_1_1RequirementCollectionIterator.html</anchorfile>
      <anchor>a4a0438f8063ef9f3ad0cbe0ff339aa12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>key</name>
      <anchorfile>classPharIo_1_1Manifest_1_1RequirementCollectionIterator.html</anchorfile>
      <anchor>a6e965840ade899c08589824247c62016</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>current</name>
      <anchorfile>classPharIo_1_1Manifest_1_1RequirementCollectionIterator.html</anchorfile>
      <anchor>a916a536dbe8aa0693c5a9fd7eea27d2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>next</name>
      <anchorfile>classPharIo_1_1Manifest_1_1RequirementCollectionIterator.html</anchorfile>
      <anchor>a0339313cd811ee2f7dfa872eca9f39d7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::RequirementCollectionTest</name>
    <filename>classPharIo_1_1Manifest_1_1RequirementCollectionTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testCanBeCreated</name>
      <anchorfile>classPharIo_1_1Manifest_1_1RequirementCollectionTest.html</anchorfile>
      <anchor>a8e1577e02232d609bcd1952f776771ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCanBeCounted</name>
      <anchorfile>classPharIo_1_1Manifest_1_1RequirementCollectionTest.html</anchorfile>
      <anchor>a09376d3c7ca56fd7348b1131b458ed50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCanBeIterated</name>
      <anchorfile>classPharIo_1_1Manifest_1_1RequirementCollectionTest.html</anchorfile>
      <anchor>afa9fa2c1c8643134ab056f5d27feb396</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testKeyPositionCanBeRetreived</name>
      <anchorfile>classPharIo_1_1Manifest_1_1RequirementCollectionTest.html</anchorfile>
      <anchor>affb9c60e02dadeddc76239483e6cee6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classPharIo_1_1Manifest_1_1RequirementCollectionTest.html</anchorfile>
      <anchor>a4bf687f2f48262de654343d6e3143657</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RequirementsClassBeforeClassHookTest</name>
    <filename>classRequirementsClassBeforeClassHookTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function" static="yes">
      <type>static</type>
      <name>setUpBeforeClass</name>
      <anchorfile>classRequirementsClassBeforeClassHookTest.html</anchorfile>
      <anchor>ad2ff3f46b899937eb4a9160dfe197f5b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RequirementsClassDocBlockTest</name>
    <filename>classRequirementsClassDocBlockTest.html</filename>
    <member kind="function">
      <type></type>
      <name>testMethod</name>
      <anchorfile>classRequirementsClassDocBlockTest.html</anchorfile>
      <anchor>acea72534b60a1d474397455b12a8d0eb</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RequirementsTest</name>
    <filename>classRequirementsTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testOne</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>ac487b0053075c84ed22e560ff1a70163</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTwo</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>a2ce8e79f48dde636bfa37a276acde728</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testThree</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>a05ef630a97e177056e1faf877a8d27b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFour</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>a201780349a966a1c6024181f7f5ff03f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFive</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>a255645d461263d2d718d4762fdbc46e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSix</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>a8cc26cac9ec4dd6d5fee2bde93bed817</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSeven</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>a0d207d47010d21f0e7840b29b2cf240e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testEight</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>ab17dfec3d35814b7c1750140f1e27239</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testNine</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>a4d3f87e8e8fb7e08485cdc0b22da0847</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testRequiresFunctionWithDigit</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>a8747e82dcf3bde2c4ca4430166f6f311</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTen</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>a26b49b5021d523b5ac5d46d55f7b824b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testEleven</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>a3ac44137091672c39531566f5facf012</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAllPossibleRequirements</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>afd7b4291cf51290a7c48cb6f5370c85a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExistingFunction</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>a351d850e0a4b88e981c55a9931835fab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExistingMethod</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>a950dbbcc2bf622dd38339a803b449c99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExistingExtension</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>a22f962f31e8db8f089a5c25f5b465c46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExistingOs</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>af93059e5cd54afae23c281bc32f9854a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAlwaysSkip</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>abc64898c2a513d837cabd1cf21ab4d94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAlwaysSkip2</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>a07b727d66e6e8403dfe8b3fe0d036958</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAlwaysSkip3</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>a613821d71542d4d3bddc3aa32efd4353</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAlwaysSkip4</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>a6fd03eb0bed48bae1fc57e2f6129503c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSpace</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>ae36d1bdd93facb96296ef825c5b90892</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSpecificExtensionVersion</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>a259e613397bc281c3fe02cb3ced708b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testPHPVersionOperatorLessThan</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>a651ae9fb54f70bd06376cda1c00f3845</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testPHPVersionOperatorLessThanEquals</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>a2644940f4d658ec54d8a3886c9b578d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testPHPVersionOperatorGreaterThan</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>a5a2284c6dfbc1397c8cb508f68dd3d9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testPHPVersionOperatorGreaterThanEquals</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>ae4dda4a79fd77cc43f28f9b7344d5dac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testPHPVersionOperatorEquals</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>ae4493d0a9086aa6ae1fbd3ca410a1a81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testPHPVersionOperatorDoubleEquals</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>ad9cc6a2952963192384453044f0e4544</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testPHPVersionOperatorBangEquals</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>aa78da6f64d8e403ad77a126daa0b58cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testPHPVersionOperatorNotEquals</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>aa782e15d2ae864b97bcef816793a4a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testPHPVersionOperatorNoSpace</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>ab126585f8733620a5b3455f6f0197306</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testPHPUnitVersionOperatorLessThan</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>afd4553c0cd6bb7910e6ed41662b814b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testPHPUnitVersionOperatorLessThanEquals</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>ac699a1e230e7cb6129be20084a9468a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testPHPUnitVersionOperatorGreaterThan</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>ad876e17df98e587db42c1e0a38cf4f43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testPHPUnitVersionOperatorGreaterThanEquals</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>ade9737fa495f198eae0de82ca46929cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testPHPUnitVersionOperatorEquals</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>a118295e6abc41f8858e25e7ed84c08d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testPHPUnitVersionOperatorDoubleEquals</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>aa4076e42273e9b9945d1ff94dc65d5cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testPHPUnitVersionOperatorBangEquals</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>af20978fc5aa27a0a10877fa8d14225e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testPHPUnitVersionOperatorNotEquals</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>a42158890b685a04cc1e8ccb3a86b7bf0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testPHPUnitVersionOperatorNoSpace</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>a0d037086221e88ee9cdfcf6d16dd26ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExtensionVersionOperatorLessThan</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>ab8d2d8495db9be6a30d9bb6e131225e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExtensionVersionOperatorLessThanEquals</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>afd18554b8cd85e8ebbac03ae3efd43a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExtensionVersionOperatorGreaterThan</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>abf876cfae683e8f3bfae6faa53924b3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExtensionVersionOperatorGreaterThanEquals</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>ae5a01801c0f9b0e181798d7ea2d343e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExtensionVersionOperatorEquals</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>a869fa58909bdb9949fea1f2b8c2067fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExtensionVersionOperatorDoubleEquals</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>af4d0bacfbd5ba9d6ba0b786cb408efea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExtensionVersionOperatorBangEquals</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>ae876951c94720c57caae94a0a17792e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExtensionVersionOperatorNotEquals</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>af38a31ee062a0833851b8667c63203c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExtensionVersionOperatorNoSpace</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>a4f6808f41c525a103139f3565151a356</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testVersionConstraintTildeMajor</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>ac8d2036f8a2c16c24acd9a27c2f45e09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testVersionConstraintCaretMajor</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>a1c43d3c2321d4c1720f0f8b7fdcecbe5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testVersionConstraintTildeMinor</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>a99ba2ef36ef04048518a2b31e7eaa6a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testVersionConstraintCaretMinor</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>aa1c886c3745e43a5c878789b614f2bf5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testVersionConstraintCaretOr</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>a4b7b72fe5d790dff58cd362cdae32fb3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testVersionConstraintTildeOr</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>a4cdb5e65c0b480d5107902487edcf384</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testVersionConstraintTildeOrCaret</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>adf616c60ee51a4aff75ce14ab6511f93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testVersionConstraintCaretOrTilde</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>a0429725fd2e4ff92bb62b4bba4ff6fe4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testVersionConstraintRegexpIgnoresWhitespace</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>ae3ca917bf861ff19c45645f0785b6605</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testVersionConstraintInvalidPhpConstraint</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>a8b90c867b6b69cadc1f21a7e59c613d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testVersionConstraintInvalidPhpUnitConstraint</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>a77d7f48bda981738b4a3d1b5474803f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSettingDisplayErrorsOn</name>
      <anchorfile>classRequirementsTest.html</anchorfile>
      <anchor>a03838ab283a96e0494d2aa5a6b23a160</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::RequiresElement</name>
    <filename>classPharIo_1_1Manifest_1_1RequiresElement.html</filename>
    <base>PharIo::Manifest::ManifestElement</base>
    <member kind="function">
      <type></type>
      <name>getPHPElement</name>
      <anchorfile>classPharIo_1_1Manifest_1_1RequiresElement.html</anchorfile>
      <anchor>a5729918daaf6e35aee8e289bf2e24ed5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::RequiresElementTest</name>
    <filename>classPharIo_1_1Manifest_1_1RequiresElementTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testThrowsExceptionWhenGetPhpElementIsCalledButElementIsMissing</name>
      <anchorfile>classPharIo_1_1Manifest_1_1RequiresElementTest.html</anchorfile>
      <anchor>a5ee326697431d5cee144b5bbef6d49d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasExtElementsReturnsTrueWhenExtensionsAreRequired</name>
      <anchorfile>classPharIo_1_1Manifest_1_1RequiresElementTest.html</anchorfile>
      <anchor>a497cf751bb1fa56bc700ba8f247cacb7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classPharIo_1_1Manifest_1_1RequiresElementTest.html</anchorfile>
      <anchor>a3645beb3430b3eec326c113ade29a492</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::Types::Resource_</name>
    <filename>classphpDocumentor_1_1Reflection_1_1Types_1_1Resource__.html</filename>
    <base>phpDocumentor::Reflection::Type</base>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1Resource__.html</anchorfile>
      <anchor>a057b2cc5cf93bcaec85b1bd93fcac8f7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Comparator::ResourceComparator</name>
    <filename>classSebastianBergmann_1_1Comparator_1_1ResourceComparator.html</filename>
    <base>SebastianBergmann::Comparator::Comparator</base>
    <member kind="function">
      <type></type>
      <name>accepts</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ResourceComparator.html</anchorfile>
      <anchor>a4f7b5f16ffd2c1f75cdc2d754659976f</anchor>
      <arglist>($expected, $actual)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>assertEquals</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ResourceComparator.html</anchorfile>
      <anchor>a5349209a07a6ef8d9b449f7ef619ed80</anchor>
      <arglist>($expected, $actual, $delta=0.0, $canonicalize=false, $ignoreCase=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Comparator::ResourceComparatorTest</name>
    <filename>classSebastianBergmann_1_1Comparator_1_1ResourceComparatorTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>acceptsSucceedsProvider</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ResourceComparatorTest.html</anchorfile>
      <anchor>a677f6b411d8d2eaf6f902400bf0e6861</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>acceptsFailsProvider</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ResourceComparatorTest.html</anchorfile>
      <anchor>a27399c0f86a408a76b8750153dd8957f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>assertEqualsSucceedsProvider</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ResourceComparatorTest.html</anchorfile>
      <anchor>aa3efbc9bd762aca0c60d17a00044f624</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>assertEqualsFailsProvider</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ResourceComparatorTest.html</anchorfile>
      <anchor>a587c5c8777356ff40e0023950997203f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAcceptsSucceeds</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ResourceComparatorTest.html</anchorfile>
      <anchor>ab9ecae4ff3b517f4586b05d883f287ce</anchor>
      <arglist>($expected, $actual)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAcceptsFails</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ResourceComparatorTest.html</anchorfile>
      <anchor>a9099b23e49cb2ed7eaee0dbd96e5c562</anchor>
      <arglist>($expected, $actual)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertEqualsSucceeds</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ResourceComparatorTest.html</anchorfile>
      <anchor>ae25a446652d90637b112f7019b0599d3</anchor>
      <arglist>($expected, $actual)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertEqualsFails</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ResourceComparatorTest.html</anchorfile>
      <anchor>aed61fd1e4ba353f0a86e0f69ffe16a20</anchor>
      <arglist>($expected, $actual)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ResourceComparatorTest.html</anchorfile>
      <anchor>a2127b763a482c64527a512d2f6c7a33d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::ResourceOperations::ResourceOperations</name>
    <filename>classSebastianBergmann_1_1ResourceOperations_1_1ResourceOperations.html</filename>
    <member kind="function" static="yes">
      <type>static</type>
      <name>getFunctions</name>
      <anchorfile>classSebastianBergmann_1_1ResourceOperations_1_1ResourceOperations.html</anchorfile>
      <anchor>adab9ee00dbc5e640752bac0611dc96ff</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::ResourceOperations::ResourceOperationsTest</name>
    <filename>classSebastianBergmann_1_1ResourceOperations_1_1ResourceOperationsTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testGetFunctions</name>
      <anchorfile>classSebastianBergmann_1_1ResourceOperations_1_1ResourceOperationsTest.html</anchorfile>
      <anchor>a0d9e7ff9c7550ee5620ac1deccb0f6fa</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::GlobalState::Restorer</name>
    <filename>classSebastianBergmann_1_1GlobalState_1_1Restorer.html</filename>
    <member kind="function">
      <type></type>
      <name>restoreFunctions</name>
      <anchorfile>classSebastianBergmann_1_1GlobalState_1_1Restorer.html</anchorfile>
      <anchor>a7d50627c7076955a047b915190d3bfab</anchor>
      <arglist>(Snapshot $snapshot)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>restoreGlobalVariables</name>
      <anchorfile>classSebastianBergmann_1_1GlobalState_1_1Restorer.html</anchorfile>
      <anchor>a957308e4b52b5a88ac0965a5dc1f2e27</anchor>
      <arglist>(Snapshot $snapshot)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>restoreStaticAttributes</name>
      <anchorfile>classSebastianBergmann_1_1GlobalState_1_1Restorer.html</anchorfile>
      <anchor>ad5a50586da1d50fda0f3b7095e0adc62</anchor>
      <arglist>(Snapshot $snapshot)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::GlobalState::RestorerTest</name>
    <filename>classSebastianBergmann_1_1GlobalState_1_1RestorerTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testRestorerGlobalVariable</name>
      <anchorfile>classSebastianBergmann_1_1GlobalState_1_1RestorerTest.html</anchorfile>
      <anchor>acf16a876879c4d809a716cccccfa4a13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIntegrationRestorerGlobalVariables</name>
      <anchorfile>classSebastianBergmann_1_1GlobalState_1_1RestorerTest.html</anchorfile>
      <anchor>adf81fcf50f8a4aaf4eed4a9594186138</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIntegrationRestorerGlobalVariables2</name>
      <anchorfile>classSebastianBergmann_1_1GlobalState_1_1RestorerTest.html</anchorfile>
      <anchor>a20c16f1494d948630950eab33cf5b13b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>setUpBeforeClass</name>
      <anchorfile>classSebastianBergmann_1_1GlobalState_1_1RestorerTest.html</anchorfile>
      <anchor>a724f15e6e65cb55de96fd50c52819a13</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Runner::ResultCacheExtension</name>
    <filename>classPHPUnit_1_1Runner_1_1ResultCacheExtension.html</filename>
    <base>PHPUnit::Runner::AfterIncompleteTestHook</base>
    <base>PHPUnit::Runner::AfterLastTestHook</base>
    <base>PHPUnit::Runner::AfterRiskyTestHook</base>
    <base>PHPUnit::Runner::AfterSkippedTestHook</base>
    <base>PHPUnit::Runner::AfterSuccessfulTestHook</base>
    <base>PHPUnit::Runner::AfterTestErrorHook</base>
    <base>PHPUnit::Runner::AfterTestFailureHook</base>
    <base>PHPUnit::Runner::AfterTestWarningHook</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1ResultCacheExtension.html</anchorfile>
      <anchor>abd5bf8320e32f95a9a89a47f105f8910</anchor>
      <arglist>(TestResultCache $cache)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>flush</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1ResultCacheExtension.html</anchorfile>
      <anchor>aacd8803c25b07e52ff73ca8960e816e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>executeAfterSuccessfulTest</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1ResultCacheExtension.html</anchorfile>
      <anchor>a9502bfa52737631e573376df7c516c06</anchor>
      <arglist>(string $test, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>executeAfterIncompleteTest</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1ResultCacheExtension.html</anchorfile>
      <anchor>a9c065b059516fd87b0c3f8c0976d1fee</anchor>
      <arglist>(string $test, string $message, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>executeAfterRiskyTest</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1ResultCacheExtension.html</anchorfile>
      <anchor>a74627775a0a885d3828f3daf68e13106</anchor>
      <arglist>(string $test, string $message, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>executeAfterSkippedTest</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1ResultCacheExtension.html</anchorfile>
      <anchor>ac2a3f082b51f1e3db6ae32bc5dafa345</anchor>
      <arglist>(string $test, string $message, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>executeAfterTestError</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1ResultCacheExtension.html</anchorfile>
      <anchor>a341509a2da0832d9ee4de76fb01921c4</anchor>
      <arglist>(string $test, string $message, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>executeAfterTestFailure</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1ResultCacheExtension.html</anchorfile>
      <anchor>a1fe0bd7b7264eed751b38a7df8178bdd</anchor>
      <arglist>(string $test, string $message, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>executeAfterTestWarning</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1ResultCacheExtension.html</anchorfile>
      <anchor>a849d41ea57b67dfede89dd95fb7690a0</anchor>
      <arglist>(string $test, string $message, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>executeAfterLastTest</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1ResultCacheExtension.html</anchorfile>
      <anchor>acc8cf491d524f4326aebf57c59943976</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Runner::ResultCacheExtensionTest</name>
    <filename>classPHPUnit_1_1Runner_1_1ResultCacheExtensionTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testStripsDataproviderParametersFromTestName</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1ResultCacheExtensionTest.html</anchorfile>
      <anchor>af5a5a68937114c7b744e97fb6f6f7b9a</anchor>
      <arglist>(string $testName, string $expectedTestName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>longTestNamesDataprovider</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1ResultCacheExtensionTest.html</anchorfile>
      <anchor>a79b2bc92e8bd8897233d4ad54e6b8c4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testError</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1ResultCacheExtensionTest.html</anchorfile>
      <anchor>a3f54e84731a477f0aec681cbd99e2dfa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFailure</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1ResultCacheExtensionTest.html</anchorfile>
      <anchor>a69b512ecab0e675e3dd4c5ffaa3a2e2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSkipped</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1ResultCacheExtensionTest.html</anchorfile>
      <anchor>a7d0b57c7157817c146b78a7c5045cd7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIncomplete</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1ResultCacheExtensionTest.html</anchorfile>
      <anchor>ab491f1be6d710118f0214543b5e5bdde</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testPassedTestsOnlyCacheTime</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1ResultCacheExtensionTest.html</anchorfile>
      <anchor>a63a2655c2b1181df5f675367aab0ced9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testWarning</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1ResultCacheExtensionTest.html</anchorfile>
      <anchor>a07dcaf3c03b34111d938be58aa9d2186</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testRisky</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1ResultCacheExtensionTest.html</anchorfile>
      <anchor>a0a35d44a3d6043044ded852e0672dcd7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testEmptySuite</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1ResultCacheExtensionTest.html</anchorfile>
      <anchor>ac9f3189dea3d53ff9fa011c187427a77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1ResultCacheExtensionTest.html</anchorfile>
      <anchor>a0592a58bdb1f133fac5e6310f18caa40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$cache</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1ResultCacheExtensionTest.html</anchorfile>
      <anchor>a022c1ec957e6c52d7c53492e5150b448</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$extension</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1ResultCacheExtensionTest.html</anchorfile>
      <anchor>a246fd0bb278c683ff7bfa064fb8f2334</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$result</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1ResultCacheExtensionTest.html</anchorfile>
      <anchor>aca41ba0846d083a29d0999d868cdea5c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Util::TestDox::ResultPrinter</name>
    <filename>classPHPUnit_1_1Util_1_1TestDox_1_1ResultPrinter.html</filename>
    <base>PHPUnit::Util::Printer</base>
    <base>PHPUnit::Framework::TestListener</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1ResultPrinter.html</anchorfile>
      <anchor>a905fec39375b2cea0f7d86fe5fd86c22</anchor>
      <arglist>($out=null, array $groups=[], array $excludeGroups=[])</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>flush</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1ResultPrinter.html</anchorfile>
      <anchor>af1d18d3ff0fd6874ce1c56eb04590206</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addError</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1ResultPrinter.html</anchorfile>
      <anchor>a10ac998f11c5b3ba70fbe34e9f901802</anchor>
      <arglist>(Test $test, \Throwable $t, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addWarning</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1ResultPrinter.html</anchorfile>
      <anchor>a75cddaebcfaf45af505d43a74ff4d03c</anchor>
      <arglist>(Test $test, Warning $e, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addFailure</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1ResultPrinter.html</anchorfile>
      <anchor>ae8d82dedb1f8700a03c30ba207de867b</anchor>
      <arglist>(Test $test, AssertionFailedError $e, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addIncompleteTest</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1ResultPrinter.html</anchorfile>
      <anchor>aee8c52a1a387618913edf9465674b997</anchor>
      <arglist>(Test $test, \Throwable $t, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addRiskyTest</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1ResultPrinter.html</anchorfile>
      <anchor>a33675bd560cd44bd6ad1af90959bfe60</anchor>
      <arglist>(Test $test, \Throwable $t, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addSkippedTest</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1ResultPrinter.html</anchorfile>
      <anchor>a5e5b04023dc02513077333fb0b6e4d75</anchor>
      <arglist>(Test $test, \Throwable $t, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>startTestSuite</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1ResultPrinter.html</anchorfile>
      <anchor>ab87d507079b515a976e460b0d59bf986</anchor>
      <arglist>(TestSuite $suite)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>endTestSuite</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1ResultPrinter.html</anchorfile>
      <anchor>a51f166a554ae6dc583db4e670aa2ebb8</anchor>
      <arglist>(TestSuite $suite)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>startTest</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1ResultPrinter.html</anchorfile>
      <anchor>ab184f75b42b7b19083bf560adb13f7cf</anchor>
      <arglist>(Test $test)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>endTest</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1ResultPrinter.html</anchorfile>
      <anchor>ab4eef4021d4e90c7b610ba48988192f7</anchor>
      <arglist>(Test $test, float $time)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>doEndClass</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1ResultPrinter.html</anchorfile>
      <anchor>a4055ee7aa6e724726adb96a5cf1a5a72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>startRun</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1ResultPrinter.html</anchorfile>
      <anchor>a44cd24278ff298c16071d0a8e2e63fd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>startClass</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1ResultPrinter.html</anchorfile>
      <anchor>ae98ab1e50cd941a7ae311b887c623648</anchor>
      <arglist>(string $name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>onTest</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1ResultPrinter.html</anchorfile>
      <anchor>a20c4a31f1f9f95f2a31a2cc755e64b22</anchor>
      <arglist>($name, bool $success=true)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>endClass</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1ResultPrinter.html</anchorfile>
      <anchor>aff4ad13768846f2dc0ccc75225a6af70</anchor>
      <arglist>(string $name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>endRun</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1ResultPrinter.html</anchorfile>
      <anchor>aada74805ed6a2de4d2bd1b89ccfc7eaa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$prettifier</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1ResultPrinter.html</anchorfile>
      <anchor>a9c58e522affb46382d7ca8d6880001fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$testClass</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1ResultPrinter.html</anchorfile>
      <anchor>a938bfc0e3826f65754ce11869dcda624</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$testStatus</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1ResultPrinter.html</anchorfile>
      <anchor>ab5a34bc91c2a4a0e1fc86927a6071b27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$tests</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1ResultPrinter.html</anchorfile>
      <anchor>a808724d23c68239cb8df058184b9a6b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$successful</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1ResultPrinter.html</anchorfile>
      <anchor>a01bb20f727471f529bb596c21a17692f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$warned</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1ResultPrinter.html</anchorfile>
      <anchor>a47260c93e7675aa25ac6b8539ba8be47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$failed</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1ResultPrinter.html</anchorfile>
      <anchor>aad1c3f31bcacc32391f160410501063d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$risky</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1ResultPrinter.html</anchorfile>
      <anchor>ad3ca14f1ceeb93cc535ef8f49ef40941</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$skipped</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1ResultPrinter.html</anchorfile>
      <anchor>a3d64ac28c45eabae1954ef182a7206bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$incomplete</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1ResultPrinter.html</anchorfile>
      <anchor>afcd7070c1b2d1c6580b84958d002f6a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$currentTestClassPrettified</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1ResultPrinter.html</anchorfile>
      <anchor>a3fa5245f9a72c93c11aa99c3c8f82188</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$currentTestMethodPrettified</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1ResultPrinter.html</anchorfile>
      <anchor>aaf92bf7ef9a8b555546626b4cc20d798</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::TextUI::ResultPrinter</name>
    <filename>classPHPUnit_1_1TextUI_1_1ResultPrinter.html</filename>
    <base>PHPUnit::Util::Printer</base>
    <base>PHPUnit::Framework::TestListener</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1ResultPrinter.html</anchorfile>
      <anchor>a06d1a121c35410c8d38cdb4b707a44bc</anchor>
      <arglist>($out=null, bool $verbose=false, string $colors=self::COLOR_DEFAULT, bool $debug=false, $numberOfColumns=80, bool $reverse=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>printResult</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1ResultPrinter.html</anchorfile>
      <anchor>a863aa997df9ca811f7d0c7c4859d90e8</anchor>
      <arglist>(TestResult $result)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addError</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1ResultPrinter.html</anchorfile>
      <anchor>af75d98f293801363cff275400eda8f44</anchor>
      <arglist>(Test $test, \Throwable $t, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addFailure</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1ResultPrinter.html</anchorfile>
      <anchor>a7b438b79f4f5112cfeec8c376b181ad9</anchor>
      <arglist>(Test $test, AssertionFailedError $e, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addWarning</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1ResultPrinter.html</anchorfile>
      <anchor>ae701ed709480434735d2a6fb00dcfe9c</anchor>
      <arglist>(Test $test, Warning $e, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addIncompleteTest</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1ResultPrinter.html</anchorfile>
      <anchor>a3920073937cd7beaba27c914c1ddb56b</anchor>
      <arglist>(Test $test, \Throwable $t, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addRiskyTest</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1ResultPrinter.html</anchorfile>
      <anchor>aacda4aa1c5b084a22b3d20f7269830ff</anchor>
      <arglist>(Test $test, \Throwable $t, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addSkippedTest</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1ResultPrinter.html</anchorfile>
      <anchor>a5becbcd85d1c913c3ab13ab4d0d51a94</anchor>
      <arglist>(Test $test, \Throwable $t, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>startTestSuite</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1ResultPrinter.html</anchorfile>
      <anchor>af5b6e4717ff196aeee0a77b4bc025dd9</anchor>
      <arglist>(TestSuite $suite)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>endTestSuite</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1ResultPrinter.html</anchorfile>
      <anchor>a52e2ee978bc1b6eaf781aecd54e1a491</anchor>
      <arglist>(TestSuite $suite)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>startTest</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1ResultPrinter.html</anchorfile>
      <anchor>ae8a37b1befc4273b6d4d3d45daf36356</anchor>
      <arglist>(Test $test)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>endTest</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1ResultPrinter.html</anchorfile>
      <anchor>a288d6dd1054aada4d214f182fbc67e3a</anchor>
      <arglist>(Test $test, float $time)</arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>EVENT_TEST_START</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1ResultPrinter.html</anchorfile>
      <anchor>a12c8572230f9af4d197f89a89d35ec52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>EVENT_TEST_END</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1ResultPrinter.html</anchorfile>
      <anchor>acf321c207201e5e9341059745ec1c8dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>EVENT_TESTSUITE_START</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1ResultPrinter.html</anchorfile>
      <anchor>a0e53115611ff0e007f410b862f8835c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>EVENT_TESTSUITE_END</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1ResultPrinter.html</anchorfile>
      <anchor>a670a60a49d53b862764fb56306793f12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>COLOR_NEVER</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1ResultPrinter.html</anchorfile>
      <anchor>a278b1dd5e3497ea9016ae08dc75a5c2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>COLOR_AUTO</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1ResultPrinter.html</anchorfile>
      <anchor>a05c886cdc1333e2f6153fcf2b628f31c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>COLOR_ALWAYS</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1ResultPrinter.html</anchorfile>
      <anchor>a3994c53c34441e0c54b5e366f79efa7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>COLOR_DEFAULT</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1ResultPrinter.html</anchorfile>
      <anchor>a93c8608547f1a7eb8af2353a7e7757e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>printDefects</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1ResultPrinter.html</anchorfile>
      <anchor>a464013ff4dec86dc61a6f31f456de7bc</anchor>
      <arglist>(array $defects, string $type)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>printDefect</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1ResultPrinter.html</anchorfile>
      <anchor>a85fe4fb35f32e63f08a08836d6a3411e</anchor>
      <arglist>(TestFailure $defect, int $count)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>printDefectHeader</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1ResultPrinter.html</anchorfile>
      <anchor>aa17db891b14437075b1729724cae6688</anchor>
      <arglist>(TestFailure $defect, int $count)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>printDefectTrace</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1ResultPrinter.html</anchorfile>
      <anchor>a22d215993c6dd06024b09a44c1f29d5e</anchor>
      <arglist>(TestFailure $defect)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>printErrors</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1ResultPrinter.html</anchorfile>
      <anchor>a2d5649235bcc8683dec8e08c0486b952</anchor>
      <arglist>(TestResult $result)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>printFailures</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1ResultPrinter.html</anchorfile>
      <anchor>aea5c0c5e15ae51032e03a2e52361ebb2</anchor>
      <arglist>(TestResult $result)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>printWarnings</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1ResultPrinter.html</anchorfile>
      <anchor>a33ca4c48d09c87fb97fed879921ef899</anchor>
      <arglist>(TestResult $result)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>printIncompletes</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1ResultPrinter.html</anchorfile>
      <anchor>a4c930a63e3701abe5f2ebcaafad97552</anchor>
      <arglist>(TestResult $result)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>printRisky</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1ResultPrinter.html</anchorfile>
      <anchor>a623469ff7a9165759028be0fca678963</anchor>
      <arglist>(TestResult $result)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>printSkipped</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1ResultPrinter.html</anchorfile>
      <anchor>a434a7a54b52da113b17328292c0f213e</anchor>
      <arglist>(TestResult $result)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>printHeader</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1ResultPrinter.html</anchorfile>
      <anchor>a7a3c066885475f9557df8b723794bb9c</anchor>
      <arglist>(TestResult $result)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>printFooter</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1ResultPrinter.html</anchorfile>
      <anchor>aa0a9e22e1bf977c7ed1d556a3f68d787</anchor>
      <arglist>(TestResult $result)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>writeProgress</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1ResultPrinter.html</anchorfile>
      <anchor>a227398b84ad8897c8b3a2e55007e9390</anchor>
      <arglist>(string $progress)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>writeNewLine</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1ResultPrinter.html</anchorfile>
      <anchor>aed63180f9bae01ad1b2616d5f9958ed4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>colorizeTextBox</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1ResultPrinter.html</anchorfile>
      <anchor>a0ad9cd5531125eb6827c9bcef12c142d</anchor>
      <arglist>(string $color, string $buffer)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>writeWithColor</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1ResultPrinter.html</anchorfile>
      <anchor>af3e5052bdf872b793e5edb5ab82cd8e4</anchor>
      <arglist>(string $color, string $buffer, bool $lf=true)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>writeProgressWithColor</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1ResultPrinter.html</anchorfile>
      <anchor>a2c4a5f8d3d139047b1f025750531211a</anchor>
      <arglist>(string $color, string $buffer)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$column</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1ResultPrinter.html</anchorfile>
      <anchor>a4a6cd228fbc066cfaf20e5de5085f553</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$maxColumn</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1ResultPrinter.html</anchorfile>
      <anchor>a500769e709ff529c30cea89156332f0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$lastTestFailed</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1ResultPrinter.html</anchorfile>
      <anchor>a932884becc757dbfc2b206eac7744c1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$numAssertions</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1ResultPrinter.html</anchorfile>
      <anchor>a279f98708bdbae34322fa49142c9fec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$numTests</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1ResultPrinter.html</anchorfile>
      <anchor>a1d074a3b74c52c84fd601dc9386902be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$numTestsRun</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1ResultPrinter.html</anchorfile>
      <anchor>a0dcc4787b9831ed171fe07d82b1682d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$numTestsWidth</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1ResultPrinter.html</anchorfile>
      <anchor>a4d43ebf86b232db093283fe074e935f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$colors</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1ResultPrinter.html</anchorfile>
      <anchor>aec0e4c46addf665e3e1cb8249d96adef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$debug</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1ResultPrinter.html</anchorfile>
      <anchor>a5bb2d71153ef55348159026f42bf6cc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$verbose</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1ResultPrinter.html</anchorfile>
      <anchor>a047d46a3f498f38ce5286351be0743b4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>Contracts::RetrieverInterface</name>
    <filename>interfaceContracts_1_1RetrieverInterface.html</filename>
    <member kind="function">
      <type></type>
      <name>retrieve</name>
      <anchorfile>interfaceContracts_1_1RetrieverInterface.html</anchorfile>
      <anchor>a104f5e4510df7d33cd4ccad42d722cb7</anchor>
      <arglist>(string $id)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocBlock::Tags::Return_</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Return__.html</filename>
    <base>phpDocumentor::Reflection::DocBlock::Tags::TagWithType</base>
    <base>phpDocumentor::Reflection::DocBlock::Tags::Factory::StaticMethod</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Return__.html</anchorfile>
      <anchor>a9d5e2615379e36613614a5eec35a853f</anchor>
      <arglist>(Type $type, ?Description $description=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Return__.html</anchorfile>
      <anchor>ae9a7e22ff9a1ed89ac7b21d46843af4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>create</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Return__.html</anchorfile>
      <anchor>a4f70cdb6772cf6c31a06db9c67a69b65</anchor>
      <arglist>(string $body, ?TypeResolver $typeResolver=null, ?DescriptionFactory $descriptionFactory=null, ?TypeContext $context=null)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::MockObject::Stub::ReturnArgument</name>
    <filename>classPHPUnit_1_1Framework_1_1MockObject_1_1Stub_1_1ReturnArgument.html</filename>
    <base>PHPUnit::Framework::MockObject::Stub::Stub</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Stub_1_1ReturnArgument.html</anchorfile>
      <anchor>aba3d171d6edea3b2ab67f40e62b6a9c5</anchor>
      <arglist>($argumentIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>invoke</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Stub_1_1ReturnArgument.html</anchorfile>
      <anchor>a49ce2ab0a6bc962be7f5e39eafef2eca</anchor>
      <arglist>(Invocation $invocation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Stub_1_1ReturnArgument.html</anchorfile>
      <anchor>aa0d5dbee037b1767f4cb47e01caea7b8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Promise::ReturnArgumentPromise</name>
    <filename>classProphecy_1_1Promise_1_1ReturnArgumentPromise.html</filename>
    <base>Prophecy::Promise::PromiseInterface</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classProphecy_1_1Promise_1_1ReturnArgumentPromise.html</anchorfile>
      <anchor>a92ab25571b49aa2e1166b84d2b8a6078</anchor>
      <arglist>($index=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>execute</name>
      <anchorfile>classProphecy_1_1Promise_1_1ReturnArgumentPromise.html</anchorfile>
      <anchor>a61513d23fd1291f8ebd3c3e0f9e3a767</anchor>
      <arglist>(array $args, ObjectProphecy $object, MethodProphecy $method)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Exception::Doubler::ReturnByReferenceException</name>
    <filename>classProphecy_1_1Exception_1_1Doubler_1_1ReturnByReferenceException.html</filename>
    <base>Prophecy::Exception::Doubler::DoubleException</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classProphecy_1_1Exception_1_1Doubler_1_1ReturnByReferenceException.html</anchorfile>
      <anchor>a529c70295d681ca07f1c4b114480f0c6</anchor>
      <arglist>($message, $classname, $methodName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getClassname</name>
      <anchorfile>classProphecy_1_1Exception_1_1Doubler_1_1ReturnByReferenceException.html</anchorfile>
      <anchor>afebdcad5c341188f4555eb25d0e0ff13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getMethodName</name>
      <anchorfile>classProphecy_1_1Exception_1_1Doubler_1_1ReturnByReferenceException.html</anchorfile>
      <anchor>a5ac6dbfaa690cb2601642c32214c8ac1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::MockObject::Stub::ReturnCallback</name>
    <filename>classPHPUnit_1_1Framework_1_1MockObject_1_1Stub_1_1ReturnCallback.html</filename>
    <base>PHPUnit::Framework::MockObject::Stub::Stub</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Stub_1_1ReturnCallback.html</anchorfile>
      <anchor>a5c76c03df18ac28ebdaaf3938c83b38e</anchor>
      <arglist>($callback)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>invoke</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Stub_1_1ReturnCallback.html</anchorfile>
      <anchor>ac3df45d0baa50ccee796eb73f884ee5d</anchor>
      <arglist>(Invocation $invocation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Stub_1_1ReturnCallback.html</anchorfile>
      <anchor>a1b6762f96ee984fcaf18fbfd8c96adcd</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Promise::ReturnPromise</name>
    <filename>classProphecy_1_1Promise_1_1ReturnPromise.html</filename>
    <base>Prophecy::Promise::PromiseInterface</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classProphecy_1_1Promise_1_1ReturnPromise.html</anchorfile>
      <anchor>af2b59bfb14538323543296f6162185d4</anchor>
      <arglist>(array $returnValues)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>execute</name>
      <anchorfile>classProphecy_1_1Promise_1_1ReturnPromise.html</anchorfile>
      <anchor>aa291b67bd702423a438f44ab1b80acab</anchor>
      <arglist>(array $args, ObjectProphecy $object, MethodProphecy $method)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::MockObject::Stub::ReturnReference</name>
    <filename>classPHPUnit_1_1Framework_1_1MockObject_1_1Stub_1_1ReturnReference.html</filename>
    <base>PHPUnit::Framework::MockObject::Stub::Stub</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Stub_1_1ReturnReference.html</anchorfile>
      <anchor>abaf48099775b6a45774c9420808bde71</anchor>
      <arglist>(&amp;$reference)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>invoke</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Stub_1_1ReturnReference.html</anchorfile>
      <anchor>a4bfb292bb25a06a0843d8d422314211a</anchor>
      <arglist>(Invocation $invocation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Stub_1_1ReturnReference.html</anchorfile>
      <anchor>a77378caddf1504bb20467f6a5b769941</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::MockObject::Stub::ReturnSelf</name>
    <filename>classPHPUnit_1_1Framework_1_1MockObject_1_1Stub_1_1ReturnSelf.html</filename>
    <base>PHPUnit::Framework::MockObject::Stub::Stub</base>
    <member kind="function">
      <type></type>
      <name>invoke</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Stub_1_1ReturnSelf.html</anchorfile>
      <anchor>aa7ad7984c56a1f263e05c8a327b5f015</anchor>
      <arglist>(Invocation $invocation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Stub_1_1ReturnSelf.html</anchorfile>
      <anchor>a0879922725c8854175d807be530370d4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::MockObject::Stub::ReturnStub</name>
    <filename>classPHPUnit_1_1Framework_1_1MockObject_1_1Stub_1_1ReturnStub.html</filename>
    <base>PHPUnit::Framework::MockObject::Stub::Stub</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Stub_1_1ReturnStub.html</anchorfile>
      <anchor>a25d9748c9ce00842430db33a5e48d299</anchor>
      <arglist>($value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>invoke</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Stub_1_1ReturnStub.html</anchorfile>
      <anchor>a7a19db7fb238fc741f033a583d39dcca</anchor>
      <arglist>(Invocation $invocation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Stub_1_1ReturnStub.html</anchorfile>
      <anchor>a5d8237936bc871b7ceee9edaedd3cf98</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocBlock::Tags::ReturnTest</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1ReturnTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>tearDown</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1ReturnTest.html</anchorfile>
      <anchor>a724c37d4d3e673f096639bdb39958ce9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIfCorrectTagNameIsReturned</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1ReturnTest.html</anchorfile>
      <anchor>ae4156ca148419a92a7df65e50101d081</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIfTagCanBeRenderedUsingDefaultFormatter</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1ReturnTest.html</anchorfile>
      <anchor>a06b51029f8479cebd79d706b00de3d8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIfTagCanBeRenderedUsingSpecificFormatter</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1ReturnTest.html</anchorfile>
      <anchor>ae520aef46783be968df65da502bf3484</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasType</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1ReturnTest.html</anchorfile>
      <anchor>aea6f75556a9be2b2440129ad820d4767</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasDescription</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1ReturnTest.html</anchorfile>
      <anchor>a0434c32ec0a8ac9bc0381b5b3fe57b6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStringRepresentationIsReturned</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1ReturnTest.html</anchorfile>
      <anchor>ad33864ac3e8d23d09e7e520bc311f829</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStringRepresentationIsReturnedWithoutDescription</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1ReturnTest.html</anchorfile>
      <anchor>a10084a678ac9f3f76432ebddf3d14261</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethod</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1ReturnTest.html</anchorfile>
      <anchor>acf74eab1129f0aeeaa73d86ff2c8e5b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodWithGenericWithSpace</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1ReturnTest.html</anchorfile>
      <anchor>a80864722955217ee29f9d11cef84ac86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodWithGenericWithSpaceAndAddedEmojisToVerifyMultiByteBehaviour</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1ReturnTest.html</anchorfile>
      <anchor>a0dacf819e7f7e827a64ebd9e60220f25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodWithEmojisToVerifyMultiByteBehaviour</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1ReturnTest.html</anchorfile>
      <anchor>a6f91923581fccbd7011268ae7553dc7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodFailsIfBodyIsNotEmpty</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1ReturnTest.html</anchorfile>
      <anchor>a83dc51ecade705ce0aaf671b60c11eaa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodFailsIfResolverIsNull</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1ReturnTest.html</anchorfile>
      <anchor>a70eadddf0ba7833d3ee5c41e0d83816d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodFailsIfDescriptionFactoryIsNull</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1ReturnTest.html</anchorfile>
      <anchor>adb26c7c7fead9d8eb3e95012aead67e8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Doubler::Generator::Node::ReturnTypeNode</name>
    <filename>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1ReturnTypeNode.html</filename>
    <base>Prophecy::Doubler::Generator::Node::TypeNodeAbstract</base>
    <member kind="function">
      <type></type>
      <name>isVoid</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1ReturnTypeNode.html</anchorfile>
      <anchor>af9a18965a2f4c86655be0d19772fe349</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>getRealType</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1ReturnTypeNode.html</anchorfile>
      <anchor>aa053f1f98839f7a767cf28f3817bcbf5</anchor>
      <arglist>(string $type)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>guardIsValidType</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1ReturnTypeNode.html</anchorfile>
      <anchor>adc4748bac12b665eae4f8af3698e097c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::MockObject::Stub::ReturnValueMap</name>
    <filename>classPHPUnit_1_1Framework_1_1MockObject_1_1Stub_1_1ReturnValueMap.html</filename>
    <base>PHPUnit::Framework::MockObject::Stub::Stub</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Stub_1_1ReturnValueMap.html</anchorfile>
      <anchor>ab8f50dae25e1d60ba006e76c56ec56cf</anchor>
      <arglist>(array $valueMap)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>invoke</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Stub_1_1ReturnValueMap.html</anchorfile>
      <anchor>aed3f67f3c92564cab57563a32f8c129c</anchor>
      <arglist>(Invocation $invocation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1MockObject_1_1Stub_1_1ReturnValueMap.html</anchorfile>
      <anchor>a3129e92c71a70b12e24a1f8474b61f6a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Prophecy::Revealer</name>
    <filename>classProphecy_1_1Prophecy_1_1Revealer.html</filename>
    <base>Prophecy::Prophecy::RevealerInterface</base>
    <member kind="function">
      <type></type>
      <name>reveal</name>
      <anchorfile>classProphecy_1_1Prophecy_1_1Revealer.html</anchorfile>
      <anchor>a8c9b6e55d64e7dcf8ceb845a5d45b451</anchor>
      <arglist>($value)</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>Prophecy::Prophecy::RevealerInterface</name>
    <filename>interfaceProphecy_1_1Prophecy_1_1RevealerInterface.html</filename>
    <member kind="function">
      <type></type>
      <name>reveal</name>
      <anchorfile>interfaceProphecy_1_1Prophecy_1_1RevealerInterface.html</anchorfile>
      <anchor>ac88ed36b053dd3e48a7db93d24ca0268</anchor>
      <arglist>($value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::RiskyTestError</name>
    <filename>classPHPUnit_1_1Framework_1_1RiskyTestError.html</filename>
    <base>PHPUnit::Framework::AssertionFailedError</base>
  </compound>
  <compound kind="class">
    <name>RouterTest</name>
    <filename>classRouterTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testRoutesRequest</name>
      <anchorfile>classRouterTest.html</anchorfile>
      <anchor>a23ea83a00bbd9bc01e7bb24db71a8fde</anchor>
      <arglist>(string $url, string $handler)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>routesProvider</name>
      <anchorfile>classRouterTest.html</anchorfile>
      <anchor>ae4cf340f9a0ff3c768e32368d189a6ea</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Environment::Runtime</name>
    <filename>classSebastianBergmann_1_1Environment_1_1Runtime.html</filename>
    <member kind="function">
      <type></type>
      <name>canCollectCodeCoverage</name>
      <anchorfile>classSebastianBergmann_1_1Environment_1_1Runtime.html</anchorfile>
      <anchor>a6d90b8f461ab6d393dad46c87f55dfca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>discardsComments</name>
      <anchorfile>classSebastianBergmann_1_1Environment_1_1Runtime.html</anchorfile>
      <anchor>a3238827d7e49246df7c89ef8101a20cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getBinary</name>
      <anchorfile>classSebastianBergmann_1_1Environment_1_1Runtime.html</anchorfile>
      <anchor>a3b38d8829868f02a1740619c2da3e5a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getNameWithVersion</name>
      <anchorfile>classSebastianBergmann_1_1Environment_1_1Runtime.html</anchorfile>
      <anchor>a8b9db1413a3c74d023e2299f623a92f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getNameWithVersionAndCodeCoverageDriver</name>
      <anchorfile>classSebastianBergmann_1_1Environment_1_1Runtime.html</anchorfile>
      <anchor>a1f5d7a1a2f32a30a11e128273937b83e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getName</name>
      <anchorfile>classSebastianBergmann_1_1Environment_1_1Runtime.html</anchorfile>
      <anchor>a6e15f46631ee631193c21a20c7e19a02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getVendorUrl</name>
      <anchorfile>classSebastianBergmann_1_1Environment_1_1Runtime.html</anchorfile>
      <anchor>a3f1f032ab4f8a579cb4e983674e06624</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getVersion</name>
      <anchorfile>classSebastianBergmann_1_1Environment_1_1Runtime.html</anchorfile>
      <anchor>af933a3a0ca518975026501e6c13ceb6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>hasXdebug</name>
      <anchorfile>classSebastianBergmann_1_1Environment_1_1Runtime.html</anchorfile>
      <anchor>a143fcc7b5cd3028826715057edb5a134</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isHHVM</name>
      <anchorfile>classSebastianBergmann_1_1Environment_1_1Runtime.html</anchorfile>
      <anchor>a2a0221e310b3a63e826a7584369db036</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isPHP</name>
      <anchorfile>classSebastianBergmann_1_1Environment_1_1Runtime.html</anchorfile>
      <anchor>aa6d9026f35f059857e42abf999bac4f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isPHPDBG</name>
      <anchorfile>classSebastianBergmann_1_1Environment_1_1Runtime.html</anchorfile>
      <anchor>a1a1ef5e5f12695f98d08972d2df53d59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>hasPHPDBGCodeCoverage</name>
      <anchorfile>classSebastianBergmann_1_1Environment_1_1Runtime.html</anchorfile>
      <anchor>a7db4566728ffc7533934a143cd9cd7b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>hasPCOV</name>
      <anchorfile>classSebastianBergmann_1_1Environment_1_1Runtime.html</anchorfile>
      <anchor>ad74eea8e8ffc32989eebc07c19ed2775</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getCurrentSettings</name>
      <anchorfile>classSebastianBergmann_1_1Environment_1_1Runtime.html</anchorfile>
      <anchor>a43f66e6e2e4ad199a075e900a326f1ef</anchor>
      <arglist>(array $values)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Timer::RuntimeException</name>
    <filename>classSebastianBergmann_1_1Timer_1_1RuntimeException.html</filename>
    <base>SebastianBergmann::Timer::Exception</base>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Type::RuntimeException</name>
    <filename>classSebastianBergmann_1_1Type_1_1RuntimeException.html</filename>
    <base>SebastianBergmann::Type::Exception</base>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::MockObject::RuntimeException</name>
    <filename>classPHPUnit_1_1Framework_1_1MockObject_1_1RuntimeException.html</filename>
    <base>PHPUnit::Framework::MockObject::Exception</base>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::GlobalState::RuntimeException</name>
    <filename>classSebastianBergmann_1_1GlobalState_1_1RuntimeException.html</filename>
    <base>SebastianBergmann::GlobalState::Exception</base>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::CodeCoverage::RuntimeException</name>
    <filename>classSebastianBergmann_1_1CodeCoverage_1_1RuntimeException.html</filename>
    <base>SebastianBergmann::CodeCoverage::Exception</base>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Environment::RuntimeTest</name>
    <filename>classSebastianBergmann_1_1Environment_1_1RuntimeTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testCanCollectCodeCoverageWhenXdebugExtensionIsEnabled</name>
      <anchorfile>classSebastianBergmann_1_1Environment_1_1RuntimeTest.html</anchorfile>
      <anchor>a61b0288648b6406df8f3f4d9ccd8564b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCanCollectCodeCoverageWhenPcovExtensionIsEnabled</name>
      <anchorfile>classSebastianBergmann_1_1Environment_1_1RuntimeTest.html</anchorfile>
      <anchor>a4184d6284ace8d2ed632e2c399207b56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCanCollectCodeCoverageWhenRunningOnPhpdbg</name>
      <anchorfile>classSebastianBergmann_1_1Environment_1_1RuntimeTest.html</anchorfile>
      <anchor>a9e5b39858cdda6df4353739f0fa13e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testBinaryCanBeRetrieved</name>
      <anchorfile>classSebastianBergmann_1_1Environment_1_1RuntimeTest.html</anchorfile>
      <anchor>a1608e924fa40df62d51cf7a62efb92b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIsHhvmReturnsFalseWhenRunningOnPhp</name>
      <anchorfile>classSebastianBergmann_1_1Environment_1_1RuntimeTest.html</anchorfile>
      <anchor>a628ac769893ee78f91399e2eb366beef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIsPhpReturnsTrueWhenRunningOnPhp</name>
      <anchorfile>classSebastianBergmann_1_1Environment_1_1RuntimeTest.html</anchorfile>
      <anchor>a311ca4f97032331b6fba5d173d52da07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testPCOVCanBeDetected</name>
      <anchorfile>classSebastianBergmann_1_1Environment_1_1RuntimeTest.html</anchorfile>
      <anchor>ac595af049091ead838d588703e264ef7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testPhpdbgCanBeDetected</name>
      <anchorfile>classSebastianBergmann_1_1Environment_1_1RuntimeTest.html</anchorfile>
      <anchor>aefc2d8d878eec472f8252f609222ccc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testXdebugCanBeDetected</name>
      <anchorfile>classSebastianBergmann_1_1Environment_1_1RuntimeTest.html</anchorfile>
      <anchor>a7e9f3ad237777022bd402e85b97fb15b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testNameAndVersionCanBeRetrieved</name>
      <anchorfile>classSebastianBergmann_1_1Environment_1_1RuntimeTest.html</anchorfile>
      <anchor>a93195010bb1751e4249957b864a2becf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetNameReturnsPhpdbgWhenRunningOnPhpdbg</name>
      <anchorfile>classSebastianBergmann_1_1Environment_1_1RuntimeTest.html</anchorfile>
      <anchor>a05758ef84ab5acbb6e78400bbd6e9dcc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetNameReturnsPhpdbgWhenRunningOnPhp</name>
      <anchorfile>classSebastianBergmann_1_1Environment_1_1RuntimeTest.html</anchorfile>
      <anchor>a41808b408c1f1de5912c8a442b6f31fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testNameAndCodeCoverageDriverCanBeRetrieved</name>
      <anchorfile>classSebastianBergmann_1_1Environment_1_1RuntimeTest.html</anchorfile>
      <anchor>aa9de30be8bc93ab10b952cd3a75694ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetVersionReturnsPhpVersionWhenRunningPhp</name>
      <anchorfile>classSebastianBergmann_1_1Environment_1_1RuntimeTest.html</anchorfile>
      <anchor>a193d352670b27b63c5f8ad120592a1f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetVendorUrlReturnsPhpDotNetWhenRunningPhp</name>
      <anchorfile>classSebastianBergmann_1_1Environment_1_1RuntimeTest.html</anchorfile>
      <anchor>aa55e5d38fd4fee5f30e9c095e881e26f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classSebastianBergmann_1_1Environment_1_1RuntimeTest.html</anchorfile>
      <anchor>a1767d63cdd03297e6ac30e9b26215d7b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::SameSize</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1SameSize.html</filename>
    <base>PHPUnit::Framework::Constraint::Count</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1SameSize.html</anchorfile>
      <anchor>a68e60ec23d4708b6a714cb1673a990a0</anchor>
      <arglist>(iterable $expected)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::SameSizeTest</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1SameSizeTest.html</filename>
    <base>PHPUnit::Framework::Constraint::ConstraintTestCase</base>
    <member kind="function">
      <type></type>
      <name>testConstraintSameSizeWithAnArray</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1SameSizeTest.html</anchorfile>
      <anchor>aab9986636fdd018013ae35c3aeb96475</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintSameSizeWithAnIteratorWhichDoesNotImplementCountable</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1SameSizeTest.html</anchorfile>
      <anchor>aafc33f01162da4633f4617c65108ce17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintSameSizeWithAnObjectImplementingCountable</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1SameSizeTest.html</anchorfile>
      <anchor>ac91030f81c4f088739e2a429c9dce78f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintSameSizeFailing</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1SameSizeTest.html</anchorfile>
      <anchor>ae31c7ba8216acb6bc3f31cbb9e378e63</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SampleArrayAccess</name>
    <filename>classSampleArrayAccess.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classSampleArrayAccess.html</anchorfile>
      <anchor>a712580132441185b561e7230ffd1d1c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>offsetSet</name>
      <anchorfile>classSampleArrayAccess.html</anchorfile>
      <anchor>a1236acd506958da1bfcd6af02b4ccc14</anchor>
      <arglist>($offset, $value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>offsetExists</name>
      <anchorfile>classSampleArrayAccess.html</anchorfile>
      <anchor>a92ce548fe0af23f65fc0ce0d69344405</anchor>
      <arglist>($offset)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>offsetUnset</name>
      <anchorfile>classSampleArrayAccess.html</anchorfile>
      <anchor>af672c8bf35187c5a3e9b7935c28f11a7</anchor>
      <arglist>($offset)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>offsetGet</name>
      <anchorfile>classSampleArrayAccess.html</anchorfile>
      <anchor>af99aba68b4f2956f85700342fca8a672</anchor>
      <arglist>($offset)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SampleClass</name>
    <filename>classSampleClass.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classSampleClass.html</anchorfile>
      <anchor>a09d5540b73aa4cc9fdb0ef78fdbaf8da</anchor>
      <arglist>($a, $b, $c)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$a</name>
      <anchorfile>classSampleClass.html</anchorfile>
      <anchor>ac3d1f5ebf5da20847bd0c02550f1ab0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$b</name>
      <anchorfile>classSampleClass.html</anchorfile>
      <anchor>a0cbb0406349adecef7a2d6c4eb1785b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$c</name>
      <anchorfile>classSampleClass.html</anchorfile>
      <anchor>a11b8c695986f55d90be74cb81afc810c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Comparator::SampleClass</name>
    <filename>classSebastianBergmann_1_1Comparator_1_1SampleClass.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1SampleClass.html</anchorfile>
      <anchor>a60405ab833d27ba1cdc354c8dca625d8</anchor>
      <arglist>($a, $b, $c)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$a</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1SampleClass.html</anchorfile>
      <anchor>a81476985f1b454d0b21e9e614ec05e01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$b</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1SampleClass.html</anchorfile>
      <anchor>a5a6b2ccf23dfac8f407aa20a4dcad045</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$c</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1SampleClass.html</anchorfile>
      <anchor>abc210526c848bbf7cf07f49957330d5d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::Types::Scalar</name>
    <filename>classphpDocumentor_1_1Reflection_1_1Types_1_1Scalar.html</filename>
    <base>phpDocumentor::Reflection::Type</base>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1Scalar.html</anchorfile>
      <anchor>a3afc75fe125dccbe8afee315d7138163</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Comparator::ScalarComparator</name>
    <filename>classSebastianBergmann_1_1Comparator_1_1ScalarComparator.html</filename>
    <base>SebastianBergmann::Comparator::Comparator</base>
    <member kind="function">
      <type></type>
      <name>accepts</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ScalarComparator.html</anchorfile>
      <anchor>aaa203d25867576addd53f4364fd24bee</anchor>
      <arglist>($expected, $actual)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>assertEquals</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ScalarComparator.html</anchorfile>
      <anchor>a476fb9b76908d0a4ca96736b7b28d161</anchor>
      <arglist>($expected, $actual, $delta=0.0, $canonicalize=false, $ignoreCase=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Comparator::ScalarComparatorTest</name>
    <filename>classSebastianBergmann_1_1Comparator_1_1ScalarComparatorTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>acceptsSucceedsProvider</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ScalarComparatorTest.html</anchorfile>
      <anchor>a6eef9ee61d5f3f1a9d90b02134868869</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>acceptsFailsProvider</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ScalarComparatorTest.html</anchorfile>
      <anchor>a258c2c7c6d94d8aad604b1287db55ff8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>assertEqualsSucceedsProvider</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ScalarComparatorTest.html</anchorfile>
      <anchor>a800be8f08b03ee53edd25b298f3648ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>assertEqualsFailsProvider</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ScalarComparatorTest.html</anchorfile>
      <anchor>ab2fa9b6425bdfecd104ad902ab94ffff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAcceptsSucceeds</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ScalarComparatorTest.html</anchorfile>
      <anchor>ab398d7b8df18b223600eff3431d441de</anchor>
      <arglist>($expected, $actual)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAcceptsFails</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ScalarComparatorTest.html</anchorfile>
      <anchor>af214df5ce1eeb050f1e4a191f00eac8e</anchor>
      <arglist>($expected, $actual)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertEqualsSucceeds</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ScalarComparatorTest.html</anchorfile>
      <anchor>a51c43eee1c085a09768f03fe977c47c3</anchor>
      <arglist>($expected, $actual, $ignoreCase=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertEqualsFails</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ScalarComparatorTest.html</anchorfile>
      <anchor>a0b803b41054bfa82f28e984675fc9e0d</anchor>
      <arglist>($expected, $actual, $message)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1ScalarComparatorTest.html</anchorfile>
      <anchor>af90d19c07b1f8707144f91e7352ea34d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foo::DataProviderIssue2922::SecondHelloWorldTest</name>
    <filename>classFoo_1_1DataProviderIssue2922_1_1SecondHelloWorldTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testSecond</name>
      <anchorfile>classFoo_1_1DataProviderIssue2922_1_1SecondHelloWorldTest.html</anchorfile>
      <anchor>a0c02c3498004524d8b338eacd76b8b5c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foo::DataProviderIssue2833::SecondTest</name>
    <filename>classFoo_1_1DataProviderIssue2833_1_1SecondTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testSecond</name>
      <anchorfile>classFoo_1_1DataProviderIssue2833_1_1SecondTest.html</anchorfile>
      <anchor>a4565b51ef6b0683de58fcca99ea5dded</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>DUMMY</name>
      <anchorfile>classFoo_1_1DataProviderIssue2833_1_1SecondTest.html</anchorfile>
      <anchor>a83ff92713f0b0f3eed34ef61b70d20fe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocBlock::Tags::See</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1See.html</filename>
    <base>phpDocumentor::Reflection::DocBlock::Tags::BaseTag</base>
    <base>phpDocumentor::Reflection::DocBlock::Tags::Factory::StaticMethod</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1See.html</anchorfile>
      <anchor>a6fce283dac9ed8e5099be364e63124c6</anchor>
      <arglist>(Reference $refers, ?Description $description=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getReference</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1See.html</anchorfile>
      <anchor>a7664677ecf19526e9c4b9f5ce9f69240</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1See.html</anchorfile>
      <anchor>ac87c9a547dd5e20d7007d63a448dd838</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>create</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1See.html</anchorfile>
      <anchor>a64009b503b6f85ece21d44f1082d2700</anchor>
      <arglist>(string $body, ?FqsenResolver $typeResolver=null, ?DescriptionFactory $descriptionFactory=null, ?TypeContext $context=null)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$name</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1See.html</anchorfile>
      <anchor>a0e9ae59ece650e6617f29015cb1c86ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$refers</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1See.html</anchorfile>
      <anchor>adba55a8a787e67815ff995b3d86b467e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocBlock::Tags::SeeTest</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1SeeTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>tearDown</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1SeeTest.html</anchorfile>
      <anchor>a7c54be721028a4399619a4b0211c1d2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIfCorrectTagNameIsReturned</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1SeeTest.html</anchorfile>
      <anchor>a0b4691df6524c6d2901e8140b09a4ede</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIfTagCanBeRenderedUsingDefaultFormatter</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1SeeTest.html</anchorfile>
      <anchor>a2489364c7c52e71f58e508484c6b0ef0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIfTagCanBeRenderedUsingSpecificFormatter</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1SeeTest.html</anchorfile>
      <anchor>abb2ed9d4c122e953bc4d63a8e64c96bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasReferenceToFqsen</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1SeeTest.html</anchorfile>
      <anchor>a65beb1d25b42aa2593128513ef7f863b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasDescription</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1SeeTest.html</anchorfile>
      <anchor>ad0181f19eba5ec427909380f69eb3347</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStringRepresentationIsReturned</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1SeeTest.html</anchorfile>
      <anchor>a04b06f09b336dee59994809901a195f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStringRepresentationIsReturnedWithoutDescription</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1SeeTest.html</anchorfile>
      <anchor>ae1703a6eacb5fde9ffdb7f670236190c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethod</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1SeeTest.html</anchorfile>
      <anchor>aa45ebe2979db3b715b2f54bf694d345c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodWithNonClassFQSEN</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1SeeTest.html</anchorfile>
      <anchor>aa5668651c4033d9887319ca167f10c52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodWithUrl</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1SeeTest.html</anchorfile>
      <anchor>af5ed84f081447efe76974dce4056fadb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodFailsIfBodyIsNotEmpty</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1SeeTest.html</anchorfile>
      <anchor>a190a12c3466388d9d8ecd497f111b146</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodFailsIfResolverIsNull</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1SeeTest.html</anchorfile>
      <anchor>a7fb2b8fa76a14f465aa71d4b6f30eda8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodFailsIfDescriptionFactoryIsNull</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1SeeTest.html</anchorfile>
      <anchor>a007eea79603ba541562ddb856576e7bc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::Types::Self_</name>
    <filename>classphpDocumentor_1_1Reflection_1_1Types_1_1Self__.html</filename>
    <base>phpDocumentor::Reflection::Type</base>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1Self__.html</anchorfile>
      <anchor>adaf9cf8d6a417561b901e69d4554e18c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>PHPUnit::Framework::SelfDescribing</name>
    <filename>interfacePHPUnit_1_1Framework_1_1SelfDescribing.html</filename>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>interfacePHPUnit_1_1Framework_1_1SelfDescribing.html</anchorfile>
      <anchor>a66cf257a34a47149ee44e097ad689d90</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SeparateClassRunMethodInNewProcessTest</name>
    <filename>classSeparateClassRunMethodInNewProcessTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testMethodShouldGetDifferentPidThanMaster</name>
      <anchorfile>classSeparateClassRunMethodInNewProcessTest.html</anchorfile>
      <anchor>a20579b25e37eb133cbc57933ded6f68b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>setUpBeforeClass</name>
      <anchorfile>classSeparateClassRunMethodInNewProcessTest.html</anchorfile>
      <anchor>a099b1c04d6ed15c716675a1519497f43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>tearDownAfterClass</name>
      <anchorfile>classSeparateClassRunMethodInNewProcessTest.html</anchorfile>
      <anchor>a7f77599ad7a4ebb25d1fe07e86da25fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>PROCESS_ID_FILE_PATH</name>
      <anchorfile>classSeparateClassRunMethodInNewProcessTest.html</anchorfile>
      <anchor>ae6d29ad8aabb888d650351584de62d2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>INITIAL_MASTER_PID</name>
      <anchorfile>classSeparateClassRunMethodInNewProcessTest.html</anchorfile>
      <anchor>a248d567f830cbaf2b6a1aa888c148279</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>INITIAL_PID1</name>
      <anchorfile>classSeparateClassRunMethodInNewProcessTest.html</anchorfile>
      <anchor>a0ee8cee21fe9f3f0527dc15c5cceafd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static</type>
      <name>$masterPid</name>
      <anchorfile>classSeparateClassRunMethodInNewProcessTest.html</anchorfile>
      <anchor>ae3ee721f68bc2950291e186c550721f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static</type>
      <name>$pid1</name>
      <anchorfile>classSeparateClassRunMethodInNewProcessTest.html</anchorfile>
      <anchor>afa1819c98b5f7a8013ef000e35846ca6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SeparateProcessesTest</name>
    <filename>classSeparateProcessesTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testFoo</name>
      <anchorfile>classSeparateProcessesTest.html</anchorfile>
      <anchor>a908580610e7d6a05d020ff6fd3b35d2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testBar</name>
      <anchorfile>classSeparateProcessesTest.html</anchorfile>
      <anchor>a6fed3e32855155e68de61fa72680f834</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Contracts::Mock::IdGenerator::Sequential</name>
    <filename>classContracts_1_1Mock_1_1IdGenerator_1_1Sequential.html</filename>
    <base>Contracts::IdGeneratorInterface</base>
    <member kind="function">
      <type></type>
      <name>generate</name>
      <anchorfile>classContracts_1_1Mock_1_1IdGenerator_1_1Sequential.html</anchorfile>
      <anchor>a2937c4e35bcd17c35e6bb32b793be26b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ContractsTest::Mock::IdGenerator::SequentialTest</name>
    <filename>classContractsTest_1_1Mock_1_1IdGenerator_1_1SequentialTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>test</name>
      <anchorfile>classContractsTest_1_1Mock_1_1IdGenerator_1_1SequentialTest.html</anchorfile>
      <anchor>aaf510accc5d341f288a335353fe979f3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DoctrineTest::InstantiatorTestAsset::SerializableArrayObjectAsset</name>
    <filename>classDoctrineTest_1_1InstantiatorTestAsset_1_1SerializableArrayObjectAsset.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classDoctrineTest_1_1InstantiatorTestAsset_1_1SerializableArrayObjectAsset.html</anchorfile>
      <anchor>a49045db6bf130cf6ec142562d65ce9b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>serialize</name>
      <anchorfile>classDoctrineTest_1_1InstantiatorTestAsset_1_1SerializableArrayObjectAsset.html</anchorfile>
      <anchor>aae83872e618bb6d720b5c39e73c3b069</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>unserialize</name>
      <anchorfile>classDoctrineTest_1_1InstantiatorTestAsset_1_1SerializableArrayObjectAsset.html</anchorfile>
      <anchor>a107048aee9e1efd53fa03c940110a99e</anchor>
      <arglist>($serialized)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DoctrineTest::InstantiatorTestAsset::SerializableFinalInternalChildAsset</name>
    <filename>classDoctrineTest_1_1InstantiatorTestAsset_1_1SerializableFinalInternalChildAsset.html</filename>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocBlock::Serializer</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Serializer.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Serializer.html</anchorfile>
      <anchor>a3a758e922d5352e524bc484d2d866f3d</anchor>
      <arglist>(int $indent=0, string $indentString=&apos; &apos;, bool $indentFirstLine=true, ?int $lineLength=null, ?Formatter $tagFormatter=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getDocComment</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Serializer.html</anchorfile>
      <anchor>adcc4df779b853891a106622d8c8042f9</anchor>
      <arglist>(DocBlock $docblock)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$indentString</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Serializer.html</anchorfile>
      <anchor>a04353879981ce85b1a3228b6c727d57c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$indent</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Serializer.html</anchorfile>
      <anchor>abaa3f3dbd951b94114c62fb92c74f003</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$isFirstLineIndented</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Serializer.html</anchorfile>
      <anchor>a965a1697d3a050d13413a291cc6fe20e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$lineLength</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Serializer.html</anchorfile>
      <anchor>ae6d1734aaa1f64f2b761fa9b1df6dea5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$tagFormatter</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Serializer.html</anchorfile>
      <anchor>a55590d2d8536b52c657a080030edbf34</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocBlock::SerializerTest</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1SerializerTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>tearDown</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1SerializerTest.html</anchorfile>
      <anchor>aedbb22afd3c89382e3d7e941887d5e5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testReconstructsADocCommentFromADocBlock</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1SerializerTest.html</anchorfile>
      <anchor>a6b93aeb525f112437a2c232549bc7e37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAddPrefixToDocBlock</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1SerializerTest.html</anchorfile>
      <anchor>a5ece406782b8d87403634c8f86f601e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAddPrefixToDocBlockExceptFirstLine</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1SerializerTest.html</anchorfile>
      <anchor>a05c46d4c99162aa0db7a07075d94aff8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testWordwrapsAroundTheGivenAmountOfCharacters</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1SerializerTest.html</anchorfile>
      <anchor>a6a9c70a7f3ec7034f13c4cb774e332e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testNoExtraSpacesAfterTagRemoval</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1SerializerTest.html</anchorfile>
      <anchor>a31df9c7a6b0e7a4ea6b5e9e4f7bb2586</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeepCopy::Filter::SetNullFilter</name>
    <filename>classDeepCopy_1_1Filter_1_1SetNullFilter.html</filename>
    <base>DeepCopy::Filter::Filter</base>
    <member kind="function">
      <type></type>
      <name>apply</name>
      <anchorfile>classDeepCopy_1_1Filter_1_1SetNullFilter.html</anchorfile>
      <anchor>a2d05a2d3e673b0552fe74501551d72a0</anchor>
      <arglist>($object, $property, $objectCopier)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeepCopyTest::Filter::SetNullFilterTest</name>
    <filename>classDeepCopyTest_1_1Filter_1_1SetNullFilterTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>test_it_sets_the_given_property_to_null</name>
      <anchorfile>classDeepCopyTest_1_1Filter_1_1SetNullFilterTest.html</anchorfile>
      <anchor>a4b527c257cd8e853cc51e460a1a95bb9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::SelfTest::Basic::SetUpBeforeClassTest</name>
    <filename>classPHPUnit_1_1SelfTest_1_1Basic_1_1SetUpBeforeClassTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>setUp</name>
      <anchorfile>classPHPUnit_1_1SelfTest_1_1Basic_1_1SetUpBeforeClassTest.html</anchorfile>
      <anchor>a9396f25aa27b2e368a78c9cb0d05e94e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testOne</name>
      <anchorfile>classPHPUnit_1_1SelfTest_1_1Basic_1_1SetUpBeforeClassTest.html</anchorfile>
      <anchor>a9d639cc16956576581b1e6944a1d9f9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTwo</name>
      <anchorfile>classPHPUnit_1_1SelfTest_1_1Basic_1_1SetUpBeforeClassTest.html</anchorfile>
      <anchor>a65f8c28c3bbbb7ed6fd18994373efeb7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>setUpBeforeClass</name>
      <anchorfile>classPHPUnit_1_1SelfTest_1_1Basic_1_1SetUpBeforeClassTest.html</anchorfile>
      <anchor>ad1c7613355f3cb9cbe5e0b898a146941</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::SelfTest::Basic::SetUpTest</name>
    <filename>classPHPUnit_1_1SelfTest_1_1Basic_1_1SetUpTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>setUp</name>
      <anchorfile>classPHPUnit_1_1SelfTest_1_1Basic_1_1SetUpTest.html</anchorfile>
      <anchor>a335e30c352d8de34c358e465ff80d061</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testOneWithSetUpException</name>
      <anchorfile>classPHPUnit_1_1SelfTest_1_1Basic_1_1SetUpTest.html</anchorfile>
      <anchor>a3c61ff5989c940c337ae6ba40c772698</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTwoWithSetUpException</name>
      <anchorfile>classPHPUnit_1_1SelfTest_1_1Basic_1_1SetUpTest.html</anchorfile>
      <anchor>a5cd743b4ecf50aba00b33b9c8daa3ae1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeepCopy::TypeFilter::ShallowCopyFilter</name>
    <filename>classDeepCopy_1_1TypeFilter_1_1ShallowCopyFilter.html</filename>
    <base>DeepCopy::TypeFilter::TypeFilter</base>
    <member kind="function">
      <type></type>
      <name>apply</name>
      <anchorfile>classDeepCopy_1_1TypeFilter_1_1ShallowCopyFilter.html</anchorfile>
      <anchor>a8c8e04e65c1ba46b136dda929e1808f8</anchor>
      <arglist>($element)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeepCopyTest::TypeFilter::ShallowCopyFilterTest</name>
    <filename>classDeepCopyTest_1_1TypeFilter_1_1ShallowCopyFilterTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>test_it_shallow_copies_the_given_object</name>
      <anchorfile>classDeepCopyTest_1_1TypeFilter_1_1ShallowCopyFilterTest.html</anchorfile>
      <anchor>a6ca03e9cd95201c66a5438b2502e34d8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DoctrineTest::InstantiatorTestAsset::SimpleSerializableAsset</name>
    <filename>classDoctrineTest_1_1InstantiatorTestAsset_1_1SimpleSerializableAsset.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classDoctrineTest_1_1InstantiatorTestAsset_1_1SimpleSerializableAsset.html</anchorfile>
      <anchor>a99014f82dc2e8c203dda4466d55c952e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>serialize</name>
      <anchorfile>classDoctrineTest_1_1InstantiatorTestAsset_1_1SimpleSerializableAsset.html</anchorfile>
      <anchor>a0aa7eb4a429a774d449081a5414fa4a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>unserialize</name>
      <anchorfile>classDoctrineTest_1_1InstantiatorTestAsset_1_1SimpleSerializableAsset.html</anchorfile>
      <anchor>afd2dabc325a7211f8cc2cb9dbc0a3f5b</anchor>
      <arglist>($serialized)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Type::SimpleType</name>
    <filename>classSebastianBergmann_1_1Type_1_1SimpleType.html</filename>
    <base>SebastianBergmann::Type::Type</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1SimpleType.html</anchorfile>
      <anchor>a5da51ca28759fe822bf9336e80dde3bc</anchor>
      <arglist>(string $name, bool $nullable, $value=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isAssignable</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1SimpleType.html</anchorfile>
      <anchor>acaeb596dae752200aaf55bf006ea5d37</anchor>
      <arglist>(Type $other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getReturnTypeDeclaration</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1SimpleType.html</anchorfile>
      <anchor>a47d87d1d75550108c4502727631d42fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>allowsNull</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1SimpleType.html</anchorfile>
      <anchor>ae25c0b13ecde982161dfb39ee3e9c50e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>value</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1SimpleType.html</anchorfile>
      <anchor>a9bee258e3a538b177d7f216ba1adf8be</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Type::SimpleTypeTest</name>
    <filename>classSebastianBergmann_1_1Type_1_1SimpleTypeTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testCanBeBool</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1SimpleTypeTest.html</anchorfile>
      <anchor>a9dd6e98c46b60cf7a8457a89fcd7836f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCanBeBoolean</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1SimpleTypeTest.html</anchorfile>
      <anchor>a7b44a15327c77e1647dc95c6a51e53bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCanBeDouble</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1SimpleTypeTest.html</anchorfile>
      <anchor>a02215bf124b0df69c10dcd3cc22357c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCanBeFloat</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1SimpleTypeTest.html</anchorfile>
      <anchor>ac0a6ecce5f28de23559c965e69756697</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCanBeReal</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1SimpleTypeTest.html</anchorfile>
      <anchor>af249d997c8d8e1b82221b388b1e1f4f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCanBeInt</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1SimpleTypeTest.html</anchorfile>
      <anchor>adfeae17662ddc2f842274d509563d3f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCanBeInteger</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1SimpleTypeTest.html</anchorfile>
      <anchor>a68685e10fc77b8786148ddcf08582683</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCanBeArray</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1SimpleTypeTest.html</anchorfile>
      <anchor>ab580fd88350f50f18872a6b1a9facd35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCanBeArray2</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1SimpleTypeTest.html</anchorfile>
      <anchor>a27a0e37065074b24b8bdf5339e7e9d70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testMayAllowNull</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1SimpleTypeTest.html</anchorfile>
      <anchor>a3f502076c223cddf97702574c41bb02c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testMayNotAllowNull</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1SimpleTypeTest.html</anchorfile>
      <anchor>ae71736ede48e7b31cc7c8a00b5186525</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIsAssignable</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1SimpleTypeTest.html</anchorfile>
      <anchor>a83abc905fe4f7da7d40f1c54a262b7d3</anchor>
      <arglist>(Type $assignTo, Type $assignedType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>assignablePairs</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1SimpleTypeTest.html</anchorfile>
      <anchor>a21119117e686aecb11fecfe2075c4076</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIsNotAssignable</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1SimpleTypeTest.html</anchorfile>
      <anchor>a86382630ed69b523ae6ba5f71a6296b6</anchor>
      <arglist>(Type $assignTo, Type $assignedType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>notAssignablePairs</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1SimpleTypeTest.html</anchorfile>
      <anchor>ae461eac11b2f78b5efc4946f6f6ab48d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testReturnTypeDeclaration</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1SimpleTypeTest.html</anchorfile>
      <anchor>a9597ba375f80d8074f363f871bbcfb54</anchor>
      <arglist>(Type $type, string $returnType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>returnTypes</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1SimpleTypeTest.html</anchorfile>
      <anchor>a097edcc2964fd97c4773bfb1987806b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCanHaveValue</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1SimpleTypeTest.html</anchorfile>
      <anchor>a355a016aa3f00dcfd1071c46c21ec2a4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocBlock::Tags::Since</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Since.html</filename>
    <base>phpDocumentor::Reflection::DocBlock::Tags::BaseTag</base>
    <base>phpDocumentor::Reflection::DocBlock::Tags::Factory::StaticMethod</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Since.html</anchorfile>
      <anchor>a11040c8e52032a2734e99eff45efc647</anchor>
      <arglist>(?string $version=null, ?Description $description=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getVersion</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Since.html</anchorfile>
      <anchor>a951fd44c70a63200000dbcc2f88f7234</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Since.html</anchorfile>
      <anchor>ac9693d472bf7fdcae370b436e05334ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>create</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Since.html</anchorfile>
      <anchor>a717148e6fb4dd483b41d24837ce90115</anchor>
      <arglist>(?string $body, ?DescriptionFactory $descriptionFactory=null, ?TypeContext $context=null)</arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>REGEX_VECTOR</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Since.html</anchorfile>
      <anchor>a01b6391c878a4e3668a8c2cb6e16a2f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$name</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Since.html</anchorfile>
      <anchor>aa77e984f449bde0b0dca8018be891283</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocBlock::Tags::SinceTest</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1SinceTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>tearDown</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1SinceTest.html</anchorfile>
      <anchor>a10050eef41ff82591f1cf8566910cd8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIfCorrectTagNameIsReturned</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1SinceTest.html</anchorfile>
      <anchor>ad824e5ad717cc2c488c9505f81432218</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIfTagCanBeRenderedUsingDefaultFormatter</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1SinceTest.html</anchorfile>
      <anchor>a93bf40298ecab22cd3cc99aa870e798a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIfTagCanBeRenderedUsingSpecificFormatter</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1SinceTest.html</anchorfile>
      <anchor>a202c1e965f28b4e9a5f6d798bf131fb0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasVersionNumber</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1SinceTest.html</anchorfile>
      <anchor>af307c2e50bf060db9caf968a8c187402</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasDescription</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1SinceTest.html</anchorfile>
      <anchor>a8dffc4af5068c195d079d05845c9a093</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStringRepresentationIsReturned</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1SinceTest.html</anchorfile>
      <anchor>a694a3db00fd38ed801acd2e360e4ef7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStringRepresentationIsReturnedWithoutDescription</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1SinceTest.html</anchorfile>
      <anchor>a9ede799dee151fa13f4e90e23667c3a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethod</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1SinceTest.html</anchorfile>
      <anchor>ace6ae94d006a7a590804ea10efc8aec4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodCreatesEmptySinceTag</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1SinceTest.html</anchorfile>
      <anchor>ad04da67bf139970955291d17a5300a27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodReturnsNullIfBodyDoesNotMatchRegex</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1SinceTest.html</anchorfile>
      <anchor>a0a7e4859744ccbdcffed93a9a64a0802</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Singleton</name>
    <filename>classSingleton.html</filename>
    <member kind="function" static="yes">
      <type>static</type>
      <name>getInstance</name>
      <anchorfile>classSingleton.html</anchorfile>
      <anchor>a475e05eea7a862ab6e22d7599ead8dc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>__construct</name>
      <anchorfile>classSingleton.html</anchorfile>
      <anchor>a9e69e45dca7da2c34d3dbc6b4bae9b91</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SingletonClass</name>
    <filename>classSingletonClass.html</filename>
    <member kind="function">
      <type></type>
      <name>doSomething</name>
      <anchorfile>classSingletonClass.html</anchorfile>
      <anchor>a44a39da15889fff70edc3caf74eb5e9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>getInstance</name>
      <anchorfile>classSingletonClass.html</anchorfile>
      <anchor>aefb0d55b9702a722a32c3cf92fa8a126</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>__construct</name>
      <anchorfile>classSingletonClass.html</anchorfile>
      <anchor>aa6d43539bca79a7f0d453510595b2f1c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>PHPUnit::Framework::SkippedTest</name>
    <filename>interfacePHPUnit_1_1Framework_1_1SkippedTest.html</filename>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::SkippedTestCase</name>
    <filename>classPHPUnit_1_1Framework_1_1SkippedTestCase.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1SkippedTestCase.html</anchorfile>
      <anchor>a24ae0feafb857518fb2ae4ab52a09dc2</anchor>
      <arglist>(string $className, string $methodName, string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getMessage</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1SkippedTestCase.html</anchorfile>
      <anchor>ac4cbcca8cb8b4f49b7d125d54705cd30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1SkippedTestCase.html</anchorfile>
      <anchor>a4da336f1d350537dabf3d78f8ea23cc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>runTest</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1SkippedTestCase.html</anchorfile>
      <anchor>a525aa50e6f7767c410d7b6eca8e73226</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$backupGlobals</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1SkippedTestCase.html</anchorfile>
      <anchor>acc18d898a69c951c9342c9407c218903</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$backupStaticAttributes</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1SkippedTestCase.html</anchorfile>
      <anchor>ae219114f92349f5b412cf6c609e7c256</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$runTestInSeparateProcess</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1SkippedTestCase.html</anchorfile>
      <anchor>abeac52a00e787ddcec6e7f7c2b0f5798</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::SkippedTestCaseTest</name>
    <filename>classPHPUnit_1_1Framework_1_1SkippedTestCaseTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testDefaults</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1SkippedTestCaseTest.html</anchorfile>
      <anchor>a87896b4f63b948be75734ac5fb711e47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetNameReturnsClassAndMethodName</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1SkippedTestCaseTest.html</anchorfile>
      <anchor>aae98bf12126aed8a262f41aebd318130</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetMessageReturnsMessage</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1SkippedTestCaseTest.html</anchorfile>
      <anchor>a16fc69abaf25836d79be74fe14d66d88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testRunMarksTestAsSkipped</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1SkippedTestCaseTest.html</anchorfile>
      <anchor>ac03fcee6f703107be7a072f6a093d885</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::SkippedTestError</name>
    <filename>classPHPUnit_1_1Framework_1_1SkippedTestError.html</filename>
    <base>PHPUnit::Framework::AssertionFailedError</base>
    <base>PHPUnit::Framework::SkippedTest</base>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::SkippedTestSuiteError</name>
    <filename>classPHPUnit_1_1Framework_1_1SkippedTestSuiteError.html</filename>
    <base>PHPUnit::Framework::AssertionFailedError</base>
    <base>PHPUnit::Framework::SkippedTest</base>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::GlobalState::Snapshot</name>
    <filename>classSebastianBergmann_1_1GlobalState_1_1Snapshot.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classSebastianBergmann_1_1GlobalState_1_1Snapshot.html</anchorfile>
      <anchor>ad0d4bf6ba43d13e631ba32dea0d1f783</anchor>
      <arglist>(Blacklist $blacklist=null, bool $includeGlobalVariables=true, bool $includeStaticAttributes=true, bool $includeConstants=true, bool $includeFunctions=true, bool $includeClasses=true, bool $includeInterfaces=true, bool $includeTraits=true, bool $includeIniSettings=true, bool $includeIncludedFiles=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>blacklist</name>
      <anchorfile>classSebastianBergmann_1_1GlobalState_1_1Snapshot.html</anchorfile>
      <anchor>ae8f9c8c35c4218fdceef1aaa95a8371b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>globalVariables</name>
      <anchorfile>classSebastianBergmann_1_1GlobalState_1_1Snapshot.html</anchorfile>
      <anchor>a1a7057e7cbd2d9a26ce5c62b4234465a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>superGlobalVariables</name>
      <anchorfile>classSebastianBergmann_1_1GlobalState_1_1Snapshot.html</anchorfile>
      <anchor>aec3d29aff91edf35ed93ffd38a3ee8b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>superGlobalArrays</name>
      <anchorfile>classSebastianBergmann_1_1GlobalState_1_1Snapshot.html</anchorfile>
      <anchor>ac1f57fe3e70f05e96ad406a7d4dda9bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>staticAttributes</name>
      <anchorfile>classSebastianBergmann_1_1GlobalState_1_1Snapshot.html</anchorfile>
      <anchor>a10f23c61607c405992a753cb25e662b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>iniSettings</name>
      <anchorfile>classSebastianBergmann_1_1GlobalState_1_1Snapshot.html</anchorfile>
      <anchor>a80604a27781b08bafa604e6bb56e7605</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>includedFiles</name>
      <anchorfile>classSebastianBergmann_1_1GlobalState_1_1Snapshot.html</anchorfile>
      <anchor>a900e1146b96745ba3a06c592a187b20b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>constants</name>
      <anchorfile>classSebastianBergmann_1_1GlobalState_1_1Snapshot.html</anchorfile>
      <anchor>a5014137920b04a654699a981786234d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>functions</name>
      <anchorfile>classSebastianBergmann_1_1GlobalState_1_1Snapshot.html</anchorfile>
      <anchor>a16c913e5f1b424ed142217ca488303ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>interfaces</name>
      <anchorfile>classSebastianBergmann_1_1GlobalState_1_1Snapshot.html</anchorfile>
      <anchor>a0e3803a1015a6991b2aed8d0cb8c3438</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>classes</name>
      <anchorfile>classSebastianBergmann_1_1GlobalState_1_1Snapshot.html</anchorfile>
      <anchor>a52e49fa1a16531fcf72819809fd889c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>traits</name>
      <anchorfile>classSebastianBergmann_1_1GlobalState_1_1Snapshot.html</anchorfile>
      <anchor>a68e78ff0091a4d0d9b30fe5a7e053ad6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::GlobalState::TestFixture::SnapshotClass</name>
    <filename>classSebastianBergmann_1_1GlobalState_1_1TestFixture_1_1SnapshotClass.html</filename>
    <member kind="function" static="yes">
      <type>static</type>
      <name>init</name>
      <anchorfile>classSebastianBergmann_1_1GlobalState_1_1TestFixture_1_1SnapshotClass.html</anchorfile>
      <anchor>a05c30575c190f565246738fbf9d02b08</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::GlobalState::TestFixture::SnapshotDomDocument</name>
    <filename>classSebastianBergmann_1_1GlobalState_1_1TestFixture_1_1SnapshotDomDocument.html</filename>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::GlobalState::SnapshotTest</name>
    <filename>classSebastianBergmann_1_1GlobalState_1_1SnapshotTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testStaticAttributes</name>
      <anchorfile>classSebastianBergmann_1_1GlobalState_1_1SnapshotTest.html</anchorfile>
      <anchor>ae036ee826aca28fc6b139f7e1a4026de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstants</name>
      <anchorfile>classSebastianBergmann_1_1GlobalState_1_1SnapshotTest.html</anchorfile>
      <anchor>a239b76adc3d034f386fd141f7eb5a48f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFunctions</name>
      <anchorfile>classSebastianBergmann_1_1GlobalState_1_1SnapshotTest.html</anchorfile>
      <anchor>ac9b45d14e3e41029bf844962b42af391</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testClasses</name>
      <anchorfile>classSebastianBergmann_1_1GlobalState_1_1SnapshotTest.html</anchorfile>
      <anchor>a4077bdfdf7c964aa7afde21d178394d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testInterfaces</name>
      <anchorfile>classSebastianBergmann_1_1GlobalState_1_1SnapshotTest.html</anchorfile>
      <anchor>afd04707370a231721f10765a5b574067</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTraits</name>
      <anchorfile>classSebastianBergmann_1_1GlobalState_1_1SnapshotTest.html</anchorfile>
      <anchor>a1953d0c6e9cbc7fe5e5bba7ae2ae2250</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIniSettings</name>
      <anchorfile>classSebastianBergmann_1_1GlobalState_1_1SnapshotTest.html</anchorfile>
      <anchor>a41dbb751a7da61dbfc199541b7fcc160</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIncludedFiles</name>
      <anchorfile>classSebastianBergmann_1_1GlobalState_1_1SnapshotTest.html</anchorfile>
      <anchor>aee2f7dbb0908d47f0bbd750a62f6b233</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classSebastianBergmann_1_1GlobalState_1_1SnapshotTest.html</anchorfile>
      <anchor>ae2172a59ae680167e2d7989d55f6f69f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SomeClass</name>
    <filename>classSomeClass.html</filename>
    <member kind="function">
      <type></type>
      <name>doSomething</name>
      <anchorfile>classSomeClass.html</anchorfile>
      <anchor>a7759f3d283b3f77c3982e6b18ce28d99</anchor>
      <arglist>($a, $b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>doSomethingElse</name>
      <anchorfile>classSomeClass.html</anchorfile>
      <anchor>aeeb8db39b9c74007d86c28c8c6cf6a83</anchor>
      <arglist>($c)</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>Contracts::SorterInterface</name>
    <filename>interfaceContracts_1_1SorterInterface.html</filename>
    <member kind="function">
      <type></type>
      <name>sortByAscending</name>
      <anchorfile>interfaceContracts_1_1SorterInterface.html</anchorfile>
      <anchor>acbd31d7fc4aaa7f79e151e6ea6c46fa4</anchor>
      <arglist>(string $property)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sortByDescending</name>
      <anchorfile>interfaceContracts_1_1SorterInterface.html</anchorfile>
      <anchor>aa7917844b697476496c4bf9bcb397ec4</anchor>
      <arglist>(string $property)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::CodeCoverage::Report::Xml::Source</name>
    <filename>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1Source.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1Source.html</anchorfile>
      <anchor>a939091b6191d7e8a6f4eba1f4a2db873</anchor>
      <arglist>(\DOMElement $context)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setSourceCode</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1Source.html</anchorfile>
      <anchor>a3b9ac0011f122ab34332f70dbbe082db</anchor>
      <arglist>(string $source)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocBlock::Tags::Source</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Source.html</filename>
    <base>phpDocumentor::Reflection::DocBlock::Tags::BaseTag</base>
    <base>phpDocumentor::Reflection::DocBlock::Tags::Factory::StaticMethod</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Source.html</anchorfile>
      <anchor>af732a743bfcc57f0454dccc520c623c0</anchor>
      <arglist>($startingLine, $lineCount=null, ?Description $description=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getStartingLine</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Source.html</anchorfile>
      <anchor>a8fd580e3ae4e51a1f0323e6da1a1d131</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getLineCount</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Source.html</anchorfile>
      <anchor>aad6bbfcfccebf262929efe88c11069b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Source.html</anchorfile>
      <anchor>a44fd94f1959233c7e27a83139f55e055</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>create</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Source.html</anchorfile>
      <anchor>afdd0e242d7c71b15d52ddac8ead023b3</anchor>
      <arglist>(string $body, ?DescriptionFactory $descriptionFactory=null, ?TypeContext $context=null)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$name</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Source.html</anchorfile>
      <anchor>a853b02c0673e2e7052c38d6608e236b6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>bar::baz::source_with_namespace</name>
    <filename>classbar_1_1baz_1_1source__with__namespace.html</filename>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocBlock::Tags::SourceTest</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1SourceTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>tearDown</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1SourceTest.html</anchorfile>
      <anchor>a7b3c28d7c1afd1c2e33e3b746dcdfb21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIfCorrectTagNameIsReturned</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1SourceTest.html</anchorfile>
      <anchor>adb6d1ac4b14a6a4d41ee54e7145ff5de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIfTagCanBeRenderedUsingDefaultFormatter</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1SourceTest.html</anchorfile>
      <anchor>a68e96a20ea56c550ea147968dda4015a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIfTagCanBeRenderedUsingSpecificFormatter</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1SourceTest.html</anchorfile>
      <anchor>aac45350079345a3aa706b5cc98f37a97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasStartingLine</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1SourceTest.html</anchorfile>
      <anchor>a05b9f2a7a5edcba266d073df5c34d939</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasLineCount</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1SourceTest.html</anchorfile>
      <anchor>a25ef7aaf3d5c556e41075f78b99fb379</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasDescription</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1SourceTest.html</anchorfile>
      <anchor>a09a12fe8242154f62e43b5e0e7fd794b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStringRepresentationIsReturned</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1SourceTest.html</anchorfile>
      <anchor>ada71f8598df5e2be14d7bf0daa7bd0e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStringRepresentationIsReturnedWithoutDescription</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1SourceTest.html</anchorfile>
      <anchor>a4fbc85b29705c1883bccd6e8a30eb628</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethod</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1SourceTest.html</anchorfile>
      <anchor>a52789d80182db73c82f239c240008cb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodFailsIfEmptyBodyIsGiven</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1SourceTest.html</anchorfile>
      <anchor>aeba916e3dcb4cca17bf9d85174604a51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodFailsIfDescriptionFactoryIsNull</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1SourceTest.html</anchorfile>
      <anchor>a461f442c07d0e00fa729d54f6c4c0439</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExceptionIsThrownIfStartingLineIsNotInteger</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1SourceTest.html</anchorfile>
      <anchor>a96336148471a41016c43c6b1be0f885d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExceptionIsThrownIfLineCountIsNotIntegerOrNull</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1SourceTest.html</anchorfile>
      <anchor>ad7d82fc9d10b741deb0e4c79fbec74da</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Version::SpecificMajorAndMinorVersionConstraint</name>
    <filename>classPharIo_1_1Version_1_1SpecificMajorAndMinorVersionConstraint.html</filename>
    <base>PharIo::Version::AbstractVersionConstraint</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPharIo_1_1Version_1_1SpecificMajorAndMinorVersionConstraint.html</anchorfile>
      <anchor>aaa2a88025b92d99e7baed4f36f259bac</anchor>
      <arglist>($originalValue, $major, $minor)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>complies</name>
      <anchorfile>classPharIo_1_1Version_1_1SpecificMajorAndMinorVersionConstraint.html</anchorfile>
      <anchor>a263c09ced7ee05052952f71d259be718</anchor>
      <arglist>(Version $version)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Version::SpecificMajorAndMinorVersionConstraintTest</name>
    <filename>classPharIo_1_1Version_1_1SpecificMajorAndMinorVersionConstraintTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>versionProvider</name>
      <anchorfile>classPharIo_1_1Version_1_1SpecificMajorAndMinorVersionConstraintTest.html</anchorfile>
      <anchor>abedd1b423c1524253bb9e69d5599a206</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testReturnsTrueForCompliantVersions</name>
      <anchorfile>classPharIo_1_1Version_1_1SpecificMajorAndMinorVersionConstraintTest.html</anchorfile>
      <anchor>a93edbca6a089a2600519b80afad2a557</anchor>
      <arglist>($major, $minor, Version $version, $expectedResult)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Version::SpecificMajorVersionConstraint</name>
    <filename>classPharIo_1_1Version_1_1SpecificMajorVersionConstraint.html</filename>
    <base>PharIo::Version::AbstractVersionConstraint</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPharIo_1_1Version_1_1SpecificMajorVersionConstraint.html</anchorfile>
      <anchor>ac7a705f4395d19464967c1f2499b9170</anchor>
      <arglist>($originalValue, $major)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>complies</name>
      <anchorfile>classPharIo_1_1Version_1_1SpecificMajorVersionConstraint.html</anchorfile>
      <anchor>a171a27fd83aaf02d32730c9bbd8f2fe9</anchor>
      <arglist>(Version $version)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Version::SpecificMajorVersionConstraintTest</name>
    <filename>classPharIo_1_1Version_1_1SpecificMajorVersionConstraintTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>versionProvider</name>
      <anchorfile>classPharIo_1_1Version_1_1SpecificMajorVersionConstraintTest.html</anchorfile>
      <anchor>a20297b59156737081a83ec3e80836395</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testReturnsTrueForCompliantVersions</name>
      <anchorfile>classPharIo_1_1Version_1_1SpecificMajorVersionConstraintTest.html</anchorfile>
      <anchor>aa37aec9b77d39ef9c9a66cd5184cb2b9</anchor>
      <arglist>($major, Version $version, $expectedResult)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeepCopy::TypeFilter::Spl::SplDoublyLinkedList</name>
    <filename>classDeepCopy_1_1TypeFilter_1_1Spl_1_1SplDoublyLinkedList.html</filename>
    <base>DeepCopy::TypeFilter::Spl::SplDoublyLinkedListFilter</base>
  </compound>
  <compound kind="class">
    <name>DeepCopy::TypeFilter::Spl::SplDoublyLinkedListFilter</name>
    <filename>classDeepCopy_1_1TypeFilter_1_1Spl_1_1SplDoublyLinkedListFilter.html</filename>
    <base>DeepCopy::TypeFilter::TypeFilter</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classDeepCopy_1_1TypeFilter_1_1Spl_1_1SplDoublyLinkedListFilter.html</anchorfile>
      <anchor>ada66f3a421c564354fbc62e2218b7e33</anchor>
      <arglist>(DeepCopy $copier)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>apply</name>
      <anchorfile>classDeepCopy_1_1TypeFilter_1_1Spl_1_1SplDoublyLinkedListFilter.html</anchorfile>
      <anchor>a61e22e4aedf4fd59054577a0e1b6a7d6</anchor>
      <arglist>($element)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeepCopyTest::TypeFilter::Spl::SplDoublyLinkedListFilterTest</name>
    <filename>classDeepCopyTest_1_1TypeFilter_1_1Spl_1_1SplDoublyLinkedListFilterTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>test_it_deep_copies_a_doubly_linked_spl_list</name>
      <anchorfile>classDeepCopyTest_1_1TypeFilter_1_1Spl_1_1SplDoublyLinkedListFilterTest.html</anchorfile>
      <anchor>a1321ffbe6995d88c1be056df1f92d8c2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Doubler::ClassPatch::SplFileInfoPatch</name>
    <filename>classProphecy_1_1Doubler_1_1ClassPatch_1_1SplFileInfoPatch.html</filename>
    <base>Prophecy::Doubler::ClassPatch::ClassPatchInterface</base>
    <member kind="function">
      <type></type>
      <name>supports</name>
      <anchorfile>classProphecy_1_1Doubler_1_1ClassPatch_1_1SplFileInfoPatch.html</anchorfile>
      <anchor>ad9da3559afa0ad287a5ddd732150cd10</anchor>
      <arglist>(ClassNode $node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>apply</name>
      <anchorfile>classProphecy_1_1Doubler_1_1ClassPatch_1_1SplFileInfoPatch.html</anchorfile>
      <anchor>ad14f03f4fbe74b37718a7f497f1b8ee6</anchor>
      <arglist>(ClassNode $node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getPriority</name>
      <anchorfile>classProphecy_1_1Doubler_1_1ClassPatch_1_1SplFileInfoPatch.html</anchorfile>
      <anchor>a6d1ffc41ac0c7ffb18a53d51eeddb0df</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Comparator::SplObjectStorageComparator</name>
    <filename>classSebastianBergmann_1_1Comparator_1_1SplObjectStorageComparator.html</filename>
    <base>SebastianBergmann::Comparator::Comparator</base>
    <member kind="function">
      <type></type>
      <name>accepts</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1SplObjectStorageComparator.html</anchorfile>
      <anchor>a19e0e5afa703abc19f0300fa1087ad52</anchor>
      <arglist>($expected, $actual)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>assertEquals</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1SplObjectStorageComparator.html</anchorfile>
      <anchor>a246ff428813466df73119498004fa9dd</anchor>
      <arglist>($expected, $actual, $delta=0.0, $canonicalize=false, $ignoreCase=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Comparator::SplObjectStorageComparatorTest</name>
    <filename>classSebastianBergmann_1_1Comparator_1_1SplObjectStorageComparatorTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>acceptsFailsProvider</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1SplObjectStorageComparatorTest.html</anchorfile>
      <anchor>aac12ec76e2ec7d225c62beeaa858f736</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>assertEqualsSucceedsProvider</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1SplObjectStorageComparatorTest.html</anchorfile>
      <anchor>ab63b3640ff65ba2eb78aa041ab5adac5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>assertEqualsFailsProvider</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1SplObjectStorageComparatorTest.html</anchorfile>
      <anchor>ab453e8d0b1e868332a701a8ab48b8c80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAcceptsSucceeds</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1SplObjectStorageComparatorTest.html</anchorfile>
      <anchor>ac14f952556fe00cbdc577b66961f7840</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAcceptsFails</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1SplObjectStorageComparatorTest.html</anchorfile>
      <anchor>ad33c4b44766db25f0e1a48d275ac58d9</anchor>
      <arglist>($expected, $actual)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertEqualsSucceeds</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1SplObjectStorageComparatorTest.html</anchorfile>
      <anchor>a55201dbbf02f0e73ca444cd202025a8f</anchor>
      <arglist>($expected, $actual)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertEqualsFails</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1SplObjectStorageComparatorTest.html</anchorfile>
      <anchor>a8ddcfb0dcaed72ec5871d9e5dcdc703f</anchor>
      <arglist>($expected, $actual)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertEqualsFails2</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1SplObjectStorageComparatorTest.html</anchorfile>
      <anchor>af0da9cfdf7a99c9b9e270c314e8a3604</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1SplObjectStorageComparatorTest.html</anchorfile>
      <anchor>adcd19fa475a60be68677333bd6070b46</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StackTest</name>
    <filename>classStackTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testPush</name>
      <anchorfile>classStackTest.html</anchorfile>
      <anchor>a13832c6ebd40055c700066390c277123</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testPop</name>
      <anchorfile>classStackTest.html</anchorfile>
      <anchor>a38ddfcf06eddeeb60a0258cdb3d4e35f</anchor>
      <arglist>(array $stack)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocBlock::StandardTagFactory</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1StandardTagFactory.html</filename>
    <base>phpDocumentor::Reflection::DocBlock::TagFactory</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1StandardTagFactory.html</anchorfile>
      <anchor>a6ae26065bf802a85823657aaa6d1b7ee</anchor>
      <arglist>(FqsenResolver $fqsenResolver, ?array $tagHandlers=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>create</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1StandardTagFactory.html</anchorfile>
      <anchor>acb6596b730b5b5bf5f646c4e5b354d69</anchor>
      <arglist>(string $tagLine, ?TypeContext $context=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addParameter</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1StandardTagFactory.html</anchorfile>
      <anchor>ac92f932e4ed69af090cf5d1f304eab82</anchor>
      <arglist>(string $name, $value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addService</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1StandardTagFactory.html</anchorfile>
      <anchor>abc5565ff746cef4bdfefe80809086d8b</anchor>
      <arglist>(object $service, ?string $alias=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>registerTagHandler</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1StandardTagFactory.html</anchorfile>
      <anchor>a57f26d84c042f1a9f8925766e0ce1c2b</anchor>
      <arglist>(string $tagName, string $handler)</arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>REGEX_TAGNAME</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1StandardTagFactory.html</anchorfile>
      <anchor>ac0f311e77f0125d548820a9d39cdde48</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocBlock::StandardTagFactoryTest</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1StandardTagFactoryTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>tearDown</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1StandardTagFactoryTest.html</anchorfile>
      <anchor>ad508b60ebe8ad1a28a05dcf6e42148c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCreatingAGenericTag</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1StandardTagFactoryTest.html</anchorfile>
      <anchor>a97336737d1841c5acb255da65e02b8d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCreatingASpecificTag</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1StandardTagFactoryTest.html</anchorfile>
      <anchor>a8184773302e933644305cd2b9210af7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAnEmptyContextIsCreatedIfNoneIsProvided</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1StandardTagFactoryTest.html</anchorfile>
      <anchor>a81a98f38a25eee7df4e533e9020e9864</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testPassingYourOwnSetOfTagHandlers</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1StandardTagFactoryTest.html</anchorfile>
      <anchor>aea359ca1507a376ff1ffe7ed08daa4f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExceptionIsThrownIfProvidedTagIsNotWellformed</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1StandardTagFactoryTest.html</anchorfile>
      <anchor>ad6b9b7a579e7ad77699511e056b6feb3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAddParameterToServiceLocator</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1StandardTagFactoryTest.html</anchorfile>
      <anchor>a49389408d61e1d2b04b74cd4e295c8f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAddServiceToServiceLocator</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1StandardTagFactoryTest.html</anchorfile>
      <anchor>a92d53a369650c48c7c0ae1abe6ae5c6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testInjectConcreteServiceForInterfaceToServiceLocator</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1StandardTagFactoryTest.html</anchorfile>
      <anchor>a10b7feee49bc8597a5cc576c1abcd29d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testRegisteringAHandlerForANewTag</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1StandardTagFactoryTest.html</anchorfile>
      <anchor>af565a23f288ab5216df95a8804450871</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHandlerRegistrationFailsIfProvidedTagNameIsNamespaceButNotFullyQualified</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1StandardTagFactoryTest.html</anchorfile>
      <anchor>aec465637f31cb07959aeac114decfd16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHandlerRegistrationFailsIfProvidedHandlerIsEmpty</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1StandardTagFactoryTest.html</anchorfile>
      <anchor>a73e64de87504146c8361fc7152fb4a85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHandlerRegistrationFailsIfProvidedHandlerIsNotAnExistingClassName</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1StandardTagFactoryTest.html</anchorfile>
      <anchor>ab1a089fa48e8467a4cce818682b0b225</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHandlerRegistrationFailsIfProvidedHandlerDoesNotImplementTheTagInterface</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1StandardTagFactoryTest.html</anchorfile>
      <anchor>ac271d82e3676f232f6f51f4865a3bff0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testReturnTagIsMappedCorrectly</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1StandardTagFactoryTest.html</anchorfile>
      <anchor>aa6c9861d1264a54253a8dc15a7e0e746</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testInvalidTagIsReturnedOnFailure</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1StandardTagFactoryTest.html</anchorfile>
      <anchor>a0117d485cfbc55eb50adcb3ed0ffb778</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testValidFormattedTags</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1StandardTagFactoryTest.html</anchorfile>
      <anchor>a666cbdd045c9e3f24ed726e5a919d554</anchor>
      <arglist>(string $input, string $tagName, string $render)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>validTagProvider</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1StandardTagFactoryTest.html</anchorfile>
      <anchor>a20bc45ecdb81efeb3cc8d2d0308c083c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testInValidFormattedTags</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1StandardTagFactoryTest.html</anchorfile>
      <anchor>ac8bd5e2f2d8b0623a5e632dc72b4dcfc</anchor>
      <arglist>(string $input)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>invalidTagProvider</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1StandardTagFactoryTest.html</anchorfile>
      <anchor>a2aac8e0728141e8a51fd78c11375eed5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Runner::StandardTestSuiteLoader</name>
    <filename>classPHPUnit_1_1Runner_1_1StandardTestSuiteLoader.html</filename>
    <base>PHPUnit::Runner::TestSuiteLoader</base>
    <member kind="function">
      <type></type>
      <name>load</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1StandardTestSuiteLoader.html</anchorfile>
      <anchor>af50e42b8a1d84ccd5200e4762510a347</anchor>
      <arglist>(string $suiteClassName, string $suiteClassFile=&apos;&apos;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>reload</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1StandardTestSuiteLoader.html</anchorfile>
      <anchor>abd3798593c1dc34879b60957ff36b394</anchor>
      <arglist>(\ReflectionClass $aClass)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::Types::Static_</name>
    <filename>classphpDocumentor_1_1Reflection_1_1Types_1_1Static__.html</filename>
    <base>phpDocumentor::Reflection::Type</base>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1Static__.html</anchorfile>
      <anchor>aec29bbb54f0e666bcea7b1f427095818</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>phpDocumentor::Reflection::DocBlock::Tags::Factory::StaticMethod</name>
    <filename>interfacephpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Factory_1_1StaticMethod.html</filename>
    <member kind="function" static="yes">
      <type>static</type>
      <name>create</name>
      <anchorfile>interfacephpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Factory_1_1StaticMethod.html</anchorfile>
      <anchor>aa9f7cdc976e5524696e4dde972fa1b16</anchor>
      <arglist>(string $body)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StaticMockTestClass</name>
    <filename>classStaticMockTestClass.html</filename>
    <member kind="function" static="yes">
      <type>static</type>
      <name>doSomething</name>
      <anchorfile>classStaticMockTestClass.html</anchorfile>
      <anchor>a2db753b2a892512eff362eab36f5a0f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>doSomethingElse</name>
      <anchorfile>classStaticMockTestClass.html</anchorfile>
      <anchor>a7e821e495f7db77a3540df3c658e8e97</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::SelfTest::Basic::StatusTest</name>
    <filename>classPHPUnit_1_1SelfTest_1_1Basic_1_1StatusTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testSuccess</name>
      <anchorfile>classPHPUnit_1_1SelfTest_1_1Basic_1_1StatusTest.html</anchorfile>
      <anchor>a186a4686ab910f9846663b0e120fbdf6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFailure</name>
      <anchorfile>classPHPUnit_1_1SelfTest_1_1Basic_1_1StatusTest.html</anchorfile>
      <anchor>ae55f011c0c72838f8cfa1c5e3a4b3136</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testError</name>
      <anchorfile>classPHPUnit_1_1SelfTest_1_1Basic_1_1StatusTest.html</anchorfile>
      <anchor>a2a256c062938abf637535ac5da7df0bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIncomplete</name>
      <anchorfile>classPHPUnit_1_1SelfTest_1_1Basic_1_1StatusTest.html</anchorfile>
      <anchor>a107ef5116877152fab1e0089991cde70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSkipped</name>
      <anchorfile>classPHPUnit_1_1SelfTest_1_1Basic_1_1StatusTest.html</anchorfile>
      <anchor>a7e859ce790a218cb5c278f2c6fbf08e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testRisky</name>
      <anchorfile>classPHPUnit_1_1SelfTest_1_1Basic_1_1StatusTest.html</anchorfile>
      <anchor>a3136cff77d4ba6fdb82c0cfc6963e175</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testWarning</name>
      <anchorfile>classPHPUnit_1_1SelfTest_1_1Basic_1_1StatusTest.html</anchorfile>
      <anchor>a9528c8d8ccdca3467f49d8007b52de47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSuccessWithMessage</name>
      <anchorfile>classPHPUnit_1_1SelfTest_1_1Basic_1_1StatusTest.html</anchorfile>
      <anchor>a39616797997513aa8d2befa4cf01c137</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFailureWithMessage</name>
      <anchorfile>classPHPUnit_1_1SelfTest_1_1Basic_1_1StatusTest.html</anchorfile>
      <anchor>a4b08371a576f75aca5f95ed4fd36bb9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testErrorWithMessage</name>
      <anchorfile>classPHPUnit_1_1SelfTest_1_1Basic_1_1StatusTest.html</anchorfile>
      <anchor>aca571377ea9aaa041d44cfae3457262f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIncompleteWithMessage</name>
      <anchorfile>classPHPUnit_1_1SelfTest_1_1Basic_1_1StatusTest.html</anchorfile>
      <anchor>af26607d0fccf3e691e748e2624a01d5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSkippedWithMessage</name>
      <anchorfile>classPHPUnit_1_1SelfTest_1_1Basic_1_1StatusTest.html</anchorfile>
      <anchor>a2b8e0b2ad2f972571f47e63dcbc0f2ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testRiskyWithMessage</name>
      <anchorfile>classPHPUnit_1_1SelfTest_1_1Basic_1_1StatusTest.html</anchorfile>
      <anchor>ab5f0305d82debfda4d10deec321d22c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testWarningWithMessage</name>
      <anchorfile>classPHPUnit_1_1SelfTest_1_1Basic_1_1StatusTest.html</anchorfile>
      <anchor>a133e7ada916b5ce76a2585172ff9f072</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StopOnErrorTestSuite</name>
    <filename>classStopOnErrorTestSuite.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testIncomplete</name>
      <anchorfile>classStopOnErrorTestSuite.html</anchorfile>
      <anchor>a327a31d67765f95dbe89fa2ff3b0fc9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testWithError</name>
      <anchorfile>classStopOnErrorTestSuite.html</anchorfile>
      <anchor>a829c0b0f2ac115d9c406bce539b96569</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testThatIsNeverReached</name>
      <anchorfile>classStopOnErrorTestSuite.html</anchorfile>
      <anchor>ac9ba99d33cee51dcb93895e7ab3c27c2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StopOnWarningTestSuite</name>
    <filename>classStopOnWarningTestSuite.html</filename>
    <member kind="function" static="yes">
      <type>static</type>
      <name>suite</name>
      <anchorfile>classStopOnWarningTestSuite.html</anchorfile>
      <anchor>ac187c9335ae30c89979fb8db2e95fc0b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StopsOnWarningTest</name>
    <filename>classStopsOnWarningTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testOne</name>
      <anchorfile>classStopsOnWarningTest.html</anchorfile>
      <anchor>afc079b4ef30206db1f11bc94e9dee6a9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>Contracts::StorerInterface</name>
    <filename>interfaceContracts_1_1StorerInterface.html</filename>
    <member kind="function">
      <type></type>
      <name>store</name>
      <anchorfile>interfaceContracts_1_1StorerInterface.html</anchorfile>
      <anchor>a9a7a67d672296ee2fdcc3015383e9d7c</anchor>
      <arglist>($data, string $id=null)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Diff::Output::StrictUnifiedDiffOutputBuilder</name>
    <filename>classSebastianBergmann_1_1Diff_1_1Output_1_1StrictUnifiedDiffOutputBuilder.html</filename>
    <base>SebastianBergmann::Diff::Output::DiffOutputBuilderInterface</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Output_1_1StrictUnifiedDiffOutputBuilder.html</anchorfile>
      <anchor>a28125923baa68454c00127d9ef345371</anchor>
      <arglist>(array $options=[])</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getDiff</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Output_1_1StrictUnifiedDiffOutputBuilder.html</anchorfile>
      <anchor>aa9c0776df8dbf88bcc94308e6e2c7059</anchor>
      <arglist>(array $diff)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Diff::Output::StrictUnifiedDiffOutputBuilderDataProvider</name>
    <filename>classSebastianBergmann_1_1Diff_1_1Output_1_1StrictUnifiedDiffOutputBuilderDataProvider.html</filename>
    <member kind="function" static="yes">
      <type>static</type>
      <name>provideOutputBuildingCases</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Output_1_1StrictUnifiedDiffOutputBuilderDataProvider.html</anchorfile>
      <anchor>a239326227993e92aebc2b9492b9caa06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>provideSample</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Output_1_1StrictUnifiedDiffOutputBuilderDataProvider.html</anchorfile>
      <anchor>a903150c54545dc7116c077d05dda2fa6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>provideBasicDiffGeneration</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Output_1_1StrictUnifiedDiffOutputBuilderDataProvider.html</anchorfile>
      <anchor>ac43360c554ad199f4c2ad75302149646</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Diff::Output::StrictUnifiedDiffOutputBuilderIntegrationTest</name>
    <filename>classSebastianBergmann_1_1Diff_1_1Output_1_1StrictUnifiedDiffOutputBuilderIntegrationTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testIntegrationUsingPHPFileInVendorGitApply</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Output_1_1StrictUnifiedDiffOutputBuilderIntegrationTest.html</anchorfile>
      <anchor>a16538645251f4db1da5a4089c23b0ce2</anchor>
      <arglist>(string $fileFrom, string $fileTo)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIntegrationUsingPHPFileInVendorPatch</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Output_1_1StrictUnifiedDiffOutputBuilderIntegrationTest.html</anchorfile>
      <anchor>aaa99fb965bc38f0a431f540e9ae782dc</anchor>
      <arglist>(string $fileFrom, string $fileTo)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIntegrationOfUnitTestCasesGitApply</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Output_1_1StrictUnifiedDiffOutputBuilderIntegrationTest.html</anchorfile>
      <anchor>a323ecf8ce23cf3f3725af96381629ec2</anchor>
      <arglist>(string $expected, string $from, string $to)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIntegrationOfUnitTestCasesPatch</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Output_1_1StrictUnifiedDiffOutputBuilderIntegrationTest.html</anchorfile>
      <anchor>a266d9b45a0b8cccd544055c77c0d7dbd</anchor>
      <arglist>(string $expected, string $from, string $to)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>provideOutputBuildingCases</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Output_1_1StrictUnifiedDiffOutputBuilderIntegrationTest.html</anchorfile>
      <anchor>a46fff427f02d21758dd01c0fb4e4b4a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>provideSample</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Output_1_1StrictUnifiedDiffOutputBuilderIntegrationTest.html</anchorfile>
      <anchor>ab46c306f02e775aa8f10f02a775328fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>provideBasicDiffGeneration</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Output_1_1StrictUnifiedDiffOutputBuilderIntegrationTest.html</anchorfile>
      <anchor>a43313acecb57ca56eb9453990ed94f50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIntegrationDiffOutputBuilderVersusDiffCommand</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Output_1_1StrictUnifiedDiffOutputBuilderIntegrationTest.html</anchorfile>
      <anchor>ac3004fd690a54908338799f3ccd92a8d</anchor>
      <arglist>(string $diff, string $from, string $to)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Output_1_1StrictUnifiedDiffOutputBuilderIntegrationTest.html</anchorfile>
      <anchor>a0b4e94a863b0eb3db289dcd75c138301</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>tearDown</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Output_1_1StrictUnifiedDiffOutputBuilderIntegrationTest.html</anchorfile>
      <anchor>a83a550f4408b48cd71e480ee19cf95f9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Diff::Output::StrictUnifiedDiffOutputBuilderTest</name>
    <filename>classSebastianBergmann_1_1Diff_1_1Output_1_1StrictUnifiedDiffOutputBuilderTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testOutputBuilding</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Output_1_1StrictUnifiedDiffOutputBuilderTest.html</anchorfile>
      <anchor>a17570ab994c9fba86ecdc0276f830780</anchor>
      <arglist>(string $expected, string $from, string $to, array $options)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSample</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Output_1_1StrictUnifiedDiffOutputBuilderTest.html</anchorfile>
      <anchor>acec70d5218cf96a00dfd124025b17ea3</anchor>
      <arglist>(string $expected, string $from, string $to, array $options)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>assertValidDiffFormat</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Output_1_1StrictUnifiedDiffOutputBuilderTest.html</anchorfile>
      <anchor>a863e83fde1c1279cf18f8c6f2d440063</anchor>
      <arglist>(string $diff)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>provideOutputBuildingCases</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Output_1_1StrictUnifiedDiffOutputBuilderTest.html</anchorfile>
      <anchor>a6b068d9aef67a0a810b74b77510c6473</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>provideSample</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Output_1_1StrictUnifiedDiffOutputBuilderTest.html</anchorfile>
      <anchor>a99af77491eec2f39c98dae6e3a87363f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testBasicDiffGeneration</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Output_1_1StrictUnifiedDiffOutputBuilderTest.html</anchorfile>
      <anchor>a04a9af32936688ca63dce2a2c352ec77</anchor>
      <arglist>(string $expected, string $from, string $to)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>provideBasicDiffGeneration</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Output_1_1StrictUnifiedDiffOutputBuilderTest.html</anchorfile>
      <anchor>adb87e1683da63630e1930c39207d0399</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConfiguredDiffGeneration</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Output_1_1StrictUnifiedDiffOutputBuilderTest.html</anchorfile>
      <anchor>aa7259b60d6d41123e48cf3e55a4290a9</anchor>
      <arglist>(string $expected, string $from, string $to, array $config=[])</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>provideConfiguredDiffGeneration</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Output_1_1StrictUnifiedDiffOutputBuilderTest.html</anchorfile>
      <anchor>a7aaf55f94aa69e6e93854c1f4b66e9f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testReUseBuilder</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Output_1_1StrictUnifiedDiffOutputBuilderTest.html</anchorfile>
      <anchor>a546ad48d4be327382735c09747a59447</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testEmptyDiff</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Output_1_1StrictUnifiedDiffOutputBuilderTest.html</anchorfile>
      <anchor>ab330d43623f8b0b3baab2916bd4f07b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testInvalidConfiguration</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Output_1_1StrictUnifiedDiffOutputBuilderTest.html</anchorfile>
      <anchor>ae71b363b6abcf16e666d1f289d1d609a</anchor>
      <arglist>(array $options, string $message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>provideInvalidConfiguration</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Output_1_1StrictUnifiedDiffOutputBuilderTest.html</anchorfile>
      <anchor>ad498e1f55afd27fbf8b0f6e9a42b848d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCommonLineThreshold</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Output_1_1StrictUnifiedDiffOutputBuilderTest.html</anchorfile>
      <anchor>a0b3ddff8e3bb7b9d9fbd14cdf5e3b447</anchor>
      <arglist>(string $expected, string $from, string $to, int $threshold)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>provideCommonLineThresholdCases</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Output_1_1StrictUnifiedDiffOutputBuilderTest.html</anchorfile>
      <anchor>a4610cbd2b0da773d4b6b2d86e6b3d260</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testContextLineConfiguration</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Output_1_1StrictUnifiedDiffOutputBuilderTest.html</anchorfile>
      <anchor>a14fac17900c722d92892f866795dc88e</anchor>
      <arglist>(string $expected, string $from, string $to, int $contextLines, int $commonLineThreshold=6)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>provideContextLineConfigurationCases</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Output_1_1StrictUnifiedDiffOutputBuilderTest.html</anchorfile>
      <anchor>a39b0fc6e2ceabc75e2e9ac0449ff5f86</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::Types::String_</name>
    <filename>classphpDocumentor_1_1Reflection_1_1Types_1_1String__.html</filename>
    <base>phpDocumentor::Reflection::Type</base>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1String__.html</anchorfile>
      <anchor>aa9a8487df5dd47ead56141e516d1e69e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StringableClass</name>
    <filename>classStringableClass.html</filename>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classStringableClass.html</anchorfile>
      <anchor>a117181a50421a8b24e628ab69f9b7717</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::StringContains</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1StringContains.html</filename>
    <base>PHPUnit::Framework::Constraint::Constraint</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1StringContains.html</anchorfile>
      <anchor>a77a3bbe4426eee3350769b97f1146873</anchor>
      <arglist>(string $string, bool $ignoreCase=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1StringContains.html</anchorfile>
      <anchor>a5ff7d2422eae5ff1bd5a59490a9eca3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>matches</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1StringContains.html</anchorfile>
      <anchor>ae60276bab4a16eed90b7994f28c61cce</anchor>
      <arglist>($other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::StringContainsTest</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1StringContainsTest.html</filename>
    <base>PHPUnit::Framework::Constraint::ConstraintTestCase</base>
    <member kind="function">
      <type></type>
      <name>testConstraintStringContains</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1StringContainsTest.html</anchorfile>
      <anchor>a3709c274b26cb0d760587f9f1cab2a67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintStringContainsWhenIgnoreCase</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1StringContainsTest.html</anchorfile>
      <anchor>a80e051a7104d4b650e8f62477475ebf6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintStringContainsForUtf8StringWhenNotIgnoreCase</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1StringContainsTest.html</anchorfile>
      <anchor>a6a6a8e3ca164dd94d555057daf9a596e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintStringContains2</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1StringContainsTest.html</anchorfile>
      <anchor>adae9bdf8c33f108e3badc159930f4c99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testEvaluateEmptyStringInFoo</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1StringContainsTest.html</anchorfile>
      <anchor>aa0f9eb54328f25d69ff04195753c7fa3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Argument::Token::StringContainsToken</name>
    <filename>classProphecy_1_1Argument_1_1Token_1_1StringContainsToken.html</filename>
    <base>Prophecy::Argument::Token::TokenInterface</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1StringContainsToken.html</anchorfile>
      <anchor>a70947b42427a63015085c3379e8e37d8</anchor>
      <arglist>($value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>scoreArgument</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1StringContainsToken.html</anchorfile>
      <anchor>aaec5dc68d8c5f27ae4fb58c8334a0864</anchor>
      <arglist>($argument)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getValue</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1StringContainsToken.html</anchorfile>
      <anchor>aa45764a69dd0fb0b7958ee5515af73f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isLast</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1StringContainsToken.html</anchorfile>
      <anchor>a1f705579d51605fa26ea60644065b2e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1StringContainsToken.html</anchorfile>
      <anchor>adbc48e1f03813dee5d23904d729eeef8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::StringEndsWith</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1StringEndsWith.html</filename>
    <base>PHPUnit::Framework::Constraint::Constraint</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1StringEndsWith.html</anchorfile>
      <anchor>afc1ae8961159d6ee5aa419115cc08404</anchor>
      <arglist>(string $suffix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1StringEndsWith.html</anchorfile>
      <anchor>a46ec91a77a6726de68731a24c7b84a55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>matches</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1StringEndsWith.html</anchorfile>
      <anchor>ae6b8f1adaa482788e0feaa453642bb54</anchor>
      <arglist>($other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::StringEndsWithTest</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1StringEndsWithTest.html</filename>
    <base>PHPUnit::Framework::Constraint::ConstraintTestCase</base>
    <member kind="function">
      <type></type>
      <name>testConstraintStringEndsWithCorrectValueAndReturnResult</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1StringEndsWithTest.html</anchorfile>
      <anchor>a8861d3f80f920c43399555238f0fe5b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintStringEndsWithNotCorrectValueAndReturnResult</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1StringEndsWithTest.html</anchorfile>
      <anchor>add52baa3806261efba9b766d83c57d05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintStringEndsWithCorrectNumericValueAndReturnResult</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1StringEndsWithTest.html</anchorfile>
      <anchor>a8f385dd4a1717c1a89cc9f26a0340720</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintStringEndsWithNotCorrectNumericValueAndReturnResult</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1StringEndsWithTest.html</anchorfile>
      <anchor>a9e0546a866ad5467b26240e9d9fb69c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintStringEndsWithToStringMethod</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1StringEndsWithTest.html</anchorfile>
      <anchor>af3c03fbe2de6668d00a53086fb0f8e4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintStringEndsWithCountMethod</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1StringEndsWithTest.html</anchorfile>
      <anchor>a28aaf0a0ea3853d45f2916da0d997d73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintStringEndsWithNotCorrectValueAndExpectation</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1StringEndsWithTest.html</anchorfile>
      <anchor>ad2c9d02b6199b2f72c46884317119d18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintStringEndsWithNotCorrectValueExceptionAndCustomMessage</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1StringEndsWithTest.html</anchorfile>
      <anchor>afb10521f3e2f072ff464426fa482c9f8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::StringMatchesFormatDescription</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1StringMatchesFormatDescription.html</filename>
    <base>PHPUnit::Framework::Constraint::RegularExpression</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1StringMatchesFormatDescription.html</anchorfile>
      <anchor>a59c3b1f56ee29514b2726ea82063994f</anchor>
      <arglist>(string $string)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>matches</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1StringMatchesFormatDescription.html</anchorfile>
      <anchor>a828c949adc15cb99b6e5e95544fe6d34</anchor>
      <arglist>($other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>failureDescription</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1StringMatchesFormatDescription.html</anchorfile>
      <anchor>a9c673f5a7f03848a96872c49ee9750b4</anchor>
      <arglist>($other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>additionalFailureDescription</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1StringMatchesFormatDescription.html</anchorfile>
      <anchor>aab9be1a59542a1b91ead052d01f09b04</anchor>
      <arglist>($other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::StringMatchesFormatDescriptionTest</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1StringMatchesFormatDescriptionTest.html</filename>
    <base>PHPUnit::Framework::Constraint::ConstraintTestCase</base>
    <member kind="function">
      <type></type>
      <name>testConstraintStringMatchesDirectorySeparator</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1StringMatchesFormatDescriptionTest.html</anchorfile>
      <anchor>a7e8d570eed13eff811827f2b3020e386</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintStringMatchesString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1StringMatchesFormatDescriptionTest.html</anchorfile>
      <anchor>abcf9d5fad6c9578be6e74084db0ec2ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintStringMatchesOptionalString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1StringMatchesFormatDescriptionTest.html</anchorfile>
      <anchor>ac5b7f0a0248874795764e143b4dd3275</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintStringMatchesAnything</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1StringMatchesFormatDescriptionTest.html</anchorfile>
      <anchor>ab9a78ea8189b7508f52d0b2af287648a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintStringMatchesOptionalAnything</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1StringMatchesFormatDescriptionTest.html</anchorfile>
      <anchor>a3a164b9978addfa7d8f73688638dbce8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintStringMatchesWhitespace</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1StringMatchesFormatDescriptionTest.html</anchorfile>
      <anchor>aa0d88eef3cd6cae39d6fd1514fde97ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintStringMatchesInteger</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1StringMatchesFormatDescriptionTest.html</anchorfile>
      <anchor>ac21137e48e409eb228c5d770f4ef3a14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintStringMatchesUnsignedInt</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1StringMatchesFormatDescriptionTest.html</anchorfile>
      <anchor>a84a49b3d111cf917e9dee7f9d9a71ad0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintStringMatchesHexadecimal</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1StringMatchesFormatDescriptionTest.html</anchorfile>
      <anchor>aa84ecb7ed140feb8cf01d43be6ef6abb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintStringMatchesFloat</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1StringMatchesFormatDescriptionTest.html</anchorfile>
      <anchor>a3f75dd4e2f43bc7176788cc02718e772</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintStringMatchesCharacter</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1StringMatchesFormatDescriptionTest.html</anchorfile>
      <anchor>a463febdd12390785efeff101d18109de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintStringMatchesEscapedPercent</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1StringMatchesFormatDescriptionTest.html</anchorfile>
      <anchor>ac12e352ced6ab2adc6f350c98c9be906</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintStringMatchesEscapedPercentThenPlaceholder</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1StringMatchesFormatDescriptionTest.html</anchorfile>
      <anchor>a93d9124c2e98b2ad3c8711b87b637b90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintStringMatchesSlash</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1StringMatchesFormatDescriptionTest.html</anchorfile>
      <anchor>ab9a859c6abbcfe943daf0976782e162a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintStringMatchesBackslash</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1StringMatchesFormatDescriptionTest.html</anchorfile>
      <anchor>adefba85ebe9a549520c0c4ec7d93443f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintStringMatchesBackslashSlash</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1StringMatchesFormatDescriptionTest.html</anchorfile>
      <anchor>a167dfd60523de6134ab7140572d08cf9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintStringMatchesNewline</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1StringMatchesFormatDescriptionTest.html</anchorfile>
      <anchor>a2762bc6cdc33b7868531e6f33c07c3ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFailureMessageWithNewlines</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1StringMatchesFormatDescriptionTest.html</anchorfile>
      <anchor>ac002c03d324dab950aa8fb723346b2fa</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::StringStartsWith</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1StringStartsWith.html</filename>
    <base>PHPUnit::Framework::Constraint::Constraint</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1StringStartsWith.html</anchorfile>
      <anchor>a80ffdeae13c6839f0e7caf94dc56e705</anchor>
      <arglist>(string $prefix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1StringStartsWith.html</anchorfile>
      <anchor>a3e6da4955418a3662ad5eab7d1976b1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>matches</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1StringStartsWith.html</anchorfile>
      <anchor>a5c51240abc2a9efb23983acf86bb88af</anchor>
      <arglist>($other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::StringStartsWithTest</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1StringStartsWithTest.html</filename>
    <base>PHPUnit::Framework::Constraint::ConstraintTestCase</base>
    <member kind="function">
      <type></type>
      <name>testConstraintStringStartsWithCorrectValueAndReturnResult</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1StringStartsWithTest.html</anchorfile>
      <anchor>a77067136deb993f6049c32c7f189942b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintStringStartsWithNotCorrectValueAndReturnResult</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1StringStartsWithTest.html</anchorfile>
      <anchor>a5dcd70bbee62ba7797d2d9b772304c97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintStringStartsWithCorrectNumericValueAndReturnResult</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1StringStartsWithTest.html</anchorfile>
      <anchor>a63b99ebd27e39e31d2bf733c5a2bd130</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintStringStartsWithCorrectSingleZeroAndReturnResult</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1StringStartsWithTest.html</anchorfile>
      <anchor>a4e052171104b2a7c67cd0d39cf8576eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintStringStartsWithNotCorrectNumericValueAndReturnResult</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1StringStartsWithTest.html</anchorfile>
      <anchor>a59f7da1c214f41ac2ec85af80a9620e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintStringStartsWithToStringMethod</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1StringStartsWithTest.html</anchorfile>
      <anchor>a5d914725feef30d90243d0fd89487353</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintStringStartsWitCountMethod</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1StringStartsWithTest.html</anchorfile>
      <anchor>a90e4c3db1a0f0fa86d47de686129378c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintStringStartsWithNotCorrectValueAndExpectation</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1StringStartsWithTest.html</anchorfile>
      <anchor>a8eb1789e4c63affb1bc25fd6f7a63808</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintStringStartsWithNotCorrectValueExceptionAndCustomMessage</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1StringStartsWithTest.html</anchorfile>
      <anchor>a9bb84f5500ebc9b84e62e4390b2afb74</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Util::StringUtil</name>
    <filename>classProphecy_1_1Util_1_1StringUtil.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classProphecy_1_1Util_1_1StringUtil.html</anchorfile>
      <anchor>a52ad9255c6064be4cceac985013ecd44</anchor>
      <arglist>($verbose=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>stringify</name>
      <anchorfile>classProphecy_1_1Util_1_1StringUtil.html</anchorfile>
      <anchor>a308f85315c678e1bd119aab63aa4f707</anchor>
      <arglist>($value, $exportObject=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>stringifyCalls</name>
      <anchorfile>classProphecy_1_1Util_1_1StringUtil.html</anchorfile>
      <anchor>ad1d62aaef27c5ddefb7158eb5908eca4</anchor>
      <arglist>(array $calls)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Struct</name>
    <filename>classStruct.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classStruct.html</anchorfile>
      <anchor>a2bc4097359ff8d2c19abae912dd05d42</anchor>
      <arglist>($var)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$var</name>
      <anchorfile>classStruct.html</anchorfile>
      <anchor>a4e58905d313d4f12e646e0a47c747070</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Comparator::Struct</name>
    <filename>classSebastianBergmann_1_1Comparator_1_1Struct.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1Struct.html</anchorfile>
      <anchor>a8744c9b81f21cbe91ac4ba78560cd652</anchor>
      <arglist>($var)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$var</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1Struct.html</anchorfile>
      <anchor>a94622d8155a56906fc36552a52e6fb7b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>PHPUnit::Framework::MockObject::Builder::Stub</name>
    <filename>interfacePHPUnit_1_1Framework_1_1MockObject_1_1Builder_1_1Stub.html</filename>
    <base>PHPUnit::Framework::MockObject::Builder::Identity</base>
    <member kind="function">
      <type></type>
      <name>will</name>
      <anchorfile>interfacePHPUnit_1_1Framework_1_1MockObject_1_1Builder_1_1Stub.html</anchorfile>
      <anchor>a6bb95ae7f628b05970747ba9051099bc</anchor>
      <arglist>(BaseStub $stub)</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>PHPUnit::Framework::MockObject::Stub::Stub</name>
    <filename>interfacePHPUnit_1_1Framework_1_1MockObject_1_1Stub_1_1Stub.html</filename>
    <base>PHPUnit::Framework::SelfDescribing</base>
    <member kind="function">
      <type></type>
      <name>invoke</name>
      <anchorfile>interfacePHPUnit_1_1Framework_1_1MockObject_1_1Stub_1_1Stub.html</anchorfile>
      <anchor>a244cd82a00c605b8387776de413a5a99</anchor>
      <arglist>(Invocation $invocation)</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>PHPUnit::Framework::MockObject::Stub</name>
    <filename>interfacePHPUnit_1_1Framework_1_1MockObject_1_1Stub.html</filename>
    <member kind="function">
      <type></type>
      <name>__phpunit_getInvocationHandler</name>
      <anchorfile>interfacePHPUnit_1_1Framework_1_1MockObject_1_1Stub.html</anchorfile>
      <anchor>ae198d5e43077e5c800bec510acae773b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__phpunit_hasMatchers</name>
      <anchorfile>interfacePHPUnit_1_1Framework_1_1MockObject_1_1Stub.html</anchorfile>
      <anchor>ae7b38673ffe8ea833a8ae334c9f6e2c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__phpunit_setReturnValueGeneration</name>
      <anchorfile>interfacePHPUnit_1_1Framework_1_1MockObject_1_1Stub.html</anchorfile>
      <anchor>a2baee2f665014aced15f33e19e32c0cc</anchor>
      <arglist>(bool $returnValueGeneration)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Success</name>
    <filename>classSuccess.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>runTest</name>
      <anchorfile>classSuccess.html</anchorfile>
      <anchor>a27d4fe28e0843ef723ed73bdfeee1b87</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::SyntheticError</name>
    <filename>classPHPUnit_1_1Framework_1_1SyntheticError.html</filename>
    <base>PHPUnit::Framework::AssertionFailedError</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1SyntheticError.html</anchorfile>
      <anchor>a8f9c2f33d230ee2f3ba26e9080bc9c00</anchor>
      <arglist>(string $message, int $code, string $file, int $line, array $trace)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getSyntheticFile</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1SyntheticError.html</anchorfile>
      <anchor>a2a6eea6fdee58b0c7f45d6a06acabf31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getSyntheticLine</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1SyntheticError.html</anchorfile>
      <anchor>ac53b214c3c33e034e8b3dbbadc1dd32c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getSyntheticTrace</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1SyntheticError.html</anchorfile>
      <anchor>ad98beac7e7861a13af8083fe2b1a0ae3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$syntheticFile</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1SyntheticError.html</anchorfile>
      <anchor>a980b5c650a90b1f1eaa281da6d71a3eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$syntheticLine</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1SyntheticError.html</anchorfile>
      <anchor>aee01569eee0ddae2f12f77181ab78980</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$syntheticTrace</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1SyntheticError.html</anchorfile>
      <anchor>ae5fa91d2948db440f3c7091b78b52596</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::SyntheticSkippedError</name>
    <filename>classPHPUnit_1_1Framework_1_1SyntheticSkippedError.html</filename>
    <base>PHPUnit::Framework::SyntheticError</base>
    <base>PHPUnit::Framework::SkippedTest</base>
  </compound>
  <compound kind="interface">
    <name>phpDocumentor::Reflection::DocBlock::Tag</name>
    <filename>interfacephpDocumentor_1_1Reflection_1_1DocBlock_1_1Tag.html</filename>
    <member kind="function">
      <type></type>
      <name>getName</name>
      <anchorfile>interfacephpDocumentor_1_1Reflection_1_1DocBlock_1_1Tag.html</anchorfile>
      <anchor>a85e02162c858bc22afc666f8dca5c76b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>render</name>
      <anchorfile>interfacephpDocumentor_1_1Reflection_1_1DocBlock_1_1Tag.html</anchorfile>
      <anchor>affb61e61bc22e67392d185f291460b95</anchor>
      <arglist>(?Formatter $formatter=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>interfacephpDocumentor_1_1Reflection_1_1DocBlock_1_1Tag.html</anchorfile>
      <anchor>a7ca549b1efe067e329c77924fb4befb2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>create</name>
      <anchorfile>interfacephpDocumentor_1_1Reflection_1_1DocBlock_1_1Tag.html</anchorfile>
      <anchor>af4944901112a214659dbf23da21be2b4</anchor>
      <arglist>(string $body)</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>phpDocumentor::Reflection::DocBlock::TagFactory</name>
    <filename>interfacephpDocumentor_1_1Reflection_1_1DocBlock_1_1TagFactory.html</filename>
    <member kind="function">
      <type></type>
      <name>addParameter</name>
      <anchorfile>interfacephpDocumentor_1_1Reflection_1_1DocBlock_1_1TagFactory.html</anchorfile>
      <anchor>acc7c958e07debb97d26cc049ed6039b1</anchor>
      <arglist>(string $name, $value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>create</name>
      <anchorfile>interfacephpDocumentor_1_1Reflection_1_1DocBlock_1_1TagFactory.html</anchorfile>
      <anchor>a125d833a4bed2bdf1ddb2a537f8e49ea</anchor>
      <arglist>(string $tagLine, ?TypeContext $context=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addService</name>
      <anchorfile>interfacephpDocumentor_1_1Reflection_1_1DocBlock_1_1TagFactory.html</anchorfile>
      <anchor>afd98761a6a53bb6b62770f279d0b6eaf</anchor>
      <arglist>(object $service)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>registerTagHandler</name>
      <anchorfile>interfacephpDocumentor_1_1Reflection_1_1DocBlock_1_1TagFactory.html</anchorfile>
      <anchor>a833822d9b073b50a305bffbba6edcec8</anchor>
      <arglist>(string $tagName, string $handler)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocBlock::Tags::TagWithType</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1TagWithType.html</filename>
    <base>phpDocumentor::Reflection::DocBlock::Tags::BaseTag</base>
    <member kind="function">
      <type></type>
      <name>getType</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1TagWithType.html</anchorfile>
      <anchor>a79f3dc48e9a52fcd7f34d0ac325119da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static</type>
      <name>extractTypeFromBody</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1TagWithType.html</anchorfile>
      <anchor>a18acfc1ff297ad4a386190d2db6b9171</anchor>
      <arglist>(string $body)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$type</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1TagWithType.html</anchorfile>
      <anchor>a60c7a4652f7906bf1b8d55a7947df377</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Util::Log::TeamCity</name>
    <filename>classPHPUnit_1_1Util_1_1Log_1_1TeamCity.html</filename>
    <base>PHPUnit::TextUI::ResultPrinter</base>
    <member kind="function">
      <type></type>
      <name>printResult</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Log_1_1TeamCity.html</anchorfile>
      <anchor>a755b34bc61b5d8b48da3532ac0acf6cc</anchor>
      <arglist>(TestResult $result)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addError</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Log_1_1TeamCity.html</anchorfile>
      <anchor>abddec947cc76df7d873a13674cbdfbbc</anchor>
      <arglist>(Test $test, \Throwable $t, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addWarning</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Log_1_1TeamCity.html</anchorfile>
      <anchor>ad764703bd898db659160306fa7fc91d1</anchor>
      <arglist>(Test $test, Warning $e, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addFailure</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Log_1_1TeamCity.html</anchorfile>
      <anchor>ae2899b27e29a6f28344c7fc8ef0a8f1f</anchor>
      <arglist>(Test $test, AssertionFailedError $e, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addIncompleteTest</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Log_1_1TeamCity.html</anchorfile>
      <anchor>a3563bb427c8e44e1ee444ee4c5cdec88</anchor>
      <arglist>(Test $test, \Throwable $t, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addRiskyTest</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Log_1_1TeamCity.html</anchorfile>
      <anchor>aebd3d8ff6eb38ec2bab1ecf51ab97fc8</anchor>
      <arglist>(Test $test, \Throwable $t, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addSkippedTest</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Log_1_1TeamCity.html</anchorfile>
      <anchor>a1cfeb6158aae039db6be6b13ddbb25c4</anchor>
      <arglist>(Test $test, \Throwable $t, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>printIgnoredTest</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Log_1_1TeamCity.html</anchorfile>
      <anchor>a16130cb5e14da22f307d97331d90a7cf</anchor>
      <arglist>($testName, \Throwable $t, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>startTestSuite</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Log_1_1TeamCity.html</anchorfile>
      <anchor>af969e2848a45af5790773752330597a8</anchor>
      <arglist>(TestSuite $suite)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>endTestSuite</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Log_1_1TeamCity.html</anchorfile>
      <anchor>af092260ff8ecf4b2e0ac5177be63eb2c</anchor>
      <arglist>(TestSuite $suite)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>startTest</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Log_1_1TeamCity.html</anchorfile>
      <anchor>a74311be91f0852860e2727f74bececb1</anchor>
      <arglist>(Test $test)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>endTest</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Log_1_1TeamCity.html</anchorfile>
      <anchor>a62e58b52476b3a9d42efe6b6ef3e888d</anchor>
      <arglist>(Test $test, float $time)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>writeProgress</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Log_1_1TeamCity.html</anchorfile>
      <anchor>adafc34dac708ac190e3d6c6b301bc5a8</anchor>
      <arglist>(string $progress)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::SelfTest::Basic::TearDownAfterClassTest</name>
    <filename>classPHPUnit_1_1SelfTest_1_1Basic_1_1TearDownAfterClassTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testOne</name>
      <anchorfile>classPHPUnit_1_1SelfTest_1_1Basic_1_1TearDownAfterClassTest.html</anchorfile>
      <anchor>a6fc1ca24aaea8245293b7a2464832780</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTwo</name>
      <anchorfile>classPHPUnit_1_1SelfTest_1_1Basic_1_1TearDownAfterClassTest.html</anchorfile>
      <anchor>a4de29decdbf385d8c27906714ba1f14d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>tearDownAfterClass</name>
      <anchorfile>classPHPUnit_1_1SelfTest_1_1Basic_1_1TearDownAfterClassTest.html</anchorfile>
      <anchor>a4d2cfa01ae0febd6d74b5f386e1dadeb</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateMethodsTest</name>
    <filename>classTemplateMethodsTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testOne</name>
      <anchorfile>classTemplateMethodsTest.html</anchorfile>
      <anchor>abe90e832e705bc178af712e18a2b5521</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTwo</name>
      <anchorfile>classTemplateMethodsTest.html</anchorfile>
      <anchor>a0d88095d3bf378ae26446f855abd664f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>setUpBeforeClass</name>
      <anchorfile>classTemplateMethodsTest.html</anchorfile>
      <anchor>a88053bdf82342198f2029db9de3e282d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>tearDownAfterClass</name>
      <anchorfile>classTemplateMethodsTest.html</anchorfile>
      <anchor>a03f9e01dae65e8f782d00ee6382a70af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classTemplateMethodsTest.html</anchorfile>
      <anchor>a2df0c04b90b3cb7ba10231253a54226e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>tearDown</name>
      <anchorfile>classTemplateMethodsTest.html</anchorfile>
      <anchor>af65d83054b9756089218f7143884cd2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>assertPreConditions</name>
      <anchorfile>classTemplateMethodsTest.html</anchorfile>
      <anchor>a3e58cc9b6d284ab61a63fe0d2043fcde</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>assertPostConditions</name>
      <anchorfile>classTemplateMethodsTest.html</anchorfile>
      <anchor>a8f15139f07fe1782ca15cbbb89396bef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>onNotSuccessfulTest</name>
      <anchorfile>classTemplateMethodsTest.html</anchorfile>
      <anchor>adaa5f3fe6f205fb1bb1c4e4d048b12a7</anchor>
      <arglist>(Throwable $t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Util::Test</name>
    <filename>classPHPUnit_1_1Util_1_1Test.html</filename>
    <member kind="function" static="yes">
      <type>static</type>
      <name>describe</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Test.html</anchorfile>
      <anchor>ab1443222cc0690884d79f978b0718bf0</anchor>
      <arglist>(\PHPUnit\Framework\Test $test)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>describeAsString</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Test.html</anchorfile>
      <anchor>a2fd853fcbf80f460236f3fb53fe25084</anchor>
      <arglist>(\PHPUnit\Framework\Test $test)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>getLinesToBeCovered</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Test.html</anchorfile>
      <anchor>a5152bb7d35614180b68acf0bfb6d7f3f</anchor>
      <arglist>(string $className, string $methodName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>getLinesToBeUsed</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Test.html</anchorfile>
      <anchor>a4e04b002be18246ad3d7307038adf667</anchor>
      <arglist>(string $className, string $methodName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>requiresCodeCoverageDataCollection</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Test.html</anchorfile>
      <anchor>af12bd78959b67a09ba7fe9a0393c6d96</anchor>
      <arglist>(TestCase $test)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>getRequirements</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Test.html</anchorfile>
      <anchor>a9ed6958f85d4394b1cd3d0057383d3d8</anchor>
      <arglist>(string $className, string $methodName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>getMissingRequirements</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Test.html</anchorfile>
      <anchor>ab34b4e690d784f54da95d7f6100bf0d1</anchor>
      <arglist>(string $className, string $methodName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>getExpectedException</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Test.html</anchorfile>
      <anchor>ad864847b9de07f4bd37281d9886fde70</anchor>
      <arglist>(string $className, string $methodName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>getProvidedData</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Test.html</anchorfile>
      <anchor>aa2b8484c6e3e7b20346e63e9cf486038</anchor>
      <arglist>(string $className, string $methodName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>parseTestMethodAnnotations</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Test.html</anchorfile>
      <anchor>a832dc627712dc9b5c5200c54e8471e73</anchor>
      <arglist>(string $className, ?string $methodName=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>getInlineAnnotations</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Test.html</anchorfile>
      <anchor>a2551c3d6498a09e0a44da3a97c144efa</anchor>
      <arglist>(string $className, string $methodName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>getBackupSettings</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Test.html</anchorfile>
      <anchor>a6f41a993597a37d79b3ea0b56826b2cf</anchor>
      <arglist>(string $className, string $methodName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>getDependencies</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Test.html</anchorfile>
      <anchor>ada3146c91563f615fefac0906a77c8d0</anchor>
      <arglist>(string $className, string $methodName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>getGroups</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Test.html</anchorfile>
      <anchor>aa548246e34d9bcbd07ac0b49bbf0170f</anchor>
      <arglist>(string $className, ?string $methodName=&apos;&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>getSize</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Test.html</anchorfile>
      <anchor>acc42eab9558c1b0367686e135f909404</anchor>
      <arglist>(string $className, ?string $methodName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>getProcessIsolationSettings</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Test.html</anchorfile>
      <anchor>ae9ec2fa62c59091d2d8687d8e59790df</anchor>
      <arglist>(string $className, string $methodName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>getClassProcessIsolationSettings</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Test.html</anchorfile>
      <anchor>aaef9ed7ae3c5eb2f5d077267fd9137fd</anchor>
      <arglist>(string $className, string $methodName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>getPreserveGlobalStateSettings</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Test.html</anchorfile>
      <anchor>af51bf540ab1b394c323c7b869f3c7ce4</anchor>
      <arglist>(string $className, string $methodName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>getHookMethods</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Test.html</anchorfile>
      <anchor>a528a2bab39a07cb9c64d2a2b26aa2d26</anchor>
      <arglist>(string $className)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>isTestMethod</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Test.html</anchorfile>
      <anchor>afeb96ce890e6b0ec0c6f2be6f33c0a29</anchor>
      <arglist>(\ReflectionMethod $method)</arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>UNKNOWN</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Test.html</anchorfile>
      <anchor>a6dbb34fcc92371d9ba077229210b4605</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>SMALL</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Test.html</anchorfile>
      <anchor>aa1ed4df0ec137597fa41337cae7ea334</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>MEDIUM</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Test.html</anchorfile>
      <anchor>abd249c14257fca019b2986b1362436cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>LARGE</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Test.html</anchorfile>
      <anchor>aee750ab9ef30db1fcdb418fec2330c24</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>PHPUnit::Framework::Test</name>
    <filename>interfacePHPUnit_1_1Framework_1_1Test.html</filename>
    <member kind="function">
      <type></type>
      <name>run</name>
      <anchorfile>interfacePHPUnit_1_1Framework_1_1Test.html</anchorfile>
      <anchor>a304f81d4303069b4f5776b05957c2b80</anchor>
      <arglist>(TestResult $result=null)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Test</name>
    <filename>classTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <class kind="class">Test::Issue3156Test</class>
    <class kind="class">Test::Issue3379Test</class>
    <member kind="function">
      <type></type>
      <name>methodOne</name>
      <anchorfile>classTest.html</anchorfile>
      <anchor>adc31b1e3abcbbd0c4ba0fe593113f7b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>methodTwo</name>
      <anchorfile>classTest.html</anchorfile>
      <anchor>a6f57b34b7ad7e0e1fe69b94626f7d547</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testOne</name>
      <anchorfile>classTest.html</anchorfile>
      <anchor>a391ef3f54cf1d833d2ed9d65ad45ce2e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Util::TestDox::TestableCliTestDoxPrinter</name>
    <filename>classPHPUnit_1_1Util_1_1TestDox_1_1TestableCliTestDoxPrinter.html</filename>
    <base>PHPUnit::Util::TestDox::CliTestDoxPrinter</base>
    <member kind="function">
      <type></type>
      <name>write</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1TestableCliTestDoxPrinter.html</anchorfile>
      <anchor>a46cd4a7a9bb73099f067db1d6601fee8</anchor>
      <arglist>(string $text)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getBuffer</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1TestableCliTestDoxPrinter.html</anchorfile>
      <anchor>ab48c3523e3b763ac5232dd75873d21af</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestAutoreferenced</name>
    <filename>classTestAutoreferenced.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testJsonEncodeException</name>
      <anchorfile>classTestAutoreferenced.html</anchorfile>
      <anchor>add21b4371c5969210ca99c92fa6d32f9</anchor>
      <arglist>($data)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$myTestData</name>
      <anchorfile>classTestAutoreferenced.html</anchorfile>
      <anchor>a55c2f39ba36ea29036aed292c995098a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::TestBuilder</name>
    <filename>classPHPUnit_1_1Framework_1_1TestBuilder.html</filename>
    <member kind="function">
      <type></type>
      <name>build</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestBuilder.html</anchorfile>
      <anchor>a168a1069fa7551b9134965293172d3f9</anchor>
      <arglist>(\ReflectionClass $theClass, string $methodName)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::TestBuilderTest</name>
    <filename>classPHPUnit_1_1Framework_1_1TestBuilderTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testCreateTestForConstructorlessTestClass</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestBuilderTest.html</anchorfile>
      <anchor>a3ed87101018ab4db82e2e50392bac783</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCreateTestForNotInstantiableTestClass</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestBuilderTest.html</anchorfile>
      <anchor>a8cca1dee53a115bc037dde69938ff4fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCreateTestForTestClassWithModifiedConstructor</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestBuilderTest.html</anchorfile>
      <anchor>a487af9fd726098f17cacf1169f4aaa41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCreateWithEmptyData</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestBuilderTest.html</anchorfile>
      <anchor>a8e5fda490ce87b71903d67f655055758</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testWithAnnotations</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestBuilderTest.html</anchorfile>
      <anchor>af2dd62f6199fa9519cee100b147498b8</anchor>
      <arglist>(string $methodName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>provideWithAnnotations</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestBuilderTest.html</anchorfile>
      <anchor>ad4a65c2f43bdc71e21c7276bd482338c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testWithAnnotationsAndDataProvider</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestBuilderTest.html</anchorfile>
      <anchor>a6cd759ece5991fd8209c10bf7680f957</anchor>
      <arglist>(string $methodName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>provideWithAnnotationsAndDataProvider</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestBuilderTest.html</anchorfile>
      <anchor>a681104c1ca6898399d32bd1cb5a58179</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::TestCase</name>
    <filename>classPHPUnit_1_1Framework_1_1TestCase.html</filename>
    <base>PHPUnit::Framework::Assert</base>
    <base>PHPUnit::Framework::SelfDescribing</base>
    <base>PHPUnit::Framework::Test</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a85356e2a1e683cd7ba0a38b547724e76</anchor>
      <arglist>($name=null, array $data=[], $dataName=&apos;&apos;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a493a58e64300df066c340b16a76d3ce8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>count</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a2a0324e6d4e05341ab432505cafee28b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getActualOutputForAssertion</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>ad9727167234d04d55bde25ba25e99011</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>expectOutputRegex</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a3cd5b05394d4d573e0cd1374f094ee70</anchor>
      <arglist>(string $expectedRegex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>expectOutputString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>ae16f31243f8360f47be5f6719c5b7ef6</anchor>
      <arglist>(string $expectedString)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>expectException</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a108907b67a856404f24f6e1b9af0b4cd</anchor>
      <arglist>(string $exception)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>expectExceptionCode</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a9474c249d4ac4cadf473ce9f06adbac4</anchor>
      <arglist>($code)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>expectExceptionMessage</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a10c1e80783eebe8dd26315941bf68a8b</anchor>
      <arglist>(string $message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>expectExceptionMessageMatches</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>aaa55cc3cd9726452c3db709bfa46e861</anchor>
      <arglist>(string $regularExpression)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>expectExceptionMessageRegExp</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>afc8624c91e8bafa5b90e5dacc3f7594a</anchor>
      <arglist>(string $regularExpression)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>expectExceptionObject</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>aeed7e3317160b4007b4c1fdd25e2b7a8</anchor>
      <arglist>(\Exception $exception)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>expectNotToPerformAssertions</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>ab3ed0064980345a01d611cce92347b78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>expectDeprecation</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>ad33ed031835cef08d297dff182f09048</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>expectDeprecationMessage</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>aa3c18ceeb28308d6d4bbb82fa5edcd99</anchor>
      <arglist>(string $message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>expectDeprecationMessageMatches</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a22e9b6e2e1b0a1fcb0e50a80acceae88</anchor>
      <arglist>(string $regularExpression)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>expectNotice</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a22532200327956836a97e50df5ba8809</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>expectNoticeMessage</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a2a01a0c8ca821abd6caeaedc63119624</anchor>
      <arglist>(string $message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>expectNoticeMessageMatches</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>ae2b5f617f43a16fde7672ce28cc37fc1</anchor>
      <arglist>(string $regularExpression)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>expectWarning</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>ad137c2d50d6a87b3b1dcb269c5dc881c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>expectWarningMessage</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>af7b223e23c70bb8f059f5c6ac3761d9e</anchor>
      <arglist>(string $message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>expectWarningMessageMatches</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a902f7fa53b6b51d52c44877c4871089b</anchor>
      <arglist>(string $regularExpression)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>expectError</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a681628df9339001967dff48e61c2471f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>expectErrorMessage</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a7fd56100a7b5bb8b18aa0aa50df975cb</anchor>
      <arglist>(string $message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>expectErrorMessageMatches</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a003dea6b0de5a254b65aeaff40d51c3a</anchor>
      <arglist>(string $regularExpression)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getStatus</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a356d044d255605cd89596d098023a537</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>markAsRisky</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>aa1c8967de50be5f5cad9116434fd44aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getStatusMessage</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a886a87365e86ca538b3e8a55509553e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>hasFailed</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a46c8ea618fdf84ecb310dd577e9550ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>run</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a48f28435ad800ae83cf6f42fb3b45e20</anchor>
      <arglist>(TestResult $result=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getMockBuilder</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>ac674d1a02570dddf0e671f9c20c9ca8e</anchor>
      <arglist>($className)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>registerComparator</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a9afa48c37787f488105208293d4a66d5</anchor>
      <arglist>(Comparator $comparator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setUseErrorHandler</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a05c69ec338eaf45c7741f4f30c86c2d0</anchor>
      <arglist>(bool $useErrorHandler)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>doubledTypes</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a063edbf60baf5a95905e0b8f2787fa33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getGroups</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a7c341e5068fecccf5dce9d9e62729985</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setGroups</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a950428bfe27ea454b74443e49fbff71a</anchor>
      <arglist>(array $groups)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getAnnotations</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>ab9d3c7fc94bc6c6c4f8d1ba69a3f95e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getName</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a94cf0c1cd94b530e2bd9d75dced1525b</anchor>
      <arglist>(bool $withDataSet=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getSize</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>ab47efad58c28f6ebf52c826a0dd6204b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>hasSize</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a0c51897370f928cdd4d052cf3548282e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isSmall</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a5aff8fc575fd0b107fe8f84fcad701c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isMedium</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a818d091735c4a326a7a9f02da8d92499</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isLarge</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a6f5f8c6d9aa19a0c3a22a2288eaff28a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getActualOutput</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a71650e920a90702cc171618a52d7ebbb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>hasOutput</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a2038246b9d56e8d798767b413b5c823f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>doesNotPerformAssertions</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>adac826af9453e2622f8197c6943bbef5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>hasExpectationOnOutput</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>abf7ca82ead7899adc4e04a69d1ecf0a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getExpectedException</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a2536c153cfcf45ca6cbb915002aba5c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getExpectedExceptionCode</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a66114feda2a4fdf2dccf3cb9f487f088</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getExpectedExceptionMessage</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a497bd51d53d629e29a8fe0f9f1237c66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getExpectedExceptionMessageRegExp</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a2d44a9d759e1ec02ef2b52e18d1dc90f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setRegisterMockObjectsFromTestArgumentsRecursively</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a57ad56d58575a5adc60e8c81fe8d4f2d</anchor>
      <arglist>(bool $flag)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>runBare</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a15bcc84c258876db0f6971f978a49974</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setName</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a781c86a0c6a6fd6493b9a817fd0d43b4</anchor>
      <arglist>(string $name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setDependencies</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a3823c40f9093b0ce55cc1380586301fd</anchor>
      <arglist>(array $dependencies)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getDependencies</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>ad4a5e47cc8aba827c87aade99e6e7d07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>hasDependencies</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>afba9d99575602851ca83d513d199ca8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setDependencyInput</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>abb9222d8a121ad0990219ade4be1cc73</anchor>
      <arglist>(array $dependencyInput)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getDependencyInput</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a436b3ccdfe6e1ea7a3aa0aaf4c182fa1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setBeStrictAboutChangesToGlobalState</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>aeb92009f44f5824d1b58fdc2eb5555d4</anchor>
      <arglist>(?bool $beStrictAboutChangesToGlobalState)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setBackupGlobals</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>ac0e1f1a792fa0dd67203ec64d8ed13d9</anchor>
      <arglist>(?bool $backupGlobals)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setBackupStaticAttributes</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a878e7182041822cab041edca40362a01</anchor>
      <arglist>(?bool $backupStaticAttributes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setRunTestInSeparateProcess</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a63d85750eb9256097dcbd5cc92503334</anchor>
      <arglist>(bool $runTestInSeparateProcess)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setRunClassInSeparateProcess</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>afac30dec9173e901d94e3566179c5241</anchor>
      <arglist>(bool $runClassInSeparateProcess)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setPreserveGlobalState</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a5a19e8652f83c0bb749b6d501953c2bf</anchor>
      <arglist>(bool $preserveGlobalState)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setInIsolation</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a26ad0add1a15747ce7c7ff646093de97</anchor>
      <arglist>(bool $inIsolation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isInIsolation</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a398562ed161bbe399038e0c38d73dda2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getResult</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a81217afa5e6552f6601fffd3254107ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setResult</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a358d8962fa6520d7466f10f887bbba74</anchor>
      <arglist>($result)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setOutputCallback</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>ab8f660f0b1cb437cefbefcd125877b9d</anchor>
      <arglist>(callable $callback)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getTestResultObject</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a3013ac2346e49733624b646eea8d1f57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setTestResultObject</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a95457e33db7dacc77fbd738a7ce776a0</anchor>
      <arglist>(TestResult $result)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>registerMockObject</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a7e5c90bc0bfbb495f814a35a325a9aaa</anchor>
      <arglist>(MockObject $mockObject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToAssertionCount</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>acd9c3ee6fa4a4f0ea74831df7ca5c44b</anchor>
      <arglist>(int $count)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getNumAssertions</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>afb7c8f3b21f777dfcca377e524104433</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>usesDataProvider</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>adabee793746e310de9fefe952e6c7aa1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>dataDescription</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a8c7bd18cc0ccbfedfcaefcd0608637aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>dataName</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a51eeab5cffdbc421b4aa3cbc5aef6e0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getDataSetAsString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a10a5b6c1a30091e46df37c741136c8ce</anchor>
      <arglist>(bool $includeData=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getProvidedData</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a6b3ee14ed69b54ccfa443992000fc1b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addWarning</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>ae1a841cd5ef67368c9831cf00eb40e5c</anchor>
      <arglist>(string $warning)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>any</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a5c129412dbdf9231da74550bad1814c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>never</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a874cb9838dc91f1a22c5f3bc412d304b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>atLeast</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>ade739fcd80179bc71d61e21028ce6e55</anchor>
      <arglist>(int $requiredInvocations)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>atLeastOnce</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>ab0a30bc6eb66cb5d6934145a8b4644dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>once</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a36395c45c21299f22aeae3e5a077b8ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>exactly</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a16b5d0619a842ef6695ee67597ddbbef</anchor>
      <arglist>(int $count)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>atMost</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>ac2e5300b09038713e332d4f19f8b7a12</anchor>
      <arglist>(int $allowedInvocations)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>at</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a4a27ab91d2f09b6b5004197af89a258b</anchor>
      <arglist>(int $index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>returnValue</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a2cc4ba325c105d570f5f84335d9af5d8</anchor>
      <arglist>($value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>returnValueMap</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a5c52bccfd7c6312a707e1b8567cd68a4</anchor>
      <arglist>(array $valueMap)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>returnArgument</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>ae0f1d940b53d4717c463bf4d2a116c39</anchor>
      <arglist>(int $argumentIndex)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>returnCallback</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a5ae31706ba638a5d4550e1bbc304108d</anchor>
      <arglist>($callback)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>returnSelf</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a945cce686a354a3c0c322a92fabd0501</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>throwException</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>ae44dc70128936323d1838d0b51bc8a6e</anchor>
      <arglist>(\Throwable $exception)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>onConsecutiveCalls</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>af600a5541a8c3c930ec935f1c17d4552</anchor>
      <arglist>(... $args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>setUpBeforeClass</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a0d52c76c8a9d81a401acf1ad243c22b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>tearDownAfterClass</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a664c68745c5fad55c95535535b2ff077</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a4a480625f7861c44b301908356539ff6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>tearDown</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a1f698f3c567316bd58d1f183f19ab6f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>runTest</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>aa30a36febec357c330a73c59a7e99426</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>iniSet</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a019b02dad16e9c4a1c454bc80205a2a8</anchor>
      <arglist>(string $varName, string $newValue)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setLocale</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>ac3e31749adf76ed8fd68f8512c06df10</anchor>
      <arglist>(... $args)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>createStub</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a57bc9fea127a7749b45122273f054474</anchor>
      <arglist>(string $originalClassName)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>createMock</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a2b774528a2d93b87c286a6d935f05cb1</anchor>
      <arglist>($originalClassName)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>createConfiguredMock</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a8bf97796fa88a7af33bc940d6df5e1d0</anchor>
      <arglist>($originalClassName, array $configuration)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>createPartialMock</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a4b691fd29e3620359a80dd0c0bd2ec5c</anchor>
      <arglist>($originalClassName, array $methods)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>createTestProxy</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a61326b2f9f40ab49ca9cd345a2015ab0</anchor>
      <arglist>(string $originalClassName, array $constructorArguments=[])</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>getMockClass</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a7d6ba8a8609028a4824804b33a47c729</anchor>
      <arglist>($originalClassName, $methods=[], array $arguments=[], $mockClassName=&apos;&apos;, $callOriginalConstructor=false, $callOriginalClone=true, $callAutoload=true, $cloneArguments=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>getMockForAbstractClass</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a473105ba088efa955b9b178bde0a0736</anchor>
      <arglist>($originalClassName, array $arguments=[], $mockClassName=&apos;&apos;, $callOriginalConstructor=true, $callOriginalClone=true, $callAutoload=true, $mockedMethods=[], $cloneArguments=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>getMockFromWsdl</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a569f24067a564db954fb7894de7bc6f6</anchor>
      <arglist>($wsdlFile, $originalClassName=&apos;&apos;, $mockClassName=&apos;&apos;, array $methods=[], $callOriginalConstructor=true, array $options=[])</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>getMockForTrait</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>ab1c2f552f8c93f292870904efae9492f</anchor>
      <arglist>($traitName, array $arguments=[], $mockClassName=&apos;&apos;, $callOriginalConstructor=true, $callOriginalClone=true, $callAutoload=true, $mockedMethods=[], $cloneArguments=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>getObjectForTrait</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a06d4ac6505d9c783fdac64ecd4fe9094</anchor>
      <arglist>($traitName, array $arguments=[], $traitClassName=&apos;&apos;, $callOriginalConstructor=true, $callOriginalClone=true, $callAutoload=true)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>prophesize</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>ac55e4ee47d7ab46af9a51e25281ec54e</anchor>
      <arglist>($classOrInterface=null)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>createResult</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a2367e660e364cdbcbe6f5474be8f63e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>assertPreConditions</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a2e69ff443bc5a131b00de601a4c7ba1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>assertPostConditions</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a7c3d7a5c6ee651b9f2a5371f5d97f025</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>onNotSuccessfulTest</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a7467df57bca61c061ae7d3a64b2acebe</anchor>
      <arglist>(\Throwable $t)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$backupGlobals</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a836a621aabb8e4795657e2804235d8ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$backupGlobalsBlacklist</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a6d22e353abe8baa19747be58f2d5dfa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$backupStaticAttributes</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a4a6ae01c7d422f066c612f290d32f638</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$backupStaticAttributesBlacklist</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a19fb260b8fd5f62f6d21abd40c15e2ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$runTestInSeparateProcess</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>a46d813a7e4b71f8c8b1c03c3fae1b02d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$preserveGlobalState</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCase.html</anchorfile>
      <anchor>aa574384e3d7cba3c6ef6dd6da71b05de</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::CodeCoverage::TestCase</name>
    <filename>classSebastianBergmann_1_1CodeCoverage_1_1TestCase.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function" static="yes">
      <type>static</type>
      <name>setUpBeforeClass</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1TestCase.html</anchorfile>
      <anchor>a0e209cc9327458a020931b48594d39a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>getXdebugDataForBankAccount</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1TestCase.html</anchorfile>
      <anchor>a9c53f2e96c099e0e886fd80956cbe4c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>getCoverageForBankAccount</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1TestCase.html</anchorfile>
      <anchor>a5f68682b5b330d6a27ea8d663052e6fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>getCoverageForBankAccountForFirstTwoTests</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1TestCase.html</anchorfile>
      <anchor>acfdaf46613124579e2ea43a2ddc9f328</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>getCoverageForBankAccountForLastTwoTests</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1TestCase.html</anchorfile>
      <anchor>a3f26fc0c8f8661772645e71c6da15fd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>getExpectedDataArrayForBankAccount</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1TestCase.html</anchorfile>
      <anchor>ac5ace3b057cd6ac05bbd050c223fc570</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>getExpectedDataArrayForBankAccountInReverseOrder</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1TestCase.html</anchorfile>
      <anchor>a4764d2d913ab2b4c3b3bc04780352673</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>getCoverageForFileWithIgnoredLines</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1TestCase.html</anchorfile>
      <anchor>a6027403fa799a3d3e28c8df08bf2a91a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUpXdebugStubForFileWithIgnoredLines</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1TestCase.html</anchorfile>
      <anchor>a3484539c9d819845d47a9793ed209ee8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>getCoverageForClassWithAnonymousFunction</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1TestCase.html</anchorfile>
      <anchor>a47f020d561bce9c5a9812c79ba958d11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUpXdebugStubForClassWithAnonymousFunction</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1TestCase.html</anchorfile>
      <anchor>ac44ac46daa60d0e7f3db4a4b1e28d0ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>getCoverageForCrashParsing</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1TestCase.html</anchorfile>
      <anchor>ac1b501414de902c1eda77697d71bc257</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUpXdebugStubForCrashParsing</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1TestCase.html</anchorfile>
      <anchor>ad4ac680dbdf433a535a1509a0c5d3723</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static</type>
      <name>$TEST_TMP_PATH</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1TestCase.html</anchorfile>
      <anchor>a40d08a21342582f25fa95ad285e66ae4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::TestCaseTest</name>
    <filename>classPHPUnit_1_1Framework_1_1TestCaseTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testCaseToString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>acd4dc9f07fba1b9f1d5567374f201a8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSuccess</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a561d3f7dd60c02f2faef6643dcc56df5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFailure</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a0fdfb95c227830ce06028c5863cc7160</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testError</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a2b723c41abcf41c4ab9315c0b262beb2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSkipped</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a8bbf0d4211b851c2982b257ebc7b6513</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIncomplete</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a0f79add7db63b287d710a2c99bc2195a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExceptionInSetUp</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a80b9c2c9a7757603f5739e0a6e4d6272</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExceptionInAssertPreConditions</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a66440e3796c13b741a77fe02248caa1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExceptionInTest</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a97940061bb8f9587b7137a267323a10c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExceptionInAssertPostConditions</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a2f0dd2c5b4ac5a600122ba63c6921efa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExceptionInTearDown</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a6608940d434ff4cc62a59c47329273ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExceptionInTestIsDetectedInTeardown</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a8f1774337ed26a41bd3b8046b78a9b5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testNoArgTestCasePasses</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>aecfa056b46acfbc2337a11170fa8f8b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testWasRun</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a589fca22675aa2deb8048ff91b179aba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testException</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a5fcbfb4e4eac149a438d0a2514dbef96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExpectExceptionAllowsAccessingExpectedException</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a463093067706213d3a9c0a0f29be81ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExpectExceptionCodeWithSameCode</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>adeff5992bb6a9132f45718c1794e2544</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExpectExceptionCodeWithDifferentCode</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a6e17f391caa7a049ac75beec9cb24df6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExpectExceptionCodeAllowsAccessingExpectedExceptionCode</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a16e5aa867136cade13d085f229640930</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExceptionWithEmptyMessage</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>adff581b57cb9b63683a04f45365e1ea4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExceptionWithNullMessage</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>afbee4b1b3716aac8a3956a2d10ed3f8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExceptionWithMessage</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a328d180e9675e4778e4fbe1c27c9839f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExceptionWithWrongMessage</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a612c8355aaa775bf054bdb0fd674c105</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExpectExceptionMessageAllowsAccessingExpectedExceptionMessage</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a8beea5562eebe2810aeaf7e660a83b2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExceptionWithRegexpMessage</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a1d9ef8fb857a5aa8504e59c0d518faa5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExpectExceptionMessageRegExpAllowsAccessingExpectedExceptionRegExp</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>af64196e09dd0c600ec924bb04cc00bf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExceptionWithWrongRegexpMessage</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>aa4c7b41fae13e415594c8dec349593fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExceptionWithInvalidRegexpMessage</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a5abf00f5860260d4f0e292d2c5d12ac4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExpectExceptionObjectWithDifferentExceptionClass</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a11e6b15037ab34b45f6923c9e2ccf5e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExpectExceptionObjectWithDifferentExceptionMessage</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a1c8a372d363e24d9aefa64e3b05f4d9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExpectExceptionObjectWithDifferentExceptionCode</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a39479e00047475fbe26ff5fe05f0e01d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExpectExceptionObjectWithEqualException</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a7488537559ba72aa22322aec26e80297</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExpectExceptionObjectAllowsAccessingExpectedExceptionDetails</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a854dadb522e9fff0c9bce20e597ab95b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testNoException</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a9437c4526030471e587dba2461ebbc10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testWrongException</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a86160152dbdb3c1b8e4a81c4c3003885</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testDoesNotPerformAssertions</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>aea5ecc4b71f964a55bed976c74b626b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGlobalsBackupPre</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>ad06ce85928882882e47b40905b94a24f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGlobalsBackupPost</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a5c154b671f72e232adc509be3bd1059f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStaticAttributesBackupPre</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a5eb4b42cd48130e9f83dc69857e92c65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStaticAttributesBackupPost</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a5afb22e90e72b125e58719efd1e36163</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIsInIsolationReturnsFalse</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>ace19a234d31f183cfd90c1c69a03dc65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIsInIsolationReturnsTrue</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>aa5d6f37d25692165cf738d8b5fd62bdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExpectOutputStringFooActualFoo</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>ac49dd581c234ea4873b1968b94e7453e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExpectOutputStringFooActualBar</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a902916387d39002fa82ccb29d0643ef3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExpectOutputRegexFooActualFoo</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a276a4bb0fb0a7b70e3629d8217d4545b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExpectOutputRegexFooActualBar</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>ab948c36821525f6e39055b32a3ce678b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSkipsIfRequiresHigherVersionOfPHPUnit</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>aecee5d4b87391720d7295b7a687cecdc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSkipsIfRequiresHigherVersionOfPHP</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a95c7315034d2ea4c3999b5192f2ca632</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSkipsIfRequiresNonExistingOs</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a67aeec57cc10937840f67e48f7216a26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSkipsIfRequiresNonExistingOsFamily</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a0af6c04513c112ed259d934c908f4ffe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSkipsIfRequiresNonExistingFunction</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a2ace62504c7965687389806aaba609d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSkipsIfRequiresNonExistingExtension</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a5a7d603c41152c6bec69981a88253e7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSkipsIfRequiresExtensionWithAMinimumVersion</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a58efed68551e9b403998b81bdae178a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSkipsProvidesMessagesForAllSkippingReasons</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>ae2c0b3c7557da32f39a2e80b92656fb7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testRequiringAnExistingMethodDoesNotSkip</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a237bfc51fd6d14f49e043bee84245675</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testRequiringAnExistingFunctionDoesNotSkip</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>afed2dc1d2cd0440cc18f24b04baec46a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testRequiringAnExistingExtensionDoesNotSkip</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>adf5c33081eafabdfe678443ba36145ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testRequiringAnExistingOsDoesNotSkip</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>afe49dfb0b0edd62e748426316496d50e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testRequiringASetting</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>acbb43054579d7cc3748bc781cf570189</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCurrentWorkingDirectoryIsRestored</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>aa9033badabb641c01713753e2dc2631e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTypeErrorCanBeExpected</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>abd62c57985d74f3e98bb5278e43531b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCreateMockFromClassName</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a4c592c0f5e796e825c1773247eebe67e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCreateMockMocksAllMethods</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a455b9a19d6b913378c269d1bbccd7bb0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCreateStubFromClassName</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a42f573628638887b62a53b21c84ba9d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCreateStubStubsAllMethods</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a257cff5020a54c717d490efedbc2409e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCreatePartialMockWithFakeMethods</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>ae9a9e45227a40c76016908bb6ed0ea2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCreatePartialMockWithRealMethods</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a1b2ab17b24565eb668e81b5870857f44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCreateMockSkipsConstructor</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a82c5b305d9ef12eb2c2f2d6c100456a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCreateMockDisablesOriginalClone</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a843c1f5c77aa1273f0238cb91e510b10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCreateStubSkipsConstructor</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a7a3bb45b3513a5d248f683d754716172</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCreateStubDisablesOriginalClone</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>aac61afde525167a712013c27d29bac48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testProvidingOfAutoreferencedArray</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a61087e7c1589499cb6e4ed1fc694777f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testProvidingArrayThatMixesObjectsAndScalars</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a6edb2ebc2479a38ca21b6c5fe7c80dfb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGettingNullTestResultObject</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a2bee777dff9df80e36d9bac18fabfbd7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSizeUnknown</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>af8cc7bbd94e4563df25b71d8d6f9aefc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSizeLarge</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a9b7f50d44e49cb3af6bdca038a501704</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSizeMedium</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a57a6de76f2a5396cdaf96f59b3fed7cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSizeSmall</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>af728a2c57de91431a6f8b422d9fb4519</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetNameReturnsMethodName</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>ae6088eb6d4a727f2e71376730ba23483</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetNameReturnsEmptyStringAsDefault</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>ae16625775459527de8c42497e7ebe042</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testRunBareThrowsExceptionWhenTestHasInvalidName</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>aff4bf7c64cc46152126b7157f52365ba</anchor>
      <arglist>($name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>providerInvalidName</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>ac8322b7128a9cb806378ac9ea33db08a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasFailedReturnsFalseWhenTestHasNotRunYet</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>acf57516210403c936dc3825a30c66d5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasFailedReturnsTrueWhenTestHasFailed</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a4941cd38665079f977a394cdb5617332</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasFailedReturnsTrueWhenTestHasErrored</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>ae3785898ae9f7b5b0cb0b8b06cfb0c25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasFailedReturnsFalseWhenTestHasPassed</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a4792db8b4af0ee35943a8697e7d123ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasFailedReturnsFalseWhenTestHasBeenMarkedAsIncomplete</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a89ebd10cf6684607bbe43b08ef1a6cb9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasFailedReturnsFalseWhenTestHasBeenMarkedAsRisky</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a1a6d9adcc2d18a5dce9d640b7c624238</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasFailedReturnsFalseWhenTestHasBeenMarkedAsSkipped</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a8f5c8f052bdc183c8045e311891e8780</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasFailedReturnsFalseWhenTestHasEmittedWarning</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a68ee527cdef24cef9a451a6780cfc6b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasOutputReturnsFalseWhenTestDoesNotGenerateOutput</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a11bde711ad2f72a17edbd80c085857ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasOutputReturnsFalseWhenTestExpectsOutputRegex</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a25259ea1b3b84c4efd63bc339062b5aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasOutputReturnsFalseWhenTestExpectsOutputString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a4603e60533e774661772f5dd87125fa0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasOutputReturnsTrueWhenTestGeneratesOutput</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>abd45d64d5965ae214ead1c89eff4c6ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testDeprecationCanBeExpected</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a3912de9ac1c96a645e2ce3ca3b268d5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testNoticeCanBeExpected</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a43bd0a2c9cdf77082f94092f82e39360</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testWarningCanBeExpected</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>afd811a72c0ff1de1328266bebd76f822</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testErrorCanBeExpected</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a41847efb20c6710510d517f677bfdb98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>setUpBeforeClass</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>ae471d7cebb3c63e31b043d58606ce49c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>tearDownAfterClass</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a644f0ad44e34a82041596b591e5a6352</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$backupGlobalsBlacklist</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>a64df349199ab46b14e981a7a31ded1f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static</type>
      <name>$testStatic</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestCaseTest.html</anchorfile>
      <anchor>abb84ee8850e12e474fbe312946aa6830</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseWithExceptionInHook</name>
    <filename>classTestCaseWithExceptionInHook.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testTrue</name>
      <anchorfile>classTestCaseWithExceptionInHook.html</anchorfile>
      <anchor>a7d2aca8074f5ebcfcf31d4ae175fe454</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFalse</name>
      <anchorfile>classTestCaseWithExceptionInHook.html</anchorfile>
      <anchor>a3cc240c754cfc8c82e4330df6e6f1e47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>setUpBeforeClass</name>
      <anchorfile>classTestCaseWithExceptionInHook.html</anchorfile>
      <anchor>ac06ee52b1bdc5f4c0ede36d49b45dda6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foo::Bar::TestClass</name>
    <filename>classFoo_1_1Bar_1_1TestClass.html</filename>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Comparator::TestClass</name>
    <filename>classSebastianBergmann_1_1Comparator_1_1TestClass.html</filename>
  </compound>
  <compound kind="class">
    <name>TestClass</name>
    <filename>classTestClass.html</filename>
  </compound>
  <compound kind="class">
    <name>Foo::BarScoped::TestClass</name>
    <filename>classFoo_1_1BarScoped_1_1TestClass.html</filename>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Comparator::TestClassComparator</name>
    <filename>classSebastianBergmann_1_1Comparator_1_1TestClassComparator.html</filename>
    <base>SebastianBergmann::Comparator::ObjectComparator</base>
  </compound>
  <compound kind="class">
    <name>Foo::Bar::TestClassInBar</name>
    <filename>classFoo_1_1Bar_1_1TestClassInBar.html</filename>
  </compound>
  <compound kind="class">
    <name>Foo::Baz::TestClassInBaz</name>
    <filename>classFoo_1_1Baz_1_1TestClassInBaz.html</filename>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Util::TestClassTest</name>
    <filename>classPHPUnit_1_1Util_1_1TestClassTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testGetRequirements</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestClassTest.html</anchorfile>
      <anchor>ab1172c427534cbb30124d368416aef6a</anchor>
      <arglist>($test, $result)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>requirementsProvider</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestClassTest.html</anchorfile>
      <anchor>a48e0f302668767f011f000076ea2bb0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetRequirementsWithVersionConstraints</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestClassTest.html</anchorfile>
      <anchor>a038bc78da7c38c4cfbed21010892ac4c</anchor>
      <arglist>($test, array $result)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>requirementsWithVersionConstraintsProvider</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestClassTest.html</anchorfile>
      <anchor>a973b8373ea68fa4080c6d21782ac3375</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetRequirementsWithInvalidVersionConstraintsThrowsException</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestClassTest.html</anchorfile>
      <anchor>a35b0ae03b3a5ff53898d25e8532683af</anchor>
      <arglist>($test)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>requirementsWithInvalidVersionConstraintsThrowsExceptionProvider</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestClassTest.html</anchorfile>
      <anchor>a7b23a9c49cc23679852c1125f0e34728</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetRequirementsMergesClassAndMethodDocBlocks</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestClassTest.html</anchorfile>
      <anchor>aa11b20cbfcc95b30214a2353c2af2c05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetMissingRequirements</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestClassTest.html</anchorfile>
      <anchor>ab2204e6e2260f3639c3ebc095d6aad9d</anchor>
      <arglist>($test, $result)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>missingRequirementsProvider</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestClassTest.html</anchorfile>
      <anchor>a939bf073891f1c1dc8c6a259a3a00c7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetProvidedDataRegEx</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestClassTest.html</anchorfile>
      <anchor>a00b0ac79ecc74b76a3dd87a6a28bece6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testMultipleDataProviders</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestClassTest.html</anchorfile>
      <anchor>a9337e957b7ff830ef79bd53d3bb765fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testMultipleYieldIteratorDataProviders</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestClassTest.html</anchorfile>
      <anchor>a5c01da91e99358ab29ea6f6596a3da0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testWithVariousIterableDataProvidersFromParent</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestClassTest.html</anchorfile>
      <anchor>aa51b3096d07114f139a62806a173c26f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testWithVariousIterableDataProvidersInParent</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestClassTest.html</anchorfile>
      <anchor>a638eb6e02cb72597a3c344d51ca24caa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testWithVariousIterableAbstractDataProviders</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestClassTest.html</anchorfile>
      <anchor>a7132ea25362707ed18d19a2661bb810f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testWithVariousIterableStaticDataProviders</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestClassTest.html</anchorfile>
      <anchor>a4480305f2bcffc76f6a9440b37a62795</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testWithVariousIterableNonStaticDataProviders</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestClassTest.html</anchorfile>
      <anchor>ab95d0e4e5f2dfb17c6b4f0aab3085f8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testWithDuplicateKeyDataProviders</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestClassTest.html</anchorfile>
      <anchor>a67ad9d9734bbe8377671af3787bbdcfc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTestWithEmptyAnnotation</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestClassTest.html</anchorfile>
      <anchor>a1ce600af702d24ec8ce4864ee8e7dcef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTestWithSimpleCase</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestClassTest.html</anchorfile>
      <anchor>a3a69d7a2b00d929b0d10c6303e4164fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTestWithMultiLineMultiParameterCase</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestClassTest.html</anchorfile>
      <anchor>a9d4dc6118db407a6d1638820c9ab9916</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTestWithVariousTypes</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestClassTest.html</anchorfile>
      <anchor>aae7dfeeb7597e875d3c1a9b994d12ef8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTestWithAnnotationAfter</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestClassTest.html</anchorfile>
      <anchor>a3e3497077e1948df30af90348af5f692</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTestWithSimpleTextAfter</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestClassTest.html</anchorfile>
      <anchor>a6bcf41960d869821ade8dba682ebd960</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTestWithCharacterEscape</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestClassTest.html</anchorfile>
      <anchor>a75b838b37e593acc29ca1e51c818bc96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTestWithThrowsProperExceptionIfDatasetCannotBeParsed</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestClassTest.html</anchorfile>
      <anchor>a10421182107378846c05ba2168d085b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTestWithThrowsProperExceptionIfMultiLineDatasetCannotBeParsed</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestClassTest.html</anchorfile>
      <anchor>a4e265883a9ea801b1361ccea10413735</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testParseAnnotation</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestClassTest.html</anchorfile>
      <anchor>a72b60a11fba86c69b6636a51d7b66110</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>methodForTestParseAnnotation</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestClassTest.html</anchorfile>
      <anchor>af94addfce6a2c6f571196693e58e5048</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testParseAnnotationThatIsOnlyOneLine</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestClassTest.html</anchorfile>
      <anchor>a6c8b72034ddb9b30cab04315053aa289</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>methodForTestParseAnnotationThatIsOnlyOneLine</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestClassTest.html</anchorfile>
      <anchor>a683380fcede6992daefb477beab8c4c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetLinesToBeCovered</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestClassTest.html</anchorfile>
      <anchor>a6cb2cb62ee38ec2a2fa69adaee48b80f</anchor>
      <arglist>($test, $lines)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetLinesToBeCovered2</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestClassTest.html</anchorfile>
      <anchor>a4925e83932f432969a270057a4932b5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetLinesToBeCovered3</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestClassTest.html</anchorfile>
      <anchor>a742b8b375f83cdea1d339358f85277c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetLinesToBeCovered4</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestClassTest.html</anchorfile>
      <anchor>af324468e872b223391a46daa20047da2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetLinesToBeCoveredSkipsNonExistentMethods</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestClassTest.html</anchorfile>
      <anchor>abd4de287d1948fa18ff4b6e1959fb63f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTwoCoversDefaultClassAnnotationsAreNotAllowed</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestClassTest.html</anchorfile>
      <anchor>a33c0c96f3e708b56b9440efa59c49c3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFunctionParenthesesAreAllowed</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestClassTest.html</anchorfile>
      <anchor>ad6ffc7230a5cef8c4335e9919b4993e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFunctionParenthesesAreAllowedWithWhitespace</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestClassTest.html</anchorfile>
      <anchor>a7f0a35b863f84c9ccd48ea9023639bd8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testMethodParenthesesAreAllowed</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestClassTest.html</anchorfile>
      <anchor>a0882178bd56e89fe7687ac5f5505f250</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testMethodParenthesesAreAllowedWithWhitespace</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestClassTest.html</anchorfile>
      <anchor>a00e8c24bbe17a972b59eeae6b7147eb9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testNamespacedFunctionCanBeCoveredOrUsed</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestClassTest.html</anchorfile>
      <anchor>ae95206a5efe5001342cfdbb3059f353c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getLinesToBeCoveredProvider</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestClassTest.html</anchorfile>
      <anchor>af479f90c2dcf480b8919c8e59bf02901</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testParseTestMethodAnnotationsIncorporatesTraits</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestClassTest.html</anchorfile>
      <anchor>a9bd0c48806cc5182aafe4b0007f9bad3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCoversAnnotationIncludesTraitsUsedByClass</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestClassTest.html</anchorfile>
      <anchor>a1b2ada77dbe5e65f680886526f4e1da6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCanSkipCoverage</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestClassTest.html</anchorfile>
      <anchor>ad9813ebc09c44bec62fbe51c55722253</anchor>
      <arglist>($testCase, $expectedCanSkip)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>canSkipCoverageProvider</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestClassTest.html</anchorfile>
      <anchor>a791b81f807321f3351800c2ccbc9dc64</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestDoxGroupTest</name>
    <filename>classTestDoxGroupTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testOne</name>
      <anchorfile>classTestDoxGroupTest.html</anchorfile>
      <anchor>aeeef8281077f2491d4c72c3ad5fe9365</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTwo</name>
      <anchorfile>classTestDoxGroupTest.html</anchorfile>
      <anchor>a2f11b98ef21cf4b60b62ab934707b071</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Util::TestDox::TestDoxPrinter</name>
    <filename>classPHPUnit_1_1Util_1_1TestDox_1_1TestDoxPrinter.html</filename>
    <base>PHPUnit::TextUI::ResultPrinter</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1TestDoxPrinter.html</anchorfile>
      <anchor>a78008c63345b631a1d8ed92d354ca102</anchor>
      <arglist>($out=null, bool $verbose=false, string $colors=self::COLOR_DEFAULT, bool $debug=false, $numberOfColumns=80, bool $reverse=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setOriginalExecutionOrder</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1TestDoxPrinter.html</anchorfile>
      <anchor>a1e979458029fc5bc226f5f6b57e0c692</anchor>
      <arglist>(array $order)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setShowProgressAnimation</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1TestDoxPrinter.html</anchorfile>
      <anchor>a7c274e2a275a3e3cd0009fc03c8fc08b</anchor>
      <arglist>(bool $showProgress)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>printResult</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1TestDoxPrinter.html</anchorfile>
      <anchor>a22df65ba035dbe20a765f16fe3e196fd</anchor>
      <arglist>(TestResult $result)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>endTest</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1TestDoxPrinter.html</anchorfile>
      <anchor>aa3e9d107ad293453f0d035c48c04193b</anchor>
      <arglist>(Test $test, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addError</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1TestDoxPrinter.html</anchorfile>
      <anchor>a1dacfb3824f3c9d56c822706d4f6862a</anchor>
      <arglist>(Test $test, \Throwable $t, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addWarning</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1TestDoxPrinter.html</anchorfile>
      <anchor>a8cb0261fca8c6ea2e8f0d8ce965dfa7e</anchor>
      <arglist>(Test $test, Warning $e, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addFailure</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1TestDoxPrinter.html</anchorfile>
      <anchor>abbcbfe1851a3882f8dad2e759dc7908c</anchor>
      <arglist>(Test $test, AssertionFailedError $e, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addIncompleteTest</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1TestDoxPrinter.html</anchorfile>
      <anchor>a4bd2e7adebd32edb4d50032bfb743247</anchor>
      <arglist>(Test $test, \Throwable $t, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addRiskyTest</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1TestDoxPrinter.html</anchorfile>
      <anchor>a6240bdabd770bcfc30f700920ad923a4</anchor>
      <arglist>(Test $test, \Throwable $t, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addSkippedTest</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1TestDoxPrinter.html</anchorfile>
      <anchor>aaa028b798dad9a110c6153b64fd87eca</anchor>
      <arglist>(Test $test, \Throwable $t, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>writeProgress</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1TestDoxPrinter.html</anchorfile>
      <anchor>ac7f384369510d7c49352e944e70e6783</anchor>
      <arglist>(string $progress)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>flush</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1TestDoxPrinter.html</anchorfile>
      <anchor>adbb180b933b6e31c699436a663fe1caa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>registerTestResult</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1TestDoxPrinter.html</anchorfile>
      <anchor>ae6556a1d65171cbbde9488289acaf2d5</anchor>
      <arglist>(Test $test, ?\Throwable $t, int $status, float $time, bool $verbose)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>formatTestName</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1TestDoxPrinter.html</anchorfile>
      <anchor>abb2fc249f88b537108bde18636461d31</anchor>
      <arglist>(Test $test)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>formatClassName</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1TestDoxPrinter.html</anchorfile>
      <anchor>a07ba6a19a33be885355d2c8bb2710416</anchor>
      <arglist>(Test $test)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>testHasPassed</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1TestDoxPrinter.html</anchorfile>
      <anchor>a0cb0b5d7ea4a25b3438d7d55fb489f95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>flushOutputBuffer</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1TestDoxPrinter.html</anchorfile>
      <anchor>af8ef27cacf8ce1fb9cc55c6cd51f7a23</anchor>
      <arglist>(bool $forceFlush=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>showSpinner</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1TestDoxPrinter.html</anchorfile>
      <anchor>a01fc0cf5d3e05e45f01ae12d76846aac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>hideSpinner</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1TestDoxPrinter.html</anchorfile>
      <anchor>a1c68749faa5fe315ce22dfb596c0bfce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>drawSpinner</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1TestDoxPrinter.html</anchorfile>
      <anchor>a430e2f1540854eec29554c3f798d9a5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>undrawSpinner</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1TestDoxPrinter.html</anchorfile>
      <anchor>a49aa2649fa793f9ec7fef6285ee03b48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>writeTestResult</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1TestDoxPrinter.html</anchorfile>
      <anchor>a8b3871c78afbe5eae32676abf1f7e62f</anchor>
      <arglist>(array $prevResult, array $result)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>getEmptyTestResult</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1TestDoxPrinter.html</anchorfile>
      <anchor>a760dc801991d785f2388d6938bc9036b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>getTestResultByName</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1TestDoxPrinter.html</anchorfile>
      <anchor>aeb561136d8a032f6915d40389013adb5</anchor>
      <arglist>(?string $testName)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>formatThrowable</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1TestDoxPrinter.html</anchorfile>
      <anchor>a3f6a1b4613150424773c6ad4e344914f</anchor>
      <arglist>(\Throwable $t, ?int $status=null)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>formatStacktrace</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1TestDoxPrinter.html</anchorfile>
      <anchor>a352ef45bf67ca1d4496dcf6d7dd2ce43</anchor>
      <arglist>(\Throwable $t)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>formatTestResultMessage</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1TestDoxPrinter.html</anchorfile>
      <anchor>a92761c8c59e952ddaa4758fedb6d2614</anchor>
      <arglist>(\Throwable $t, array $result, string $prefix=&apos;│&apos;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>prefixLines</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1TestDoxPrinter.html</anchorfile>
      <anchor>adbde7c6fa30b3686ed5152a5becdce23</anchor>
      <arglist>(string $prefix, string $message)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$prettifier</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1TestDoxPrinter.html</anchorfile>
      <anchor>a003f6dda9754d5302bd77ba1930befde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$testIndex</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1TestDoxPrinter.html</anchorfile>
      <anchor>a9fb5b01aa91686d0d43801d4944e439d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$testFlushIndex</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1TestDoxPrinter.html</anchorfile>
      <anchor>ad5033105aada703bb85e9b8739f81917</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$testResults</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1TestDoxPrinter.html</anchorfile>
      <anchor>a8da130e21a3cca3a15f33684cbe11486</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$testNameResultIndex</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1TestDoxPrinter.html</anchorfile>
      <anchor>a12f179072522351503c06ce4217dc4a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$enableOutputBuffer</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1TestDoxPrinter.html</anchorfile>
      <anchor>a86d4b606f3ffb56e7bf98f6054089499</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$originalExecutionOrder</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1TestDoxPrinter.html</anchorfile>
      <anchor>a85679b065478fa91521cf4f0a544cd76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$spinState</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1TestDoxPrinter.html</anchorfile>
      <anchor>aafae03955ef0525f6f70d6fb7ad04f71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$showProgress</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1TestDoxPrinter.html</anchorfile>
      <anchor>a17dbc8f7c52352b340c0018e65fb5386</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestError</name>
    <filename>classTestError.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>runTest</name>
      <anchorfile>classTestError.html</anchorfile>
      <anchor>afd011f13d1e313ebbe0c8f5ba377aa05</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::TestFailure</name>
    <filename>classPHPUnit_1_1Framework_1_1TestFailure.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestFailure.html</anchorfile>
      <anchor>ad30af2dc3c0b9ec1f06d58b8dc21690f</anchor>
      <arglist>(Test $failedTest, $t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestFailure.html</anchorfile>
      <anchor>ab6bb469217fd68bdba8ae76ff46d9417</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getExceptionAsString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestFailure.html</anchorfile>
      <anchor>ae2f8e74ea0ad579a63dff69cd7bc9af1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getTestName</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestFailure.html</anchorfile>
      <anchor>acb849ffbfc76e9cea22ab76979100de1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>failedTest</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestFailure.html</anchorfile>
      <anchor>ac50c5e0255ab8250f90abb5f44d90074</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>thrownException</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestFailure.html</anchorfile>
      <anchor>a77d05b63e6688b3cec8941696629d78b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>exceptionMessage</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestFailure.html</anchorfile>
      <anchor>a9f6b228db49efd0b84bbaec9d60d70b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isFailure</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestFailure.html</anchorfile>
      <anchor>a9be4dbfa1d7ca81966e7d26e161f339f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>exceptionToString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestFailure.html</anchorfile>
      <anchor>ab8350c4f72d48b1ff4e66cd2d3eadd2c</anchor>
      <arglist>(Throwable $e)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::TestFailureTest</name>
    <filename>classPHPUnit_1_1Framework_1_1TestFailureTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testToString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestFailureTest.html</anchorfile>
      <anchor>a5ba34d5ef32481913fad7532941fa9bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testToStringForError</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestFailureTest.html</anchorfile>
      <anchor>a67ea6fcf2568778d4cfcad0bba3051f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testToStringForNonSelfDescribing</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestFailureTest.html</anchorfile>
      <anchor>ad928a1737921dae1284bd05fe86c2efd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testgetExceptionAsString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestFailureTest.html</anchorfile>
      <anchor>add14fe1826d6413269b1e94b9228a789</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExceptionToString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestFailureTest.html</anchorfile>
      <anchor>a2761032032d06309a5e3ef13205d8a62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExceptionToStringForExpectationFailedException</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestFailureTest.html</anchorfile>
      <anchor>a2f11c02e3d6c8708d4b7c3f76b4d7825</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExceptionToStringForExpectationFailedExceptionWithComparisonFailure</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestFailureTest.html</anchorfile>
      <anchor>a69fc9d6749bd23447809e44a7d517f87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExceptionToStringForFrameworkError</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestFailureTest.html</anchorfile>
      <anchor>adb665bf129469419b4fd3c23e7c289d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExceptionToStringForExceptionWrapper</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestFailureTest.html</anchorfile>
      <anchor>a741c5a427b62d5debc28d80e5a425ded</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetTestName</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestFailureTest.html</anchorfile>
      <anchor>aca5eb36f3a4f766cf1e7572b7d329beb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFailedTest</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestFailureTest.html</anchorfile>
      <anchor>ab56b3dd63b2d57e1b41af7478bff7a13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testThrownException</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestFailureTest.html</anchorfile>
      <anchor>af6f74b0b50f01aecd640551a3574d494</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExceptionMessage</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestFailureTest.html</anchorfile>
      <anchor>a8588c44aa9991b93b8988f8c2f281185</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIsFailure</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestFailureTest.html</anchorfile>
      <anchor>aea8d25ff5a5e24ba2a3298f44ece55f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIsFailureFalse</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestFailureTest.html</anchorfile>
      <anchor>a141e04e80de599b7920fa668a8c5c348</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestGeneratorMaker</name>
    <filename>classTestGeneratorMaker.html</filename>
    <member kind="function">
      <type></type>
      <name>create</name>
      <anchorfile>classTestGeneratorMaker.html</anchorfile>
      <anchor>a95fd46c5987b5fa959b47bf2f1a1f723</anchor>
      <arglist>($array=[])</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>PHPUnit::Runner::TestHook</name>
    <filename>interfacePHPUnit_1_1Runner_1_1TestHook.html</filename>
    <base>PHPUnit::Runner::Hook</base>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::TestImplementorTest</name>
    <filename>classPHPUnit_1_1Framework_1_1TestImplementorTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testSuccessfulRun</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestImplementorTest.html</anchorfile>
      <anchor>a2412daa8aca770d49ed8009417cdbfa8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestIncomplete</name>
    <filename>classTestIncomplete.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>runTest</name>
      <anchorfile>classTestIncomplete.html</anchorfile>
      <anchor>ad36da45d3d366528a9ffce7341e04ddc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestIterator</name>
    <filename>classTestIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classTestIterator.html</anchorfile>
      <anchor>a9df783c36b2626310491d0c660286684</anchor>
      <arglist>($array=[])</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>rewind</name>
      <anchorfile>classTestIterator.html</anchorfile>
      <anchor>a8e5b764488a8bed92c6dfbb8eed625b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>valid</name>
      <anchorfile>classTestIterator.html</anchorfile>
      <anchor>ac6308820fdb1c1e70c9e8f1fb8c11a8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>key</name>
      <anchorfile>classTestIterator.html</anchorfile>
      <anchor>a4308aece3c24152f9e06346b4786a40c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>current</name>
      <anchorfile>classTestIterator.html</anchorfile>
      <anchor>aa2366e4d13deccbfec71e5b20f4b3cb2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>next</name>
      <anchorfile>classTestIterator.html</anchorfile>
      <anchor>ac613def1c832b64e248b901041d74592</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$array</name>
      <anchorfile>classTestIterator.html</anchorfile>
      <anchor>a5e12c360b79a2a049b8db2dab5c842eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$position</name>
      <anchorfile>classTestIterator.html</anchorfile>
      <anchor>acdbdfed305b860fba09c693c6226b8e6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestIterator2</name>
    <filename>classTestIterator2.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classTestIterator2.html</anchorfile>
      <anchor>a30aaba6d177be48e43567e75d2571165</anchor>
      <arglist>(array $array)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>current</name>
      <anchorfile>classTestIterator2.html</anchorfile>
      <anchor>a5e6d2d4b521fd6a8bee60b63afd13e22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>next</name>
      <anchorfile>classTestIterator2.html</anchorfile>
      <anchor>a6b876ea18c28afff43cf1bd251253b27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>key</name>
      <anchorfile>classTestIterator2.html</anchorfile>
      <anchor>a9d5b2d823f2aee0bdec31c39bb2becb7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>valid</name>
      <anchorfile>classTestIterator2.html</anchorfile>
      <anchor>a9b68489918ad381e5a80f531354ad500</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>rewind</name>
      <anchorfile>classTestIterator2.html</anchorfile>
      <anchor>a880c42b130b031be7e02a5f63e0e66c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$data</name>
      <anchorfile>classTestIterator2.html</anchorfile>
      <anchor>a986aacf8548eaff630391148dae6d80a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestIteratorAggregate</name>
    <filename>classTestIteratorAggregate.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classTestIteratorAggregate.html</anchorfile>
      <anchor>a66b285e52ea1594b73b97480966b3d9b</anchor>
      <arglist>(Traversable $traversable)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getIterator</name>
      <anchorfile>classTestIteratorAggregate.html</anchorfile>
      <anchor>a3d73766c381eb39024a1a946c17b1330</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestIteratorAggregate2</name>
    <filename>classTestIteratorAggregate2.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classTestIteratorAggregate2.html</anchorfile>
      <anchor>a30e5b09b13601cd9f33e7185bb381c80</anchor>
      <arglist>(Traversable $traversable)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getIterator</name>
      <anchorfile>classTestIteratorAggregate2.html</anchorfile>
      <anchor>a5c185395be0871d07ceb694879d5740e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>PHPUnit::Framework::TestListener</name>
    <filename>interfacePHPUnit_1_1Framework_1_1TestListener.html</filename>
    <member kind="function">
      <type></type>
      <name>addError</name>
      <anchorfile>interfacePHPUnit_1_1Framework_1_1TestListener.html</anchorfile>
      <anchor>a4a0cb1ae9222396951bc9cbf9a6e2405</anchor>
      <arglist>(Test $test, \Throwable $t, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addWarning</name>
      <anchorfile>interfacePHPUnit_1_1Framework_1_1TestListener.html</anchorfile>
      <anchor>a15a023ebbaeadef917102907dfa1f2f8</anchor>
      <arglist>(Test $test, Warning $e, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addFailure</name>
      <anchorfile>interfacePHPUnit_1_1Framework_1_1TestListener.html</anchorfile>
      <anchor>ad842124e0e94c3e9059839e2014077a6</anchor>
      <arglist>(Test $test, AssertionFailedError $e, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addIncompleteTest</name>
      <anchorfile>interfacePHPUnit_1_1Framework_1_1TestListener.html</anchorfile>
      <anchor>ae05f26314d3a46766ca9c8b09bb8e34f</anchor>
      <arglist>(Test $test, \Throwable $t, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addRiskyTest</name>
      <anchorfile>interfacePHPUnit_1_1Framework_1_1TestListener.html</anchorfile>
      <anchor>a49e8f867d4aad7f8b7bcd2613cd139e4</anchor>
      <arglist>(Test $test, \Throwable $t, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addSkippedTest</name>
      <anchorfile>interfacePHPUnit_1_1Framework_1_1TestListener.html</anchorfile>
      <anchor>a62853c1a8d57be26fe11a230c5ad8886</anchor>
      <arglist>(Test $test, \Throwable $t, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>startTestSuite</name>
      <anchorfile>interfacePHPUnit_1_1Framework_1_1TestListener.html</anchorfile>
      <anchor>a1d1828f147f8d94ef4e87e57288fa0a1</anchor>
      <arglist>(TestSuite $suite)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>endTestSuite</name>
      <anchorfile>interfacePHPUnit_1_1Framework_1_1TestListener.html</anchorfile>
      <anchor>a70d5482397f39bad41478b90bbbea6c6</anchor>
      <arglist>(TestSuite $suite)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>startTest</name>
      <anchorfile>interfacePHPUnit_1_1Framework_1_1TestListener.html</anchorfile>
      <anchor>a578e5e63dc5ffd430ad2ced46b6e3382</anchor>
      <arglist>(Test $test)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>endTest</name>
      <anchorfile>interfacePHPUnit_1_1Framework_1_1TestListener.html</anchorfile>
      <anchor>a304b789ea199809fb3fae6ab6837a37f</anchor>
      <arglist>(Test $test, float $time)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Runner::TestListenerAdapter</name>
    <filename>classPHPUnit_1_1Runner_1_1TestListenerAdapter.html</filename>
    <base>PHPUnit::Framework::TestListener</base>
    <member kind="function">
      <type></type>
      <name>add</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1TestListenerAdapter.html</anchorfile>
      <anchor>a6e4785ee083802f8487329c063c4bb5b</anchor>
      <arglist>(TestHook $hook)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>startTest</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1TestListenerAdapter.html</anchorfile>
      <anchor>afaf0645e83a60151620ef5ca85ebccda</anchor>
      <arglist>(Test $test)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addError</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1TestListenerAdapter.html</anchorfile>
      <anchor>a8b746ca202248a2ef2e67ca534cd549f</anchor>
      <arglist>(Test $test, \Throwable $t, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addWarning</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1TestListenerAdapter.html</anchorfile>
      <anchor>a571ed41c0647561f262d441e8124828a</anchor>
      <arglist>(Test $test, Warning $e, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addFailure</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1TestListenerAdapter.html</anchorfile>
      <anchor>a52dd788fd58ceb22b24e0b6a23a8636b</anchor>
      <arglist>(Test $test, AssertionFailedError $e, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addIncompleteTest</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1TestListenerAdapter.html</anchorfile>
      <anchor>a7a566f8951210a07ee568d72d4d2a70e</anchor>
      <arglist>(Test $test, \Throwable $t, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addRiskyTest</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1TestListenerAdapter.html</anchorfile>
      <anchor>ac48ade359cc7376d988e8dd135d84854</anchor>
      <arglist>(Test $test, \Throwable $t, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addSkippedTest</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1TestListenerAdapter.html</anchorfile>
      <anchor>aa94f73061339ce595e7538384e964ea6</anchor>
      <arglist>(Test $test, \Throwable $t, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>endTest</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1TestListenerAdapter.html</anchorfile>
      <anchor>a984c0dbcc54cd1cd57f2f03d50163297</anchor>
      <arglist>(Test $test, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>startTestSuite</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1TestListenerAdapter.html</anchorfile>
      <anchor>af829979d7ae5152949bd8d1225e193c9</anchor>
      <arglist>(TestSuite $suite)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>endTestSuite</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1TestListenerAdapter.html</anchorfile>
      <anchor>acb787ab08e35b8bfdd9efa3af5446431</anchor>
      <arglist>(TestSuite $suite)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::TestListenerTest</name>
    <filename>classPHPUnit_1_1Framework_1_1TestListenerTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testError</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestListenerTest.html</anchorfile>
      <anchor>aa4eb988438a0bd85cb6d5eb912bcf852</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFailure</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestListenerTest.html</anchorfile>
      <anchor>a4fbdc6b74a41a55f1f6ef612f7a2b52a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStartStop</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestListenerTest.html</anchorfile>
      <anchor>aed3b55f69b33b2ace738045d9a1536bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestListenerTest.html</anchorfile>
      <anchor>a09ce6787288c796b7ce56e561689869d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestProxyFixture</name>
    <filename>classTestProxyFixture.html</filename>
    <member kind="function">
      <type></type>
      <name>returnString</name>
      <anchorfile>classTestProxyFixture.html</anchorfile>
      <anchor>a3ccdf40e13de97a5d4bf1ef56df80a1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>returnTypedString</name>
      <anchorfile>classTestProxyFixture.html</anchorfile>
      <anchor>a1dfdb6a287a964be4fa725cf7c400c54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>returnObject</name>
      <anchorfile>classTestProxyFixture.html</anchorfile>
      <anchor>a187bf70b7f5193fbf9e0e13c7f34b07c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>returnTypedObject</name>
      <anchorfile>classTestProxyFixture.html</anchorfile>
      <anchor>af421e27691d51a9fe3dfa834315b132a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>returnObjectOfFinalClass</name>
      <anchorfile>classTestProxyFixture.html</anchorfile>
      <anchor>afa4a35aad26ca3aa5d74c948f4248360</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>returnTypedObjectOfFinalClass</name>
      <anchorfile>classTestProxyFixture.html</anchorfile>
      <anchor>a3d0a0458f8a031016009c8db22c62fce</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::TestResult</name>
    <filename>classPHPUnit_1_1Framework_1_1TestResult.html</filename>
    <member kind="function">
      <type></type>
      <name>addListener</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>a69666bce7e7fe265db794bdf4950397e</anchor>
      <arglist>(TestListener $listener)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>removeListener</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>a820d014c7795e0b6dc6bc7acc6f5a8d1</anchor>
      <arglist>(TestListener $listener)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>flushListeners</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>a581197a89bf95c62cfe820206ddcad38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addError</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>a0dac6864da033573cdb868e8173f0823</anchor>
      <arglist>(Test $test, Throwable $t, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addWarning</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>a392e4357cf6b8f6bd95c8210a4a379a0</anchor>
      <arglist>(Test $test, Warning $e, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addFailure</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>a705c715a356f90bd19839d44c00f1605</anchor>
      <arglist>(Test $test, AssertionFailedError $e, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>startTestSuite</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>a485c3ac977c2b0dd662e45409375e593</anchor>
      <arglist>(TestSuite $suite)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>endTestSuite</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>a34c2a5453d31ffbc5c882b5b0c56c86e</anchor>
      <arglist>(TestSuite $suite)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>startTest</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>a2f2841e3002bef3f950eac7ef55ee34c</anchor>
      <arglist>(Test $test)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>endTest</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>a7b83009388c6cdcae38ef3d0c29adfad</anchor>
      <arglist>(Test $test, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>allHarmless</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>a00c1cea3ca78768a95b60e66b949c8a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>riskyCount</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>adef5ba03d8ceca23ec70479582cd958f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>allCompletelyImplemented</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>a6b405569535264f9eee76d8f4804386d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>notImplementedCount</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>ac5f46e68ae389b2cc0348c97eb6622c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>risky</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>aee0c0a94ce9bee9c706d1bda8e7432f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>notImplemented</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>a716a8990da27ab0f79d73a47d70af4e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>noneSkipped</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>aab4c21d085d8fc7858bb0345c37067f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>skippedCount</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>ab00ae07e5be92d1bb665d0a417fd4831</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>skipped</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>a6382a4b01c2dc827716163a688e19ce9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>errorCount</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>a03fd26d05a6637444ab3681f92c5876c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>errors</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>ae3ac6336b78878d94290793dce6909ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>failureCount</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>adc31387249e67bb2af8993a70d26503a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>failures</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>abf9f6d3e3b6396d1ddb18fcf3a6f48d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>warningCount</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>a44d063d0db602fa8cccaf9d3e210126c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>warnings</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>a39870a329a3958f3b69824a006382213</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>passed</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>a7b1c53ca1fb6373fd8415403f9ae4f1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>topTestSuite</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>a3effea7540e071ea82230d3e1cc7df26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getCollectCodeCoverageInformation</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>a2da765cf9678c0864cb15e84ca4bedfd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>run</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>a90b0a47fd9b77645693ec95ef3abf7eb</anchor>
      <arglist>(Test $test)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>count</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>a7edd0e98d0919d6353d233d1f79a8f7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>shouldStop</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>a35eef197007fa29ea98a6dd0247ce3e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>stop</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>ae5acf970f4604ad6641d3fd81c2bdbbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getCodeCoverage</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>a9f77584d75c065bc92d48ab6ed553683</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setCodeCoverage</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>ac42a2cb5e61776ffe0aac7b76110ffa3</anchor>
      <arglist>(CodeCoverage $codeCoverage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>convertDeprecationsToExceptions</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>a04081e46f110d2ac21354abf73da15f6</anchor>
      <arglist>(bool $flag)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getConvertDeprecationsToExceptions</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>a6bfd71223d9a1de38e20c045ae269986</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>convertErrorsToExceptions</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>ab0477b7f33c37015eaee45ac99a60602</anchor>
      <arglist>(bool $flag)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getConvertErrorsToExceptions</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>af69351bb94a71fe801ff6eba9595840d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>convertNoticesToExceptions</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>a78e13ab2c86fe2e2d053755c76c0992e</anchor>
      <arglist>(bool $flag)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getConvertNoticesToExceptions</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>aa043a89500d8fc931bb70cd3b9c9b18d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>convertWarningsToExceptions</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>aeeeffdd84b8a6c2dc806583c4379de28</anchor>
      <arglist>(bool $flag)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getConvertWarningsToExceptions</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>a1acc728634dba013a494ff4f791d0d03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>stopOnError</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>a31fb5975d115aff518deb3e475bd2ab7</anchor>
      <arglist>(bool $flag)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>stopOnFailure</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>a97abf79a56f2bb9de5af26e78a3e9670</anchor>
      <arglist>(bool $flag)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>stopOnWarning</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>ac484bd249a7b61bbfb53d96ee70b9dd1</anchor>
      <arglist>(bool $flag)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>beStrictAboutTestsThatDoNotTestAnything</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>a6306ff025383700a9e8adf80f6f8d799</anchor>
      <arglist>(bool $flag)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isStrictAboutTestsThatDoNotTestAnything</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>a3a87bd6d13910fc9faef190fce8627df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>beStrictAboutOutputDuringTests</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>afc79233c56c07dd78242e1664000d0f2</anchor>
      <arglist>(bool $flag)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isStrictAboutOutputDuringTests</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>a2fb3666bcda0ea0e0ae48869915038b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>beStrictAboutResourceUsageDuringSmallTests</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>a0f1b8c07ae4d055aaaa4a80158eb085b</anchor>
      <arglist>(bool $flag)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isStrictAboutResourceUsageDuringSmallTests</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>ac79036b6961e5d2ccead11a6ab8d54ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>enforceTimeLimit</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>aebf681b328839cb9289716dc1118d8e4</anchor>
      <arglist>(bool $flag)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>enforcesTimeLimit</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>a01bc265d33569632c713c247bfc58ecb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>beStrictAboutTodoAnnotatedTests</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>a39ccbbf40740ddab573877bf7937a4c1</anchor>
      <arglist>(bool $flag)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isStrictAboutTodoAnnotatedTests</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>accd6a786998a3a1232301e84d1bda58d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>stopOnRisky</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>af43a16857ccb0c0363572926b1522174</anchor>
      <arglist>(bool $flag)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>stopOnIncomplete</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>a4e07af837925a4a7c346daae50696057</anchor>
      <arglist>(bool $flag)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>stopOnSkipped</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>ae0ac7f7770ba63816d0dff05cb82ace7</anchor>
      <arglist>(bool $flag)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>stopOnDefect</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>a023a8fa94062d24439ded47a07cc11af</anchor>
      <arglist>(bool $flag)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>time</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>a8509a3efc6b109c6d4c40cbaaf3960ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>wasSuccessful</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>a5c2d684f69dd1ea0d8180ed7c445a055</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>wasSuccessfulIgnoringWarnings</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>a9ab25830d45950f0fff23d5ae3dfaac3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>wasSuccessfulAndNoTestIsRiskyOrSkippedOrIncomplete</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>a6667e2941b2b6e54a899019ee110db68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setDefaultTimeLimit</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>a14468159e84b4734f1d3d36267424d56</anchor>
      <arglist>(int $timeout)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setTimeoutForSmallTests</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>adfd8ab48658630cc6ef85b74a9621101</anchor>
      <arglist>(int $timeout)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setTimeoutForMediumTests</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>a2001990e0696bf7d4358ef90f3e4bd3d</anchor>
      <arglist>(int $timeout)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setTimeoutForLargeTests</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>a1e47fc94ffb11f6a374b577e3d6c08da</anchor>
      <arglist>(int $timeout)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getTimeoutForLargeTests</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>aa186bc3bb34cb3536936ae1ad23607a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setRegisterMockObjectsFromTestArgumentsRecursively</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestResult.html</anchorfile>
      <anchor>ab619a2dfb65c6dfc0c440871cdbbe67c</anchor>
      <arglist>(bool $flag)</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>PHPUnit::Runner::TestResultCache</name>
    <filename>interfacePHPUnit_1_1Runner_1_1TestResultCache.html</filename>
    <member kind="function">
      <type></type>
      <name>setState</name>
      <anchorfile>interfacePHPUnit_1_1Runner_1_1TestResultCache.html</anchorfile>
      <anchor>a01590ce61451c90b82bc1f4295300e9f</anchor>
      <arglist>(string $testName, int $state)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getState</name>
      <anchorfile>interfacePHPUnit_1_1Runner_1_1TestResultCache.html</anchorfile>
      <anchor>a0aee93d4620fb5af0c5c7a99a6bce995</anchor>
      <arglist>(string $testName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setTime</name>
      <anchorfile>interfacePHPUnit_1_1Runner_1_1TestResultCache.html</anchorfile>
      <anchor>acfd89b594a447dfa0aac9d7105ccf190</anchor>
      <arglist>(string $testName, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getTime</name>
      <anchorfile>interfacePHPUnit_1_1Runner_1_1TestResultCache.html</anchorfile>
      <anchor>ae2675af4d95800095ed600fa504f1b54</anchor>
      <arglist>(string $testName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>load</name>
      <anchorfile>interfacePHPUnit_1_1Runner_1_1TestResultCache.html</anchorfile>
      <anchor>a818ddd5403c514cd2c023e437939b1ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>persist</name>
      <anchorfile>interfacePHPUnit_1_1Runner_1_1TestResultCache.html</anchorfile>
      <anchor>af0cdc3cf4c065db9ad60f6c7a3f3b000</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestResultCacheTest</name>
    <filename>classTestResultCacheTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testReadsCacheFromProvidedFilename</name>
      <anchorfile>classTestResultCacheTest.html</anchorfile>
      <anchor>ade4fc4ec8af2456cef5279416fda0fb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testDoesClearCacheBeforeLoad</name>
      <anchorfile>classTestResultCacheTest.html</anchorfile>
      <anchor>ad0109a21fb3bd2f6cd654b69988b2c11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testShouldNotSerializePassedTestsAsDefectButTimeIsStored</name>
      <anchorfile>classTestResultCacheTest.html</anchorfile>
      <anchor>a8f7d375e0439292e6fc443c060aeaec5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCanPersistCacheToFile</name>
      <anchorfile>classTestResultCacheTest.html</anchorfile>
      <anchor>acbc1666ef158ccbbbfb860d81c7b847a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testShouldReturnEmptyCacheWhenFileDoesNotExist</name>
      <anchorfile>classTestResultCacheTest.html</anchorfile>
      <anchor>ad14491e3855b4ffbae329cf0409cfb67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testShouldReturnEmptyCacheFromInvalidFile</name>
      <anchorfile>classTestResultCacheTest.html</anchorfile>
      <anchor>a501fed684b34a5b67867e68a6186eb10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isSerializedEmptyCache</name>
      <anchorfile>classTestResultCacheTest.html</anchorfile>
      <anchor>abf3e9b5e7d70db44d213e30c3be037db</anchor>
      <arglist>(string $data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestRisky</name>
    <filename>classTestRisky.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>runTest</name>
      <anchorfile>classTestRisky.html</anchorfile>
      <anchor>a96df33ad2abf73e0313510d8ed1bae52</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::TextUI::TestRunner</name>
    <filename>classPHPUnit_1_1TextUI_1_1TestRunner.html</filename>
    <base>PHPUnit::Runner::BaseTestRunner</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1TestRunner.html</anchorfile>
      <anchor>a22363539ea48f93c08d81927328d3856</anchor>
      <arglist>(TestSuiteLoader $loader=null, CodeCoverageFilter $filter=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>doRun</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1TestRunner.html</anchorfile>
      <anchor>a9b88481ab048ef860e2a10c55304f71a</anchor>
      <arglist>(Test $suite, array $arguments=[], array $warnings=[], bool $exit=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setPrinter</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1TestRunner.html</anchorfile>
      <anchor>a0ac9a8c6c9f740824a7dcfd89f9d1cde</anchor>
      <arglist>(ResultPrinter $resultPrinter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getLoader</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1TestRunner.html</anchorfile>
      <anchor>a068cddc4b7c0ff7872171848d58b2228</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addExtension</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1TestRunner.html</anchorfile>
      <anchor>abe769b69ba55b568a50f0f528ca883e6</anchor>
      <arglist>(Hook $extension)</arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>SUCCESS_EXIT</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1TestRunner.html</anchorfile>
      <anchor>a43575c97d9f711f1d5d37610da124dfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>FAILURE_EXIT</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1TestRunner.html</anchorfile>
      <anchor>a8b78256a85928f34a77652046d81f2c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>EXCEPTION_EXIT</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1TestRunner.html</anchorfile>
      <anchor>ab8c160ab451d79ac61149217c27cc323</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>runFailed</name>
      <anchorfile>classPHPUnit_1_1TextUI_1_1TestRunner.html</anchorfile>
      <anchor>a21833c9de5013865522360f76d93ecce</anchor>
      <arglist>(string $message)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::CodeCoverage::Report::Xml::Tests</name>
    <filename>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1Tests.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1Tests.html</anchorfile>
      <anchor>ac9fbba377fd42be7fcfbe9d37eae5ccd</anchor>
      <arglist>(\DOMElement $context)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addTest</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1Tests.html</anchorfile>
      <anchor>a275bb824777b86256db131930d01fd55</anchor>
      <arglist>(string $test, array $result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestSkipped</name>
    <filename>classTestSkipped.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>runTest</name>
      <anchorfile>classTestSkipped.html</anchorfile>
      <anchor>a626632d306dca9e70230429d9d452762</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::TestSuite</name>
    <filename>classPHPUnit_1_1Framework_1_1TestSuite.html</filename>
    <base>PHPUnit::Framework::SelfDescribing</base>
    <base>PHPUnit::Framework::Test</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuite.html</anchorfile>
      <anchor>ab477cce0296d505e651c28a496c4d1cf</anchor>
      <arglist>($theClass=&apos;&apos;, string $name=&apos;&apos;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuite.html</anchorfile>
      <anchor>af9fbd06af4bec754e891ea042f64e795</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addTest</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuite.html</anchorfile>
      <anchor>ac903e964349cc589c174fe0dcddb6612</anchor>
      <arglist>(Test $test, $groups=[])</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addTestSuite</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuite.html</anchorfile>
      <anchor>aa542cccc3fb7d99314398545cb6cc440</anchor>
      <arglist>($testClass)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addTestFile</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuite.html</anchorfile>
      <anchor>a9fe5c09889bc7ad1538509b067cf0c1f</anchor>
      <arglist>(string $filename)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addTestFiles</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuite.html</anchorfile>
      <anchor>aea4a42367c27610d7a5b2c2492d69cba</anchor>
      <arglist>(iterable $fileNames)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>count</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuite.html</anchorfile>
      <anchor>ae5d40462ac5714ca641015be1b654609</anchor>
      <arglist>(bool $preferCache=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getName</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuite.html</anchorfile>
      <anchor>a5022e54cd3cc1c22fa3a6a9d197fc0de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getGroups</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuite.html</anchorfile>
      <anchor>a9b15e26e8a971b0514d4163fa1751b47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getGroupDetails</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuite.html</anchorfile>
      <anchor>a82694bb6ad3e08dacb8e8a890d3fc44f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setGroupDetails</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuite.html</anchorfile>
      <anchor>a5781ee062c3b23bd920fb4f3112bf701</anchor>
      <arglist>(array $groups)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>run</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuite.html</anchorfile>
      <anchor>a1102953e35db0cbb8ffb7a4cbb860fcd</anchor>
      <arglist>(TestResult $result=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setRunTestInSeparateProcess</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuite.html</anchorfile>
      <anchor>a93c5add6dd359d4f3ae5ce936d7c7c7b</anchor>
      <arglist>(bool $runTestInSeparateProcess)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setName</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuite.html</anchorfile>
      <anchor>a4bf43c474f62affe656876fdabfb23a9</anchor>
      <arglist>(string $name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAt</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuite.html</anchorfile>
      <anchor>a153f3ec161f8e062cd6d56db8c6f7056</anchor>
      <arglist>(int $index)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>tests</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuite.html</anchorfile>
      <anchor>a29040b7c0ff5507a28460bb243752d17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setTests</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuite.html</anchorfile>
      <anchor>a018df43b35dd45aefdb71e6a6a755f53</anchor>
      <arglist>(array $tests)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>markTestSuiteSkipped</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuite.html</anchorfile>
      <anchor>a4c8ed2a7b4cb5657a2b76f3b63d1ad23</anchor>
      <arglist>($message=&apos;&apos;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setBeStrictAboutChangesToGlobalState</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuite.html</anchorfile>
      <anchor>abe03d3c3ef041962550ffdbeafc83103</anchor>
      <arglist>($beStrictAboutChangesToGlobalState)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setBackupGlobals</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuite.html</anchorfile>
      <anchor>aad17f935adc5ed77984b5821f99b4bdb</anchor>
      <arglist>($backupGlobals)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setBackupStaticAttributes</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuite.html</anchorfile>
      <anchor>ae3e230ac8bef57440a010412d6903eed</anchor>
      <arglist>($backupStaticAttributes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getIterator</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuite.html</anchorfile>
      <anchor>a30369d5480e043b3dd7900f0e3cd9785</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>injectFilter</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuite.html</anchorfile>
      <anchor>a3146d6c4077d7271b5a4bacab99da50e</anchor>
      <arglist>(Factory $filter)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>createResult</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuite.html</anchorfile>
      <anchor>aa5a71c5ac56bef20df5ed6e6ffc08bb3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>addTestMethod</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuite.html</anchorfile>
      <anchor>a373d6677c1b8309c5b55c31f754af987</anchor>
      <arglist>(\ReflectionClass $class, \ReflectionMethod $method)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$backupGlobals</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuite.html</anchorfile>
      <anchor>a2fdc3aad27414801ca650dcaae11ce06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$backupStaticAttributes</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuite.html</anchorfile>
      <anchor>a64b80cd84e2db5db7fb38e271a26ce40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$runTestInSeparateProcess</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuite.html</anchorfile>
      <anchor>a93b4bd1a9913d57d07f17eb387b190ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$name</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuite.html</anchorfile>
      <anchor>a8f1c21a036f36b6b6a04e4329e739a83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$groups</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuite.html</anchorfile>
      <anchor>acd751670dd6f966936123366d57d6428</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$tests</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuite.html</anchorfile>
      <anchor>a2486c32c940332bfe7515551091518f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$numTests</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuite.html</anchorfile>
      <anchor>aa0a56181dc2ae423e0363e59529caf19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$testCase</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuite.html</anchorfile>
      <anchor>accd5f677c91d34215fdca1ef33836404</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$foundClasses</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuite.html</anchorfile>
      <anchor>a503a835688f4586ef887c3133cf8ff09</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::TestSuiteIterator</name>
    <filename>classPHPUnit_1_1Framework_1_1TestSuiteIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuiteIterator.html</anchorfile>
      <anchor>a710afb1deb9cf1bf5b03a6aa93f9de18</anchor>
      <arglist>(TestSuite $testSuite)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>rewind</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuiteIterator.html</anchorfile>
      <anchor>abf514878760535a24ee3e142e0353e6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>valid</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuiteIterator.html</anchorfile>
      <anchor>a480bbb0ef4042854d6936de2cb7dcc68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>key</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuiteIterator.html</anchorfile>
      <anchor>a5e1e11b134358fe2460088d3eb26fbdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>current</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuiteIterator.html</anchorfile>
      <anchor>a5f22051a579210576c8175ddfeae0a06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>next</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuiteIterator.html</anchorfile>
      <anchor>a55499e1bd34c8a4bebc6a2cc570278bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getChildren</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuiteIterator.html</anchorfile>
      <anchor>a7482d19c8aa8e7a91c4da5653a94ca36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>hasChildren</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuiteIterator.html</anchorfile>
      <anchor>af7775b5c1f6a183356458bde346ad5ba</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::TestSuiteIteratorTest</name>
    <filename>classPHPUnit_1_1Framework_1_1TestSuiteIteratorTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testKeyForEmptyTestSuiteInitiallyReturnsZero</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuiteIteratorTest.html</anchorfile>
      <anchor>a8f3c1e54740d1db1797a6c435d19a255</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testValidForEmptyTestSuiteInitiallyReturnsFalse</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuiteIteratorTest.html</anchorfile>
      <anchor>a8e15317e9a2f1696bdd92be091b3f241</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testKeyForNonEmptyTestSuiteInitiallyReturnsZero</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuiteIteratorTest.html</anchorfile>
      <anchor>a8c52f4f307da3afff3cfe990b233a01a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testValidForNonEmptyTestSuiteInitiallyReturnsTrue</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuiteIteratorTest.html</anchorfile>
      <anchor>a92be17e964ab4cd7772b18f4d241be6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCurrentForNonEmptyTestSuiteInitiallyReturnsFirstTest</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuiteIteratorTest.html</anchorfile>
      <anchor>a7c6d72f3ab5e060bab31db90c91bbe88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testRewindResetsKeyToZero</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuiteIteratorTest.html</anchorfile>
      <anchor>a751149598306bd747cb9cae6f4744ab7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testRewindResetsCurrentToFirstElement</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuiteIteratorTest.html</anchorfile>
      <anchor>a16bccda7287bd84e9650d9d149cff626</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testNextIncreasesKeyFromZeroToOne</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuiteIteratorTest.html</anchorfile>
      <anchor>a71fee2b4ca1f7065ffd0516f3ae4ca4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testValidAfterLastElementReturnsFalse</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuiteIteratorTest.html</anchorfile>
      <anchor>aa99c8bdd15f29de41ed77f190c8d7ec7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetChildrenForEmptyTestSuiteThrowsException</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuiteIteratorTest.html</anchorfile>
      <anchor>ab85e8b0c229c6b49a87c232f80cb29e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetChildrenForCurrentTestThrowsException</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuiteIteratorTest.html</anchorfile>
      <anchor>ac46c0d30f432e403521c3121e6a66d3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testGetChildrenReturnsNewInstanceWithCurrentTestSuite</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuiteIteratorTest.html</anchorfile>
      <anchor>a54120651465caea1d2f268eaf45ee1ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasChildrenForCurrentTestSuiteReturnsTrue</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuiteIteratorTest.html</anchorfile>
      <anchor>afdaacd77dccb7f83e1f9534a18b8bdec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasChildrenForCurrentTestReturnsFalse</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuiteIteratorTest.html</anchorfile>
      <anchor>ab16f752a7a25a041e88f7710a44020c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasChildrenForNoTestsReturnsFalse</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuiteIteratorTest.html</anchorfile>
      <anchor>a02fec8996bf73cf37bd64c2873344eca</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>PHPUnit::Runner::TestSuiteLoader</name>
    <filename>interfacePHPUnit_1_1Runner_1_1TestSuiteLoader.html</filename>
    <member kind="function">
      <type></type>
      <name>load</name>
      <anchorfile>interfacePHPUnit_1_1Runner_1_1TestSuiteLoader.html</anchorfile>
      <anchor>a35454083f2332e884923985661bd9651</anchor>
      <arglist>(string $suiteClassName, string $suiteClassFile=&apos;&apos;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>reload</name>
      <anchorfile>interfacePHPUnit_1_1Runner_1_1TestSuiteLoader.html</anchorfile>
      <anchor>a341cc5d29793f6d77fdfff70a7800c6e</anchor>
      <arglist>(ReflectionClass $aClass)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Runner::TestSuiteSorter</name>
    <filename>classPHPUnit_1_1Runner_1_1TestSuiteSorter.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1TestSuiteSorter.html</anchorfile>
      <anchor>a620e6a92f456aaf0c1bfef3cb0dcaa46</anchor>
      <arglist>(?TestResultCache $cache=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>reorderTestsInSuite</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1TestSuiteSorter.html</anchorfile>
      <anchor>a6c39921bcd054753d5f9c131fbb5f300</anchor>
      <arglist>(Test $suite, int $order, bool $resolveDependencies, int $orderDefects, bool $isRootTestSuite=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getOriginalExecutionOrder</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1TestSuiteSorter.html</anchorfile>
      <anchor>afd6d4af04c2cd46c083200b617159058</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getExecutionOrder</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1TestSuiteSorter.html</anchorfile>
      <anchor>a06179b92e6270fe9dc7252e1fcf0ef7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>getTestSorterUID</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1TestSuiteSorter.html</anchorfile>
      <anchor>a1ecf39e23a2baca276282eb9ac9c7aa8</anchor>
      <arglist>(Test $test)</arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>ORDER_DEFAULT</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1TestSuiteSorter.html</anchorfile>
      <anchor>a6556af86a7a3a04c707afac351abd8c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>ORDER_RANDOMIZED</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1TestSuiteSorter.html</anchorfile>
      <anchor>af2f82d6e4aa586d61cd68a2dd9034f44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>ORDER_REVERSED</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1TestSuiteSorter.html</anchorfile>
      <anchor>a12cb9d60e3b5c5a3cbe69be2ef5794c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>ORDER_DEFECTS_FIRST</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1TestSuiteSorter.html</anchorfile>
      <anchor>a38e5525f3f877c271870fdf84355a515</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>ORDER_DURATION</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1TestSuiteSorter.html</anchorfile>
      <anchor>aa149c98990a7ee2bb82f31b7b7044c4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>ORDER_SIZE</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1TestSuiteSorter.html</anchorfile>
      <anchor>a17ac22feff4f062f6ea35c48fd4726d8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Runner::TestSuiteSorterTest</name>
    <filename>classPHPUnit_1_1Runner_1_1TestSuiteSorterTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testThrowsExceptionWhenUsingInvalidOrderOption</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1TestSuiteSorterTest.html</anchorfile>
      <anchor>a3e9a16b3f52b5c5425275b240e89ae25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testThrowsExceptionWhenUsingInvalidOrderDefectsOption</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1TestSuiteSorterTest.html</anchorfile>
      <anchor>a8cf78b5c2044b945b11cd9280e56a100</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testShouldNotAffectEmptyTestSuite</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1TestSuiteSorterTest.html</anchorfile>
      <anchor>af053ae1b606dbf2506c0c96afab3da3b</anchor>
      <arglist>(int $order, bool $resolveDependencies, int $orderDefects)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testBasicExecutionOrderOptions</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1TestSuiteSorterTest.html</anchorfile>
      <anchor>a323e63b1c63dba548d47f507cdfdcf09</anchor>
      <arglist>(int $order, bool $resolveDependencies, array $expectedOrder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCanSetRandomizationWithASeed</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1TestSuiteSorterTest.html</anchorfile>
      <anchor>a9687d2b50e3127ac1f824a65fc60587c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCanSetRandomizationWithASeedAndResolveDependencies</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1TestSuiteSorterTest.html</anchorfile>
      <anchor>aabecfc3d7df844b072da9d56a640d041</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testOrderDurationWithoutCache</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1TestSuiteSorterTest.html</anchorfile>
      <anchor>a1310b2865cfc1e9f30a3fc5dbf154c19</anchor>
      <arglist>(bool $resolveDependencies, array $expected)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>orderDurationWithoutCacheProvider</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1TestSuiteSorterTest.html</anchorfile>
      <anchor>a8b79b70e382a15b4159125fd5065b268</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testOrderDurationWithCache</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1TestSuiteSorterTest.html</anchorfile>
      <anchor>ac0fc72c808b201d861e7f993131e6ecd</anchor>
      <arglist>(bool $resolveDependencies, array $testTimes, array $expected)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>orderDurationWithCacheProvider</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1TestSuiteSorterTest.html</anchorfile>
      <anchor>a3d6b4d070a19e28a6590d9299eba28fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSuiteSorterDefectsOptions</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1TestSuiteSorterTest.html</anchorfile>
      <anchor>afa9eb383923b65a4947dae76db797c4d</anchor>
      <arglist>(int $order, bool $resolveDependencies, array $runState, array $expected)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>commonSorterOptionsProvider</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1TestSuiteSorterTest.html</anchorfile>
      <anchor>a3bd51ad67d3e20e094a695116bef52f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defectsSorterOptionsProvider</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1TestSuiteSorterTest.html</anchorfile>
      <anchor>afa9b244c20e16832c8c5a9d466ba5c10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCanHandleSuiteWithEmptyTestCase</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1TestSuiteSorterTest.html</anchorfile>
      <anchor>ad75bd8f24bf51946ddc1890a669c9125</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>suiteSorterOptionPermutationsProvider</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1TestSuiteSorterTest.html</anchorfile>
      <anchor>aa7276dde58c5f3ce9ac139f006bc4804</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testOrderBySize</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1TestSuiteSorterTest.html</anchorfile>
      <anchor>af7fc7f39724fa029e0989f0cd94f205a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::TestSuiteTest</name>
    <filename>classPHPUnit_1_1Framework_1_1TestSuiteTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testSuiteNameCanBeSameAsExistingNonTestClassName</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuiteTest.html</anchorfile>
      <anchor>a58d84758228cf783f0789e67412f696d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAddTestSuite</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuiteTest.html</anchorfile>
      <anchor>a452fc40175ae5653759cb2ea56a8349d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testInheritedTests</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuiteTest.html</anchorfile>
      <anchor>a6b11fe4542686417f829cb7077e5a641</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testNoTestCases</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuiteTest.html</anchorfile>
      <anchor>a6689b020158c6118c2ec0912028d33ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testNotPublicTestCase</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuiteTest.html</anchorfile>
      <anchor>a04e90115e2cfae3fc4db7008ead220a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testNotVoidTestCase</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuiteTest.html</anchorfile>
      <anchor>a981f05b20e85675f62ea976be1480f83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testOneTestCase</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuiteTest.html</anchorfile>
      <anchor>af014b3d00b4f2ddce9517792e22446d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testShadowedTests</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuiteTest.html</anchorfile>
      <anchor>a4731535f3cdee200420a2a7939ae345f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testBeforeClassAndAfterClassAnnotations</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuiteTest.html</anchorfile>
      <anchor>a389a5a50d2e7db0a395b2dfb69c4cafd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testBeforeClassWithDataProviders</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuiteTest.html</anchorfile>
      <anchor>a712ad69f3702563a5b9a0bd74274abb8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testBeforeAnnotation</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuiteTest.html</anchorfile>
      <anchor>a41afd2529319893fdc94415105c26936</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTestWithAnnotation</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuiteTest.html</anchorfile>
      <anchor>a3390b8cf67d40db143d528404a2223a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSkippedTestDataProvider</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuiteTest.html</anchorfile>
      <anchor>af7e4004ba8aa6002296e27972f9b770f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testItErrorsOnlyOnceOnHookException</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuiteTest.html</anchorfile>
      <anchor>ac6997c43839c2d16bb3f17353db38b72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTestDataProviderDependency</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuiteTest.html</anchorfile>
      <anchor>ad8012149fc325f3a8d715f6767d09b2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIncompleteTestDataProvider</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuiteTest.html</anchorfile>
      <anchor>a85da9b5a4cc1f2033ce78c8112b559d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testRequirementsBeforeClassHook</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuiteTest.html</anchorfile>
      <anchor>a2c6bdd10ebc6f0b73f180bc393115b66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testDoNotSkipInheritedClass</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuiteTest.html</anchorfile>
      <anchor>a6f2b0661b8d4c659ad7bc858a6ed1b43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTearDownAfterClassInTestSuite</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuiteTest.html</anchorfile>
      <anchor>a33baf89ebf2f7f708792d5dc1ac3f937</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuiteTest.html</anchorfile>
      <anchor>a42736c17d626468cb732cd3ff075a59d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>tearDown</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1TestSuiteTest.html</anchorfile>
      <anchor>aae60cf3f68d277e5700b5fe9cd27c6b4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::StaticAnalysis::TestUsingMocks</name>
    <filename>classPHPUnit_1_1StaticAnalysis_1_1TestUsingMocks.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testWillSayHelloThroughCreateMock</name>
      <anchorfile>classPHPUnit_1_1StaticAnalysis_1_1TestUsingMocks.html</anchorfile>
      <anchor>ac4c324e46c71f8d61603b19ebd98a4a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testWillSayHelloThroughCreateStub</name>
      <anchorfile>classPHPUnit_1_1StaticAnalysis_1_1TestUsingMocks.html</anchorfile>
      <anchor>a818efb42ef4fb370d82b8285045c6628</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testWillSayHelloThroughCreateConfiguredMock</name>
      <anchorfile>classPHPUnit_1_1StaticAnalysis_1_1TestUsingMocks.html</anchorfile>
      <anchor>a846853c5015cad26e3c0bbe000f5b488</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testWillSayHelloThroughCreatePartialMock</name>
      <anchorfile>classPHPUnit_1_1StaticAnalysis_1_1TestUsingMocks.html</anchorfile>
      <anchor>aa88e547f255a937ea31d5924a953db84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testWillSayHelloThroughCreateTestProxy</name>
      <anchorfile>classPHPUnit_1_1StaticAnalysis_1_1TestUsingMocks.html</anchorfile>
      <anchor>ad919b292491a49ad7e471cdd1df51f96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testWillSayHelloThroughGetMockBuilder</name>
      <anchorfile>classPHPUnit_1_1StaticAnalysis_1_1TestUsingMocks.html</anchorfile>
      <anchor>a635ff10f844c2a2e6f6fba9574a1f56a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestWarning</name>
    <filename>classTestWarning.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>runTest</name>
      <anchorfile>classTestWarning.html</anchorfile>
      <anchor>a33310b902bc96d876cfd26dd1a40345b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestWithAnnotations</name>
    <filename>classTestWithAnnotations.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testThatInteractsWithGlobalVariables</name>
      <anchorfile>classTestWithAnnotations.html</anchorfile>
      <anchor>a56eef5720915e5f2c56fe62cb2653688</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testThatInteractsWithStaticAttributes</name>
      <anchorfile>classTestWithAnnotations.html</anchorfile>
      <anchor>a34c0a3f9aca23153e7a34b2fc66d0215</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testInSeparateProcess</name>
      <anchorfile>classTestWithAnnotations.html</anchorfile>
      <anchor>a8d5b4eb216ca22bdcbca3ec6b553632e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testThatInteractsWithGlobalVariablesWithDataProvider</name>
      <anchorfile>classTestWithAnnotations.html</anchorfile>
      <anchor>acab38883a6e1a8de221422264505deb0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testThatInteractsWithStaticAttributesWithDataProvider</name>
      <anchorfile>classTestWithAnnotations.html</anchorfile>
      <anchor>a8d2336e8e8bfaa5fbccea4035b55f2d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testInSeparateProcessWithDataProvider</name>
      <anchorfile>classTestWithAnnotations.html</anchorfile>
      <anchor>a8ff602ea7b8568c647c19d858ebf3b6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>providerMethod</name>
      <anchorfile>classTestWithAnnotations.html</anchorfile>
      <anchor>ad96929fce48d066f4e6c7507dc5c0f0a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foo::DataProviderIssue2859::TestWithDataProviderTest</name>
    <filename>classFoo_1_1DataProviderIssue2859_1_1TestWithDataProviderTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testFirst</name>
      <anchorfile>classFoo_1_1DataProviderIssue2859_1_1TestWithDataProviderTest.html</anchorfile>
      <anchor>ab4eba68366fd5fd2022e7ac3356a9d24</anchor>
      <arglist>($x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>provide</name>
      <anchorfile>classFoo_1_1DataProviderIssue2859_1_1TestWithDataProviderTest.html</anchorfile>
      <anchor>ad8a93731da52c5095893fcd277f60cc8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestWithDifferentDurations</name>
    <filename>classTestWithDifferentDurations.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testOne</name>
      <anchorfile>classTestWithDifferentDurations.html</anchorfile>
      <anchor>a314fdfb0e9c56f231a2d1dd02f248d4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTwo</name>
      <anchorfile>classTestWithDifferentDurations.html</anchorfile>
      <anchor>a6751e128d285f2be55d695522359aba0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testThree</name>
      <anchorfile>classTestWithDifferentDurations.html</anchorfile>
      <anchor>aace69921263368e1180d5b8727b19696</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestWithDifferentNames</name>
    <filename>classTestWithDifferentNames.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testWithName</name>
      <anchorfile>classTestWithDifferentNames.html</anchorfile>
      <anchor>ac7ad1472d51c57955ebe410cbde1cca3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestWithDifferentOutput</name>
    <filename>classTestWithDifferentOutput.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testThatDoesNotGenerateOutput</name>
      <anchorfile>classTestWithDifferentOutput.html</anchorfile>
      <anchor>a2c419fd8475f31afd8b3a1539fed84a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testThatExpectsOutputRegex</name>
      <anchorfile>classTestWithDifferentOutput.html</anchorfile>
      <anchor>a6da808334f0192421063be579618cc01</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testThatExpectsOutputString</name>
      <anchorfile>classTestWithDifferentOutput.html</anchorfile>
      <anchor>a6344faf8d3c133797c0749ce2fad5a66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testThatGeneratesOutput</name>
      <anchorfile>classTestWithDifferentOutput.html</anchorfile>
      <anchor>a75dbcd164e6df7768dddad3f1069a350</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestWithDifferentSizes</name>
    <filename>classTestWithDifferentSizes.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testWithSizeUnknown</name>
      <anchorfile>classTestWithDifferentSizes.html</anchorfile>
      <anchor>a8e10dd2441ef31a364c3d18369949b9c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testWithSizeLarge</name>
      <anchorfile>classTestWithDifferentSizes.html</anchorfile>
      <anchor>ae21a8957cf227f300bc66be51cd49dc4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testWithSizeMedium</name>
      <anchorfile>classTestWithDifferentSizes.html</anchorfile>
      <anchor>a5fb76c6dfa8cf013a1d2dc26bba502e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testWithSizeSmall</name>
      <anchorfile>classTestWithDifferentSizes.html</anchorfile>
      <anchor>a641f1b2faa2b053c833c0101128d1741</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testDataProviderWithSizeSmall</name>
      <anchorfile>classTestWithDifferentSizes.html</anchorfile>
      <anchor>af56e12b2a2dc3427455d1722615115c0</anchor>
      <arglist>(bool $value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testDataProviderWithSizeMedium</name>
      <anchorfile>classTestWithDifferentSizes.html</anchorfile>
      <anchor>ac5df432420b50bc04a12189f461d3f6e</anchor>
      <arglist>(bool $value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>provider</name>
      <anchorfile>classTestWithDifferentSizes.html</anchorfile>
      <anchor>ab4459904ddbdf3f741e427a953f8f5c2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestWithDifferentStatuses</name>
    <filename>classTestWithDifferentStatuses.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testThatFails</name>
      <anchorfile>classTestWithDifferentStatuses.html</anchorfile>
      <anchor>aeb6b7a6dc9847ea9520dba8ba307ff23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testThatErrors</name>
      <anchorfile>classTestWithDifferentStatuses.html</anchorfile>
      <anchor>a3c7b6215818122fccce351fb4cb1b24d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testThatPasses</name>
      <anchorfile>classTestWithDifferentStatuses.html</anchorfile>
      <anchor>a165f25c83475beaa02e73deebf21b341</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testThatIsMarkedAsIncomplete</name>
      <anchorfile>classTestWithDifferentStatuses.html</anchorfile>
      <anchor>ab584d33e41fb3a94f38136870dced19b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testThatIsMarkedAsRisky</name>
      <anchorfile>classTestWithDifferentStatuses.html</anchorfile>
      <anchor>acdee55884f87db6c0ab5afba9da6a4e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testThatIsMarkedAsSkipped</name>
      <anchorfile>classTestWithDifferentStatuses.html</anchorfile>
      <anchor>a385c4bdb0584dce524b2e4ad2724c342</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testThatAddsAWarning</name>
      <anchorfile>classTestWithDifferentStatuses.html</anchorfile>
      <anchor>a42dbec893492743ff94b7debcbb8cf55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testWithCreatePartialMockWarning</name>
      <anchorfile>classTestWithDifferentStatuses.html</anchorfile>
      <anchor>a9eb2555fb15a5063230e68ed74e5ad97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testWithCreatePartialMockPassesNoWarning</name>
      <anchorfile>classTestWithDifferentStatuses.html</anchorfile>
      <anchor>af74e53f45640bd7470aeaf38f1472010</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestWithTest</name>
    <filename>classTestWithTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testAdd</name>
      <anchorfile>classTestWithTest.html</anchorfile>
      <anchor>a620f88a47fdc93fd1d526d5f2413aaa1</anchor>
      <arglist>($a, $b, $c)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>providerMethod</name>
      <anchorfile>classTestWithTest.html</anchorfile>
      <anchor>a7dc5be06dedb93f4c3bb4d882322d103</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::CodeCoverage::Report::Text</name>
    <filename>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Text.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Text.html</anchorfile>
      <anchor>aeb07859fd4d484cf8a601d46bd55f104</anchor>
      <arglist>(int $lowUpperBound=50, int $highLowerBound=90, bool $showUncoveredFiles=false, bool $showOnlySummary=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>process</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Text.html</anchorfile>
      <anchor>aa95f9f272dd60e589626fc634211dded</anchor>
      <arglist>(CodeCoverage $coverage, bool $showColors=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Text_Template</name>
    <filename>classText__Template.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classText__Template.html</anchorfile>
      <anchor>a6d745d963cb78e80299de43a93b97903</anchor>
      <arglist>($file=&apos;&apos;, $openDelimiter=&apos;{&apos;, $closeDelimiter=&apos;}&apos;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setFile</name>
      <anchorfile>classText__Template.html</anchorfile>
      <anchor>ad01e3fe6fa0d521ca048fc21d477a151</anchor>
      <arglist>($file)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setVar</name>
      <anchorfile>classText__Template.html</anchorfile>
      <anchor>aaa5017932d15570b56697851811d0ba7</anchor>
      <arglist>(array $values, $merge=TRUE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>render</name>
      <anchorfile>classText__Template.html</anchorfile>
      <anchor>af1509fadeed2ff41fbb86a0386e3faa4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>renderTo</name>
      <anchorfile>classText__Template.html</anchorfile>
      <anchor>aae0ea1bfe714edb7f00e5aa822686944</anchor>
      <arglist>($target)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$template</name>
      <anchorfile>classText__Template.html</anchorfile>
      <anchor>a52f3ea43ac0e7dce8299738ffdc23db2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$openDelimiter</name>
      <anchorfile>classText__Template.html</anchorfile>
      <anchor>a6f93c50c1c1095b96ceea2e96b4fff93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$closeDelimiter</name>
      <anchorfile>classText__Template.html</anchorfile>
      <anchor>a593f3e84e2ff20cb12aae66a02a16cd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$values</name>
      <anchorfile>classText__Template.html</anchorfile>
      <anchor>adf09a593e3c2571108a5b42760b19c0d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Util::TestDox::TextResultPrinter</name>
    <filename>classPHPUnit_1_1Util_1_1TestDox_1_1TextResultPrinter.html</filename>
    <base>PHPUnit::TextUI::ResultPrinter</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>startClass</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1TextResultPrinter.html</anchorfile>
      <anchor>a64d0121260c8c6d598d34d9e58cf0449</anchor>
      <arglist>(string $name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>onTest</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1TextResultPrinter.html</anchorfile>
      <anchor>a989416240063870daad61f77fa9d68da</anchor>
      <arglist>($name, bool $success=true)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>endClass</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1TextResultPrinter.html</anchorfile>
      <anchor>a7de7c34f8e70e65be47a620364b7cc90</anchor>
      <arglist>(string $name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::CodeCoverage::Report::TextTest</name>
    <filename>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1TextTest.html</filename>
    <base>SebastianBergmann::CodeCoverage::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testTextForBankAccountTest</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1TextTest.html</anchorfile>
      <anchor>a4a809d9c9594610fe8f22d5167bffe49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTextForFileWithIgnoredLines</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1TextTest.html</anchorfile>
      <anchor>ab7ca5a90885fc6b44e45b8290d87a6da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTextForClassWithAnonymousFunction</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1TextTest.html</anchorfile>
      <anchor>af63567d4ea91741dca084ce783e8e7dd</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Util::TextTestListRenderer</name>
    <filename>classPHPUnit_1_1Util_1_1TextTestListRenderer.html</filename>
    <member kind="function">
      <type></type>
      <name>render</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TextTestListRenderer.html</anchorfile>
      <anchor>a7043c8619874adaa26e44fc57f51a61a</anchor>
      <arglist>(TestSuite $suite)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::Types::This</name>
    <filename>classphpDocumentor_1_1Reflection_1_1Types_1_1This.html</filename>
    <base>phpDocumentor::Reflection::Type</base>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1This.html</anchorfile>
      <anchor>a118f38d03e999d2241d62034ba05880a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Doubler::ClassPatch::ThrowablePatch</name>
    <filename>classProphecy_1_1Doubler_1_1ClassPatch_1_1ThrowablePatch.html</filename>
    <base>Prophecy::Doubler::ClassPatch::ClassPatchInterface</base>
    <member kind="function">
      <type></type>
      <name>supports</name>
      <anchorfile>classProphecy_1_1Doubler_1_1ClassPatch_1_1ThrowablePatch.html</anchorfile>
      <anchor>af103d16f60a7b2f04bfb750ccfb91bf9</anchor>
      <arglist>(ClassNode $node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>apply</name>
      <anchorfile>classProphecy_1_1Doubler_1_1ClassPatch_1_1ThrowablePatch.html</anchorfile>
      <anchor>a4266c0dd58eabf49100d1c3adefdeb13</anchor>
      <arglist>(ClassNode $node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getPriority</name>
      <anchorfile>classProphecy_1_1Doubler_1_1ClassPatch_1_1ThrowablePatch.html</anchorfile>
      <anchor>a85c8d533084dd294be653d8773ca99e4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ThrowExceptionTestCase</name>
    <filename>classThrowExceptionTestCase.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>test</name>
      <anchorfile>classThrowExceptionTestCase.html</anchorfile>
      <anchor>a8b8593121cf3a98f9497fd99e7a54968</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testWithExpectExceptionObject</name>
      <anchorfile>classThrowExceptionTestCase.html</anchorfile>
      <anchor>a093488749b52bc8adbe256e214e5058c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ThrowNoExceptionTestCase</name>
    <filename>classThrowNoExceptionTestCase.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>test</name>
      <anchorfile>classThrowNoExceptionTestCase.html</anchorfile>
      <anchor>af198b80ebf6d094f15453a3a2a60a82e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Promise::ThrowPromise</name>
    <filename>classProphecy_1_1Promise_1_1ThrowPromise.html</filename>
    <base>Prophecy::Promise::PromiseInterface</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classProphecy_1_1Promise_1_1ThrowPromise.html</anchorfile>
      <anchor>a388a3ea98b6ca94534a8e796e6f25427</anchor>
      <arglist>($exception)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>execute</name>
      <anchorfile>classProphecy_1_1Promise_1_1ThrowPromise.html</anchorfile>
      <anchor>aa62c8bb716a84f7b22c1eecbac72fbfa</anchor>
      <arglist>(array $args, ObjectProphecy $object, MethodProphecy $method)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocBlock::Tags::Throws</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Throws.html</filename>
    <base>phpDocumentor::Reflection::DocBlock::Tags::TagWithType</base>
    <base>phpDocumentor::Reflection::DocBlock::Tags::Factory::StaticMethod</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Throws.html</anchorfile>
      <anchor>a40f370f2920b290ea494ac90c93ae3a6</anchor>
      <arglist>(Type $type, ?Description $description=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Throws.html</anchorfile>
      <anchor>ab77eaaa3f43d89f3e0b467ba70bf252f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>create</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Throws.html</anchorfile>
      <anchor>ab748ec46bd08c5b4f5d97b4a5a7df3a7</anchor>
      <arglist>(string $body, ?TypeResolver $typeResolver=null, ?DescriptionFactory $descriptionFactory=null, ?TypeContext $context=null)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocBlock::Tags::ThrowsTest</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1ThrowsTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>tearDown</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1ThrowsTest.html</anchorfile>
      <anchor>a44acac00a22b382e27b4e27a3c1e5934</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIfCorrectTagNameIsReturned</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1ThrowsTest.html</anchorfile>
      <anchor>af382820b6ce6637e695949a96d87e7b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIfTagCanBeRenderedUsingDefaultFormatter</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1ThrowsTest.html</anchorfile>
      <anchor>a6c75513f658bb6575924511865322049</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIfTagCanBeRenderedUsingSpecificFormatter</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1ThrowsTest.html</anchorfile>
      <anchor>a257800bbd3a7caca06e1f045aff9182c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasType</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1ThrowsTest.html</anchorfile>
      <anchor>aa1e9fa1934f678db35b54eacb75e77bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasDescription</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1ThrowsTest.html</anchorfile>
      <anchor>ae6d4e8d9b3eb8fc766faf11756d72afe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStringRepresentationIsReturned</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1ThrowsTest.html</anchorfile>
      <anchor>ae750d10eb63233a02e23a2d5dea451b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStringRepresentationIsReturnedWithoutDescription</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1ThrowsTest.html</anchorfile>
      <anchor>a5e590c597ce007487149e018bc7c2156</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethod</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1ThrowsTest.html</anchorfile>
      <anchor>aeb3985bdd7a5a0e557e47b3cb8c643dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodWithGenericWithSpace</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1ThrowsTest.html</anchorfile>
      <anchor>ad4fd0b331279f72124b3f0c2281d2d66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodWithGenericWithSpaceAndAddedEmojisToVerifyMultiByteBehaviour</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1ThrowsTest.html</anchorfile>
      <anchor>aa488dbc48acc5cbe9baaf4c2cd122060</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodWithEmojisToVerifyMultiByteBehaviour</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1ThrowsTest.html</anchorfile>
      <anchor>af9b43f7681649eb95ebeb36bdba42c1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodFailsIfBodyIsNotEmpty</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1ThrowsTest.html</anchorfile>
      <anchor>acf39462b12c8e3db1dc4fb1139ff4224</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodFailsIfResolverIsNull</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1ThrowsTest.html</anchorfile>
      <anchor>aafb5ab17304531190dd312e269e07fa0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodFailsIfDescriptionFactoryIsNull</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1ThrowsTest.html</anchorfile>
      <anchor>a83f1ab3d1c9d329da56e30d9929a8eff</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Diff::TimeEfficientImplementationTest</name>
    <filename>classSebastianBergmann_1_1Diff_1_1TimeEfficientImplementationTest.html</filename>
    <base>SebastianBergmann::Diff::LongestCommonSubsequenceTest</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>createImplementation</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1TimeEfficientImplementationTest.html</anchorfile>
      <anchor>a057a50ab1daaf42e0bce087d29646374</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Diff::TimeEfficientLongestCommonSubsequenceCalculator</name>
    <filename>classSebastianBergmann_1_1Diff_1_1TimeEfficientLongestCommonSubsequenceCalculator.html</filename>
    <base>SebastianBergmann::Diff::LongestCommonSubsequenceCalculator</base>
    <member kind="function">
      <type></type>
      <name>calculate</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1TimeEfficientLongestCommonSubsequenceCalculator.html</anchorfile>
      <anchor>a0112c4bafab1f4c8e2e0f0dd6742377a</anchor>
      <arglist>(array $from, array $to)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Timer::Timer</name>
    <filename>classSebastianBergmann_1_1Timer_1_1Timer.html</filename>
    <member kind="function" static="yes">
      <type>static</type>
      <name>start</name>
      <anchorfile>classSebastianBergmann_1_1Timer_1_1Timer.html</anchorfile>
      <anchor>a7485b20c2825299eb8b98b50d97c9305</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>stop</name>
      <anchorfile>classSebastianBergmann_1_1Timer_1_1Timer.html</anchorfile>
      <anchor>ae2b9e30fd061a662a429b4af4e3f3e65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>bytesToString</name>
      <anchorfile>classSebastianBergmann_1_1Timer_1_1Timer.html</anchorfile>
      <anchor>a68e7a156a6331291a8bf0e6a3a32e0e0</anchor>
      <arglist>(float $bytes)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>secondsToTimeString</name>
      <anchorfile>classSebastianBergmann_1_1Timer_1_1Timer.html</anchorfile>
      <anchor>a6f2bd9d367c8a7d5449adc9e1e96ad17</anchor>
      <arglist>(float $time)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>timeSinceStartOfRequest</name>
      <anchorfile>classSebastianBergmann_1_1Timer_1_1Timer.html</anchorfile>
      <anchor>abd90977fe1f834e60095912a2fb2f6f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>resourceUsage</name>
      <anchorfile>classSebastianBergmann_1_1Timer_1_1Timer.html</anchorfile>
      <anchor>a2a5f00e33fdbc227eb3265fefc821a2a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Timer::TimerTest</name>
    <filename>classSebastianBergmann_1_1Timer_1_1TimerTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testCanBeStartedAndStopped</name>
      <anchorfile>classSebastianBergmann_1_1Timer_1_1TimerTest.html</anchorfile>
      <anchor>ae56dd93b1b5ac22d85bcefbde8ce5067</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCanFormatTimeSinceStartOfRequest</name>
      <anchorfile>classSebastianBergmann_1_1Timer_1_1TimerTest.html</anchorfile>
      <anchor>ae54df1aa96e9f6b0b763cc5ade83538c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCanFormatSinceStartOfRequestWhenRequestTimeIsNotAvailableAsFloat</name>
      <anchorfile>classSebastianBergmann_1_1Timer_1_1TimerTest.html</anchorfile>
      <anchor>a88649dd509207750b8c5d0ea45b93e6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCannotFormatTimeSinceStartOfRequestWhenRequestTimeIsNotAvailable</name>
      <anchorfile>classSebastianBergmann_1_1Timer_1_1TimerTest.html</anchorfile>
      <anchor>a9f21926537fa8bf464ffcd6400060534</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCanFormatResourceUsage</name>
      <anchorfile>classSebastianBergmann_1_1Timer_1_1TimerTest.html</anchorfile>
      <anchor>a003e0783cb4a7fba8fffb62432521c42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCanFormatSecondsAsString</name>
      <anchorfile>classSebastianBergmann_1_1Timer_1_1TimerTest.html</anchorfile>
      <anchor>a89dc44717e9b5b8c33377a04875bd564</anchor>
      <arglist>(string $string, float $seconds)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>secondsProvider</name>
      <anchorfile>classSebastianBergmann_1_1Timer_1_1TimerTest.html</anchorfile>
      <anchor>aadc92459f8307d3a337cb29456ccbf8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCanFormatBytesAsString</name>
      <anchorfile>classSebastianBergmann_1_1Timer_1_1TimerTest.html</anchorfile>
      <anchor>a190cd01cf9cf34b48cbec1df5c82f65a</anchor>
      <arglist>(string $string, float $bytes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bytesProvider</name>
      <anchorfile>classSebastianBergmann_1_1Timer_1_1TimerTest.html</anchorfile>
      <anchor>a8ade3e31122e510a02e3e21e2432c2d2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TheSeer::Tokenizer::Token</name>
    <filename>classTheSeer_1_1Tokenizer_1_1Token.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classTheSeer_1_1Tokenizer_1_1Token.html</anchorfile>
      <anchor>a1a4f24d956825859646420ca63d68d37</anchor>
      <arglist>(int $line, string $name, string $value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getLine</name>
      <anchorfile>classTheSeer_1_1Tokenizer_1_1Token.html</anchorfile>
      <anchor>a4fb664d506f0467911057771db333893</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getName</name>
      <anchorfile>classTheSeer_1_1Tokenizer_1_1Token.html</anchorfile>
      <anchor>a4d19db79f3832d07f3d548ebd3380a36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getValue</name>
      <anchorfile>classTheSeer_1_1Tokenizer_1_1Token.html</anchorfile>
      <anchor>aa015af324812fe148cf5c8bd5dc3bf75</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TheSeer::Tokenizer::TokenCollection</name>
    <filename>classTheSeer_1_1Tokenizer_1_1TokenCollection.html</filename>
    <member kind="function">
      <type></type>
      <name>addToken</name>
      <anchorfile>classTheSeer_1_1Tokenizer_1_1TokenCollection.html</anchorfile>
      <anchor>a1acc2d2620f9e752b98bc22f4b78b836</anchor>
      <arglist>(Token $token)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>current</name>
      <anchorfile>classTheSeer_1_1Tokenizer_1_1TokenCollection.html</anchorfile>
      <anchor>ac653a4064338e1ca283a1f90d1acb9b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>key</name>
      <anchorfile>classTheSeer_1_1Tokenizer_1_1TokenCollection.html</anchorfile>
      <anchor>afb3855b980317d988a1f9329f8facb7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>next</name>
      <anchorfile>classTheSeer_1_1Tokenizer_1_1TokenCollection.html</anchorfile>
      <anchor>aefedbc14f959b2adb2eb14cb40e26ec0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>valid</name>
      <anchorfile>classTheSeer_1_1Tokenizer_1_1TokenCollection.html</anchorfile>
      <anchor>a5d61a4b11e6d95dbaeb16fba703675ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>rewind</name>
      <anchorfile>classTheSeer_1_1Tokenizer_1_1TokenCollection.html</anchorfile>
      <anchor>ada206fb6f36876524c573bfb43068842</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>count</name>
      <anchorfile>classTheSeer_1_1Tokenizer_1_1TokenCollection.html</anchorfile>
      <anchor>a95bb8722c8dd1fbc4c16fe10faa726c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>offsetExists</name>
      <anchorfile>classTheSeer_1_1Tokenizer_1_1TokenCollection.html</anchorfile>
      <anchor>a3a0a54c0515b16f5993e1ebae0f24768</anchor>
      <arglist>($offset)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>offsetGet</name>
      <anchorfile>classTheSeer_1_1Tokenizer_1_1TokenCollection.html</anchorfile>
      <anchor>a7ec68c1ddf8fbd62c06b5ba8ad0d8595</anchor>
      <arglist>($offset)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>offsetSet</name>
      <anchorfile>classTheSeer_1_1Tokenizer_1_1TokenCollection.html</anchorfile>
      <anchor>aa568049e8cf8ec173fe353b4dd367c9b</anchor>
      <arglist>($offset, $value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>offsetUnset</name>
      <anchorfile>classTheSeer_1_1Tokenizer_1_1TokenCollection.html</anchorfile>
      <anchor>a2c4695785117806f72eccd4d7ad4e0bd</anchor>
      <arglist>($offset)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TheSeer::Tokenizer::TokenCollectionException</name>
    <filename>classTheSeer_1_1Tokenizer_1_1TokenCollectionException.html</filename>
    <base>TheSeer::Tokenizer::Exception</base>
  </compound>
  <compound kind="interface">
    <name>Prophecy::Argument::Token::TokenInterface</name>
    <filename>interfaceProphecy_1_1Argument_1_1Token_1_1TokenInterface.html</filename>
    <member kind="function">
      <type></type>
      <name>scoreArgument</name>
      <anchorfile>interfaceProphecy_1_1Argument_1_1Token_1_1TokenInterface.html</anchorfile>
      <anchor>a4877e519ffdf7bf9525ad4dafd9a8fdb</anchor>
      <arglist>($argument)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isLast</name>
      <anchorfile>interfaceProphecy_1_1Argument_1_1Token_1_1TokenInterface.html</anchorfile>
      <anchor>a81da684673daea875f418ae116ac32a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>interfaceProphecy_1_1Argument_1_1Token_1_1TokenInterface.html</anchorfile>
      <anchor>a4ded765d4aadd22b2722b1e4f2c3a5b8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TheSeer::Tokenizer::Tokenizer</name>
    <filename>classTheSeer_1_1Tokenizer_1_1Tokenizer.html</filename>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::CodeCoverage::Report::Xml::Totals</name>
    <filename>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1Totals.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1Totals.html</anchorfile>
      <anchor>a7780f9dd98fe772d99f84d8dd5c5839e</anchor>
      <arglist>(\DOMElement $container)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getContainer</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1Totals.html</anchorfile>
      <anchor>a546d101f3f850df970f8205a00ca0c8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setNumLines</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1Totals.html</anchorfile>
      <anchor>ae0b580009d6d34623af679c018180dd7</anchor>
      <arglist>(int $loc, int $cloc, int $ncloc, int $executable, int $executed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setNumClasses</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1Totals.html</anchorfile>
      <anchor>af5b4d33a8d29de7e32b9295dcd988844</anchor>
      <arglist>(int $count, int $tested)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setNumTraits</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1Totals.html</anchorfile>
      <anchor>a405df6eec1338c44860f221c374edf80</anchor>
      <arglist>(int $count, int $tested)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setNumMethods</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1Totals.html</anchorfile>
      <anchor>a84ba3eb5302876f50b0b7f68ca2b64c0</anchor>
      <arglist>(int $count, int $tested)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setNumFunctions</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1Totals.html</anchorfile>
      <anchor>a685942034798082a6f90014c1520f63e</anchor>
      <arglist>(int $count, int $tested)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::TraversableContains</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1TraversableContains.html</filename>
    <base>PHPUnit::Framework::Constraint::Constraint</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1TraversableContains.html</anchorfile>
      <anchor>a0f43e9bda9fb83f2ed1265b62a3f25c8</anchor>
      <arglist>($value, bool $checkForObjectIdentity=true, bool $checkForNonObjectIdentity=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1TraversableContains.html</anchorfile>
      <anchor>a5b6698966cbb957ada960e3b52547c8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>matches</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1TraversableContains.html</anchorfile>
      <anchor>a15e3a5fb0774fd994c2c412606846456</anchor>
      <arglist>($other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>failureDescription</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1TraversableContains.html</anchorfile>
      <anchor>aedbb2453b1774a9b219a3e4c5a15b77f</anchor>
      <arglist>($other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::TraversableContainsEqual</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1TraversableContainsEqual.html</filename>
    <base>PHPUnit::Framework::Constraint::Constraint</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1TraversableContainsEqual.html</anchorfile>
      <anchor>a0a085f2215ff35b0b6ca08259b9f0885</anchor>
      <arglist>($value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1TraversableContainsEqual.html</anchorfile>
      <anchor>a3c4fab968b1f108c931efac27c9b4648</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>matches</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1TraversableContainsEqual.html</anchorfile>
      <anchor>a7554c9514679e60c24a0125ff0db7313</anchor>
      <arglist>($other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>failureDescription</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1TraversableContainsEqual.html</anchorfile>
      <anchor>a9b2c6093e85017f355904809ca8b28e3</anchor>
      <arglist>($other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::TraversableContainsIdentical</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1TraversableContainsIdentical.html</filename>
    <base>PHPUnit::Framework::Constraint::Constraint</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1TraversableContainsIdentical.html</anchorfile>
      <anchor>a406dac8e17e75c7e5df3154bb33a8225</anchor>
      <arglist>($value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1TraversableContainsIdentical.html</anchorfile>
      <anchor>aee9986b27493243be094f97b045afbc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>matches</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1TraversableContainsIdentical.html</anchorfile>
      <anchor>a75ad19565a8c2fa510ec979f31daa77f</anchor>
      <arglist>($other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>failureDescription</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1TraversableContainsIdentical.html</anchorfile>
      <anchor>acf3413f4d8a05a8704e467c3418b93b1</anchor>
      <arglist>($other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::TraversableContainsOnly</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1TraversableContainsOnly.html</filename>
    <base>PHPUnit::Framework::Constraint::Constraint</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1TraversableContainsOnly.html</anchorfile>
      <anchor>a985c35f9d115aef501a0294bf42f646b</anchor>
      <arglist>(string $type, bool $isNativeType=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>evaluate</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1TraversableContainsOnly.html</anchorfile>
      <anchor>af4a126d3c437d8a25f4d428775a5bf86</anchor>
      <arglist>($other, string $description=&apos;&apos;, bool $returnResult=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1TraversableContainsOnly.html</anchorfile>
      <anchor>a2a89b3f45723e4b5193c259a7ed01f75</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Constraint::TraversableContainsTest</name>
    <filename>classPHPUnit_1_1Framework_1_1Constraint_1_1TraversableContainsTest.html</filename>
    <base>PHPUnit::Framework::Constraint::ConstraintTestCase</base>
    <member kind="function">
      <type></type>
      <name>testConstraintTraversableCheckForNonObjectIdentityForDefaultCase</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1TraversableContainsTest.html</anchorfile>
      <anchor>a4a6c5bd9f2218a0e52edd60e98f9a933</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintTraversableCheckForObjectIdentityForDefaultCase</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1TraversableContainsTest.html</anchorfile>
      <anchor>a98a561d76816ce15e9c02f5b50747b7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintTraversableCheckForObjectIdentityForPrimitiveType</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1TraversableContainsTest.html</anchorfile>
      <anchor>a96b529bbafe46d31db0577818e441f87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintTraversableWithRightValue</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1TraversableContainsTest.html</anchorfile>
      <anchor>a67904d26c3f0b7def8fdd77d50026271</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintTraversableWithFailValue</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1TraversableContainsTest.html</anchorfile>
      <anchor>a8ef7f1afa7e9cd4114bc2611551eeb5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintTraversableCountMethods</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1TraversableContainsTest.html</anchorfile>
      <anchor>aae80d16cc51b76368c739397f6e4d430</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintTraversableEvaluateMethodWithFailExample</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1TraversableContainsTest.html</anchorfile>
      <anchor>aa5b4bb857bf329b9eaedcc3f8e376d75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintTraversableEvaluateMethodWithFailExample2</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1TraversableContainsTest.html</anchorfile>
      <anchor>ad537c07a325184037ce5477b18d022ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintTraversableEvaluateMethodWithFailExampleWithCustomMessage</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1TraversableContainsTest.html</anchorfile>
      <anchor>af196251119e91a2bd6cc6d41678851ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintTraversableToStringMethodsWithStdClass</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1TraversableContainsTest.html</anchorfile>
      <anchor>a98834a1bb3249bbcb53c4871084ad67f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintTraversableToStringMethods</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1TraversableContainsTest.html</anchorfile>
      <anchor>ae21071fa0b9b3ae882352b3380edc7e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintTraversableToStringMethodsWithSplObjectStorage</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1TraversableContainsTest.html</anchorfile>
      <anchor>ab98679f761676ea5232316132446eb7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintTraversableStdClassForFailSplObjectStorage</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1TraversableContainsTest.html</anchorfile>
      <anchor>a30602cfc0f4e2f46b2f3ee4c64033397</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testConstraintTraversableStdClassForFailSplObjectStorageWithCustomMessage</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Constraint_1_1TraversableContainsTest.html</anchorfile>
      <anchor>a5b0afc4c11335b0bdab073a96248b25b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>TraversableMockTestInterface</name>
    <filename>interfaceTraversableMockTestInterface.html</filename>
  </compound>
  <compound kind="class">
    <name>Prophecy::Doubler::ClassPatch::TraversablePatch</name>
    <filename>classProphecy_1_1Doubler_1_1ClassPatch_1_1TraversablePatch.html</filename>
    <base>Prophecy::Doubler::ClassPatch::ClassPatchInterface</base>
    <member kind="function">
      <type></type>
      <name>supports</name>
      <anchorfile>classProphecy_1_1Doubler_1_1ClassPatch_1_1TraversablePatch.html</anchorfile>
      <anchor>a1f13eddd2e338c30cbe3af11467aa8b2</anchor>
      <arglist>(ClassNode $node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>apply</name>
      <anchorfile>classProphecy_1_1Doubler_1_1ClassPatch_1_1TraversablePatch.html</anchorfile>
      <anchor>a3e63d9b5cde4bf20a38f99eb89ef8cb6</anchor>
      <arglist>(ClassNode $node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getPriority</name>
      <anchorfile>classProphecy_1_1Doubler_1_1ClassPatch_1_1TraversablePatch.html</anchorfile>
      <anchor>a381e9188941e720ca94e4ca967e5eeda</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::Traverser</name>
    <filename>classphpDocumentor_1_1Reflection_1_1Traverser.html</filename>
    <member kind="function">
      <type></type>
      <name>traverse</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Traverser.html</anchorfile>
      <anchor>a2538ee43a875ea3736d092ac3fdda4b8</anchor>
      <arglist>(array $nodes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>traverseArray</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Traverser.html</anchorfile>
      <anchor>a8518b275b1818a0b6838cc9c6a5bce13</anchor>
      <arglist>(array $nodes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>callback</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Traverser.html</anchorfile>
      <anchor>acec22e51abac74a325c56e458c3b3060</anchor>
      <arglist>(Node $class)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::PseudoTypes::True_</name>
    <filename>classphpDocumentor_1_1Reflection_1_1PseudoTypes_1_1True__.html</filename>
    <base>phpDocumentor::Reflection::Types::Boolean</base>
    <base>phpDocumentor::Reflection::PseudoType</base>
    <member kind="function">
      <type></type>
      <name>underlyingType</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1PseudoTypes_1_1True__.html</anchorfile>
      <anchor>ae6390083b5c470ad8c2b711b83f2d188</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1PseudoTypes_1_1True__.html</anchorfile>
      <anchor>ad4f286b24c4466f66ed696a0ff846f6b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::PseudoTypes::TrueTest</name>
    <filename>classphpDocumentor_1_1Reflection_1_1PseudoTypes_1_1TrueTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testExposesUnderlyingType</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1PseudoTypes_1_1TrueTest.html</anchorfile>
      <anchor>afd6afd8a3487d5df9a9df154cb46dcc4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTrueStringifyCorrectly</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1PseudoTypes_1_1TrueTest.html</anchorfile>
      <anchor>a69f6029c0b2cae6ea50bca1b669f8202</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCanBeInstantiatedUsingDeprecatedFqsen</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1PseudoTypes_1_1TrueTest.html</anchorfile>
      <anchor>a80476a5ef3b062ab8df77b809464231a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TruthyConstraint</name>
    <filename>classTruthyConstraint.html</filename>
    <base>PHPUnit::Framework::Constraint::Constraint</base>
    <member kind="function">
      <type></type>
      <name>matches</name>
      <anchorfile>classTruthyConstraint.html</anchorfile>
      <anchor>a97b1a23d20f66e297976f1c54857c857</anchor>
      <arglist>($other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classTruthyConstraint.html</anchorfile>
      <anchor>a8df684d4a4872bfbd46e5b57a47104a0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TwoTest</name>
    <filename>classTwoTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testSomething</name>
      <anchorfile>classTwoTest.html</anchorfile>
      <anchor>a4471bf808d55ffa1a8bb3f380a5f275b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Type::Type</name>
    <filename>classSebastianBergmann_1_1Type_1_1Type.html</filename>
    <member kind="function">
      <type></type>
      <name>isAssignable</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1Type.html</anchorfile>
      <anchor>aa53319535ce83497af9ceaa255bd556e</anchor>
      <arglist>(Type $other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getReturnTypeDeclaration</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1Type.html</anchorfile>
      <anchor>a5a488d79f70cacf8ceeac782fabfed59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>allowsNull</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1Type.html</anchorfile>
      <anchor>a819fe229a16cc615bdbbc339917d4810</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>fromValue</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1Type.html</anchorfile>
      <anchor>a01dc85ee4bbe0e4b8f5882a1ab6bd5fb</anchor>
      <arglist>($value, bool $allowsNull)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>fromName</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1Type.html</anchorfile>
      <anchor>a11245e2abfe989608df24af414e797fb</anchor>
      <arglist>(string $typeName, bool $allowsNull)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Util::Type</name>
    <filename>classPHPUnit_1_1Util_1_1Type.html</filename>
    <member kind="function" static="yes">
      <type>static</type>
      <name>isType</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Type.html</anchorfile>
      <anchor>a90db8426c5ab3df01b9fc22ec089d95c</anchor>
      <arglist>(string $type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>isCloneable</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Type.html</anchorfile>
      <anchor>a50b88059d449fa1d418669bfc3d49350</anchor>
      <arglist>(object $object)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::Type</name>
    <filename>classPharIo_1_1Manifest_1_1Type.html</filename>
    <member kind="function">
      <type></type>
      <name>isApplication</name>
      <anchorfile>classPharIo_1_1Manifest_1_1Type.html</anchorfile>
      <anchor>a428bb3850ad19c5586ed651073abec1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isLibrary</name>
      <anchorfile>classPharIo_1_1Manifest_1_1Type.html</anchorfile>
      <anchor>af34f76e434024d93ad2890f9aaa99e58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isExtension</name>
      <anchorfile>classPharIo_1_1Manifest_1_1Type.html</anchorfile>
      <anchor>af4e729796c4916451f81c0c3ea7c84c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>application</name>
      <anchorfile>classPharIo_1_1Manifest_1_1Type.html</anchorfile>
      <anchor>ab1f829f7ab7940187d091f71e54fc82d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>library</name>
      <anchorfile>classPharIo_1_1Manifest_1_1Type.html</anchorfile>
      <anchor>a8d23c83e9d111403988ec5add286e479</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>extension</name>
      <anchorfile>classPharIo_1_1Manifest_1_1Type.html</anchorfile>
      <anchor>aa3178de0b517a2f91ecad2c12505859c</anchor>
      <arglist>(ApplicationName $application, VersionConstraint $versionConstraint)</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>phpDocumentor::Reflection::Type</name>
    <filename>interfacephpDocumentor_1_1Reflection_1_1Type.html</filename>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>interfacephpDocumentor_1_1Reflection_1_1Type.html</anchorfile>
      <anchor>a6eadd090278cad618d1e723ed3516b87</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Comparator::TypeComparator</name>
    <filename>classSebastianBergmann_1_1Comparator_1_1TypeComparator.html</filename>
    <base>SebastianBergmann::Comparator::Comparator</base>
    <member kind="function">
      <type></type>
      <name>accepts</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1TypeComparator.html</anchorfile>
      <anchor>ad904dbcf973b71bdb6da238310251809</anchor>
      <arglist>($expected, $actual)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>assertEquals</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1TypeComparator.html</anchorfile>
      <anchor>ab837851957625ee9f9fe5f1f7aaae2f9</anchor>
      <arglist>($expected, $actual, $delta=0.0, $canonicalize=false, $ignoreCase=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Comparator::TypeComparatorTest</name>
    <filename>classSebastianBergmann_1_1Comparator_1_1TypeComparatorTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>acceptsSucceedsProvider</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1TypeComparatorTest.html</anchorfile>
      <anchor>a7cd2bb4dc87f4148f404c8a425d48f50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>assertEqualsSucceedsProvider</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1TypeComparatorTest.html</anchorfile>
      <anchor>a2d0f4f5e3b00ebdb66b958cef8c3aad4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>assertEqualsFailsProvider</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1TypeComparatorTest.html</anchorfile>
      <anchor>afe9fbc53f07e3007dbcf987f1cee5194</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAcceptsSucceeds</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1TypeComparatorTest.html</anchorfile>
      <anchor>a3b7291fc4e2578a88d471734f1bb3068</anchor>
      <arglist>($expected, $actual)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertEqualsSucceeds</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1TypeComparatorTest.html</anchorfile>
      <anchor>af8ddfb827521242d5f758492d323fd16</anchor>
      <arglist>($expected, $actual)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAssertEqualsFails</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1TypeComparatorTest.html</anchorfile>
      <anchor>a2920e0bc208e0353d2f1861c4d131a59</anchor>
      <arglist>($expected, $actual)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classSebastianBergmann_1_1Comparator_1_1TypeComparatorTest.html</anchorfile>
      <anchor>af918d6371b1d47188fa809f26eb3b8b8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeepCopy::f009::TypedProperty</name>
    <filename>classDeepCopy_1_1f009_1_1TypedProperty.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>$foo</name>
      <anchorfile>classDeepCopy_1_1f009_1_1TypedProperty.html</anchorfile>
      <anchor>ad3a1e11ea31c6df164c2d131f86446cf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>DeepCopy::TypeFilter::TypeFilter</name>
    <filename>interfaceDeepCopy_1_1TypeFilter_1_1TypeFilter.html</filename>
    <member kind="function">
      <type></type>
      <name>apply</name>
      <anchorfile>interfaceDeepCopy_1_1TypeFilter_1_1TypeFilter.html</anchorfile>
      <anchor>a6bc5e92305a2fadc5d83b2fef84fbf0f</anchor>
      <arglist>($element)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Doubler::Generator::TypeHintReference</name>
    <filename>classProphecy_1_1Doubler_1_1Generator_1_1TypeHintReference.html</filename>
    <member kind="function">
      <type></type>
      <name>isBuiltInParamTypeHint</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1TypeHintReference.html</anchorfile>
      <anchor>a7350b4fd72d62b9f527b222537ce222f</anchor>
      <arglist>($type)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isBuiltInReturnTypeHint</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1TypeHintReference.html</anchorfile>
      <anchor>a7180dea8929752bafa22f855b643de16</anchor>
      <arglist>($type)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeepCopy::TypeMatcher::TypeMatcher</name>
    <filename>classDeepCopy_1_1TypeMatcher_1_1TypeMatcher.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classDeepCopy_1_1TypeMatcher_1_1TypeMatcher.html</anchorfile>
      <anchor>ae2225ebccaa89939b5f07c45e3cbaeea</anchor>
      <arglist>($type)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>matches</name>
      <anchorfile>classDeepCopy_1_1TypeMatcher_1_1TypeMatcher.html</anchorfile>
      <anchor>ad68e5835dc51d58e02b1b29f92ba3c66</anchor>
      <arglist>($element)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeepCopyTest::TypeMatcher::TypeMatcherTest</name>
    <filename>classDeepCopyTest_1_1TypeMatcher_1_1TypeMatcherTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>test_it_retrieves_the_object_properties</name>
      <anchorfile>classDeepCopyTest_1_1TypeMatcher_1_1TypeMatcherTest.html</anchorfile>
      <anchor>ae4096e6d71862ea1f1daa767de801396</anchor>
      <arglist>($type, $element, $expected)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>provideElements</name>
      <anchorfile>classDeepCopyTest_1_1TypeMatcher_1_1TypeMatcherTest.html</anchorfile>
      <anchor>a1267a51a4bff165144b720a85488654f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Type::TypeName</name>
    <filename>classSebastianBergmann_1_1Type_1_1TypeName.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1TypeName.html</anchorfile>
      <anchor>af32020621a7e6f4e903b72c39fe6d38f</anchor>
      <arglist>(?string $namespaceName, string $simpleName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getNamespaceName</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1TypeName.html</anchorfile>
      <anchor>a059e3bd382f355e5da6f84ac086cedc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getSimpleName</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1TypeName.html</anchorfile>
      <anchor>ab884125ce7a054b9833d5926edc5244e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getQualifiedName</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1TypeName.html</anchorfile>
      <anchor>a690af6c2088c4bb5156d1ae9d7e1554f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isNamespaced</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1TypeName.html</anchorfile>
      <anchor>a9304299f6924f4f9318a0ce4fc8fc560</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>fromQualifiedName</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1TypeName.html</anchorfile>
      <anchor>af123a8818bacfd7994133686646d663e</anchor>
      <arglist>(string $fullClassName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>fromReflection</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1TypeName.html</anchorfile>
      <anchor>aa0ba56f26c6be0e815734ef7ccac6a05</anchor>
      <arglist>(\ReflectionClass $type)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Type::TypeNameTest</name>
    <filename>classSebastianBergmann_1_1Type_1_1TypeNameTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testFromReflection</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1TypeNameTest.html</anchorfile>
      <anchor>ae6442bfd3be211d5fa45779d70817109</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFromQualifiedName</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1TypeNameTest.html</anchorfile>
      <anchor>a4161b89d5fc4a9afdcf2422f915baac3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFromQualifiedNameWithLeadingSeparator</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1TypeNameTest.html</anchorfile>
      <anchor>ae8b4a13530d5f36548a29e54d8c57adc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFromQualifiedNameWithoutNamespace</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1TypeNameTest.html</anchorfile>
      <anchor>af04b8e91b5ef3d3b03a5c09424c28761</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Doubler::Generator::Node::TypeNodeAbstract</name>
    <filename>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1TypeNodeAbstract.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1TypeNodeAbstract.html</anchorfile>
      <anchor>a2d7de7a716e4d2db4530304891705166</anchor>
      <arglist>(string ... $types)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>canUseNullShorthand</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1TypeNodeAbstract.html</anchorfile>
      <anchor>a2a0056ca3d5c8e0831f70b9d3b43133d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getTypes</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1TypeNodeAbstract.html</anchorfile>
      <anchor>a29ff71d94b203ed27d56e0e4ff685fb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getNonNullTypes</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1TypeNodeAbstract.html</anchorfile>
      <anchor>aba48be214d3a43e113538212147a5a25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>prefixWithNsSeparator</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1TypeNodeAbstract.html</anchorfile>
      <anchor>abe20a112058e0406c5f74fd636bb0843</anchor>
      <arglist>(string $type)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>getRealType</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1TypeNodeAbstract.html</anchorfile>
      <anchor>a7f124c38c81c092e542e995bc7b873cd</anchor>
      <arglist>(string $type)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>guardIsValidType</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1TypeNodeAbstract.html</anchorfile>
      <anchor>ace2b5a7f20452c20b9706a824d2ff824</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$types</name>
      <anchorfile>classProphecy_1_1Doubler_1_1Generator_1_1Node_1_1TypeNodeAbstract.html</anchorfile>
      <anchor>aeb4b5ba068919c939e7feaf0705288ac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::TypeResolver</name>
    <filename>classphpDocumentor_1_1Reflection_1_1TypeResolver.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1TypeResolver.html</anchorfile>
      <anchor>aeea802ace7e4a1766da0b450b52ca0c4</anchor>
      <arglist>(?FqsenResolver $fqsenResolver=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addKeyword</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1TypeResolver.html</anchorfile>
      <anchor>a8dbac109c8985f6168babdc90b8ed5fb</anchor>
      <arglist>(string $keyword, string $typeClassName)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>benchmark::TypeResolverBench</name>
    <filename>classbenchmark_1_1TypeResolverBench.html</filename>
    <member kind="function">
      <type></type>
      <name>setup</name>
      <anchorfile>classbenchmark_1_1TypeResolverBench.html</anchorfile>
      <anchor>a60fcb7f2959b519cd2c2ea982ea1cf7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>benchResolveSingleType</name>
      <anchorfile>classbenchmark_1_1TypeResolverBench.html</anchorfile>
      <anchor>a086b4a5b2e21490762568bdc44f594fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>benchResolveCompoundType</name>
      <anchorfile>classbenchmark_1_1TypeResolverBench.html</anchorfile>
      <anchor>a6b3e7504ce5845afbd757357e41046fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>benchResolveArrayType</name>
      <anchorfile>classbenchmark_1_1TypeResolverBench.html</anchorfile>
      <anchor>af9ee1cbe225453a33db8824f0fe94717</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>benchResolveCompoundArrayType</name>
      <anchorfile>classbenchmark_1_1TypeResolverBench.html</anchorfile>
      <anchor>a35e2420b0d6e690f577d96cf31e1f438</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>benchResolveCompoundArrayWithDefinedTypes</name>
      <anchorfile>classbenchmark_1_1TypeResolverBench.html</anchorfile>
      <anchor>ac1b0cb1474193f69a7e0c946551da258</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::TypeResolverTest</name>
    <filename>classphpDocumentor_1_1Reflection_1_1TypeResolverTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testResolvingKeywords</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1TypeResolverTest.html</anchorfile>
      <anchor>aa36f145ff444fed72a3b62fffe781d42</anchor>
      <arglist>(string $keyword, string $expectedClass)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testResolvingClassStrings</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1TypeResolverTest.html</anchorfile>
      <anchor>a90d0ae7dbe94bdea5d2bb09741549d66</anchor>
      <arglist>(string $classString, bool $throwsException)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testResolvingFQSENs</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1TypeResolverTest.html</anchorfile>
      <anchor>ac498892f7ca6d8787d01247c09e239da</anchor>
      <arglist>(string $fqsen)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testResolvingRelativeQSENsBasedOnNamespace</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1TypeResolverTest.html</anchorfile>
      <anchor>a2f7d35a2e54d20fff7d70b58681a2f47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testResolvingRelativeQSENsBasedOnNamespaceAlias</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1TypeResolverTest.html</anchorfile>
      <anchor>a164849ec18b2370f6127956c7114ce80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testResolvingTypedArrays</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1TypeResolverTest.html</anchorfile>
      <anchor>a12fe0c8e5f0727c737f659f59269ecdc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testResolvingNullableTypes</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1TypeResolverTest.html</anchorfile>
      <anchor>a8aeae45207a627ea583537886654d34f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testResolvingNestedTypedArrays</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1TypeResolverTest.html</anchorfile>
      <anchor>ab9e7293f81e19fd74f92a72a9eaa5fc3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testResolvingCompoundTypes</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1TypeResolverTest.html</anchorfile>
      <anchor>a68189790e06a4ad0e7e38b691dbc7326</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testResolvingAmpersandCompoundTypes</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1TypeResolverTest.html</anchorfile>
      <anchor>a22c1eacd78128a35daeb0ca88f16c096</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testResolvingMixedCompoundTypes</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1TypeResolverTest.html</anchorfile>
      <anchor>a92fac896843eb7ccfd227f803adfb0ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testResolvingCompoundTypedArrayTypes</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1TypeResolverTest.html</anchorfile>
      <anchor>aa8f6435b631b9071856b2d60af9fc623</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testResolvingNullableCompoundTypes</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1TypeResolverTest.html</anchorfile>
      <anchor>adad47272d8305b166b8244ec7cb91ced</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testResolvingArrayExpressionObjectsTypes</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1TypeResolverTest.html</anchorfile>
      <anchor>affb70cec69d7243873fa10e508eaa132</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testResolvingArrayExpressionSimpleTypes</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1TypeResolverTest.html</anchorfile>
      <anchor>afdc250ebb8397bbb0f4fee30080cab09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testResolvingArrayOfArrayExpressionTypes</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1TypeResolverTest.html</anchorfile>
      <anchor>afcb7b51e7b471ed6504df07a1deae2a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testReturnEmptyCompoundOnAnUnclosedArrayExpressionType</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1TypeResolverTest.html</anchorfile>
      <anchor>a629a0a1e4593c12da5b16ed90d6a92e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testResolvingArrayExpressionOrCompoundTypes</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1TypeResolverTest.html</anchorfile>
      <anchor>aef0f899f2dd999fe8afcec907f043bf0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testResolvingIterableExpressionSimpleTypes</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1TypeResolverTest.html</anchorfile>
      <anchor>ae72defa4a62f7a72bae351bc5e477e96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testResolvingCompoundTypesWithTwoArrays</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1TypeResolverTest.html</anchorfile>
      <anchor>a161d7febee3232f5e89c2d7dfc3c95cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAddingAKeyword</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1TypeResolverTest.html</anchorfile>
      <anchor>a0c2ecbccbc6332f77e69ad9a4e859ee9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAddingAKeywordFailsIfTypeClassDoesNotExist</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1TypeResolverTest.html</anchorfile>
      <anchor>a64a5a03d68abd8bee10660912c28ecfe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAddingAKeywordFailsIfTypeClassDoesNotImplementTypeInterface</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1TypeResolverTest.html</anchorfile>
      <anchor>ac8b72b958c6ebc62c2f012ff8c711847</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExceptionIsThrownIfTypeIsEmpty</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1TypeResolverTest.html</anchorfile>
      <anchor>abf72f7fa6ddc4900a2ccfa333f66cf3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>provideKeywords</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1TypeResolverTest.html</anchorfile>
      <anchor>aa8dca87964c578dc1eac287e37711a4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>provideClassStrings</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1TypeResolverTest.html</anchorfile>
      <anchor>abdbf8b00e4f9675e0b8f39a9d57b6459</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>provideFqcn</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1TypeResolverTest.html</anchorfile>
      <anchor>af4bc5df778252d56be972e8aec0a2b1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testArrayKeyValueSpecification</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1TypeResolverTest.html</anchorfile>
      <anchor>a3d80cf3e7b46d7f2e4d0e6fd1d8f1183</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>benchmark::TypeResolverWithContextBench</name>
    <filename>classbenchmark_1_1TypeResolverWithContextBench.html</filename>
    <member kind="function">
      <type></type>
      <name>setup</name>
      <anchorfile>classbenchmark_1_1TypeResolverWithContextBench.html</anchorfile>
      <anchor>ad9601d7728c02c838bad733dd48fb43a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>benchResolveCompoundArrayWithDefinedTypes</name>
      <anchorfile>classbenchmark_1_1TypeResolverWithContextBench.html</anchorfile>
      <anchor>aabf1ce54b474be9b74283481ab44aa12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>benchArrayOfClass</name>
      <anchorfile>classbenchmark_1_1TypeResolverWithContextBench.html</anchorfile>
      <anchor>aef6d02c297b130373a0ec2597e4ad095</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Type::TypeTest</name>
    <filename>classSebastianBergmann_1_1Type_1_1TypeTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testTypeMappingFromValue</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1TypeTest.html</anchorfile>
      <anchor>ab269982a20ea582923cada58e5019008</anchor>
      <arglist>($value, bool $allowsNull, Type $expectedType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>valuesToNullableType</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1TypeTest.html</anchorfile>
      <anchor>af6ae986f6acb0ff35ee3763c926f8f4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testTypeMappingFromName</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1TypeTest.html</anchorfile>
      <anchor>afd50abaf0514570d180cc1076652073a</anchor>
      <arglist>(string $typeName, bool $allowsNull, $expectedType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>namesToTypes</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1TypeTest.html</anchorfile>
      <anchor>aabe803884da62b7907f54dc25d36cdb1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Argument::Token::TypeToken</name>
    <filename>classProphecy_1_1Argument_1_1Token_1_1TypeToken.html</filename>
    <base>Prophecy::Argument::Token::TokenInterface</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1TypeToken.html</anchorfile>
      <anchor>a0c19a06898fd6e25778a2d3f766ca366</anchor>
      <arglist>($type)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>scoreArgument</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1TypeToken.html</anchorfile>
      <anchor>ad7aaa7bdb3c6e91b565892e778a6b672</anchor>
      <arglist>($argument)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isLast</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1TypeToken.html</anchorfile>
      <anchor>aacd8a2eec7c970072f186852e3a42e0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classProphecy_1_1Argument_1_1Token_1_1TypeToken.html</anchorfile>
      <anchor>adea930a7c1b5d7c3a31526cb04737b4c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeepCopy::f004::UnclonableItem</name>
    <filename>classDeepCopy_1_1f004_1_1UnclonableItem.html</filename>
  </compound>
  <compound kind="class">
    <name>DoctrineTest::InstantiatorTestAsset::UnCloneableAsset</name>
    <filename>classDoctrineTest_1_1InstantiatorTestAsset_1_1UnCloneableAsset.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classDoctrineTest_1_1InstantiatorTestAsset_1_1UnCloneableAsset.html</anchorfile>
      <anchor>ad96d1298b129930827537f188f996159</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__clone</name>
      <anchorfile>classDoctrineTest_1_1InstantiatorTestAsset_1_1UnCloneableAsset.html</anchorfile>
      <anchor>a34508cba993dcde586dcf1a1f3ef331e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Exception::Call::UnexpectedCallException</name>
    <filename>classProphecy_1_1Exception_1_1Call_1_1UnexpectedCallException.html</filename>
    <base>Prophecy::Exception::Prophecy::ObjectProphecyException</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classProphecy_1_1Exception_1_1Call_1_1UnexpectedCallException.html</anchorfile>
      <anchor>a4ff3a635ef21c2590120a826256342cf</anchor>
      <arglist>($message, ObjectProphecy $objectProphecy, $methodName, array $arguments)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getMethodName</name>
      <anchorfile>classProphecy_1_1Exception_1_1Call_1_1UnexpectedCallException.html</anchorfile>
      <anchor>ab0478e386b2af114a7bb6949110d3697</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getArguments</name>
      <anchorfile>classProphecy_1_1Exception_1_1Call_1_1UnexpectedCallException.html</anchorfile>
      <anchor>a5117d7d08060b546a6eed35a09565d06</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Exception::Prediction::UnexpectedCallsCountException</name>
    <filename>classProphecy_1_1Exception_1_1Prediction_1_1UnexpectedCallsCountException.html</filename>
    <base>Prophecy::Exception::Prediction::UnexpectedCallsException</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classProphecy_1_1Exception_1_1Prediction_1_1UnexpectedCallsCountException.html</anchorfile>
      <anchor>a4768bdf8ebad879edab3b45a1fce24c2</anchor>
      <arglist>($message, MethodProphecy $methodProphecy, $count, array $calls)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getExpectedCount</name>
      <anchorfile>classProphecy_1_1Exception_1_1Prediction_1_1UnexpectedCallsCountException.html</anchorfile>
      <anchor>a47a63f77512abde23b7bc49414cdd856</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Prophecy::Exception::Prediction::UnexpectedCallsException</name>
    <filename>classProphecy_1_1Exception_1_1Prediction_1_1UnexpectedCallsException.html</filename>
    <base>Prophecy::Exception::Prophecy::MethodProphecyException</base>
    <base>Prophecy::Exception::Prediction::PredictionException</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classProphecy_1_1Exception_1_1Prediction_1_1UnexpectedCallsException.html</anchorfile>
      <anchor>a9151fc02ccfb0ef2c2403b813fde6d76</anchor>
      <arglist>($message, MethodProphecy $methodProphecy, array $calls)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getCalls</name>
      <anchorfile>classProphecy_1_1Exception_1_1Prediction_1_1UnexpectedCallsException.html</anchorfile>
      <anchor>a59b860a3c7ae7b14afdef7dd1bad0e3e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Doctrine::Instantiator::Exception::UnexpectedValueException</name>
    <filename>classDoctrine_1_1Instantiator_1_1Exception_1_1UnexpectedValueException.html</filename>
    <base>Doctrine::Instantiator::Exception::ExceptionInterface</base>
    <member kind="function" static="yes">
      <type>static</type>
      <name>fromSerializationTriggeredException</name>
      <anchorfile>classDoctrine_1_1Instantiator_1_1Exception_1_1UnexpectedValueException.html</anchorfile>
      <anchor>ac7342bfa0d1125e480eef1cf0a573964</anchor>
      <arglist>(ReflectionClass $reflectionClass, Exception $exception)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>fromUncleanUnSerialization</name>
      <anchorfile>classDoctrine_1_1Instantiator_1_1Exception_1_1UnexpectedValueException.html</anchorfile>
      <anchor>aff543bbad5727abba56850c09a9755f0</anchor>
      <arglist>(ReflectionClass $reflectionClass, string $errorString, int $errorCode, string $errorFile, int $errorLine)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DoctrineTest::InstantiatorTest::Exception::UnexpectedValueExceptionTest</name>
    <filename>classDoctrineTest_1_1InstantiatorTest_1_1Exception_1_1UnexpectedValueExceptionTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testFromSerializationTriggeredException</name>
      <anchorfile>classDoctrineTest_1_1InstantiatorTest_1_1Exception_1_1UnexpectedValueExceptionTest.html</anchorfile>
      <anchor>a74a46ab22dbbc16535415af160d4f799</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFromUncleanUnSerialization</name>
      <anchorfile>classDoctrineTest_1_1InstantiatorTest_1_1Exception_1_1UnexpectedValueExceptionTest.html</anchorfile>
      <anchor>a333577e6b7b091c6fcedf60845713212</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Diff::Utils::UnifiedDiffAssertTraitIntegrationTest</name>
    <filename>classSebastianBergmann_1_1Diff_1_1Utils_1_1UnifiedDiffAssertTraitIntegrationTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testValidPatches</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Utils_1_1UnifiedDiffAssertTraitIntegrationTest.html</anchorfile>
      <anchor>a860e90e3c55e4c1241c0262339bf9164</anchor>
      <arglist>(string $fileFrom, string $fileTo)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Utils_1_1UnifiedDiffAssertTraitIntegrationTest.html</anchorfile>
      <anchor>aca699c579fb5ee59159177bb3347c49a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>tearDown</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Utils_1_1UnifiedDiffAssertTraitIntegrationTest.html</anchorfile>
      <anchor>ab3910a388cb81afc67f033432d087ee2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Diff::Utils::UnifiedDiffAssertTraitTest</name>
    <filename>classSebastianBergmann_1_1Diff_1_1Utils_1_1UnifiedDiffAssertTraitTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testValidCases</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Utils_1_1UnifiedDiffAssertTraitTest.html</anchorfile>
      <anchor>ab548236508368d280aca4622dcecd1d4</anchor>
      <arglist>(string $diff)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>provideValidCases</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Utils_1_1UnifiedDiffAssertTraitTest.html</anchorfile>
      <anchor>a8bf6445d26738d12cf1fec4ceb92ccde</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testNoLinebreakEnd</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Utils_1_1UnifiedDiffAssertTraitTest.html</anchorfile>
      <anchor>a8fe72d386eb9af40d029a7497eb6e44c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testInvalidStartWithoutHeader</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Utils_1_1UnifiedDiffAssertTraitTest.html</anchorfile>
      <anchor>a8b01cc385d35f5a2c277cd94561449d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testInvalidStartHeader1</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Utils_1_1UnifiedDiffAssertTraitTest.html</anchorfile>
      <anchor>aa1dd3cb9d4c26b6f4a21f08fe2cad6ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testInvalidStartHeader2</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Utils_1_1UnifiedDiffAssertTraitTest.html</anchorfile>
      <anchor>a7f7b17b786250c15101fa34f7a77ebc6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testInvalidStartHeader3</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Utils_1_1UnifiedDiffAssertTraitTest.html</anchorfile>
      <anchor>a31908cc6b85551d19bd5bbad2c8a1d18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testInvalidStartHeader4</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Utils_1_1UnifiedDiffAssertTraitTest.html</anchorfile>
      <anchor>a6e599dc4027225ee29cfdc0bc4e1505b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testInvalidLine1</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Utils_1_1UnifiedDiffAssertTraitTest.html</anchorfile>
      <anchor>a6229dad765c1a58361e4d7801fc6a72d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testInvalidLine2</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Utils_1_1UnifiedDiffAssertTraitTest.html</anchorfile>
      <anchor>adb3c15989dd7091e0afde8052b183506</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHunkInvalidFormat</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Utils_1_1UnifiedDiffAssertTraitTest.html</anchorfile>
      <anchor>a53c5ffcf7ded0f83ff96007b09d28df7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHunkOverlapFrom</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Utils_1_1UnifiedDiffAssertTraitTest.html</anchorfile>
      <anchor>a58d9900ea5dc8cd60768d9f61fa9b676</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHunkOverlapTo</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Utils_1_1UnifiedDiffAssertTraitTest.html</anchorfile>
      <anchor>a972ad2b29d1ee250a46499c92e2b9031</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExpectHunk1</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Utils_1_1UnifiedDiffAssertTraitTest.html</anchorfile>
      <anchor>a056e596e687bab5c67690cd1aaa55189</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testExpectHunk2</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Utils_1_1UnifiedDiffAssertTraitTest.html</anchorfile>
      <anchor>ad487c0a7913eece1c7023dac339a2863</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testMisplacedLineAfterComments1</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Utils_1_1UnifiedDiffAssertTraitTest.html</anchorfile>
      <anchor>acf0cd2d1e6eba3c1dbb0bfec320e1de3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testMisplacedLineAfterComments2</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Utils_1_1UnifiedDiffAssertTraitTest.html</anchorfile>
      <anchor>acff7b66e8508dd9e359e9dce0a7a5725</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testMisplacedLineAfterComments3</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Utils_1_1UnifiedDiffAssertTraitTest.html</anchorfile>
      <anchor>a8888f24601ffa87fe5c16346922f8e28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testMisplacedComment</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Utils_1_1UnifiedDiffAssertTraitTest.html</anchorfile>
      <anchor>abf8f0366fa81ef2c9b93728984dd3782</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testUnexpectedDuplicateNoNewLineEOF</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Utils_1_1UnifiedDiffAssertTraitTest.html</anchorfile>
      <anchor>adb07ff138bdfd7faf738df66ef297d3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFromAfterClose</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Utils_1_1UnifiedDiffAssertTraitTest.html</anchorfile>
      <anchor>a67c020728e35bea19cd3b02725bc1fa3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSameAfterFromClose</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Utils_1_1UnifiedDiffAssertTraitTest.html</anchorfile>
      <anchor>aa6da8d28064d4b7014dac714758bbf14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testToAfterClose</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Utils_1_1UnifiedDiffAssertTraitTest.html</anchorfile>
      <anchor>afda4501d43d1fe28aa0ab5fa42edf062</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testSameAfterToClose</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Utils_1_1UnifiedDiffAssertTraitTest.html</anchorfile>
      <anchor>a71487ca1103641efd04b8aadc720db7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testUnexpectedEOFFromMissingLines</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Utils_1_1UnifiedDiffAssertTraitTest.html</anchorfile>
      <anchor>a3230bff722470ef87090052daf94c78d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testUnexpectedEOFToMissingLines</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Utils_1_1UnifiedDiffAssertTraitTest.html</anchorfile>
      <anchor>a7777eedc655a6f1cf2042c1153fba574</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testUnexpectedEOFBothFromAndToMissingLines</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Utils_1_1UnifiedDiffAssertTraitTest.html</anchorfile>
      <anchor>a829f537898c87f3d2fbc40f6f6ec5320</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Diff::Output::UnifiedDiffOutputBuilder</name>
    <filename>classSebastianBergmann_1_1Diff_1_1Output_1_1UnifiedDiffOutputBuilder.html</filename>
    <base>SebastianBergmann::Diff::Output::AbstractChunkOutputBuilder</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Output_1_1UnifiedDiffOutputBuilder.html</anchorfile>
      <anchor>a25842112fc72e50be992dfc93b5cdc3c</anchor>
      <arglist>(string $header=&quot;--- Original\n+++ New\n&quot;, bool $addLineNumbers=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getDiff</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Output_1_1UnifiedDiffOutputBuilder.html</anchorfile>
      <anchor>a5218645d07c604dcfefd3b73df802670</anchor>
      <arglist>(array $diff)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Diff::Output::UnifiedDiffOutputBuilderIntegrationTest</name>
    <filename>classSebastianBergmann_1_1Diff_1_1Output_1_1UnifiedDiffOutputBuilderIntegrationTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testDiffWithLineNumbersPath</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Output_1_1UnifiedDiffOutputBuilderIntegrationTest.html</anchorfile>
      <anchor>ab1b8ea7e5f460f2a5a747fb81246f16e</anchor>
      <arglist>($expected, $from, $to)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testDiffWithLineNumbersGitApply</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Output_1_1UnifiedDiffOutputBuilderIntegrationTest.html</anchorfile>
      <anchor>a2b500daa37e231c7485fd63303e75ca6</anchor>
      <arglist>($expected, $from, $to)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>provideDiffWithLineNumbers</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Output_1_1UnifiedDiffOutputBuilderIntegrationTest.html</anchorfile>
      <anchor>ac7b93974c0070d6596d0f79cd962e792</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Output_1_1UnifiedDiffOutputBuilderIntegrationTest.html</anchorfile>
      <anchor>ae71fb4f0d690a005074ecfa772524223</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>tearDown</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Output_1_1UnifiedDiffOutputBuilderIntegrationTest.html</anchorfile>
      <anchor>a3a01afe6b92cc3b29f0916cd488b40b6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Diff::Output::UnifiedDiffOutputBuilderTest</name>
    <filename>classSebastianBergmann_1_1Diff_1_1Output_1_1UnifiedDiffOutputBuilderTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testCustomHeaderCanBeUsed</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Output_1_1UnifiedDiffOutputBuilderTest.html</anchorfile>
      <anchor>a6001948fd3bccbfd2198c3e52c9a0fa2</anchor>
      <arglist>(string $expected, string $from, string $to, string $header)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>headerProvider</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Output_1_1UnifiedDiffOutputBuilderTest.html</anchorfile>
      <anchor>a8ed90e57188b2ec7ce4594fd6d37638f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testDiffWithLineNumbers</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Output_1_1UnifiedDiffOutputBuilderTest.html</anchorfile>
      <anchor>ac871328bdef16a7aa3d02881a68d38ca</anchor>
      <arglist>($expected, $from, $to)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>provideDiffWithLineNumbers</name>
      <anchorfile>classSebastianBergmann_1_1Diff_1_1Output_1_1UnifiedDiffOutputBuilderTest.html</anchorfile>
      <anchor>abc36511042c009d4a9a8d6590c388901</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::UnintentionallyCoveredCodeError</name>
    <filename>classPHPUnit_1_1Framework_1_1UnintentionallyCoveredCodeError.html</filename>
    <base>PHPUnit::Framework::RiskyTestError</base>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::CodeCoverage::UnintentionallyCoveredCodeException</name>
    <filename>classSebastianBergmann_1_1CodeCoverage_1_1UnintentionallyCoveredCodeException.html</filename>
    <base>SebastianBergmann::CodeCoverage::RuntimeException</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1UnintentionallyCoveredCodeException.html</anchorfile>
      <anchor>a556bff1a49af081d50cd22536d5314e3</anchor>
      <arglist>(array $unintentionallyCoveredUnits)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getUnintentionallyCoveredUnits</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1UnintentionallyCoveredCodeException.html</anchorfile>
      <anchor>a1661643cf17e31bac75ae7e45a94278a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::CodeCoverage::tests::Exception::UnintentionallyCoveredCodeExceptionTest</name>
    <filename>classSebastianBergmann_1_1CodeCoverage_1_1tests_1_1Exception_1_1UnintentionallyCoveredCodeExceptionTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testCanConstructWithEmptyArray</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1tests_1_1Exception_1_1UnintentionallyCoveredCodeExceptionTest.html</anchorfile>
      <anchor>a6aa223e1e602c1976a372faa2679c496</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCanConstructWithNonEmptyArray</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1tests_1_1Exception_1_1UnintentionallyCoveredCodeExceptionTest.html</anchorfile>
      <anchor>ae7f734c187551a711bcf1f46c183b595</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::CodeCoverage::Report::Xml::Unit</name>
    <filename>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1Unit.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1Unit.html</anchorfile>
      <anchor>afcf96ff93f4623c0fbb84a9b664a3a7b</anchor>
      <arglist>(\DOMElement $context, string $name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setLines</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1Unit.html</anchorfile>
      <anchor>aa3e7be9a2801a7427ccd097f68f8c5ee</anchor>
      <arglist>(int $start, int $executable, int $executed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setCrap</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1Unit.html</anchorfile>
      <anchor>a1bc8f33e05a846267d80ba3e6f92c9ef</anchor>
      <arglist>(float $crap)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setPackage</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1Unit.html</anchorfile>
      <anchor>aa8c3d479df2fa3cbd08295cad9cc5fe9</anchor>
      <arglist>(string $full, string $package, string $sub, string $category)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setNamespace</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1Unit.html</anchorfile>
      <anchor>aaf7e616a93f1918a33e8d373603e116e</anchor>
      <arglist>(string $namespace)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addMethod</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1Unit.html</anchorfile>
      <anchor>ada1ace76f7eef0c5dad8c396115ac244</anchor>
      <arglist>(string $name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Type::UnknownType</name>
    <filename>classSebastianBergmann_1_1Type_1_1UnknownType.html</filename>
    <base>SebastianBergmann::Type::Type</base>
    <member kind="function">
      <type></type>
      <name>isAssignable</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1UnknownType.html</anchorfile>
      <anchor>a6aa8d22a65dde2fd76d14b9b01d8b706</anchor>
      <arglist>(Type $other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getReturnTypeDeclaration</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1UnknownType.html</anchorfile>
      <anchor>a3a0e24ee8089ac2c24a97b1099d87bce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>allowsNull</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1UnknownType.html</anchorfile>
      <anchor>a52aaa3e22465ee700884960ca8cf4ef8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Type::UnknownTypeTest</name>
    <filename>classSebastianBergmann_1_1Type_1_1UnknownTypeTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testIsAssignable</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1UnknownTypeTest.html</anchorfile>
      <anchor>ad59319813a74b4e8148fa4c36ad6c583</anchor>
      <arglist>(Type $assignableType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>assignableTypes</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1UnknownTypeTest.html</anchorfile>
      <anchor>ac041d6958749ecc749de9e560329bc71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testAllowsNull</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1UnknownTypeTest.html</anchorfile>
      <anchor>a33527bcb6957de52e127b799a41b6cc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testReturnTypeDeclaration</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1UnknownTypeTest.html</anchorfile>
      <anchor>a44a8a4ecd649a2af2198d5ac3beeb133</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1UnknownTypeTest.html</anchorfile>
      <anchor>a567ec237411e9df4f9995a6db2955097</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DoctrineTest::InstantiatorTestAsset::UnserializeExceptionArrayObjectAsset</name>
    <filename>classDoctrineTest_1_1InstantiatorTestAsset_1_1UnserializeExceptionArrayObjectAsset.html</filename>
    <member kind="function">
      <type></type>
      <name>__wakeup</name>
      <anchorfile>classDoctrineTest_1_1InstantiatorTestAsset_1_1UnserializeExceptionArrayObjectAsset.html</anchorfile>
      <anchor>aed3fd4735c6fe5b04998e154c562533c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Version::UnsupportedVersionConstraintException</name>
    <filename>classPharIo_1_1Version_1_1UnsupportedVersionConstraintException.html</filename>
    <base>PharIo::Version::Exception</base>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocBlock::Tags::Reference::Url</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Reference_1_1Url.html</filename>
    <base>phpDocumentor::Reflection::DocBlock::Tags::Reference::Reference</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Reference_1_1Url.html</anchorfile>
      <anchor>acf9e0eecd9b20209c8b89b826d58d534</anchor>
      <arglist>(string $uri)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Reference_1_1Url.html</anchorfile>
      <anchor>aa8de50b73026c3f1eaf0026f1bad990e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::Url</name>
    <filename>classPharIo_1_1Manifest_1_1Url.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPharIo_1_1Manifest_1_1Url.html</anchorfile>
      <anchor>ad53b26943b750d66641be53200be8e24</anchor>
      <arglist>($url)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classPharIo_1_1Manifest_1_1Url.html</anchorfile>
      <anchor>a4a0dadfb56128515a3e694898aef73f7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Manifest::UrlTest</name>
    <filename>classPharIo_1_1Manifest_1_1UrlTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testCanBeCreatedForValidUrl</name>
      <anchorfile>classPharIo_1_1Manifest_1_1UrlTest.html</anchorfile>
      <anchor>ad2be5aa3cdf4e05582665e8c23dab411</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCanBeUsedAsString</name>
      <anchorfile>classPharIo_1_1Manifest_1_1UrlTest.html</anchorfile>
      <anchor>adb65b65638fa927dd94bb4e8a8d4fae6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCannotBeCreatedForInvalidUrl</name>
      <anchorfile>classPharIo_1_1Manifest_1_1UrlTest.html</anchorfile>
      <anchor>a6a4bc2c4936cb82009cdf0f992756552</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocBlock::Tags::Uses</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Uses.html</filename>
    <base>phpDocumentor::Reflection::DocBlock::Tags::BaseTag</base>
    <base>phpDocumentor::Reflection::DocBlock::Tags::Factory::StaticMethod</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Uses.html</anchorfile>
      <anchor>a0e8afde5542d821b59de08736e42d621</anchor>
      <arglist>(Fqsen $refers, ?Description $description=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getReference</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Uses.html</anchorfile>
      <anchor>a4274d831c3caceb9e6ed6aa405fb904c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Uses.html</anchorfile>
      <anchor>a40047993d79761a025f14480a608b45f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>create</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Uses.html</anchorfile>
      <anchor>a8b1808b9de0ca4ea57989d0a8a4cc633</anchor>
      <arglist>(string $body, ?FqsenResolver $resolver=null, ?DescriptionFactory $descriptionFactory=null, ?TypeContext $context=null)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$name</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Uses.html</anchorfile>
      <anchor>a06c6fddfcabc879af3cac77179817d3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$refers</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Uses.html</anchorfile>
      <anchor>a0a03f237ee8c7a7c02b5434de527f6ab</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocBlock::Tags::UsesTest</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1UsesTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>tearDown</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1UsesTest.html</anchorfile>
      <anchor>a791067f1b289ba04c9360fce1d40379e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIfCorrectTagNameIsReturned</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1UsesTest.html</anchorfile>
      <anchor>aa17b260fb5d61aadbbf7a001c3da1b55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIfTagCanBeRenderedUsingDefaultFormatter</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1UsesTest.html</anchorfile>
      <anchor>a21dd5753244291ca5236cb62259e547d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIfTagCanBeRenderedUsingSpecificFormatter</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1UsesTest.html</anchorfile>
      <anchor>ac2a1c5709e734880c4e3b086d29fc623</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasReferenceToFqsen</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1UsesTest.html</anchorfile>
      <anchor>a6086ca85bae8561254ebb4abad96b7c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasDescription</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1UsesTest.html</anchorfile>
      <anchor>a14766e001215fbe4f28e10b893f6ba79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStringRepresentationIsReturned</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1UsesTest.html</anchorfile>
      <anchor>a6d8975249ba02b9570d40dc47df90e5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStringRepresentationIsReturnedWithoutDescription</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1UsesTest.html</anchorfile>
      <anchor>af046bf1065f21ece48ffa95e6114a0a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethod</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1UsesTest.html</anchorfile>
      <anchor>a2d5c519d02d89bc4e97aa214821bc443</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodFailsIfBodyIsNotEmpty</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1UsesTest.html</anchorfile>
      <anchor>afc86c1159abc79666c9db57f9ba23357</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodFailsIfResolverIsNull</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1UsesTest.html</anchorfile>
      <anchor>a196e33e2421272ab48ea0761754bf36f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodFailsIfDescriptionFactoryIsNull</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1UsesTest.html</anchorfile>
      <anchor>a50fa536b7d424d7a5e484d4050559411</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::UsingTagsTest</name>
    <filename>classphpDocumentor_1_1Reflection_1_1UsingTagsTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>tearDown</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1UsingTagsTest.html</anchorfile>
      <anchor>aff9f8491d298b8ca1f2ba8974c079103</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::CodeCoverage::Util</name>
    <filename>classSebastianBergmann_1_1CodeCoverage_1_1Util.html</filename>
    <member kind="function" static="yes">
      <type>static</type>
      <name>percent</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Util.html</anchorfile>
      <anchor>a7339f9c02f2bf420174fa96c9a424367</anchor>
      <arglist>(float $a, float $b, bool $asString=false, bool $fixedWidth=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::Utils</name>
    <filename>classphpDocumentor_1_1Reflection_1_1Utils.html</filename>
    <member kind="function" static="yes">
      <type>static</type>
      <name>pregSplit</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Utils.html</anchorfile>
      <anchor>a55c11313e2e41f391eae65543095b236</anchor>
      <arglist>(string $pattern, string $subject, ?int $limit=-1, int $flags=0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::CodeCoverage::UtilTest</name>
    <filename>classSebastianBergmann_1_1CodeCoverage_1_1UtilTest.html</filename>
    <base>SebastianBergmann::CodeCoverage::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testPercent</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1UtilTest.html</anchorfile>
      <anchor>a52ef4cb2f2077184488f1028a73c4067</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocBlock::Tags::Var_</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Var__.html</filename>
    <base>phpDocumentor::Reflection::DocBlock::Tags::TagWithType</base>
    <base>phpDocumentor::Reflection::DocBlock::Tags::Factory::StaticMethod</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Var__.html</anchorfile>
      <anchor>a51449079dfc89799fa45950e61951505</anchor>
      <arglist>(?string $variableName, ?Type $type=null, ?Description $description=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getVariableName</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Var__.html</anchorfile>
      <anchor>a14b79940757d6a04f4ebf50018bc51c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Var__.html</anchorfile>
      <anchor>a19b738a539e684d374a49ec28e0cebb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>create</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Var__.html</anchorfile>
      <anchor>afe4a88493ab95ee82243bd5500db1b70</anchor>
      <arglist>(string $body, ?TypeResolver $typeResolver=null, ?DescriptionFactory $descriptionFactory=null, ?TypeContext $context=null)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$variableName</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Var__.html</anchorfile>
      <anchor>a06fee28ecac3df6777a5850253722ae9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VariousDocblockDefinedDataProvider</name>
    <filename>classVariousDocblockDefinedDataProvider.html</filename>
    <member kind="function">
      <type></type>
      <name>anotherAnnotation</name>
      <anchorfile>classVariousDocblockDefinedDataProvider.html</anchorfile>
      <anchor>a538ee0f3f53514c99b3926f6a954daa1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testWith1</name>
      <anchorfile>classVariousDocblockDefinedDataProvider.html</anchorfile>
      <anchor>a5e0283aa2b5afb4dbe7ac32272e270e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testWith1234</name>
      <anchorfile>classVariousDocblockDefinedDataProvider.html</anchorfile>
      <anchor>aabbc96483540141fa7690a7042174aca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testWithABTrueNull</name>
      <anchorfile>classVariousDocblockDefinedDataProvider.html</anchorfile>
      <anchor>a456aec67d81f7a7a8f04bd44c3b407fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testWith12AndAnotherAnnotation</name>
      <anchorfile>classVariousDocblockDefinedDataProvider.html</anchorfile>
      <anchor>a4f9be5db02addf12f3f2435d4192b4da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testWith12AndBlahBlah</name>
      <anchorfile>classVariousDocblockDefinedDataProvider.html</anchorfile>
      <anchor>a5c21ee6eb0b1747db2d41b27cf8aea99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testWithEscapedString</name>
      <anchorfile>classVariousDocblockDefinedDataProvider.html</anchorfile>
      <anchor>a5fc3c158b6824005a57bc6be7396fd0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testWithMalformedValue</name>
      <anchorfile>classVariousDocblockDefinedDataProvider.html</anchorfile>
      <anchor>a908ee018211f6e5e5601ec34b3de301a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testWithWellFormedAndMalformedValue</name>
      <anchorfile>classVariousDocblockDefinedDataProvider.html</anchorfile>
      <anchor>a9ba817bf946558e9ba80d336178311e4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VariousIterableDataProviderTest</name>
    <filename>classVariousIterableDataProviderTest.html</filename>
    <base>AbstractVariousIterableDataProviderTest</base>
    <member kind="function">
      <type></type>
      <name>testStatic</name>
      <anchorfile>classVariousIterableDataProviderTest.html</anchorfile>
      <anchor>a707f181a5315c19258743f45a1a5a600</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>asArrayProvider</name>
      <anchorfile>classVariousIterableDataProviderTest.html</anchorfile>
      <anchor>a50ee7b18df2fbc7698e0ee76e97f505b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>asIteratorProvider</name>
      <anchorfile>classVariousIterableDataProviderTest.html</anchorfile>
      <anchor>ae6638da85e127bf1365252977d96dea2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>asTraversableProvider</name>
      <anchorfile>classVariousIterableDataProviderTest.html</anchorfile>
      <anchor>a583b3a9766df178d10ebe6d9378c8308</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testNonStatic</name>
      <anchorfile>classVariousIterableDataProviderTest.html</anchorfile>
      <anchor>a4e8fe35a6773b515d723e262ed5552d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFromParent</name>
      <anchorfile>classVariousIterableDataProviderTest.html</anchorfile>
      <anchor>aeb5e4f0f4a9be632203c23a5180a9824</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>asArrayStaticProvider</name>
      <anchorfile>classVariousIterableDataProviderTest.html</anchorfile>
      <anchor>a6f81d1efd37356125a815e45450291d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>asIteratorStaticProvider</name>
      <anchorfile>classVariousIterableDataProviderTest.html</anchorfile>
      <anchor>aed0c1712906d98200c0bb7cc5e1f5177</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>asTraversableStaticProvider</name>
      <anchorfile>classVariousIterableDataProviderTest.html</anchorfile>
      <anchor>a553f559b8e180ddf5c10619a201065d6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocBlock::Tags::VarTest</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1VarTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>tearDown</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1VarTest.html</anchorfile>
      <anchor>a1a4484d406eb5537d4687312998d7ca3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIfCorrectTagNameIsReturned</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1VarTest.html</anchorfile>
      <anchor>a2822fa4251a06a56b003d8a8df782974</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIfVariableNameIsOmmitedIfEmpty</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1VarTest.html</anchorfile>
      <anchor>ab9d36af406667407f1df0fa1cd22ccc4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIfTagCanBeRenderedUsingDefaultFormatter</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1VarTest.html</anchorfile>
      <anchor>a9638e607c31c99b1667dfe1ef3ca5eb2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIfTagCanBeRenderedUsingSpecificFormatter</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1VarTest.html</anchorfile>
      <anchor>aff006d1fdc28f81d6776f6abd118023a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasVariableName</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1VarTest.html</anchorfile>
      <anchor>a8114a2197d2a8108c378bf6744096a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasType</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1VarTest.html</anchorfile>
      <anchor>a4f0c1127926edad590ab241455517109</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasDescription</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1VarTest.html</anchorfile>
      <anchor>aab88024e25b826f3775f2e34b91ff2d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStringRepresentationIsReturned</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1VarTest.html</anchorfile>
      <anchor>a500287c98f51f99917627c634f9414f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStringRepresentationIsReturnedWithoutDescription</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1VarTest.html</anchorfile>
      <anchor>a76fcdcd314ac769c3249f4ed73c2ef9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethod</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1VarTest.html</anchorfile>
      <anchor>aa046676ac1ffeb81673594bd5605a773</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodWithoutType</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1VarTest.html</anchorfile>
      <anchor>af57fde7d8187c4cf780eaa4020e0f251</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodWithType</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1VarTest.html</anchorfile>
      <anchor>aec31d7eb3d788c5ffb791ffe1b674658</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodWithTypeWithoutComment</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1VarTest.html</anchorfile>
      <anchor>a9a40edce6cdbbae15ebb9a1b23d483a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodFailsIfEmptyBodyIsGiven</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1VarTest.html</anchorfile>
      <anchor>a5c1f5631e058a6194ed365cb147b84af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodFailsIfResolverIsNull</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1VarTest.html</anchorfile>
      <anchor>ae8930b6a56489ac9ded438b43c0a11f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodFailsIfDescriptionFactoryIsNull</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1VarTest.html</anchorfile>
      <anchor>a295670e4de6473a9837388bb3820df4b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>PHPUnit::Framework::MockObject::Verifiable</name>
    <filename>interfacePHPUnit_1_1Framework_1_1MockObject_1_1Verifiable.html</filename>
    <member kind="function">
      <type></type>
      <name>verify</name>
      <anchorfile>interfacePHPUnit_1_1Framework_1_1MockObject_1_1Verifiable.html</anchorfile>
      <anchor>a44203f959c80348ac0d66911f9daa91d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Runner::Version</name>
    <filename>classPHPUnit_1_1Runner_1_1Version.html</filename>
    <member kind="function" static="yes">
      <type>static</type>
      <name>id</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1Version.html</anchorfile>
      <anchor>a20fd9da45d3f46a632133ba39a91149d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>series</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1Version.html</anchorfile>
      <anchor>a65a169fb03e251ffe21ea18d56a386a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>getVersionString</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1Version.html</anchorfile>
      <anchor>a4fd83b8b29b7f680829f0998712128af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>getReleaseChannel</name>
      <anchorfile>classPHPUnit_1_1Runner_1_1Version.html</anchorfile>
      <anchor>a01c178c242bf42dd3c488f81cdf57503</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocBlock::Tags::Version</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Version.html</filename>
    <base>phpDocumentor::Reflection::DocBlock::Tags::BaseTag</base>
    <base>phpDocumentor::Reflection::DocBlock::Tags::Factory::StaticMethod</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Version.html</anchorfile>
      <anchor>aaec1baebd68905803b16ebf5bea27c07</anchor>
      <arglist>(?string $version=null, ?Description $description=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getVersion</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Version.html</anchorfile>
      <anchor>a2d19979905b243839d4827462278a07e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Version.html</anchorfile>
      <anchor>a0edc5a299611fedf9e66cf4320bbaa25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>create</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Version.html</anchorfile>
      <anchor>a471d1592fc5bfead9360d7a114541af7</anchor>
      <arglist>(?string $body, ?DescriptionFactory $descriptionFactory=null, ?TypeContext $context=null)</arglist>
    </member>
    <member kind="variable">
      <type>const</type>
      <name>REGEX_VECTOR</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Version.html</anchorfile>
      <anchor>adce611d9a7cfc7b01eacfeaf373e63cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$name</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Version.html</anchorfile>
      <anchor>adc7d9a21b7bce27e043220de0e3a3b20</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::CodeCoverage::Version</name>
    <filename>classSebastianBergmann_1_1CodeCoverage_1_1Version.html</filename>
    <member kind="function" static="yes">
      <type>static</type>
      <name>id</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Version.html</anchorfile>
      <anchor>a57eedcf64b5be44dab1a5d10dbb05895</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Version</name>
    <filename>classSebastianBergmann_1_1Version.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classSebastianBergmann_1_1Version.html</anchorfile>
      <anchor>ac653e2899be1d5dcb95988a683247ccb</anchor>
      <arglist>($release, $path)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getVersion</name>
      <anchorfile>classSebastianBergmann_1_1Version.html</anchorfile>
      <anchor>aea502d834098f6bf08241650de30ebbe</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Version::Version</name>
    <filename>classPharIo_1_1Version_1_1Version.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPharIo_1_1Version_1_1Version.html</anchorfile>
      <anchor>a55ef3862384b135fc7aec6d50cd95a60</anchor>
      <arglist>($versionString)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getPreReleaseSuffix</name>
      <anchorfile>classPharIo_1_1Version_1_1Version.html</anchorfile>
      <anchor>a103b1fd123242f59c8cc97fbc8829c11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getVersionString</name>
      <anchorfile>classPharIo_1_1Version_1_1Version.html</anchorfile>
      <anchor>a0b23006c1a79db61da16029a53d4eb55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>hasPreReleaseSuffix</name>
      <anchorfile>classPharIo_1_1Version_1_1Version.html</anchorfile>
      <anchor>a83d5e8ec39af6869b2e777b7956ec046</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isGreaterThan</name>
      <anchorfile>classPharIo_1_1Version_1_1Version.html</anchorfile>
      <anchor>a94b8d4ba8ed6e9b24394fc19643effea</anchor>
      <arglist>(Version $version)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getMajor</name>
      <anchorfile>classPharIo_1_1Version_1_1Version.html</anchorfile>
      <anchor>a375c9cc491040a4f6d4583284e1d4809</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getMinor</name>
      <anchorfile>classPharIo_1_1Version_1_1Version.html</anchorfile>
      <anchor>a7f1468492cd6eb37e71c1938f38121d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getPatch</name>
      <anchorfile>classPharIo_1_1Version_1_1Version.html</anchorfile>
      <anchor>a82d234df27d306698dd53bb3bdec22c4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Util::VersionComparisonOperator</name>
    <filename>classPHPUnit_1_1Util_1_1VersionComparisonOperator.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Util_1_1VersionComparisonOperator.html</anchorfile>
      <anchor>a15ecb6b04e0072e6f56f54a34dd1ca8c</anchor>
      <arglist>(string $operator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>asString</name>
      <anchorfile>classPHPUnit_1_1Util_1_1VersionComparisonOperator.html</anchorfile>
      <anchor>ab5a7c20ac4867625f9a3f54a8b28ca82</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>PharIo::Version::VersionConstraint</name>
    <filename>interfacePharIo_1_1Version_1_1VersionConstraint.html</filename>
    <member kind="function">
      <type></type>
      <name>complies</name>
      <anchorfile>interfacePharIo_1_1Version_1_1VersionConstraint.html</anchorfile>
      <anchor>a0c42ae0c3b9d5a64c36f64779b342891</anchor>
      <arglist>(Version $version)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>asString</name>
      <anchorfile>interfacePharIo_1_1Version_1_1VersionConstraint.html</anchorfile>
      <anchor>aecabf5b931bfd7001af15cbffe5441c8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Version::VersionConstraintParser</name>
    <filename>classPharIo_1_1Version_1_1VersionConstraintParser.html</filename>
    <member kind="function">
      <type></type>
      <name>parse</name>
      <anchorfile>classPharIo_1_1Version_1_1VersionConstraintParser.html</anchorfile>
      <anchor>a84656b959cbfc1e5ba53d1b99370019d</anchor>
      <arglist>($value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Version::VersionConstraintParserTest</name>
    <filename>classPharIo_1_1Version_1_1VersionConstraintParserTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testReturnsExpectedConstraint</name>
      <anchorfile>classPharIo_1_1Version_1_1VersionConstraintParserTest.html</anchorfile>
      <anchor>aa359be030aea3abe155033de2047c334</anchor>
      <arglist>($versionString, VersionConstraint $expectedConstraint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testThrowsExceptionIfVersionStringIsNotSupported</name>
      <anchorfile>classPharIo_1_1Version_1_1VersionConstraintParserTest.html</anchorfile>
      <anchor>ad03d7e8eb1ef4fd9c34b12e8634d335d</anchor>
      <arglist>($versionString)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>versionStringProvider</name>
      <anchorfile>classPharIo_1_1Version_1_1VersionConstraintParserTest.html</anchorfile>
      <anchor>a3555164d7b09c345fa791636555ff068</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>unsupportedVersionStringProvider</name>
      <anchorfile>classPharIo_1_1Version_1_1VersionConstraintParserTest.html</anchorfile>
      <anchor>a051d54480b25c7ffb938a31346c8e18d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Version::VersionConstraintValue</name>
    <filename>classPharIo_1_1Version_1_1VersionConstraintValue.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPharIo_1_1Version_1_1VersionConstraintValue.html</anchorfile>
      <anchor>a52cc34412689492393c9187c1340bce4</anchor>
      <arglist>($versionString)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getLabel</name>
      <anchorfile>classPharIo_1_1Version_1_1VersionConstraintValue.html</anchorfile>
      <anchor>ab2b482886888a0c59773c53afdac0247</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getBuildMetaData</name>
      <anchorfile>classPharIo_1_1Version_1_1VersionConstraintValue.html</anchorfile>
      <anchor>a1bd172d5a39ba3fa5eb4802956a70bb2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getVersionString</name>
      <anchorfile>classPharIo_1_1Version_1_1VersionConstraintValue.html</anchorfile>
      <anchor>adad5ab297091fb9881b70200a35d5d2e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getMajor</name>
      <anchorfile>classPharIo_1_1Version_1_1VersionConstraintValue.html</anchorfile>
      <anchor>ac97cd797316fbc288d4f5ae29e37fe6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getMinor</name>
      <anchorfile>classPharIo_1_1Version_1_1VersionConstraintValue.html</anchorfile>
      <anchor>adc07dc69e3363a4e0b5ce4d50243f875</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getPatch</name>
      <anchorfile>classPharIo_1_1Version_1_1VersionConstraintValue.html</anchorfile>
      <anchor>a7045d4a166ae17809ebd4eedf7094d5d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Version::VersionNumber</name>
    <filename>classPharIo_1_1Version_1_1VersionNumber.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPharIo_1_1Version_1_1VersionNumber.html</anchorfile>
      <anchor>a4a60e759b56198ab1a826ec51571e3a2</anchor>
      <arglist>($value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>isAny</name>
      <anchorfile>classPharIo_1_1Version_1_1VersionNumber.html</anchorfile>
      <anchor>aee8d8cc8f06b0e608d9ec04458ede0ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getValue</name>
      <anchorfile>classPharIo_1_1Version_1_1VersionNumber.html</anchorfile>
      <anchor>a03401962b85261ba5361fb4a4d808d30</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PharIo::Version::VersionTest</name>
    <filename>classPharIo_1_1Version_1_1VersionTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testParsesVersionNumbers</name>
      <anchorfile>classPharIo_1_1Version_1_1VersionTest.html</anchorfile>
      <anchor>ac4c69d095e625f85214c3c6184995326</anchor>
      <arglist>( $versionString, $expectedMajor, $expectedMinor, $expectedPatch, $expectedPreReleaseValue=&apos;&apos;, $expectedReleaseCount=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>versionProvider</name>
      <anchorfile>classPharIo_1_1Version_1_1VersionTest.html</anchorfile>
      <anchor>a75debeeb55f8744537bb93bc9813aabf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIsGreaterThan</name>
      <anchorfile>classPharIo_1_1Version_1_1VersionTest.html</anchorfile>
      <anchor>af3b8231e6a89c20a5338d10f60ea4565</anchor>
      <arglist>(Version $versionA, Version $versionB, $expectedResult)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>versionGreaterThanProvider</name>
      <anchorfile>classPharIo_1_1Version_1_1VersionTest.html</anchorfile>
      <anchor>aa99a4147b75936f9778241cc141613f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testThrowsExceptionIfVersionStringDoesNotFollowSemVer</name>
      <anchorfile>classPharIo_1_1Version_1_1VersionTest.html</anchorfile>
      <anchor>ac25c6f90a1891f60a7453d421682b0d2</anchor>
      <arglist>($versionString)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>invalidVersionStringProvider</name>
      <anchorfile>classPharIo_1_1Version_1_1VersionTest.html</anchorfile>
      <anchor>a8b6c18a80cb7cb50dde62c601cbc2615</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::DocBlock::Tags::VersionTest</name>
    <filename>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1VersionTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>tearDown</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1VersionTest.html</anchorfile>
      <anchor>a6d6addc30b67c6f2be4ae8854ec14210</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIfCorrectTagNameIsReturned</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1VersionTest.html</anchorfile>
      <anchor>aae97242596198d72c6e3a5f854e71d2e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIfTagCanBeRenderedUsingDefaultFormatter</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1VersionTest.html</anchorfile>
      <anchor>ab80a5ab79a5109ecb30482d8b1155cdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIfTagCanBeRenderedUsingSpecificFormatter</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1VersionTest.html</anchorfile>
      <anchor>a2e2defb3d6d3b0d23b17b3c81cb0ff0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasVersionNumber</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1VersionTest.html</anchorfile>
      <anchor>aa158124d4d7946ded86b22bbb2045aab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testHasDescription</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1VersionTest.html</anchorfile>
      <anchor>aefea93b4bf9e5bf4290fa818484bddc3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStringRepresentationIsReturned</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1VersionTest.html</anchorfile>
      <anchor>a21702f31cb4e1fb7914bc0471dddd35d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testStringRepresentationIsReturnedWithoutDescription</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1VersionTest.html</anchorfile>
      <anchor>a39a242b169d927937d4047fe824f57af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethod</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1VersionTest.html</anchorfile>
      <anchor>af6e52d32e3e4da4dd40cb2d4159d0021</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodCreatesEmptyVersionTag</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1VersionTest.html</anchorfile>
      <anchor>af9696a9156bbf32409ced96a45b6c36f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testFactoryMethodReturnsNullIfBodyDoesNotMatchRegex</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1VersionTest.html</anchorfile>
      <anchor>a59372d316fc4da7b2260baefff82df2f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phpDocumentor::Reflection::Types::Void_</name>
    <filename>classphpDocumentor_1_1Reflection_1_1Types_1_1Void__.html</filename>
    <base>phpDocumentor::Reflection::Type</base>
    <member kind="function">
      <type></type>
      <name>__toString</name>
      <anchorfile>classphpDocumentor_1_1Reflection_1_1Types_1_1Void__.html</anchorfile>
      <anchor>a719b08803ba41a64ea6235e085fd51f7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Type::VoidType</name>
    <filename>classSebastianBergmann_1_1Type_1_1VoidType.html</filename>
    <base>SebastianBergmann::Type::Type</base>
    <member kind="function">
      <type></type>
      <name>isAssignable</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1VoidType.html</anchorfile>
      <anchor>af13263ed15229be6b7908f15fd4ac5ed</anchor>
      <arglist>(Type $other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getReturnTypeDeclaration</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1VoidType.html</anchorfile>
      <anchor>ae7ab8dff3bf3c58ef7b2232d4ae0e6fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>allowsNull</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1VoidType.html</anchorfile>
      <anchor>ac3f1208787382971dbb511125502f75b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::Type::VoidTypeTest</name>
    <filename>classSebastianBergmann_1_1Type_1_1VoidTypeTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testIsAssignable</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1VoidTypeTest.html</anchorfile>
      <anchor>abb8e4799a87bc2380e18c2359ef13d47</anchor>
      <arglist>(Type $assignableType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>assignableTypes</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1VoidTypeTest.html</anchorfile>
      <anchor>ae7fdb6ebe41723496039c0b278933739</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testIsNotAssignable</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1VoidTypeTest.html</anchorfile>
      <anchor>a27d13b0677fecddab7d62d72067fef24</anchor>
      <arglist>(Type $assignableType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>notAssignableTypes</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1VoidTypeTest.html</anchorfile>
      <anchor>a3faa65e1589788539e847c20a4c9367a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testNotAllowNull</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1VoidTypeTest.html</anchorfile>
      <anchor>ac0c9524190cddc7dbdef8810faa6d6ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testCanGenerateReturnTypeDeclaration</name>
      <anchorfile>classSebastianBergmann_1_1Type_1_1VoidTypeTest.html</anchorfile>
      <anchor>a5a19f9469a9591f372176ff7a7674d81</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DoctrineTest::InstantiatorTestAsset::WakeUpNoticesAsset</name>
    <filename>classDoctrineTest_1_1InstantiatorTestAsset_1_1WakeUpNoticesAsset.html</filename>
    <member kind="function">
      <type></type>
      <name>__wakeup</name>
      <anchorfile>classDoctrineTest_1_1InstantiatorTestAsset_1_1WakeUpNoticesAsset.html</anchorfile>
      <anchor>a3e1cb063c137bef1b5f0e00e2387aeb0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Error::Warning</name>
    <filename>classPHPUnit_1_1Framework_1_1Error_1_1Warning.html</filename>
    <base>PHPUnit::Framework::Error::Error</base>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::Warning</name>
    <filename>classPHPUnit_1_1Framework_1_1Warning.html</filename>
    <base>PHPUnit::Framework::Exception</base>
    <base>PHPUnit::Framework::SelfDescribing</base>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1Warning.html</anchorfile>
      <anchor>a305af0cdeef86487e37e60967eca8b11</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Framework::WarningTestCase</name>
    <filename>classPHPUnit_1_1Framework_1_1WarningTestCase.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1WarningTestCase.html</anchorfile>
      <anchor>a4d1b31dc221609ada18696de6e136369</anchor>
      <arglist>(string $message=&apos;&apos;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getMessage</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1WarningTestCase.html</anchorfile>
      <anchor>a82219ec7dae76544345696b71ad12542</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toString</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1WarningTestCase.html</anchorfile>
      <anchor>a39ad04e5610ed30dd2a966cc90cd1da5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>runTest</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1WarningTestCase.html</anchorfile>
      <anchor>a2be607582d98cf6f2e6a1d391f717ca9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$backupGlobals</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1WarningTestCase.html</anchorfile>
      <anchor>a3ef5d3f5b87d190fa6249a3ae3362bdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$backupStaticAttributes</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1WarningTestCase.html</anchorfile>
      <anchor>abac3390405a3d321539cc4ef055dcff0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type></type>
      <name>$runTestInSeparateProcess</name>
      <anchorfile>classPHPUnit_1_1Framework_1_1WarningTestCase.html</anchorfile>
      <anchor>a625c044769e8a6afa1bf43fe14091848</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>WasRun</name>
    <filename>classWasRun.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="variable">
      <type></type>
      <name>$wasRun</name>
      <anchorfile>classWasRun.html</anchorfile>
      <anchor>a4810b8990d3db5ab64ac2d2517aefd4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>runTest</name>
      <anchorfile>classWasRun.html</anchorfile>
      <anchor>ac1eb06bdf5bc3da96cf75fc508e02824</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Util::PHP::WindowsPhpProcess</name>
    <filename>classPHPUnit_1_1Util_1_1PHP_1_1WindowsPhpProcess.html</filename>
    <base>PHPUnit::Util::PHP::DefaultPhpProcess</base>
    <member kind="function">
      <type></type>
      <name>getCommand</name>
      <anchorfile>classPHPUnit_1_1Util_1_1PHP_1_1WindowsPhpProcess.html</anchorfile>
      <anchor>a15d3970f0571b26f7f8641adaa7a67b0</anchor>
      <arglist>(array $settings, string $file=null)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>getHandles</name>
      <anchorfile>classPHPUnit_1_1Util_1_1PHP_1_1WindowsPhpProcess.html</anchorfile>
      <anchor>a11dda98d27ba7fa1feaaff54a9a68480</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>useTemporaryFile</name>
      <anchorfile>classPHPUnit_1_1Util_1_1PHP_1_1WindowsPhpProcess.html</anchorfile>
      <anchor>aa60be4017453fd35c4581b90db1ded96</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::CodeUnitReverseLookup::Wizard</name>
    <filename>classSebastianBergmann_1_1CodeUnitReverseLookup_1_1Wizard.html</filename>
    <member kind="function">
      <type></type>
      <name>lookup</name>
      <anchorfile>classSebastianBergmann_1_1CodeUnitReverseLookup_1_1Wizard.html</anchorfile>
      <anchor>a4db03869440f14a66d865cc9daa65e34</anchor>
      <arglist>($filename, $lineNumber)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::CodeUnitReverseLookup::WizardTest</name>
    <filename>classSebastianBergmann_1_1CodeUnitReverseLookup_1_1WizardTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testMethodCanBeLookedUp</name>
      <anchorfile>classSebastianBergmann_1_1CodeUnitReverseLookup_1_1WizardTest.html</anchorfile>
      <anchor>afe862e026f85557d339a02dce73d5b8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testReturnsFilenameAndLineNumberAsStringWhenNotInCodeUnit</name>
      <anchorfile>classSebastianBergmann_1_1CodeUnitReverseLookup_1_1WizardTest.html</anchorfile>
      <anchor>aebb3b3969bcc50e48095135e6d379611</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>setUp</name>
      <anchorfile>classSebastianBergmann_1_1CodeUnitReverseLookup_1_1WizardTest.html</anchorfile>
      <anchor>aa2b71600272ba7cc1c808e52e964a3d3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>WrapperIteratorAggregate</name>
    <filename>classWrapperIteratorAggregate.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classWrapperIteratorAggregate.html</anchorfile>
      <anchor>ae3875c7374418ee54a5ec741cbe67e8b</anchor>
      <arglist>($baseCollection)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>getIterator</name>
      <anchorfile>classWrapperIteratorAggregate.html</anchorfile>
      <anchor>add2d33ad57257aa13a843dbb131b6e91</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeepCopyTest::Matcher::X</name>
    <filename>classDeepCopyTest_1_1Matcher_1_1X.html</filename>
    <member kind="variable">
      <type></type>
      <name>$foo</name>
      <anchorfile>classDeepCopyTest_1_1Matcher_1_1X.html</anchorfile>
      <anchor>a3d2076169f7f7ee0b34ebc9e6e22f8e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>$bar</name>
      <anchorfile>classDeepCopyTest_1_1Matcher_1_1X.html</anchorfile>
      <anchor>ad472162699c6266e9754f4a43327df27</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::CodeCoverage::Driver::Xdebug</name>
    <filename>classSebastianBergmann_1_1CodeCoverage_1_1Driver_1_1Xdebug.html</filename>
    <base>SebastianBergmann::CodeCoverage::Driver::Driver</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Driver_1_1Xdebug.html</anchorfile>
      <anchor>a95c7f77ac3f6b0ba9c9a79327a918aab</anchor>
      <arglist>(Filter $filter=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>start</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Driver_1_1Xdebug.html</anchorfile>
      <anchor>a883d7afa2187f403de534f633dd7a85e</anchor>
      <arglist>(bool $determineUnusedAndDead=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>stop</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Driver_1_1Xdebug.html</anchorfile>
      <anchor>afaf3976e54b4195b24ccaa70cfa4b7b9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Util::XdebugFilterScriptGenerator</name>
    <filename>classPHPUnit_1_1Util_1_1XdebugFilterScriptGenerator.html</filename>
    <member kind="function">
      <type></type>
      <name>generate</name>
      <anchorfile>classPHPUnit_1_1Util_1_1XdebugFilterScriptGenerator.html</anchorfile>
      <anchor>aaabf36a92a9ffd51ff9ca60c22a2505d</anchor>
      <arglist>(array $filterData)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Util::XDebugFilterScriptGeneratorTest</name>
    <filename>classPHPUnit_1_1Util_1_1XDebugFilterScriptGeneratorTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testReturnsExpectedScript</name>
      <anchorfile>classPHPUnit_1_1Util_1_1XDebugFilterScriptGeneratorTest.html</anchorfile>
      <anchor>aafa12dbf881c2bbb5760917f3f201b27</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Util::Xml</name>
    <filename>classPHPUnit_1_1Util_1_1Xml.html</filename>
    <member kind="function" static="yes">
      <type>static</type>
      <name>import</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Xml.html</anchorfile>
      <anchor>a7bd16c5ed730a27a136dbe1b67ae52a9</anchor>
      <arglist>(DOMElement $element)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>load</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Xml.html</anchorfile>
      <anchor>a265272c8f50517c58e381ce660d1b6ee</anchor>
      <arglist>($actual, bool $isHtml=false, string $filename=&apos;&apos;, bool $xinclude=false, bool $strict=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>loadFile</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Xml.html</anchorfile>
      <anchor>a9010250edbf17e4a2aebf9b4c6b1dd2d</anchor>
      <arglist>(string $filename, bool $isHtml=false, bool $xinclude=false, bool $strict=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>removeCharacterDataNodes</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Xml.html</anchorfile>
      <anchor>a350f988d092412c6b1976a6996c42703</anchor>
      <arglist>(DOMNode $node)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>prepareString</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Xml.html</anchorfile>
      <anchor>a7d828214ffe0cd1a7e22e88b6f213178</anchor>
      <arglist>(string $string)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>xmlToVariable</name>
      <anchorfile>classPHPUnit_1_1Util_1_1Xml.html</anchorfile>
      <anchor>a4e2be34df5220d01f3aedf80ca55d142</anchor>
      <arglist>(DOMElement $element)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DoctrineTest::InstantiatorTestAsset::XMLReaderAsset</name>
    <filename>classDoctrineTest_1_1InstantiatorTestAsset_1_1XMLReaderAsset.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classDoctrineTest_1_1InstantiatorTestAsset_1_1XMLReaderAsset.html</anchorfile>
      <anchor>a8adc8f164fd1f073708ea94c06546c17</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Util::TestDox::XmlResultPrinter</name>
    <filename>classPHPUnit_1_1Util_1_1TestDox_1_1XmlResultPrinter.html</filename>
    <base>PHPUnit::Util::Printer</base>
    <base>PHPUnit::Framework::TestListener</base>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1XmlResultPrinter.html</anchorfile>
      <anchor>a29b43a097881fb9088de504edf134614</anchor>
      <arglist>($out=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>flush</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1XmlResultPrinter.html</anchorfile>
      <anchor>a04630d3f1e07b2158d218e92676088de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addError</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1XmlResultPrinter.html</anchorfile>
      <anchor>a2145ebd84371f26d2457712cb4911463</anchor>
      <arglist>(Test $test, \Throwable $t, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addWarning</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1XmlResultPrinter.html</anchorfile>
      <anchor>aea86a9cba5af465898ce451aa176470a</anchor>
      <arglist>(Test $test, Warning $e, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addFailure</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1XmlResultPrinter.html</anchorfile>
      <anchor>a8dab5ae9a0316dd3ce79476c1250d6d7</anchor>
      <arglist>(Test $test, AssertionFailedError $e, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addIncompleteTest</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1XmlResultPrinter.html</anchorfile>
      <anchor>a113ab52248518c9cf0ecb9e41cd06cb1</anchor>
      <arglist>(Test $test, \Throwable $t, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addRiskyTest</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1XmlResultPrinter.html</anchorfile>
      <anchor>a8f7b7136a9d4e78d3f4a00118fbfd496</anchor>
      <arglist>(Test $test, \Throwable $t, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addSkippedTest</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1XmlResultPrinter.html</anchorfile>
      <anchor>ab48077df0d6f7ffd9adedb6a47ae69b4</anchor>
      <arglist>(Test $test, \Throwable $t, float $time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>startTestSuite</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1XmlResultPrinter.html</anchorfile>
      <anchor>a5748bbc4ec8847c5eafa21b6e0ce7e77</anchor>
      <arglist>(TestSuite $suite)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>endTestSuite</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1XmlResultPrinter.html</anchorfile>
      <anchor>a8d5fcf11e625d049dcdadb20e2996b52</anchor>
      <arglist>(TestSuite $suite)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>startTest</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1XmlResultPrinter.html</anchorfile>
      <anchor>acbac7195df9e7b9011293dd36ab62dd6</anchor>
      <arglist>(Test $test)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>endTest</name>
      <anchorfile>classPHPUnit_1_1Util_1_1TestDox_1_1XmlResultPrinter.html</anchorfile>
      <anchor>a5a91750e61a4ca86065eae86c2e1c4cf</anchor>
      <arglist>(Test $test, float $time)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TheSeer::Tokenizer::XMLSerializer</name>
    <filename>classTheSeer_1_1Tokenizer_1_1XMLSerializer.html</filename>
    <member kind="function">
      <type></type>
      <name>__construct</name>
      <anchorfile>classTheSeer_1_1Tokenizer_1_1XMLSerializer.html</anchorfile>
      <anchor>ad4b8c3ebc7f55b99fc16bc844f88e20c</anchor>
      <arglist>(NamespaceUri $xmlns=null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toDom</name>
      <anchorfile>classTheSeer_1_1Tokenizer_1_1XMLSerializer.html</anchorfile>
      <anchor>a9e8ec9c5a41d00d5f5dbcbe3f28e0802</anchor>
      <arglist>(TokenCollection $tokens)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toXML</name>
      <anchorfile>classTheSeer_1_1Tokenizer_1_1XMLSerializer.html</anchorfile>
      <anchor>a9beeced1528ab148619124328ff3dc90</anchor>
      <arglist>(TokenCollection $tokens)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Util::XmlTest</name>
    <filename>classPHPUnit_1_1Util_1_1XmlTest.html</filename>
    <base>PHPUnit::Framework::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testPrepareString</name>
      <anchorfile>classPHPUnit_1_1Util_1_1XmlTest.html</anchorfile>
      <anchor>ae8a1e92be75fad9c5ffe006063aa5149</anchor>
      <arglist>(string $char)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>charProvider</name>
      <anchorfile>classPHPUnit_1_1Util_1_1XmlTest.html</anchorfile>
      <anchor>a42da87443333432c96685395ffac8447</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testLoadEmptyString</name>
      <anchorfile>classPHPUnit_1_1Util_1_1XmlTest.html</anchorfile>
      <anchor>a03d227aec17ca9ccb7ef756bf20d4bc8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testLoadArray</name>
      <anchorfile>classPHPUnit_1_1Util_1_1XmlTest.html</anchorfile>
      <anchor>aa67442a76e41234528ff4c8d8908e00a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testLoadBoolean</name>
      <anchorfile>classPHPUnit_1_1Util_1_1XmlTest.html</anchorfile>
      <anchor>a961e063ec8093af976a6a68199aa21fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testNestedXmlToVariable</name>
      <anchorfile>classPHPUnit_1_1Util_1_1XmlTest.html</anchorfile>
      <anchor>a9a59978e3b58d9fa425058886b19ce23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testXmlToVariableCanHandleMultipleOfTheSameArgumentType</name>
      <anchorfile>classPHPUnit_1_1Util_1_1XmlTest.html</anchorfile>
      <anchor>a8c536b77e05f80da8014e9f0fff5cd56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testXmlToVariableCanConstructObjectsWithConstructorArgumentsRecursively</name>
      <anchorfile>classPHPUnit_1_1Util_1_1XmlTest.html</anchorfile>
      <anchor>a4d1cac425deff7f906c354fbad0a740d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SebastianBergmann::CodeCoverage::Report::Xml::XmlTest</name>
    <filename>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1XmlTest.html</filename>
    <base>SebastianBergmann::CodeCoverage::TestCase</base>
    <member kind="function">
      <type></type>
      <name>testForBankAccountTest</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1XmlTest.html</anchorfile>
      <anchor>a25487a6a842005ac3dc2f719bb56835c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testForFileWithIgnoredLines</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1XmlTest.html</anchorfile>
      <anchor>a8c3dbee317ba96c5967668a97e239cc3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>testForClassWithAnonymousFunction</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1XmlTest.html</anchorfile>
      <anchor>ad22e224589318bb39f6a660d231f365d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static</type>
      <name>setUpBeforeClass</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1XmlTest.html</anchorfile>
      <anchor>a2a509b01ffcfb76fa9975b98999c5d73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>tearDown</name>
      <anchorfile>classSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml_1_1XmlTest.html</anchorfile>
      <anchor>a5ff2298392d8bed07f54bdce4617d083</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PHPUnit::Util::XmlTestListRenderer</name>
    <filename>classPHPUnit_1_1Util_1_1XmlTestListRenderer.html</filename>
    <member kind="function">
      <type></type>
      <name>render</name>
      <anchorfile>classPHPUnit_1_1Util_1_1XmlTestListRenderer.html</anchorfile>
      <anchor>afa932d13b800fe0150249e4b87e2b4ac</anchor>
      <arglist>(TestSuite $suite)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeepCopyTest::Matcher::Y</name>
    <filename>classDeepCopyTest_1_1Matcher_1_1Y.html</filename>
    <member kind="variable">
      <type></type>
      <name>$foo</name>
      <anchorfile>classDeepCopyTest_1_1Matcher_1_1Y.html</anchorfile>
      <anchor>abb6d192f1b562409d5b06449aaf1b259</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>bar</name>
    <filename>namespacebar.html</filename>
    <namespace>bar::baz</namespace>
  </compound>
  <compound kind="namespace">
    <name>bar::baz</name>
    <filename>namespacebar_1_1baz.html</filename>
    <class kind="class">bar::baz::source_with_namespace</class>
    <member kind="function">
      <type>&amp;</type>
      <name>foo</name>
      <anchorfile>namespacebar_1_1baz.html</anchorfile>
      <anchor>a18d1f863c3b8d8a292b6274fb4a93ae5</anchor>
      <arglist>($bar)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>benchmark</name>
    <filename>namespacebenchmark.html</filename>
    <class kind="class">benchmark::ContextFactoryBench</class>
    <class kind="class">benchmark::TypeResolverBench</class>
    <class kind="class">benchmark::TypeResolverWithContextBench</class>
  </compound>
  <compound kind="namespace">
    <name>Contracts</name>
    <filename>namespaceContracts.html</filename>
    <namespace>Contracts::Mock</namespace>
    <class kind="interface">Contracts::BulkRetrieverInterface</class>
    <class kind="interface">Contracts::BulkStorerInterface</class>
    <class kind="interface">Contracts::ConditionerInterface</class>
    <class kind="interface">Contracts::CountableInterface</class>
    <class kind="interface">Contracts::FactoryInterface</class>
    <class kind="interface">Contracts::HydratableInterface</class>
    <class kind="interface">Contracts::IdGeneratorInterface</class>
    <class kind="interface">Contracts::LimiterInterface</class>
    <class kind="interface">Contracts::OffsetterInterface</class>
    <class kind="interface">Contracts::ParserInterface</class>
    <class kind="interface">Contracts::RemoverInterface</class>
    <class kind="interface">Contracts::RetrieverInterface</class>
    <class kind="interface">Contracts::SorterInterface</class>
    <class kind="interface">Contracts::StorerInterface</class>
  </compound>
  <compound kind="namespace">
    <name>Contracts::Mock</name>
    <filename>namespaceContracts_1_1Mock.html</filename>
    <namespace>Contracts::Mock::IdGenerator</namespace>
    <namespace>Contracts::Mock::Storage</namespace>
  </compound>
  <compound kind="namespace">
    <name>Contracts::Mock::IdGenerator</name>
    <filename>namespaceContracts_1_1Mock_1_1IdGenerator.html</filename>
    <class kind="class">Contracts::Mock::IdGenerator::Sequential</class>
  </compound>
  <compound kind="namespace">
    <name>Contracts::Mock::Storage</name>
    <filename>namespaceContracts_1_1Mock_1_1Storage.html</filename>
    <class kind="class">Contracts::Mock::Storage::JsonObjectMemory</class>
    <class kind="class">Contracts::Mock::Storage::Memory</class>
    <class kind="class">Contracts::Mock::Storage::MemoryFactory</class>
  </compound>
  <compound kind="namespace">
    <name>ContractsTest</name>
    <filename>namespaceContractsTest.html</filename>
    <namespace>ContractsTest::Mock</namespace>
    <class kind="class">ContractsTest::MemoryTest</class>
  </compound>
  <compound kind="namespace">
    <name>ContractsTest::Mock</name>
    <filename>namespaceContractsTest_1_1Mock.html</filename>
    <namespace>ContractsTest::Mock::IdGenerator</namespace>
  </compound>
  <compound kind="namespace">
    <name>ContractsTest::Mock::IdGenerator</name>
    <filename>namespaceContractsTest_1_1Mock_1_1IdGenerator.html</filename>
    <class kind="class">ContractsTest::Mock::IdGenerator::SequentialTest</class>
  </compound>
  <compound kind="namespace">
    <name>DeepCopy</name>
    <filename>namespaceDeepCopy.html</filename>
    <namespace>DeepCopy::Exception</namespace>
    <namespace>DeepCopy::f001</namespace>
    <namespace>DeepCopy::f002</namespace>
    <namespace>DeepCopy::f003</namespace>
    <namespace>DeepCopy::f004</namespace>
    <namespace>DeepCopy::f005</namespace>
    <namespace>DeepCopy::f006</namespace>
    <namespace>DeepCopy::f007</namespace>
    <namespace>DeepCopy::f008</namespace>
    <namespace>DeepCopy::f009</namespace>
    <namespace>DeepCopy::f011</namespace>
    <namespace>DeepCopy::Filter</namespace>
    <namespace>DeepCopy::Matcher</namespace>
    <namespace>DeepCopy::Reflection</namespace>
    <namespace>DeepCopy::TypeFilter</namespace>
    <namespace>DeepCopy::TypeMatcher</namespace>
    <class kind="class">DeepCopy::DeepCopy</class>
  </compound>
  <compound kind="namespace">
    <name>DeepCopy::Exception</name>
    <filename>namespaceDeepCopy_1_1Exception.html</filename>
    <class kind="class">DeepCopy::Exception::CloneException</class>
    <class kind="class">DeepCopy::Exception::PropertyException</class>
  </compound>
  <compound kind="namespace">
    <name>DeepCopy::f001</name>
    <filename>namespaceDeepCopy_1_1f001.html</filename>
    <class kind="class">DeepCopy::f001::A</class>
    <class kind="class">DeepCopy::f001::B</class>
  </compound>
  <compound kind="namespace">
    <name>DeepCopy::f002</name>
    <filename>namespaceDeepCopy_1_1f002.html</filename>
    <class kind="class">DeepCopy::f002::A</class>
  </compound>
  <compound kind="namespace">
    <name>DeepCopy::f003</name>
    <filename>namespaceDeepCopy_1_1f003.html</filename>
    <class kind="class">DeepCopy::f003::Foo</class>
  </compound>
  <compound kind="namespace">
    <name>DeepCopy::f004</name>
    <filename>namespaceDeepCopy_1_1f004.html</filename>
    <class kind="class">DeepCopy::f004::UnclonableItem</class>
  </compound>
  <compound kind="namespace">
    <name>DeepCopy::f005</name>
    <filename>namespaceDeepCopy_1_1f005.html</filename>
    <class kind="class">DeepCopy::f005::Foo</class>
  </compound>
  <compound kind="namespace">
    <name>DeepCopy::f006</name>
    <filename>namespaceDeepCopy_1_1f006.html</filename>
    <class kind="class">DeepCopy::f006::A</class>
    <class kind="class">DeepCopy::f006::B</class>
  </compound>
  <compound kind="namespace">
    <name>DeepCopy::f007</name>
    <filename>namespaceDeepCopy_1_1f007.html</filename>
    <class kind="class">DeepCopy::f007::FooDateInterval</class>
    <class kind="class">DeepCopy::f007::FooDateTimeZone</class>
  </compound>
  <compound kind="namespace">
    <name>DeepCopy::f008</name>
    <filename>namespaceDeepCopy_1_1f008.html</filename>
    <class kind="class">DeepCopy::f008::A</class>
    <class kind="class">DeepCopy::f008::B</class>
  </compound>
  <compound kind="namespace">
    <name>DeepCopy::f009</name>
    <filename>namespaceDeepCopy_1_1f009.html</filename>
    <class kind="class">DeepCopy::f009::TypedProperty</class>
  </compound>
  <compound kind="namespace">
    <name>DeepCopy::f011</name>
    <filename>namespaceDeepCopy_1_1f011.html</filename>
    <class kind="class">DeepCopy::f011::ArrayObjectExtended</class>
  </compound>
  <compound kind="namespace">
    <name>DeepCopy::Filter</name>
    <filename>namespaceDeepCopy_1_1Filter.html</filename>
    <namespace>DeepCopy::Filter::Doctrine</namespace>
    <class kind="interface">DeepCopy::Filter::Filter</class>
    <class kind="class">DeepCopy::Filter::KeepFilter</class>
    <class kind="class">DeepCopy::Filter::ReplaceFilter</class>
    <class kind="class">DeepCopy::Filter::SetNullFilter</class>
  </compound>
  <compound kind="namespace">
    <name>DeepCopy::Filter::Doctrine</name>
    <filename>namespaceDeepCopy_1_1Filter_1_1Doctrine.html</filename>
    <class kind="class">DeepCopy::Filter::Doctrine::DoctrineCollectionFilter</class>
    <class kind="class">DeepCopy::Filter::Doctrine::DoctrineEmptyCollectionFilter</class>
    <class kind="class">DeepCopy::Filter::Doctrine::DoctrineProxyFilter</class>
  </compound>
  <compound kind="namespace">
    <name>DeepCopy::Matcher</name>
    <filename>namespaceDeepCopy_1_1Matcher.html</filename>
    <namespace>DeepCopy::Matcher::Doctrine</namespace>
    <class kind="interface">DeepCopy::Matcher::Matcher</class>
    <class kind="class">DeepCopy::Matcher::PropertyMatcher</class>
    <class kind="class">DeepCopy::Matcher::PropertyNameMatcher</class>
    <class kind="class">DeepCopy::Matcher::PropertyTypeMatcher</class>
  </compound>
  <compound kind="namespace">
    <name>DeepCopy::Matcher::Doctrine</name>
    <filename>namespaceDeepCopy_1_1Matcher_1_1Doctrine.html</filename>
    <class kind="class">DeepCopy::Matcher::Doctrine::DoctrineProxyMatcher</class>
  </compound>
  <compound kind="namespace">
    <name>DeepCopy::Reflection</name>
    <filename>namespaceDeepCopy_1_1Reflection.html</filename>
    <class kind="class">DeepCopy::Reflection::ReflectionHelper</class>
  </compound>
  <compound kind="namespace">
    <name>DeepCopy::TypeFilter</name>
    <filename>namespaceDeepCopy_1_1TypeFilter.html</filename>
    <namespace>DeepCopy::TypeFilter::Date</namespace>
    <namespace>DeepCopy::TypeFilter::Spl</namespace>
    <class kind="class">DeepCopy::TypeFilter::ReplaceFilter</class>
    <class kind="class">DeepCopy::TypeFilter::ShallowCopyFilter</class>
    <class kind="interface">DeepCopy::TypeFilter::TypeFilter</class>
  </compound>
  <compound kind="namespace">
    <name>DeepCopy::TypeFilter::Date</name>
    <filename>namespaceDeepCopy_1_1TypeFilter_1_1Date.html</filename>
    <class kind="class">DeepCopy::TypeFilter::Date::DateIntervalFilter</class>
  </compound>
  <compound kind="namespace">
    <name>DeepCopy::TypeFilter::Spl</name>
    <filename>namespaceDeepCopy_1_1TypeFilter_1_1Spl.html</filename>
    <class kind="class">DeepCopy::TypeFilter::Spl::ArrayObjectFilter</class>
    <class kind="class">DeepCopy::TypeFilter::Spl::SplDoublyLinkedList</class>
    <class kind="class">DeepCopy::TypeFilter::Spl::SplDoublyLinkedListFilter</class>
  </compound>
  <compound kind="namespace">
    <name>DeepCopy::TypeMatcher</name>
    <filename>namespaceDeepCopy_1_1TypeMatcher.html</filename>
    <class kind="class">DeepCopy::TypeMatcher::TypeMatcher</class>
  </compound>
  <compound kind="namespace">
    <name>DeepCopyTest</name>
    <filename>namespaceDeepCopyTest.html</filename>
    <namespace>DeepCopyTest::Filter</namespace>
    <namespace>DeepCopyTest::Matcher</namespace>
    <namespace>DeepCopyTest::Reflection</namespace>
    <namespace>DeepCopyTest::TypeFilter</namespace>
    <namespace>DeepCopyTest::TypeMatcher</namespace>
    <class kind="class">DeepCopyTest::DeepCopyTest</class>
  </compound>
  <compound kind="namespace">
    <name>DeepCopyTest::Filter</name>
    <filename>namespaceDeepCopyTest_1_1Filter.html</filename>
    <namespace>DeepCopyTest::Filter::Doctrine</namespace>
    <class kind="class">DeepCopyTest::Filter::KeepFilterTest</class>
    <class kind="class">DeepCopyTest::Filter::ReplaceFilterTest</class>
    <class kind="class">DeepCopyTest::Filter::SetNullFilterTest</class>
  </compound>
  <compound kind="namespace">
    <name>DeepCopyTest::Filter::Doctrine</name>
    <filename>namespaceDeepCopyTest_1_1Filter_1_1Doctrine.html</filename>
    <class kind="class">DeepCopyTest::Filter::Doctrine::DoctrineCollectionFilterTest</class>
    <class kind="class">DeepCopyTest::Filter::Doctrine::DoctrineEmptyCollectionFilterTest</class>
    <class kind="class">DeepCopyTest::Filter::Doctrine::DoctrineProxyFilterTest</class>
    <class kind="class">DeepCopyTest::Filter::Doctrine::Foo</class>
  </compound>
  <compound kind="namespace">
    <name>DeepCopyTest::Matcher</name>
    <filename>namespaceDeepCopyTest_1_1Matcher.html</filename>
    <namespace>DeepCopyTest::Matcher::Doctrine</namespace>
    <class kind="class">DeepCopyTest::Matcher::PropertyMatcherTest</class>
    <class kind="class">DeepCopyTest::Matcher::PropertyNameMatcherTest</class>
    <class kind="class">DeepCopyTest::Matcher::PropertyTypeMatcherTest</class>
    <class kind="class">DeepCopyTest::Matcher::PropertyTypeMatcherTestFixture1</class>
    <class kind="class">DeepCopyTest::Matcher::PropertyTypeMatcherTestFixture2</class>
    <class kind="class">DeepCopyTest::Matcher::X</class>
    <class kind="class">DeepCopyTest::Matcher::Y</class>
  </compound>
  <compound kind="namespace">
    <name>DeepCopyTest::Matcher::Doctrine</name>
    <filename>namespaceDeepCopyTest_1_1Matcher_1_1Doctrine.html</filename>
    <class kind="class">DeepCopyTest::Matcher::Doctrine::DoctrineProxyMatcherTest</class>
    <class kind="class">DeepCopyTest::Matcher::Doctrine::FooProxy</class>
  </compound>
  <compound kind="namespace">
    <name>DeepCopyTest::Reflection</name>
    <filename>namespaceDeepCopyTest_1_1Reflection.html</filename>
    <class kind="class">DeepCopyTest::Reflection::ReflectionHelperTest</class>
    <class kind="class">DeepCopyTest::Reflection::ReflectionHelperTestChild</class>
    <class kind="class">DeepCopyTest::Reflection::ReflectionHelperTestParent</class>
  </compound>
  <compound kind="namespace">
    <name>DeepCopyTest::TypeFilter</name>
    <filename>namespaceDeepCopyTest_1_1TypeFilter.html</filename>
    <namespace>DeepCopyTest::TypeFilter::Date</namespace>
    <namespace>DeepCopyTest::TypeFilter::Spl</namespace>
    <class kind="class">DeepCopyTest::TypeFilter::ReplaceFilterTest</class>
    <class kind="class">DeepCopyTest::TypeFilter::ShallowCopyFilterTest</class>
  </compound>
  <compound kind="namespace">
    <name>DeepCopyTest::TypeFilter::Date</name>
    <filename>namespaceDeepCopyTest_1_1TypeFilter_1_1Date.html</filename>
    <class kind="class">DeepCopyTest::TypeFilter::Date::DateIntervalFilterTest</class>
  </compound>
  <compound kind="namespace">
    <name>DeepCopyTest::TypeFilter::Spl</name>
    <filename>namespaceDeepCopyTest_1_1TypeFilter_1_1Spl.html</filename>
    <class kind="class">DeepCopyTest::TypeFilter::Spl::ArrayObjectFilterTest</class>
    <class kind="class">DeepCopyTest::TypeFilter::Spl::FakeDeepCopy</class>
    <class kind="class">DeepCopyTest::TypeFilter::Spl::SplDoublyLinkedListFilterTest</class>
  </compound>
  <compound kind="namespace">
    <name>DeepCopyTest::TypeMatcher</name>
    <filename>namespaceDeepCopyTest_1_1TypeMatcher.html</filename>
    <class kind="class">DeepCopyTest::TypeMatcher::A</class>
    <class kind="class">DeepCopyTest::TypeMatcher::Bar</class>
    <class kind="class">DeepCopyTest::TypeMatcher::Foo</class>
    <class kind="interface">DeepCopyTest::TypeMatcher::IA</class>
    <class kind="class">DeepCopyTest::TypeMatcher::TypeMatcherTest</class>
  </compound>
  <compound kind="namespace">
    <name>DocBlock</name>
    <filename>namespaceDocBlock.html</filename>
    <namespace>DocBlock::Tags</namespace>
  </compound>
  <compound kind="namespace">
    <name>DocBlock::Tags</name>
    <filename>namespaceDocBlock_1_1Tags.html</filename>
    <class kind="class">DocBlock::Tags::ExampleTest</class>
  </compound>
  <compound kind="namespace">
    <name>Doctrine</name>
    <filename>namespaceDoctrine.html</filename>
    <namespace>Doctrine::Instantiator</namespace>
  </compound>
  <compound kind="namespace">
    <name>Doctrine::Instantiator</name>
    <filename>namespaceDoctrine_1_1Instantiator.html</filename>
    <namespace>Doctrine::Instantiator::Exception</namespace>
    <class kind="class">Doctrine::Instantiator::Instantiator</class>
    <class kind="interface">Doctrine::Instantiator::InstantiatorInterface</class>
  </compound>
  <compound kind="namespace">
    <name>Doctrine::Instantiator::Exception</name>
    <filename>namespaceDoctrine_1_1Instantiator_1_1Exception.html</filename>
    <class kind="interface">Doctrine::Instantiator::Exception::ExceptionInterface</class>
    <class kind="class">Doctrine::Instantiator::Exception::InvalidArgumentException</class>
    <class kind="class">Doctrine::Instantiator::Exception::UnexpectedValueException</class>
  </compound>
  <compound kind="namespace">
    <name>DoctrineTest</name>
    <filename>namespaceDoctrineTest.html</filename>
    <namespace>DoctrineTest::InstantiatorPerformance</namespace>
    <namespace>DoctrineTest::InstantiatorTest</namespace>
    <namespace>DoctrineTest::InstantiatorTestAsset</namespace>
  </compound>
  <compound kind="namespace">
    <name>DoctrineTest::InstantiatorPerformance</name>
    <filename>namespaceDoctrineTest_1_1InstantiatorPerformance.html</filename>
    <class kind="class">DoctrineTest::InstantiatorPerformance::InstantiatorPerformanceEvent</class>
  </compound>
  <compound kind="namespace">
    <name>DoctrineTest::InstantiatorTest</name>
    <filename>namespaceDoctrineTest_1_1InstantiatorTest.html</filename>
    <namespace>DoctrineTest::InstantiatorTest::Exception</namespace>
    <class kind="class">DoctrineTest::InstantiatorTest::InstantiatorTest</class>
  </compound>
  <compound kind="namespace">
    <name>DoctrineTest::InstantiatorTest::Exception</name>
    <filename>namespaceDoctrineTest_1_1InstantiatorTest_1_1Exception.html</filename>
    <class kind="class">DoctrineTest::InstantiatorTest::Exception::InvalidArgumentExceptionTest</class>
    <class kind="class">DoctrineTest::InstantiatorTest::Exception::UnexpectedValueExceptionTest</class>
  </compound>
  <compound kind="namespace">
    <name>DoctrineTest::InstantiatorTestAsset</name>
    <filename>namespaceDoctrineTest_1_1InstantiatorTestAsset.html</filename>
    <class kind="class">DoctrineTest::InstantiatorTestAsset::AbstractClassAsset</class>
    <class kind="class">DoctrineTest::InstantiatorTestAsset::ArrayObjectAsset</class>
    <class kind="class">DoctrineTest::InstantiatorTestAsset::ExceptionAsset</class>
    <class kind="class">DoctrineTest::InstantiatorTestAsset::FinalExceptionAsset</class>
    <class kind="class">DoctrineTest::InstantiatorTestAsset::PharAsset</class>
    <class kind="class">DoctrineTest::InstantiatorTestAsset::PharExceptionAsset</class>
    <class kind="class">DoctrineTest::InstantiatorTestAsset::SerializableArrayObjectAsset</class>
    <class kind="class">DoctrineTest::InstantiatorTestAsset::SerializableFinalInternalChildAsset</class>
    <class kind="class">DoctrineTest::InstantiatorTestAsset::SimpleSerializableAsset</class>
    <class kind="class">DoctrineTest::InstantiatorTestAsset::UnCloneableAsset</class>
    <class kind="class">DoctrineTest::InstantiatorTestAsset::UnserializeExceptionArrayObjectAsset</class>
    <class kind="class">DoctrineTest::InstantiatorTestAsset::WakeUpNoticesAsset</class>
    <class kind="class">DoctrineTest::InstantiatorTestAsset::XMLReaderAsset</class>
  </compound>
  <compound kind="namespace">
    <name>FileFetcher</name>
    <filename>namespaceFileFetcher.html</filename>
    <namespace>FileFetcher::Processor</namespace>
    <class kind="class">FileFetcher::FileCopyInterruptedException</class>
    <class kind="class">FileFetcher::FileFetcher</class>
    <class kind="class">FileFetcher::LastResortException</class>
  </compound>
  <compound kind="namespace">
    <name>FileFetcher::Processor</name>
    <filename>namespaceFileFetcher_1_1Processor.html</filename>
    <class kind="class">FileFetcher::Processor::LastResort</class>
    <class kind="class">FileFetcher::Processor::Local</class>
    <class kind="interface">FileFetcher::Processor::ProcessorInterface</class>
    <class kind="class">FileFetcher::Processor::Remote</class>
  </compound>
  <compound kind="namespace">
    <name>FileFetcherTest</name>
    <filename>namespaceFileFetcherTest.html</filename>
    <class kind="class">FileFetcherTest::FileFetcherTest</class>
  </compound>
  <compound kind="namespace">
    <name>foo</name>
    <filename>namespacefoo.html</filename>
    <member kind="function">
      <type></type>
      <name>func</name>
      <anchorfile>namespacefoo.html</anchorfile>
      <anchor>ad6d2ba6f0c3fb27a84b6ff10e945e96d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Foo</name>
    <filename>namespaceFoo.html</filename>
    <namespace>Foo::Bar</namespace>
    <namespace>Foo::BarScoped</namespace>
    <namespace>Foo::Baz</namespace>
    <namespace>Foo::DataProviderIssue2833</namespace>
    <namespace>Foo::DataProviderIssue2859</namespace>
    <namespace>Foo::DataProviderIssue2922</namespace>
    <class kind="class">Foo::CoveredClass</class>
    <class kind="class">Foo::CoveredParentClass</class>
  </compound>
  <compound kind="namespace">
    <name>Foo::Bar</name>
    <filename>namespaceFoo_1_1Bar.html</filename>
    <class kind="class">Foo::Bar::Baz</class>
    <class kind="class">Foo::Bar::TestClass</class>
    <class kind="class">Foo::Bar::TestClassInBar</class>
  </compound>
  <compound kind="namespace">
    <name>Foo::BarScoped</name>
    <filename>namespaceFoo_1_1BarScoped.html</filename>
    <class kind="class">Foo::BarScoped::TestClass</class>
  </compound>
  <compound kind="namespace">
    <name>Foo::Baz</name>
    <filename>namespaceFoo_1_1Baz.html</filename>
    <class kind="class">Foo::Baz::TestClassInBaz</class>
  </compound>
  <compound kind="namespace">
    <name>Foo::DataProviderIssue2833</name>
    <filename>namespaceFoo_1_1DataProviderIssue2833.html</filename>
    <class kind="class">Foo::DataProviderIssue2833::FirstTest</class>
    <class kind="class">Foo::DataProviderIssue2833::SecondTest</class>
  </compound>
  <compound kind="namespace">
    <name>Foo::DataProviderIssue2859</name>
    <filename>namespaceFoo_1_1DataProviderIssue2859.html</filename>
    <class kind="class">Foo::DataProviderIssue2859::TestWithDataProviderTest</class>
  </compound>
  <compound kind="namespace">
    <name>Foo::DataProviderIssue2922</name>
    <filename>namespaceFoo_1_1DataProviderIssue2922.html</filename>
    <class kind="class">Foo::DataProviderIssue2922::FirstTest</class>
    <class kind="class">Foo::DataProviderIssue2922::SecondHelloWorldTest</class>
  </compound>
  <compound kind="namespace">
    <name>Framework</name>
    <filename>namespaceFramework.html</filename>
    <namespace>Framework::Constraint</namespace>
  </compound>
  <compound kind="namespace">
    <name>Framework::Constraint</name>
    <filename>namespaceFramework_1_1Constraint.html</filename>
    <class kind="class">Framework::Constraint::LogicalXorTest</class>
  </compound>
  <compound kind="namespace">
    <name>Issue2725</name>
    <filename>namespaceIssue2725.html</filename>
    <class kind="class">Issue2725::BeforeAfterClassPidTest</class>
  </compound>
  <compound kind="namespace">
    <name>Issue2972</name>
    <filename>namespaceIssue2972.html</filename>
    <class kind="class">Issue2972::Issue2972Test</class>
  </compound>
  <compound kind="namespace">
    <name>Issue3739</name>
    <filename>namespaceIssue3739.html</filename>
    <class kind="class">Issue3739::Issue3739</class>
    <class kind="class">Issue3739::Issue3739Test</class>
  </compound>
  <compound kind="namespace">
    <name>Mpdf</name>
    <filename>namespaceMpdf.html</filename>
    <class kind="class">Mpdf::Mpdf</class>
  </compound>
  <compound kind="namespace">
    <name>My</name>
    <filename>namespaceMy.html</filename>
    <namespace>My::Example</namespace>
    <namespace>My::Space</namespace>
  </compound>
  <compound kind="namespace">
    <name>My::Example</name>
    <filename>namespaceMy_1_1Example.html</filename>
    <class kind="class">My::Example::Classy</class>
  </compound>
  <compound kind="namespace">
    <name>My::Space</name>
    <filename>namespaceMy_1_1Space.html</filename>
    <class kind="class">My::Space::ExceptionNamespaceTest</class>
  </compound>
  <compound kind="namespace">
    <name>Other</name>
    <filename>namespaceOther.html</filename>
    <namespace>Other::Space</namespace>
  </compound>
  <compound kind="namespace">
    <name>Other::Space</name>
    <filename>namespaceOther_1_1Space.html</filename>
    <class kind="class">Other::Space::Extender</class>
  </compound>
  <compound kind="namespace">
    <name>PharIo</name>
    <filename>namespacePharIo.html</filename>
    <namespace>PharIo::Manifest</namespace>
    <namespace>PharIo::Version</namespace>
  </compound>
  <compound kind="namespace">
    <name>PharIo::Manifest</name>
    <filename>namespacePharIo_1_1Manifest.html</filename>
    <class kind="class">PharIo::Manifest::Application</class>
    <class kind="class">PharIo::Manifest::ApplicationName</class>
    <class kind="class">PharIo::Manifest::ApplicationNameTest</class>
    <class kind="class">PharIo::Manifest::ApplicationTest</class>
    <class kind="class">PharIo::Manifest::Author</class>
    <class kind="class">PharIo::Manifest::AuthorCollection</class>
    <class kind="class">PharIo::Manifest::AuthorCollectionIterator</class>
    <class kind="class">PharIo::Manifest::AuthorCollectionTest</class>
    <class kind="class">PharIo::Manifest::AuthorElement</class>
    <class kind="class">PharIo::Manifest::AuthorElementCollection</class>
    <class kind="class">PharIo::Manifest::AuthorElementCollectionTest</class>
    <class kind="class">PharIo::Manifest::AuthorElementTest</class>
    <class kind="class">PharIo::Manifest::AuthorTest</class>
    <class kind="class">PharIo::Manifest::BundledComponent</class>
    <class kind="class">PharIo::Manifest::BundledComponentCollection</class>
    <class kind="class">PharIo::Manifest::BundledComponentCollectionIterator</class>
    <class kind="class">PharIo::Manifest::BundledComponentCollectionTest</class>
    <class kind="class">PharIo::Manifest::BundledComponentTest</class>
    <class kind="class">PharIo::Manifest::BundlesElement</class>
    <class kind="class">PharIo::Manifest::BundlesElementTest</class>
    <class kind="class">PharIo::Manifest::ComponentElement</class>
    <class kind="class">PharIo::Manifest::ComponentElementCollection</class>
    <class kind="class">PharIo::Manifest::ComponentElementCollectionTest</class>
    <class kind="class">PharIo::Manifest::ComponentElementTest</class>
    <class kind="class">PharIo::Manifest::ContainsElement</class>
    <class kind="class">PharIo::Manifest::ContainsElementTest</class>
    <class kind="class">PharIo::Manifest::CopyrightElement</class>
    <class kind="class">PharIo::Manifest::CopyrightElementTest</class>
    <class kind="class">PharIo::Manifest::CopyrightInformation</class>
    <class kind="class">PharIo::Manifest::CopyrightInformationTest</class>
    <class kind="class">PharIo::Manifest::ElementCollection</class>
    <class kind="class">PharIo::Manifest::Email</class>
    <class kind="class">PharIo::Manifest::EmailTest</class>
    <class kind="interface">PharIo::Manifest::Exception</class>
    <class kind="class">PharIo::Manifest::ExtElement</class>
    <class kind="class">PharIo::Manifest::ExtElementCollection</class>
    <class kind="class">PharIo::Manifest::ExtElementCollectionTest</class>
    <class kind="class">PharIo::Manifest::ExtElementTest</class>
    <class kind="class">PharIo::Manifest::Extension</class>
    <class kind="class">PharIo::Manifest::ExtensionElement</class>
    <class kind="class">PharIo::Manifest::ExtensionElementTest</class>
    <class kind="class">PharIo::Manifest::ExtensionTest</class>
    <class kind="class">PharIo::Manifest::InvalidApplicationNameException</class>
    <class kind="class">PharIo::Manifest::InvalidEmailException</class>
    <class kind="class">PharIo::Manifest::InvalidUrlException</class>
    <class kind="class">PharIo::Manifest::Library</class>
    <class kind="class">PharIo::Manifest::LibraryTest</class>
    <class kind="class">PharIo::Manifest::License</class>
    <class kind="class">PharIo::Manifest::LicenseElement</class>
    <class kind="class">PharIo::Manifest::LicenseElementTest</class>
    <class kind="class">PharIo::Manifest::LicenseTest</class>
    <class kind="class">PharIo::Manifest::Manifest</class>
    <class kind="class">PharIo::Manifest::ManifestDocument</class>
    <class kind="class">PharIo::Manifest::ManifestDocumentException</class>
    <class kind="class">PharIo::Manifest::ManifestDocumentLoadingException</class>
    <class kind="class">PharIo::Manifest::ManifestDocumentLoadingExceptionTest</class>
    <class kind="class">PharIo::Manifest::ManifestDocumentMapper</class>
    <class kind="class">PharIo::Manifest::ManifestDocumentMapperException</class>
    <class kind="class">PharIo::Manifest::ManifestDocumentMapperTest</class>
    <class kind="class">PharIo::Manifest::ManifestDocumentTest</class>
    <class kind="class">PharIo::Manifest::ManifestElement</class>
    <class kind="class">PharIo::Manifest::ManifestElementException</class>
    <class kind="class">PharIo::Manifest::ManifestLoader</class>
    <class kind="class">PharIo::Manifest::ManifestLoaderException</class>
    <class kind="class">PharIo::Manifest::ManifestLoaderTest</class>
    <class kind="class">PharIo::Manifest::ManifestSerializer</class>
    <class kind="class">PharIo::Manifest::ManifestSerializerTest</class>
    <class kind="class">PharIo::Manifest::ManifestTest</class>
    <class kind="class">PharIo::Manifest::PhpElement</class>
    <class kind="class">PharIo::Manifest::PhpElementTest</class>
    <class kind="class">PharIo::Manifest::PhpExtensionRequirement</class>
    <class kind="class">PharIo::Manifest::PhpExtensionRequirementTest</class>
    <class kind="class">PharIo::Manifest::PhpVersionRequirement</class>
    <class kind="class">PharIo::Manifest::PhpVersionRequirementTest</class>
    <class kind="interface">PharIo::Manifest::Requirement</class>
    <class kind="class">PharIo::Manifest::RequirementCollection</class>
    <class kind="class">PharIo::Manifest::RequirementCollectionIterator</class>
    <class kind="class">PharIo::Manifest::RequirementCollectionTest</class>
    <class kind="class">PharIo::Manifest::RequiresElement</class>
    <class kind="class">PharIo::Manifest::RequiresElementTest</class>
    <class kind="class">PharIo::Manifest::Type</class>
    <class kind="class">PharIo::Manifest::Url</class>
    <class kind="class">PharIo::Manifest::UrlTest</class>
  </compound>
  <compound kind="namespace">
    <name>PharIo::Version</name>
    <filename>namespacePharIo_1_1Version.html</filename>
    <class kind="class">PharIo::Version::AbstractVersionConstraint</class>
    <class kind="class">PharIo::Version::AbstractVersionConstraintTest</class>
    <class kind="class">PharIo::Version::AndVersionConstraintGroup</class>
    <class kind="class">PharIo::Version::AndVersionConstraintGroupTest</class>
    <class kind="class">PharIo::Version::AnyVersionConstraint</class>
    <class kind="class">PharIo::Version::AnyVersionConstraintTest</class>
    <class kind="class">PharIo::Version::ExactVersionConstraint</class>
    <class kind="class">PharIo::Version::ExactVersionConstraintTest</class>
    <class kind="interface">PharIo::Version::Exception</class>
    <class kind="class">PharIo::Version::GreaterThanOrEqualToVersionConstraint</class>
    <class kind="class">PharIo::Version::GreaterThanOrEqualToVersionConstraintTest</class>
    <class kind="class">PharIo::Version::InvalidPreReleaseSuffixException</class>
    <class kind="class">PharIo::Version::InvalidVersionException</class>
    <class kind="class">PharIo::Version::OrVersionConstraintGroup</class>
    <class kind="class">PharIo::Version::OrVersionConstraintGroupTest</class>
    <class kind="class">PharIo::Version::PreReleaseSuffix</class>
    <class kind="class">PharIo::Version::PreReleaseSuffixTest</class>
    <class kind="class">PharIo::Version::SpecificMajorAndMinorVersionConstraint</class>
    <class kind="class">PharIo::Version::SpecificMajorAndMinorVersionConstraintTest</class>
    <class kind="class">PharIo::Version::SpecificMajorVersionConstraint</class>
    <class kind="class">PharIo::Version::SpecificMajorVersionConstraintTest</class>
    <class kind="class">PharIo::Version::UnsupportedVersionConstraintException</class>
    <class kind="class">PharIo::Version::Version</class>
    <class kind="interface">PharIo::Version::VersionConstraint</class>
    <class kind="class">PharIo::Version::VersionConstraintParser</class>
    <class kind="class">PharIo::Version::VersionConstraintParserTest</class>
    <class kind="class">PharIo::Version::VersionConstraintValue</class>
    <class kind="class">PharIo::Version::VersionNumber</class>
    <class kind="class">PharIo::Version::VersionTest</class>
  </compound>
  <compound kind="namespace">
    <name>phpDocumentor</name>
    <filename>namespacephpDocumentor.html</filename>
    <namespace>phpDocumentor::Reflection</namespace>
  </compound>
  <compound kind="namespace">
    <name>phpDocumentor::Reflection</name>
    <filename>namespacephpDocumentor_1_1Reflection.html</filename>
    <namespace>phpDocumentor::Reflection::Assets</namespace>
    <namespace>phpDocumentor::Reflection::DocBlock</namespace>
    <namespace>phpDocumentor::Reflection::Exception</namespace>
    <namespace>phpDocumentor::Reflection::PseudoTypes</namespace>
    <namespace>phpDocumentor::Reflection::Types</namespace>
    <class kind="class">phpDocumentor::Reflection::CollectionResolverTest</class>
    <class kind="class">phpDocumentor::Reflection::DocBlock</class>
    <class kind="class">phpDocumentor::Reflection::DocBlockFactory</class>
    <class kind="interface">phpDocumentor::Reflection::DocBlockFactoryInterface</class>
    <class kind="class">phpDocumentor::Reflection::DocBlockFactoryTest</class>
    <class kind="class">phpDocumentor::Reflection::DocblockSeeTagResolvingTest</class>
    <class kind="class">phpDocumentor::Reflection::DocblocksWithAnnotationsTest</class>
    <class kind="class">phpDocumentor::Reflection::DocBlockTest</class>
    <class kind="interface">phpDocumentor::Reflection::Element</class>
    <class kind="interface">phpDocumentor::Reflection::File</class>
    <class kind="class">phpDocumentor::Reflection::Fqsen</class>
    <class kind="class">phpDocumentor::Reflection::FqsenResolver</class>
    <class kind="class">phpDocumentor::Reflection::FqsenResolverTest</class>
    <class kind="class">phpDocumentor::Reflection::FqsenTest</class>
    <class kind="class">phpDocumentor::Reflection::InterpretingDocBlocksTest</class>
    <class kind="class">phpDocumentor::Reflection::Location</class>
    <class kind="class">phpDocumentor::Reflection::ModifyBackTraceSafeTest</class>
    <class kind="class">phpDocumentor::Reflection::Node</class>
    <class kind="class">phpDocumentor::Reflection::PregSplitTest</class>
    <class kind="interface">phpDocumentor::Reflection::Project</class>
    <class kind="interface">phpDocumentor::Reflection::ProjectFactory</class>
    <class kind="interface">phpDocumentor::Reflection::PseudoType</class>
    <class kind="class">phpDocumentor::Reflection::ReconstitutingADocBlockTest</class>
    <class kind="class">phpDocumentor::Reflection::Traverser</class>
    <class kind="interface">phpDocumentor::Reflection::Type</class>
    <class kind="class">phpDocumentor::Reflection::TypeResolver</class>
    <class kind="class">phpDocumentor::Reflection::TypeResolverTest</class>
    <class kind="class">phpDocumentor::Reflection::UsingTagsTest</class>
    <class kind="class">phpDocumentor::Reflection::Utils</class>
  </compound>
  <compound kind="namespace">
    <name>phpDocumentor::Reflection::Assets</name>
    <filename>namespacephpDocumentor_1_1Reflection_1_1Assets.html</filename>
    <class kind="class">phpDocumentor::Reflection::Assets::CustomParam</class>
    <class kind="class">phpDocumentor::Reflection::Assets::CustomServiceClass</class>
    <class kind="class">phpDocumentor::Reflection::Assets::CustomServiceInterface</class>
  </compound>
  <compound kind="namespace">
    <name>phpDocumentor::Reflection::DocBlock</name>
    <filename>namespacephpDocumentor_1_1Reflection_1_1DocBlock.html</filename>
    <namespace>phpDocumentor::Reflection::DocBlock::Tags</namespace>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Description</class>
    <class kind="class">phpDocumentor::Reflection::DocBlock::DescriptionFactory</class>
    <class kind="class">phpDocumentor::Reflection::DocBlock::ExampleFinder</class>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Serializer</class>
    <class kind="class">phpDocumentor::Reflection::DocBlock::StandardTagFactory</class>
    <class kind="interface">phpDocumentor::Reflection::DocBlock::Tag</class>
    <class kind="interface">phpDocumentor::Reflection::DocBlock::TagFactory</class>
  </compound>
  <compound kind="namespace">
    <name>phpDocumentor::Reflection::DocBlock::Tags</name>
    <filename>namespacephpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags.html</filename>
    <namespace>phpDocumentor::Reflection::DocBlock::Tags::Factory</namespace>
    <namespace>phpDocumentor::Reflection::DocBlock::Tags::Formatter</namespace>
    <namespace>phpDocumentor::Reflection::DocBlock::Tags::Reference</namespace>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::Author</class>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::AuthorTest</class>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::BaseTag</class>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::Covers</class>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::CoversTest</class>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::Deprecated</class>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::DeprecatedTest</class>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::Example</class>
    <class kind="interface">phpDocumentor::Reflection::DocBlock::Tags::Formatter</class>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::Generic</class>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::GenericTest</class>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::InvalidTag</class>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::InvalidTagTest</class>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::Link</class>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::LinkTest</class>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::Method</class>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::MethodTest</class>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::Param</class>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::ParamTest</class>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::Property</class>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::PropertyRead</class>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::PropertyReadTest</class>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::PropertyTest</class>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::PropertyWrite</class>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::PropertyWriteTest</class>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::Return_</class>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::ReturnTest</class>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::See</class>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::SeeTest</class>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::Since</class>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::SinceTest</class>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::Source</class>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::SourceTest</class>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::TagWithType</class>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::Throws</class>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::ThrowsTest</class>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::Uses</class>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::UsesTest</class>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::Var_</class>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::VarTest</class>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::Version</class>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::VersionTest</class>
  </compound>
  <compound kind="namespace">
    <name>phpDocumentor::Reflection::DocBlock::Tags::Factory</name>
    <filename>namespacephpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Factory.html</filename>
    <class kind="interface">phpDocumentor::Reflection::DocBlock::Tags::Factory::StaticMethod</class>
  </compound>
  <compound kind="namespace">
    <name>phpDocumentor::Reflection::DocBlock::Tags::Formatter</name>
    <filename>namespacephpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Formatter.html</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::Formatter::AlignFormatter</class>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::Formatter::AlignFormatterTest</class>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::Formatter::PassthroughFormatter</class>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::Formatter::PassthroughFormatterTest</class>
  </compound>
  <compound kind="namespace">
    <name>phpDocumentor::Reflection::DocBlock::Tags::Reference</name>
    <filename>namespacephpDocumentor_1_1Reflection_1_1DocBlock_1_1Tags_1_1Reference.html</filename>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::Reference::Fqsen</class>
    <class kind="interface">phpDocumentor::Reflection::DocBlock::Tags::Reference::Reference</class>
    <class kind="class">phpDocumentor::Reflection::DocBlock::Tags::Reference::Url</class>
  </compound>
  <compound kind="namespace">
    <name>phpDocumentor::Reflection::Exception</name>
    <filename>namespacephpDocumentor_1_1Reflection_1_1Exception.html</filename>
    <class kind="class">phpDocumentor::Reflection::Exception::PcreException</class>
    <class kind="class">phpDocumentor::Reflection::Exception::PcreExceptionTest</class>
  </compound>
  <compound kind="namespace">
    <name>phpDocumentor::Reflection::PseudoTypes</name>
    <filename>namespacephpDocumentor_1_1Reflection_1_1PseudoTypes.html</filename>
    <class kind="class">phpDocumentor::Reflection::PseudoTypes::False_</class>
    <class kind="class">phpDocumentor::Reflection::PseudoTypes::FalseTest</class>
    <class kind="class">phpDocumentor::Reflection::PseudoTypes::True_</class>
    <class kind="class">phpDocumentor::Reflection::PseudoTypes::TrueTest</class>
  </compound>
  <compound kind="namespace">
    <name>phpDocumentor::Reflection::Types</name>
    <filename>namespacephpDocumentor_1_1Reflection_1_1Types.html</filename>
    <namespace>phpDocumentor::Reflection::Types::Mock</namespace>
    <class kind="class">phpDocumentor::Reflection::Types::AbstractList</class>
    <class kind="class">phpDocumentor::Reflection::Types::AggregatedType</class>
    <class kind="class">phpDocumentor::Reflection::Types::Array_</class>
    <class kind="class">phpDocumentor::Reflection::Types::ArrayTest</class>
    <class kind="class">phpDocumentor::Reflection::Types::Boolean</class>
    <class kind="class">phpDocumentor::Reflection::Types::BooleanTest</class>
    <class kind="class">phpDocumentor::Reflection::Types::Callable_</class>
    <class kind="class">phpDocumentor::Reflection::Types::ClassString</class>
    <class kind="class">phpDocumentor::Reflection::Types::ClassStringTest</class>
    <class kind="class">phpDocumentor::Reflection::Types::Collection</class>
    <class kind="class">phpDocumentor::Reflection::Types::CollectionTest</class>
    <class kind="class">phpDocumentor::Reflection::Types::Compound</class>
    <class kind="class">phpDocumentor::Reflection::Types::CompoundTest</class>
    <class kind="class">phpDocumentor::Reflection::Types::Context</class>
    <class kind="class">phpDocumentor::Reflection::Types::ContextFactory</class>
    <class kind="class">phpDocumentor::Reflection::Types::ContextFactoryTest</class>
    <class kind="class">phpDocumentor::Reflection::Types::ContextTest</class>
    <class kind="class">phpDocumentor::Reflection::Types::Expression</class>
    <class kind="class">phpDocumentor::Reflection::Types::Float_</class>
    <class kind="class">phpDocumentor::Reflection::Types::Integer</class>
    <class kind="class">phpDocumentor::Reflection::Types::Intersection</class>
    <class kind="class">phpDocumentor::Reflection::Types::Iterable_</class>
    <class kind="class">phpDocumentor::Reflection::Types::IterableTest</class>
    <class kind="class">phpDocumentor::Reflection::Types::Mixed_</class>
    <class kind="class">phpDocumentor::Reflection::Types::Null_</class>
    <class kind="class">phpDocumentor::Reflection::Types::Nullable</class>
    <class kind="class">phpDocumentor::Reflection::Types::NullableTest</class>
    <class kind="class">phpDocumentor::Reflection::Types::Object_</class>
    <class kind="class">phpDocumentor::Reflection::Types::Parent_</class>
    <class kind="class">phpDocumentor::Reflection::Types::Resource_</class>
    <class kind="class">phpDocumentor::Reflection::Types::Scalar</class>
    <class kind="class">phpDocumentor::Reflection::Types::Self_</class>
    <class kind="class">phpDocumentor::Reflection::Types::Static_</class>
    <class kind="class">phpDocumentor::Reflection::Types::String_</class>
    <class kind="class">phpDocumentor::Reflection::Types::This</class>
    <class kind="class">phpDocumentor::Reflection::Types::Void_</class>
  </compound>
  <compound kind="namespace">
    <name>phpDocumentor::Reflection::Types::Mock</name>
    <filename>namespacephpDocumentor_1_1Reflection_1_1Types_1_1Mock.html</filename>
    <class kind="class">phpDocumentor::Reflection::Types::Mock::Foo</class>
  </compound>
  <compound kind="namespace">
    <name>PHPSTORM_META</name>
    <filename>namespacePHPSTORM__META.html</filename>
  </compound>
  <compound kind="namespace">
    <name>PHPUnit</name>
    <filename>namespacePHPUnit.html</filename>
    <namespace>PHPUnit::Framework</namespace>
    <namespace>PHPUnit::Runner</namespace>
    <namespace>PHPUnit::SelfTest</namespace>
    <namespace>PHPUnit::StaticAnalysis</namespace>
    <namespace>PHPUnit::Test</namespace>
    <namespace>PHPUnit::TestFixture</namespace>
    <namespace>PHPUnit::TextUI</namespace>
    <namespace>PHPUnit::Util</namespace>
    <class kind="interface">PHPUnit::Exception</class>
  </compound>
  <compound kind="namespace">
    <name>PHPUnit::Framework</name>
    <filename>namespacePHPUnit_1_1Framework.html</filename>
    <namespace>PHPUnit::Framework::Constraint</namespace>
    <namespace>PHPUnit::Framework::Error</namespace>
    <namespace>PHPUnit::Framework::MockObject</namespace>
    <namespace>PHPUnit::Framework::StaticAnalysis</namespace>
    <class kind="class">PHPUnit::Framework::Assert</class>
    <class kind="class">PHPUnit::Framework::AssertionFailedError</class>
    <class kind="class">PHPUnit::Framework::AssertTest</class>
    <class kind="class">PHPUnit::Framework::CodeCoverageException</class>
    <class kind="class">PHPUnit::Framework::ConstraintTest</class>
    <class kind="class">PHPUnit::Framework::CoveredCodeNotExecutedException</class>
    <class kind="class">PHPUnit::Framework::DataProviderTestSuite</class>
    <class kind="class">PHPUnit::Framework::Exception</class>
    <class kind="class">PHPUnit::Framework::ExceptionTest</class>
    <class kind="class">PHPUnit::Framework::ExceptionWrapper</class>
    <class kind="class">PHPUnit::Framework::ExceptionWrapperTest</class>
    <class kind="class">PHPUnit::Framework::ExpectationFailedException</class>
    <class kind="class">PHPUnit::Framework::FunctionsTest</class>
    <class kind="interface">PHPUnit::Framework::IncompleteTest</class>
    <class kind="class">PHPUnit::Framework::IncompleteTestCase</class>
    <class kind="class">PHPUnit::Framework::IncompleteTestCaseTest</class>
    <class kind="class">PHPUnit::Framework::IncompleteTestError</class>
    <class kind="class">PHPUnit::Framework::InvalidArgumentException</class>
    <class kind="class">PHPUnit::Framework::InvalidArgumentExceptionTest</class>
    <class kind="class">PHPUnit::Framework::InvalidCoversTargetException</class>
    <class kind="class">PHPUnit::Framework::InvalidDataProviderException</class>
    <class kind="class">PHPUnit::Framework::InvalidParameterGroupException</class>
    <class kind="class">PHPUnit::Framework::MissingCoversAnnotationException</class>
    <class kind="class">PHPUnit::Framework::NoChildTestSuiteException</class>
    <class kind="class">PHPUnit::Framework::OutputError</class>
    <class kind="class">PHPUnit::Framework::PHPTAssertionFailedError</class>
    <class kind="class">PHPUnit::Framework::RiskyTestError</class>
    <class kind="interface">PHPUnit::Framework::SelfDescribing</class>
    <class kind="interface">PHPUnit::Framework::SkippedTest</class>
    <class kind="class">PHPUnit::Framework::SkippedTestCase</class>
    <class kind="class">PHPUnit::Framework::SkippedTestCaseTest</class>
    <class kind="class">PHPUnit::Framework::SkippedTestError</class>
    <class kind="class">PHPUnit::Framework::SkippedTestSuiteError</class>
    <class kind="class">PHPUnit::Framework::SyntheticError</class>
    <class kind="class">PHPUnit::Framework::SyntheticSkippedError</class>
    <class kind="interface">PHPUnit::Framework::Test</class>
    <class kind="class">PHPUnit::Framework::TestBuilder</class>
    <class kind="class">PHPUnit::Framework::TestBuilderTest</class>
    <class kind="class">PHPUnit::Framework::TestCase</class>
    <class kind="class">PHPUnit::Framework::TestCaseTest</class>
    <class kind="class">PHPUnit::Framework::TestFailure</class>
    <class kind="class">PHPUnit::Framework::TestFailureTest</class>
    <class kind="class">PHPUnit::Framework::TestImplementorTest</class>
    <class kind="interface">PHPUnit::Framework::TestListener</class>
    <class kind="class">PHPUnit::Framework::TestListenerTest</class>
    <class kind="class">PHPUnit::Framework::TestResult</class>
    <class kind="class">PHPUnit::Framework::TestSuite</class>
    <class kind="class">PHPUnit::Framework::TestSuiteIterator</class>
    <class kind="class">PHPUnit::Framework::TestSuiteIteratorTest</class>
    <class kind="class">PHPUnit::Framework::TestSuiteTest</class>
    <class kind="class">PHPUnit::Framework::UnintentionallyCoveredCodeError</class>
    <class kind="class">PHPUnit::Framework::Warning</class>
    <class kind="class">PHPUnit::Framework::WarningTestCase</class>
  </compound>
  <compound kind="namespace">
    <name>PHPUnit::Framework::Constraint</name>
    <filename>namespacePHPUnit_1_1Framework_1_1Constraint.html</filename>
    <class kind="class">PHPUnit::Framework::Constraint::ArrayHasKey</class>
    <class kind="class">PHPUnit::Framework::Constraint::ArrayHasKeyTest</class>
    <class kind="class">PHPUnit::Framework::Constraint::ArraySubset</class>
    <class kind="class">PHPUnit::Framework::Constraint::ArraySubsetTest</class>
    <class kind="class">PHPUnit::Framework::Constraint::Attribute</class>
    <class kind="class">PHPUnit::Framework::Constraint::Callback</class>
    <class kind="class">PHPUnit::Framework::Constraint::CallbackTest</class>
    <class kind="class">PHPUnit::Framework::Constraint::ClassHasAttribute</class>
    <class kind="class">PHPUnit::Framework::Constraint::ClassHasAttributeTest</class>
    <class kind="class">PHPUnit::Framework::Constraint::ClassHasStaticAttribute</class>
    <class kind="class">PHPUnit::Framework::Constraint::ClassHasStaticAttributeTest</class>
    <class kind="class">PHPUnit::Framework::Constraint::Composite</class>
    <class kind="class">PHPUnit::Framework::Constraint::Constraint</class>
    <class kind="class">PHPUnit::Framework::Constraint::ConstraintTestCase</class>
    <class kind="class">PHPUnit::Framework::Constraint::Count</class>
    <class kind="class">PHPUnit::Framework::Constraint::CountTest</class>
    <class kind="class">PHPUnit::Framework::Constraint::DirectoryExists</class>
    <class kind="class">PHPUnit::Framework::Constraint::DirectoryExistsTest</class>
    <class kind="class">PHPUnit::Framework::Constraint::Exception</class>
    <class kind="class">PHPUnit::Framework::Constraint::ExceptionCode</class>
    <class kind="class">PHPUnit::Framework::Constraint::ExceptionCodeTest</class>
    <class kind="class">PHPUnit::Framework::Constraint::ExceptionMessage</class>
    <class kind="class">PHPUnit::Framework::Constraint::ExceptionMessageRegExpTest</class>
    <class kind="class">PHPUnit::Framework::Constraint::ExceptionMessageRegularExpression</class>
    <class kind="class">PHPUnit::Framework::Constraint::ExceptionMessageTest</class>
    <class kind="class">PHPUnit::Framework::Constraint::ExceptionTest</class>
    <class kind="class">PHPUnit::Framework::Constraint::FileExists</class>
    <class kind="class">PHPUnit::Framework::Constraint::FileExistsTest</class>
    <class kind="class">PHPUnit::Framework::Constraint::GreaterThan</class>
    <class kind="class">PHPUnit::Framework::Constraint::GreaterThanTest</class>
    <class kind="class">PHPUnit::Framework::Constraint::IsAnything</class>
    <class kind="class">PHPUnit::Framework::Constraint::IsEmpty</class>
    <class kind="class">PHPUnit::Framework::Constraint::IsEmptyTest</class>
    <class kind="class">PHPUnit::Framework::Constraint::IsEqual</class>
    <class kind="class">PHPUnit::Framework::Constraint::IsEqualTest</class>
    <class kind="class">PHPUnit::Framework::Constraint::IsFalse</class>
    <class kind="class">PHPUnit::Framework::Constraint::IsFinite</class>
    <class kind="class">PHPUnit::Framework::Constraint::IsIdentical</class>
    <class kind="class">PHPUnit::Framework::Constraint::IsIdenticalTest</class>
    <class kind="class">PHPUnit::Framework::Constraint::IsInfinite</class>
    <class kind="class">PHPUnit::Framework::Constraint::IsInstanceOf</class>
    <class kind="class">PHPUnit::Framework::Constraint::IsInstanceOfTest</class>
    <class kind="class">PHPUnit::Framework::Constraint::IsJson</class>
    <class kind="class">PHPUnit::Framework::Constraint::IsJsonTest</class>
    <class kind="class">PHPUnit::Framework::Constraint::IsNan</class>
    <class kind="class">PHPUnit::Framework::Constraint::IsNull</class>
    <class kind="class">PHPUnit::Framework::Constraint::IsNullTest</class>
    <class kind="class">PHPUnit::Framework::Constraint::IsReadable</class>
    <class kind="class">PHPUnit::Framework::Constraint::IsReadableTest</class>
    <class kind="class">PHPUnit::Framework::Constraint::IsTrue</class>
    <class kind="class">PHPUnit::Framework::Constraint::IsType</class>
    <class kind="class">PHPUnit::Framework::Constraint::IsTypeTest</class>
    <class kind="class">PHPUnit::Framework::Constraint::IsWritable</class>
    <class kind="class">PHPUnit::Framework::Constraint::IsWritableTest</class>
    <class kind="class">PHPUnit::Framework::Constraint::JsonMatches</class>
    <class kind="class">PHPUnit::Framework::Constraint::JsonMatchesErrorMessageProvider</class>
    <class kind="class">PHPUnit::Framework::Constraint::JsonMatchesErrorMessageProviderTest</class>
    <class kind="class">PHPUnit::Framework::Constraint::JsonMatchesTest</class>
    <class kind="class">PHPUnit::Framework::Constraint::LessThan</class>
    <class kind="class">PHPUnit::Framework::Constraint::LessThanTest</class>
    <class kind="class">PHPUnit::Framework::Constraint::LogicalAnd</class>
    <class kind="class">PHPUnit::Framework::Constraint::LogicalAndTest</class>
    <class kind="class">PHPUnit::Framework::Constraint::LogicalNot</class>
    <class kind="class">PHPUnit::Framework::Constraint::LogicalNotTest</class>
    <class kind="class">PHPUnit::Framework::Constraint::LogicalOr</class>
    <class kind="class">PHPUnit::Framework::Constraint::LogicalOrTest</class>
    <class kind="class">PHPUnit::Framework::Constraint::LogicalXor</class>
    <class kind="class">PHPUnit::Framework::Constraint::ObjectHasAttribute</class>
    <class kind="class">PHPUnit::Framework::Constraint::ObjectHasAttributeTest</class>
    <class kind="class">PHPUnit::Framework::Constraint::RegularExpression</class>
    <class kind="class">PHPUnit::Framework::Constraint::RegularExpressionTest</class>
    <class kind="class">PHPUnit::Framework::Constraint::SameSize</class>
    <class kind="class">PHPUnit::Framework::Constraint::SameSizeTest</class>
    <class kind="class">PHPUnit::Framework::Constraint::StringContains</class>
    <class kind="class">PHPUnit::Framework::Constraint::StringContainsTest</class>
    <class kind="class">PHPUnit::Framework::Constraint::StringEndsWith</class>
    <class kind="class">PHPUnit::Framework::Constraint::StringEndsWithTest</class>
    <class kind="class">PHPUnit::Framework::Constraint::StringMatchesFormatDescription</class>
    <class kind="class">PHPUnit::Framework::Constraint::StringMatchesFormatDescriptionTest</class>
    <class kind="class">PHPUnit::Framework::Constraint::StringStartsWith</class>
    <class kind="class">PHPUnit::Framework::Constraint::StringStartsWithTest</class>
    <class kind="class">PHPUnit::Framework::Constraint::TraversableContains</class>
    <class kind="class">PHPUnit::Framework::Constraint::TraversableContainsEqual</class>
    <class kind="class">PHPUnit::Framework::Constraint::TraversableContainsIdentical</class>
    <class kind="class">PHPUnit::Framework::Constraint::TraversableContainsOnly</class>
    <class kind="class">PHPUnit::Framework::Constraint::TraversableContainsTest</class>
  </compound>
  <compound kind="namespace">
    <name>PHPUnit::Framework::Error</name>
    <filename>namespacePHPUnit_1_1Framework_1_1Error.html</filename>
    <class kind="class">PHPUnit::Framework::Error::Deprecated</class>
    <class kind="class">PHPUnit::Framework::Error::Error</class>
    <class kind="class">PHPUnit::Framework::Error::Notice</class>
    <class kind="class">PHPUnit::Framework::Error::Warning</class>
  </compound>
  <compound kind="namespace">
    <name>PHPUnit::Framework::MockObject</name>
    <filename>namespacePHPUnit_1_1Framework_1_1MockObject.html</filename>
    <namespace>PHPUnit::Framework::MockObject::Builder</namespace>
    <namespace>PHPUnit::Framework::MockObject::Rule</namespace>
    <namespace>PHPUnit::Framework::MockObject::Stub</namespace>
    <class kind="class">PHPUnit::Framework::MockObject::BadMethodCallException</class>
    <class kind="class">PHPUnit::Framework::MockObject::ConfigurableMethod</class>
    <class kind="class">PHPUnit::Framework::MockObject::ConfigurableMethodsAlreadyInitializedException</class>
    <class kind="class">PHPUnit::Framework::MockObject::ConfigurableMethodsTest</class>
    <class kind="class">PHPUnit::Framework::MockObject::ConfigurableMethodTest</class>
    <class kind="interface">PHPUnit::Framework::MockObject::Exception</class>
    <class kind="class">PHPUnit::Framework::MockObject::Generator</class>
    <class kind="class">PHPUnit::Framework::MockObject::IncompatibleReturnValueException</class>
    <class kind="class">PHPUnit::Framework::MockObject::Invocation</class>
    <class kind="class">PHPUnit::Framework::MockObject::InvocationHandler</class>
    <class kind="class">PHPUnit::Framework::MockObject::InvocationHandlerTest</class>
    <class kind="class">PHPUnit::Framework::MockObject::Matcher</class>
    <class kind="class">PHPUnit::Framework::MockObject::MatcherTest</class>
    <class kind="class">PHPUnit::Framework::MockObject::MethodNameConstraint</class>
    <class kind="class">PHPUnit::Framework::MockObject::MockBuilder</class>
    <class kind="class">PHPUnit::Framework::MockObject::MockClass</class>
    <class kind="class">PHPUnit::Framework::MockObject::MockClassTest</class>
    <class kind="class">PHPUnit::Framework::MockObject::MockMethod</class>
    <class kind="class">PHPUnit::Framework::MockObject::MockMethodSet</class>
    <class kind="class">PHPUnit::Framework::MockObject::MockMethodTest</class>
    <class kind="interface">PHPUnit::Framework::MockObject::MockObject</class>
    <class kind="class">PHPUnit::Framework::MockObject::MockTrait</class>
    <class kind="class">PHPUnit::Framework::MockObject::MockTraitTest</class>
    <class kind="interface">PHPUnit::Framework::MockObject::MockType</class>
    <class kind="class">PHPUnit::Framework::MockObject::RuntimeException</class>
    <class kind="interface">PHPUnit::Framework::MockObject::Stub</class>
    <class kind="interface">PHPUnit::Framework::MockObject::Verifiable</class>
    <member kind="function">
      <type></type>
      <name>__phpunit_setOriginalObject</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1MockObject.html</anchorfile>
      <anchor>af323001a1713d90051514c08014076b4</anchor>
      <arglist>($originalObject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__phpunit_setReturnValueGeneration</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1MockObject.html</anchorfile>
      <anchor>a1f38d33cfe3b0d5f5fd27fc4288dee37</anchor>
      <arglist>(bool $returnValueGeneration)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__phpunit_getInvocationHandler</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1MockObject.html</anchorfile>
      <anchor>a12dcac1e4e45358144a79da9258909e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__phpunit_hasMatchers</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1MockObject.html</anchorfile>
      <anchor>a962dc5d2d3ec13e740a2dc5f9a4d36d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__phpunit_verify</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1MockObject.html</anchorfile>
      <anchor>ae26547a2792315fc8c99e7a77339c698</anchor>
      <arglist>(bool $unsetInvocationMocker=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>expects</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1MockObject.html</anchorfile>
      <anchor>af523cb478765a606ea9087e97abbc0c1</anchor>
      <arglist>(InvocationOrder $matcher)</arglist>
    </member>
    <member kind="variable">
      <type>trait</type>
      <name>Api</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1MockObject.html</anchorfile>
      <anchor>acefb5e8596931fb6b3677c14b9f858ed</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>PHPUnit::Framework::MockObject::Builder</name>
    <filename>namespacePHPUnit_1_1Framework_1_1MockObject_1_1Builder.html</filename>
    <class kind="interface">PHPUnit::Framework::MockObject::Builder::Identity</class>
    <class kind="class">PHPUnit::Framework::MockObject::Builder::InvocationMocker</class>
    <class kind="interface">PHPUnit::Framework::MockObject::Builder::InvocationStubber</class>
    <class kind="interface">PHPUnit::Framework::MockObject::Builder::Match</class>
    <class kind="interface">PHPUnit::Framework::MockObject::Builder::MethodNameMatch</class>
    <class kind="interface">PHPUnit::Framework::MockObject::Builder::ParametersMatch</class>
    <class kind="interface">PHPUnit::Framework::MockObject::Builder::Stub</class>
  </compound>
  <compound kind="namespace">
    <name>PHPUnit::Framework::MockObject::Rule</name>
    <filename>namespacePHPUnit_1_1Framework_1_1MockObject_1_1Rule.html</filename>
    <class kind="class">PHPUnit::Framework::MockObject::Rule::AnyInvokedCount</class>
    <class kind="class">PHPUnit::Framework::MockObject::Rule::AnyParameters</class>
    <class kind="class">PHPUnit::Framework::MockObject::Rule::ConsecutiveParameters</class>
    <class kind="class">PHPUnit::Framework::MockObject::Rule::InvocationOrder</class>
    <class kind="class">PHPUnit::Framework::MockObject::Rule::InvokedAtIndex</class>
    <class kind="class">PHPUnit::Framework::MockObject::Rule::InvokedAtLeastCount</class>
    <class kind="class">PHPUnit::Framework::MockObject::Rule::InvokedAtLeastOnce</class>
    <class kind="class">PHPUnit::Framework::MockObject::Rule::InvokedAtMostCount</class>
    <class kind="class">PHPUnit::Framework::MockObject::Rule::InvokedCount</class>
    <class kind="class">PHPUnit::Framework::MockObject::Rule::MethodName</class>
    <class kind="class">PHPUnit::Framework::MockObject::Rule::Parameters</class>
    <class kind="interface">PHPUnit::Framework::MockObject::Rule::ParametersRule</class>
  </compound>
  <compound kind="namespace">
    <name>PHPUnit::Framework::MockObject::Stub</name>
    <filename>namespacePHPUnit_1_1Framework_1_1MockObject_1_1Stub.html</filename>
    <class kind="class">PHPUnit::Framework::MockObject::Stub::ConsecutiveCalls</class>
    <class kind="class">PHPUnit::Framework::MockObject::Stub::Exception</class>
    <class kind="class">PHPUnit::Framework::MockObject::Stub::ReturnArgument</class>
    <class kind="class">PHPUnit::Framework::MockObject::Stub::ReturnCallback</class>
    <class kind="class">PHPUnit::Framework::MockObject::Stub::ReturnReference</class>
    <class kind="class">PHPUnit::Framework::MockObject::Stub::ReturnSelf</class>
    <class kind="class">PHPUnit::Framework::MockObject::Stub::ReturnStub</class>
    <class kind="class">PHPUnit::Framework::MockObject::Stub::ReturnValueMap</class>
    <class kind="interface">PHPUnit::Framework::MockObject::Stub::Stub</class>
  </compound>
  <compound kind="namespace">
    <name>PHPUnit::Framework::StaticAnalysis</name>
    <filename>namespacePHPUnit_1_1Framework_1_1StaticAnalysis.html</filename>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath</namespace>
  </compound>
  <compound kind="namespace">
    <name>PHPUnit::Framework::StaticAnalysis::HappyPath</name>
    <filename>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath.html</filename>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertEmpty</namespace>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertFalse</namespace>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertInstanceOf</namespace>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsArray</namespace>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsBool</namespace>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsCallable</namespace>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsFloat</namespace>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsInt</namespace>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsIterable</namespace>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsNotArray</namespace>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsNotBool</namespace>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsNotFloat</namespace>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsNotInt</namespace>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsNotIterable</namespace>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsNotNumeric</namespace>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsNotObject</namespace>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsNotResource</namespace>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsNotScalar</namespace>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsNotString</namespace>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsNumeric</namespace>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsObject</namespace>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsResource</namespace>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsScalar</namespace>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsString</namespace>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertNotEmpty</namespace>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertNotFalse</namespace>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertNotInstanceOf</namespace>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertNotNull</namespace>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertNotTrue</namespace>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertNull</namespace>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertSame</namespace>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertTrue</namespace>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath.html</anchorfile>
      <anchor>ad1216f18433266a23a4dd86fa9087f75</anchor>
      <arglist>(?object $value)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertEmpty</name>
    <filename>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertEmpty.html</filename>
    <namespace>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertEmpty::Fail</namespace>
  </compound>
  <compound kind="namespace">
    <name>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertEmpty::Fail</name>
    <filename>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertEmpty_1_1Fail.html</filename>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertEmpty_1_1Fail.html</anchorfile>
      <anchor>a3fba9dccc541ccdb17efa79b6f662328</anchor>
      <arglist>($value)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertFalse</name>
    <filename>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertFalse.html</filename>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertFalse.html</anchorfile>
      <anchor>a20248421d03e802c2e56287474fe5561</anchor>
      <arglist>($value)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertInstanceOf</name>
    <filename>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertInstanceOf.html</filename>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertInstanceOf.html</anchorfile>
      <anchor>a47373eb3ce23bcb1d49ef4a5b4eea9c5</anchor>
      <arglist>(object $value)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsArray</name>
    <filename>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsArray.html</filename>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsArray.html</anchorfile>
      <anchor>a815e56fbe16d317e6c75865b7f315cec</anchor>
      <arglist>($value)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsBool</name>
    <filename>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsBool.html</filename>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsBool.html</anchorfile>
      <anchor>a3596bdf6464fdee54c3bfc38ef81ed0c</anchor>
      <arglist>($value)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsCallable</name>
    <filename>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsCallable.html</filename>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsCallable.html</anchorfile>
      <anchor>a5bbb760b9d6c349380fbeccff2ac2ece</anchor>
      <arglist>($value)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsFloat</name>
    <filename>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsFloat.html</filename>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsFloat.html</anchorfile>
      <anchor>a02dd5da4be8428ee155dbfaa189f157c</anchor>
      <arglist>($value)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsInt</name>
    <filename>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsInt.html</filename>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsInt.html</anchorfile>
      <anchor>a5867f86de91347f1d032704cbc19adf6</anchor>
      <arglist>($value)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsIterable</name>
    <filename>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsIterable.html</filename>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsIterable.html</anchorfile>
      <anchor>ac19028c03602652bd81dedd519950043</anchor>
      <arglist>($value)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsNotArray</name>
    <filename>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsNotArray.html</filename>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsNotArray.html</anchorfile>
      <anchor>aada2e4fa01cf76191eeae9b485169e3e</anchor>
      <arglist>($value)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsNotBool</name>
    <filename>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsNotBool.html</filename>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsNotBool.html</anchorfile>
      <anchor>ab9e29026132d34010268ebe70dead2b6</anchor>
      <arglist>($value)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsNotFloat</name>
    <filename>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsNotFloat.html</filename>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsNotFloat.html</anchorfile>
      <anchor>aeeab804d39fec3bab2c2196121339c3b</anchor>
      <arglist>($value)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsNotInt</name>
    <filename>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsNotInt.html</filename>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsNotInt.html</anchorfile>
      <anchor>a01c05e40eb570b60dc4c4d57027ea94f</anchor>
      <arglist>($value)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsNotIterable</name>
    <filename>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsNotIterable.html</filename>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsNotIterable.html</anchorfile>
      <anchor>abc72f958455196486cdc7dc64fdec027</anchor>
      <arglist>($value)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsNotNumeric</name>
    <filename>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsNotNumeric.html</filename>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsNotNumeric.html</anchorfile>
      <anchor>ac427060c59483aff8c3a62c9b090c00b</anchor>
      <arglist>($value)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsNotObject</name>
    <filename>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsNotObject.html</filename>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsNotObject.html</anchorfile>
      <anchor>aaa7e86b8401fd46c311c413ddfe7c5e7</anchor>
      <arglist>($value)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsNotResource</name>
    <filename>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsNotResource.html</filename>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsNotResource.html</anchorfile>
      <anchor>a36cc4f948c91f6c90db57d65781ca426</anchor>
      <arglist>($value)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsNotScalar</name>
    <filename>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsNotScalar.html</filename>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsNotScalar.html</anchorfile>
      <anchor>a030097b5e0f4b0b66ccbc6474f050451</anchor>
      <arglist>($value)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsNotString</name>
    <filename>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsNotString.html</filename>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsNotString.html</anchorfile>
      <anchor>af257b324ba05843225c7a49869b06b10</anchor>
      <arglist>($value)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsNumeric</name>
    <filename>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsNumeric.html</filename>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsNumeric.html</anchorfile>
      <anchor>a4aaf0fae22cba6d56e2fe4955a5116dd</anchor>
      <arglist>($value)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsObject</name>
    <filename>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsObject.html</filename>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsObject.html</anchorfile>
      <anchor>a0034654264e27e51cd5aa89068489779</anchor>
      <arglist>($value)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsResource</name>
    <filename>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsResource.html</filename>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsResource.html</anchorfile>
      <anchor>a62cc1d7c1b788f64214b24071e312fa6</anchor>
      <arglist>($value)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsScalar</name>
    <filename>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsScalar.html</filename>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsScalar.html</anchorfile>
      <anchor>a096c3400d311b87b340586ec9fe2d727</anchor>
      <arglist>($value)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertIsString</name>
    <filename>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsString.html</filename>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertIsString.html</anchorfile>
      <anchor>a40b1cfd96009ab4673ef03e6ce8cd113</anchor>
      <arglist>($value)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertNotEmpty</name>
    <filename>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertNotEmpty.html</filename>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertNotEmpty.html</anchorfile>
      <anchor>aaa5235a0e1975715c11c007f6a5af069</anchor>
      <arglist>(?int $value)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertNotFalse</name>
    <filename>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertNotFalse.html</filename>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertNotFalse.html</anchorfile>
      <anchor>a21ed3e6c8ee2e486866e4525995e78bb</anchor>
      <arglist>($value)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertNotInstanceOf</name>
    <filename>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertNotInstanceOf.html</filename>
    <class kind="class">PHPUnit::Framework::StaticAnalysis::HappyPath::AssertNotInstanceOf::A</class>
    <class kind="class">PHPUnit::Framework::StaticAnalysis::HappyPath::AssertNotInstanceOf::B</class>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertNotInstanceOf.html</anchorfile>
      <anchor>ad70150cd931f43f9ef39db38ec40bd83</anchor>
      <arglist>(object $value)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertNotNull</name>
    <filename>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertNotNull.html</filename>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertNotNull.html</anchorfile>
      <anchor>af85bab4500ba3cb9257360fa4a5228b1</anchor>
      <arglist>(?int $value)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertNotTrue</name>
    <filename>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertNotTrue.html</filename>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertNotTrue.html</anchorfile>
      <anchor>afc428a2b0116c3cce749818dd5bb216a</anchor>
      <arglist>($value)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertNull</name>
    <filename>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertNull.html</filename>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertNull.html</anchorfile>
      <anchor>ab5d2383312407f669ed3de2e5cc20d59</anchor>
      <arglist>($value)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertSame</name>
    <filename>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertSame.html</filename>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertSame.html</anchorfile>
      <anchor>aee56d05886ccbc131361af29c921b8bd</anchor>
      <arglist>(\stdClass $a, object $b)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>PHPUnit::Framework::StaticAnalysis::HappyPath::AssertTrue</name>
    <filename>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertTrue.html</filename>
    <member kind="function">
      <type></type>
      <name>consume</name>
      <anchorfile>namespacePHPUnit_1_1Framework_1_1StaticAnalysis_1_1HappyPath_1_1AssertTrue.html</anchorfile>
      <anchor>a59a3b1f70554e53a4407079845de7df7</anchor>
      <arglist>($value)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>PHPUnit::Runner</name>
    <filename>namespacePHPUnit_1_1Runner.html</filename>
    <namespace>PHPUnit::Runner::Filter</namespace>
    <class kind="interface">PHPUnit::Runner::AfterIncompleteTestHook</class>
    <class kind="interface">PHPUnit::Runner::AfterLastTestHook</class>
    <class kind="interface">PHPUnit::Runner::AfterRiskyTestHook</class>
    <class kind="interface">PHPUnit::Runner::AfterSkippedTestHook</class>
    <class kind="interface">PHPUnit::Runner::AfterSuccessfulTestHook</class>
    <class kind="interface">PHPUnit::Runner::AfterTestErrorHook</class>
    <class kind="interface">PHPUnit::Runner::AfterTestFailureHook</class>
    <class kind="interface">PHPUnit::Runner::AfterTestHook</class>
    <class kind="interface">PHPUnit::Runner::AfterTestWarningHook</class>
    <class kind="class">PHPUnit::Runner::BaseTestRunner</class>
    <class kind="interface">PHPUnit::Runner::BeforeFirstTestHook</class>
    <class kind="interface">PHPUnit::Runner::BeforeTestHook</class>
    <class kind="class">PHPUnit::Runner::DefaultTestResultCache</class>
    <class kind="class">PHPUnit::Runner::DefaultTestResultCacheTest</class>
    <class kind="class">PHPUnit::Runner::Exception</class>
    <class kind="interface">PHPUnit::Runner::Hook</class>
    <class kind="class">PHPUnit::Runner::NullTestResultCache</class>
    <class kind="class">PHPUnit::Runner::PhptTestCase</class>
    <class kind="class">PHPUnit::Runner::PhptTestCaseTest</class>
    <class kind="class">PHPUnit::Runner::ResultCacheExtension</class>
    <class kind="class">PHPUnit::Runner::ResultCacheExtensionTest</class>
    <class kind="class">PHPUnit::Runner::StandardTestSuiteLoader</class>
    <class kind="interface">PHPUnit::Runner::TestHook</class>
    <class kind="class">PHPUnit::Runner::TestListenerAdapter</class>
    <class kind="interface">PHPUnit::Runner::TestResultCache</class>
    <class kind="interface">PHPUnit::Runner::TestSuiteLoader</class>
    <class kind="class">PHPUnit::Runner::TestSuiteSorter</class>
    <class kind="class">PHPUnit::Runner::TestSuiteSorterTest</class>
    <class kind="class">PHPUnit::Runner::Version</class>
  </compound>
  <compound kind="namespace">
    <name>PHPUnit::Runner::Filter</name>
    <filename>namespacePHPUnit_1_1Runner_1_1Filter.html</filename>
    <class kind="class">PHPUnit::Runner::Filter::ExcludeGroupFilterIterator</class>
    <class kind="class">PHPUnit::Runner::Filter::Factory</class>
    <class kind="class">PHPUnit::Runner::Filter::GroupFilterIterator</class>
    <class kind="class">PHPUnit::Runner::Filter::IncludeGroupFilterIterator</class>
    <class kind="class">PHPUnit::Runner::Filter::NameFilterIterator</class>
    <class kind="class">PHPUnit::Runner::Filter::NameFilterIteratorTest</class>
  </compound>
  <compound kind="namespace">
    <name>PHPUnit::SelfTest</name>
    <filename>namespacePHPUnit_1_1SelfTest.html</filename>
    <namespace>PHPUnit::SelfTest::Basic</namespace>
  </compound>
  <compound kind="namespace">
    <name>PHPUnit::SelfTest::Basic</name>
    <filename>namespacePHPUnit_1_1SelfTest_1_1Basic.html</filename>
    <class kind="class">PHPUnit::SelfTest::Basic::SetUpBeforeClassTest</class>
    <class kind="class">PHPUnit::SelfTest::Basic::SetUpTest</class>
    <class kind="class">PHPUnit::SelfTest::Basic::StatusTest</class>
    <class kind="class">PHPUnit::SelfTest::Basic::TearDownAfterClassTest</class>
  </compound>
  <compound kind="namespace">
    <name>PHPUnit::StaticAnalysis</name>
    <filename>namespacePHPUnit_1_1StaticAnalysis.html</filename>
    <class kind="class">PHPUnit::StaticAnalysis::HelloWorldClass</class>
    <class kind="class">PHPUnit::StaticAnalysis::TestUsingMocks</class>
  </compound>
  <compound kind="namespace">
    <name>PHPUnit::Test</name>
    <filename>namespacePHPUnit_1_1Test.html</filename>
    <class kind="class">PHPUnit::Test::Extension</class>
    <class kind="class">PHPUnit::Test::HookTest</class>
    <class kind="class">PHPUnit::Test::NullPrinter</class>
  </compound>
  <compound kind="namespace">
    <name>PHPUnit::TestFixture</name>
    <filename>namespacePHPUnit_1_1TestFixture.html</filename>
    <namespace>PHPUnit::TestFixture::MockObject</namespace>
    <class kind="class">PHPUnit::TestFixture::ActualOutputTest</class>
  </compound>
  <compound kind="namespace">
    <name>PHPUnit::TestFixture::MockObject</name>
    <filename>namespacePHPUnit_1_1TestFixture_1_1MockObject.html</filename>
    <class kind="class">PHPUnit::TestFixture::MockObject::AnotherClassUsingConfigurableMethods</class>
    <class kind="class">PHPUnit::TestFixture::MockObject::ChildClass</class>
    <class kind="class">PHPUnit::TestFixture::MockObject::ClassUsingConfigurableMethods</class>
    <class kind="class">PHPUnit::TestFixture::MockObject::ClassWithImplicitProtocol</class>
    <class kind="class">PHPUnit::TestFixture::MockObject::ClassWithoutParentButParentReturnType</class>
    <class kind="class">PHPUnit::TestFixture::MockObject::MockClassWithConfigurableMethods</class>
    <class kind="class">PHPUnit::TestFixture::MockObject::ParentClass</class>
    <class kind="class">PHPUnit::TestFixture::MockObject::ReinitializeConfigurableMethods</class>
  </compound>
  <compound kind="namespace">
    <name>PHPUnit::TextUI</name>
    <filename>namespacePHPUnit_1_1TextUI.html</filename>
    <class kind="class">PHPUnit::TextUI::Command</class>
    <class kind="class">PHPUnit::TextUI::Exception</class>
    <class kind="class">PHPUnit::TextUI::Help</class>
    <class kind="class">PHPUnit::TextUI::ResultPrinter</class>
    <class kind="class">PHPUnit::TextUI::TestRunner</class>
  </compound>
  <compound kind="namespace">
    <name>PHPUnit::Util</name>
    <filename>namespacePHPUnit_1_1Util.html</filename>
    <namespace>PHPUnit::Util::Annotation</namespace>
    <namespace>PHPUnit::Util::Log</namespace>
    <namespace>PHPUnit::Util::PHP</namespace>
    <namespace>PHPUnit::Util::TestDox</namespace>
    <class kind="class">PHPUnit::Util::Blacklist</class>
    <class kind="class">PHPUnit::Util::Color</class>
    <class kind="class">PHPUnit::Util::ColorTest</class>
    <class kind="class">PHPUnit::Util::Configuration</class>
    <class kind="class">PHPUnit::Util::ConfigurationGenerator</class>
    <class kind="class">PHPUnit::Util::ConfigurationGeneratorTest</class>
    <class kind="class">PHPUnit::Util::ConfigurationTest</class>
    <class kind="class">PHPUnit::Util::ErrorHandler</class>
    <class kind="class">PHPUnit::Util::Exception</class>
    <class kind="class">PHPUnit::Util::FileLoader</class>
    <class kind="class">PHPUnit::Util::Filesystem</class>
    <class kind="class">PHPUnit::Util::Filter</class>
    <class kind="class">PHPUnit::Util::Getopt</class>
    <class kind="class">PHPUnit::Util::GetoptTest</class>
    <class kind="class">PHPUnit::Util::GlobalState</class>
    <class kind="class">PHPUnit::Util::GlobalStateTest</class>
    <class kind="class">PHPUnit::Util::InvalidDataSetException</class>
    <class kind="class">PHPUnit::Util::Json</class>
    <class kind="class">PHPUnit::Util::JsonTest</class>
    <class kind="class">PHPUnit::Util::Printer</class>
    <class kind="class">PHPUnit::Util::RegularExpression</class>
    <class kind="class">PHPUnit::Util::RegularExpressionTest</class>
    <class kind="class">PHPUnit::Util::Test</class>
    <class kind="class">PHPUnit::Util::TestClassTest</class>
    <class kind="class">PHPUnit::Util::TextTestListRenderer</class>
    <class kind="class">PHPUnit::Util::Type</class>
    <class kind="class">PHPUnit::Util::VersionComparisonOperator</class>
    <class kind="class">PHPUnit::Util::XdebugFilterScriptGenerator</class>
    <class kind="class">PHPUnit::Util::XDebugFilterScriptGeneratorTest</class>
    <class kind="class">PHPUnit::Util::Xml</class>
    <class kind="class">PHPUnit::Util::XmlTest</class>
    <class kind="class">PHPUnit::Util::XmlTestListRenderer</class>
  </compound>
  <compound kind="namespace">
    <name>PHPUnit::Util::Annotation</name>
    <filename>namespacePHPUnit_1_1Util_1_1Annotation.html</filename>
    <class kind="class">PHPUnit::Util::Annotation::DocBlock</class>
    <class kind="class">PHPUnit::Util::Annotation::Registry</class>
    <class kind="class">PHPUnit::Util::Annotation::RegistryTest</class>
  </compound>
  <compound kind="namespace">
    <name>PHPUnit::Util::Log</name>
    <filename>namespacePHPUnit_1_1Util_1_1Log.html</filename>
    <class kind="class">PHPUnit::Util::Log::JUnit</class>
    <class kind="class">PHPUnit::Util::Log::TeamCity</class>
  </compound>
  <compound kind="namespace">
    <name>PHPUnit::Util::PHP</name>
    <filename>namespacePHPUnit_1_1Util_1_1PHP.html</filename>
    <class kind="class">PHPUnit::Util::PHP::AbstractPhpProcess</class>
    <class kind="class">PHPUnit::Util::PHP::AbstractPhpProcessTest</class>
    <class kind="class">PHPUnit::Util::PHP::DefaultPhpProcess</class>
    <class kind="class">PHPUnit::Util::PHP::WindowsPhpProcess</class>
  </compound>
  <compound kind="namespace">
    <name>PHPUnit::Util::TestDox</name>
    <filename>namespacePHPUnit_1_1Util_1_1TestDox.html</filename>
    <class kind="class">PHPUnit::Util::TestDox::CliTestDoxPrinter</class>
    <class kind="class">PHPUnit::Util::TestDox::CliTestDoxPrinterColorTest</class>
    <class kind="class">PHPUnit::Util::TestDox::CliTestDoxPrinterTest</class>
    <class kind="class">PHPUnit::Util::TestDox::HtmlResultPrinter</class>
    <class kind="class">PHPUnit::Util::TestDox::NamePrettifier</class>
    <class kind="class">PHPUnit::Util::TestDox::NamePrettifierTest</class>
    <class kind="class">PHPUnit::Util::TestDox::ResultPrinter</class>
    <class kind="class">PHPUnit::Util::TestDox::TestableCliTestDoxPrinter</class>
    <class kind="class">PHPUnit::Util::TestDox::TestDoxPrinter</class>
    <class kind="class">PHPUnit::Util::TestDox::TextResultPrinter</class>
    <class kind="class">PHPUnit::Util::TestDox::XmlResultPrinter</class>
  </compound>
  <compound kind="namespace">
    <name>Procrastinator</name>
    <filename>namespaceProcrastinator.html</filename>
    <namespace>Procrastinator::Job</namespace>
  </compound>
  <compound kind="namespace">
    <name>Procrastinator::Job</name>
    <filename>namespaceProcrastinator_1_1Job.html</filename>
    <class kind="class">Procrastinator::Job::AbstractPersistentJob</class>
  </compound>
  <compound kind="namespace">
    <name>Prophecy</name>
    <filename>namespaceProphecy.html</filename>
    <namespace>Prophecy::Argument</namespace>
    <namespace>Prophecy::Call</namespace>
    <namespace>Prophecy::Comparator</namespace>
    <namespace>Prophecy::Doubler</namespace>
    <namespace>Prophecy::Exception</namespace>
    <namespace>Prophecy::PhpDocumentor</namespace>
    <namespace>Prophecy::Prediction</namespace>
    <namespace>Prophecy::Promise</namespace>
    <namespace>Prophecy::Prophecy</namespace>
    <namespace>Prophecy::Util</namespace>
    <class kind="class">Prophecy::Argument</class>
    <class kind="class">Prophecy::Prophet</class>
  </compound>
  <compound kind="namespace">
    <name>Prophecy::Argument</name>
    <filename>namespaceProphecy_1_1Argument.html</filename>
    <namespace>Prophecy::Argument::Token</namespace>
    <class kind="class">Prophecy::Argument::ArgumentsWildcard</class>
  </compound>
  <compound kind="namespace">
    <name>Prophecy::Argument::Token</name>
    <filename>namespaceProphecy_1_1Argument_1_1Token.html</filename>
    <class kind="class">Prophecy::Argument::Token::AnyValuesToken</class>
    <class kind="class">Prophecy::Argument::Token::AnyValueToken</class>
    <class kind="class">Prophecy::Argument::Token::ApproximateValueToken</class>
    <class kind="class">Prophecy::Argument::Token::ArrayCountToken</class>
    <class kind="class">Prophecy::Argument::Token::ArrayEntryToken</class>
    <class kind="class">Prophecy::Argument::Token::ArrayEveryEntryToken</class>
    <class kind="class">Prophecy::Argument::Token::CallbackToken</class>
    <class kind="class">Prophecy::Argument::Token::ExactValueToken</class>
    <class kind="class">Prophecy::Argument::Token::IdenticalValueToken</class>
    <class kind="class">Prophecy::Argument::Token::InArrayToken</class>
    <class kind="class">Prophecy::Argument::Token::LogicalAndToken</class>
    <class kind="class">Prophecy::Argument::Token::LogicalNotToken</class>
    <class kind="class">Prophecy::Argument::Token::NotInArrayToken</class>
    <class kind="class">Prophecy::Argument::Token::ObjectStateToken</class>
    <class kind="class">Prophecy::Argument::Token::StringContainsToken</class>
    <class kind="interface">Prophecy::Argument::Token::TokenInterface</class>
    <class kind="class">Prophecy::Argument::Token::TypeToken</class>
  </compound>
  <compound kind="namespace">
    <name>Prophecy::Call</name>
    <filename>namespaceProphecy_1_1Call.html</filename>
    <class kind="class">Prophecy::Call::Call</class>
    <class kind="class">Prophecy::Call::CallCenter</class>
  </compound>
  <compound kind="namespace">
    <name>Prophecy::Comparator</name>
    <filename>namespaceProphecy_1_1Comparator.html</filename>
    <class kind="class">Prophecy::Comparator::ClosureComparator</class>
    <class kind="class">Prophecy::Comparator::Factory</class>
    <class kind="class">Prophecy::Comparator::ProphecyComparator</class>
  </compound>
  <compound kind="namespace">
    <name>Prophecy::Doubler</name>
    <filename>namespaceProphecy_1_1Doubler.html</filename>
    <namespace>Prophecy::Doubler::ClassPatch</namespace>
    <namespace>Prophecy::Doubler::Generator</namespace>
    <class kind="class">Prophecy::Doubler::CachedDoubler</class>
    <class kind="interface">Prophecy::Doubler::DoubleInterface</class>
    <class kind="class">Prophecy::Doubler::Doubler</class>
    <class kind="class">Prophecy::Doubler::LazyDouble</class>
    <class kind="class">Prophecy::Doubler::NameGenerator</class>
  </compound>
  <compound kind="namespace">
    <name>Prophecy::Doubler::ClassPatch</name>
    <filename>namespaceProphecy_1_1Doubler_1_1ClassPatch.html</filename>
    <class kind="interface">Prophecy::Doubler::ClassPatch::ClassPatchInterface</class>
    <class kind="class">Prophecy::Doubler::ClassPatch::DisableConstructorPatch</class>
    <class kind="class">Prophecy::Doubler::ClassPatch::HhvmExceptionPatch</class>
    <class kind="class">Prophecy::Doubler::ClassPatch::KeywordPatch</class>
    <class kind="class">Prophecy::Doubler::ClassPatch::MagicCallPatch</class>
    <class kind="class">Prophecy::Doubler::ClassPatch::ProphecySubjectPatch</class>
    <class kind="class">Prophecy::Doubler::ClassPatch::ReflectionClassNewInstancePatch</class>
    <class kind="class">Prophecy::Doubler::ClassPatch::SplFileInfoPatch</class>
    <class kind="class">Prophecy::Doubler::ClassPatch::ThrowablePatch</class>
    <class kind="class">Prophecy::Doubler::ClassPatch::TraversablePatch</class>
  </compound>
  <compound kind="namespace">
    <name>Prophecy::Doubler::Generator</name>
    <filename>namespaceProphecy_1_1Doubler_1_1Generator.html</filename>
    <namespace>Prophecy::Doubler::Generator::Node</namespace>
    <class kind="class">Prophecy::Doubler::Generator::ClassCodeGenerator</class>
    <class kind="class">Prophecy::Doubler::Generator::ClassCreator</class>
    <class kind="class">Prophecy::Doubler::Generator::ClassMirror</class>
    <class kind="interface">Prophecy::Doubler::Generator::ReflectionInterface</class>
    <class kind="class">Prophecy::Doubler::Generator::TypeHintReference</class>
  </compound>
  <compound kind="namespace">
    <name>Prophecy::Doubler::Generator::Node</name>
    <filename>namespaceProphecy_1_1Doubler_1_1Generator_1_1Node.html</filename>
    <class kind="class">Prophecy::Doubler::Generator::Node::ArgumentNode</class>
    <class kind="class">Prophecy::Doubler::Generator::Node::ArgumentTypeNode</class>
    <class kind="class">Prophecy::Doubler::Generator::Node::ClassNode</class>
    <class kind="class">Prophecy::Doubler::Generator::Node::MethodNode</class>
    <class kind="class">Prophecy::Doubler::Generator::Node::ReturnTypeNode</class>
    <class kind="class">Prophecy::Doubler::Generator::Node::TypeNodeAbstract</class>
  </compound>
  <compound kind="namespace">
    <name>Prophecy::Exception</name>
    <filename>namespaceProphecy_1_1Exception.html</filename>
    <namespace>Prophecy::Exception::Call</namespace>
    <namespace>Prophecy::Exception::Doubler</namespace>
    <namespace>Prophecy::Exception::Prediction</namespace>
    <namespace>Prophecy::Exception::Prophecy</namespace>
    <class kind="interface">Prophecy::Exception::Exception</class>
    <class kind="class">Prophecy::Exception::InvalidArgumentException</class>
  </compound>
  <compound kind="namespace">
    <name>Prophecy::Exception::Call</name>
    <filename>namespaceProphecy_1_1Exception_1_1Call.html</filename>
    <class kind="class">Prophecy::Exception::Call::UnexpectedCallException</class>
  </compound>
  <compound kind="namespace">
    <name>Prophecy::Exception::Doubler</name>
    <filename>namespaceProphecy_1_1Exception_1_1Doubler.html</filename>
    <class kind="class">Prophecy::Exception::Doubler::ClassCreatorException</class>
    <class kind="class">Prophecy::Exception::Doubler::ClassMirrorException</class>
    <class kind="class">Prophecy::Exception::Doubler::ClassNotFoundException</class>
    <class kind="class">Prophecy::Exception::Doubler::DoubleException</class>
    <class kind="interface">Prophecy::Exception::Doubler::DoublerException</class>
    <class kind="class">Prophecy::Exception::Doubler::InterfaceNotFoundException</class>
    <class kind="class">Prophecy::Exception::Doubler::MethodNotExtendableException</class>
    <class kind="class">Prophecy::Exception::Doubler::MethodNotFoundException</class>
    <class kind="class">Prophecy::Exception::Doubler::ReturnByReferenceException</class>
  </compound>
  <compound kind="namespace">
    <name>Prophecy::Exception::Prediction</name>
    <filename>namespaceProphecy_1_1Exception_1_1Prediction.html</filename>
    <class kind="class">Prophecy::Exception::Prediction::AggregateException</class>
    <class kind="class">Prophecy::Exception::Prediction::FailedPredictionException</class>
    <class kind="class">Prophecy::Exception::Prediction::NoCallsException</class>
    <class kind="interface">Prophecy::Exception::Prediction::PredictionException</class>
    <class kind="class">Prophecy::Exception::Prediction::UnexpectedCallsCountException</class>
    <class kind="class">Prophecy::Exception::Prediction::UnexpectedCallsException</class>
  </compound>
  <compound kind="namespace">
    <name>Prophecy::Exception::Prophecy</name>
    <filename>namespaceProphecy_1_1Exception_1_1Prophecy.html</filename>
    <class kind="class">Prophecy::Exception::Prophecy::MethodProphecyException</class>
    <class kind="class">Prophecy::Exception::Prophecy::ObjectProphecyException</class>
    <class kind="interface">Prophecy::Exception::Prophecy::ProphecyException</class>
  </compound>
  <compound kind="namespace">
    <name>Prophecy::PhpDocumentor</name>
    <filename>namespaceProphecy_1_1PhpDocumentor.html</filename>
    <class kind="class">Prophecy::PhpDocumentor::ClassAndInterfaceTagRetriever</class>
    <class kind="class">Prophecy::PhpDocumentor::ClassTagRetriever</class>
    <class kind="class">Prophecy::PhpDocumentor::LegacyClassTagRetriever</class>
    <class kind="interface">Prophecy::PhpDocumentor::MethodTagRetrieverInterface</class>
  </compound>
  <compound kind="namespace">
    <name>Prophecy::Prediction</name>
    <filename>namespaceProphecy_1_1Prediction.html</filename>
    <class kind="class">Prophecy::Prediction::CallbackPrediction</class>
    <class kind="class">Prophecy::Prediction::CallPrediction</class>
    <class kind="class">Prophecy::Prediction::CallTimesPrediction</class>
    <class kind="class">Prophecy::Prediction::NoCallsPrediction</class>
    <class kind="interface">Prophecy::Prediction::PredictionInterface</class>
  </compound>
  <compound kind="namespace">
    <name>Prophecy::Promise</name>
    <filename>namespaceProphecy_1_1Promise.html</filename>
    <class kind="class">Prophecy::Promise::CallbackPromise</class>
    <class kind="interface">Prophecy::Promise::PromiseInterface</class>
    <class kind="class">Prophecy::Promise::ReturnArgumentPromise</class>
    <class kind="class">Prophecy::Promise::ReturnPromise</class>
    <class kind="class">Prophecy::Promise::ThrowPromise</class>
  </compound>
  <compound kind="namespace">
    <name>Prophecy::Prophecy</name>
    <filename>namespaceProphecy_1_1Prophecy.html</filename>
    <class kind="class">Prophecy::Prophecy::MethodProphecy</class>
    <class kind="class">Prophecy::Prophecy::ObjectProphecy</class>
    <class kind="interface">Prophecy::Prophecy::ProphecyInterface</class>
    <class kind="interface">Prophecy::Prophecy::ProphecySubjectInterface</class>
    <class kind="class">Prophecy::Prophecy::Revealer</class>
    <class kind="interface">Prophecy::Prophecy::RevealerInterface</class>
  </compound>
  <compound kind="namespace">
    <name>Prophecy::Util</name>
    <filename>namespaceProphecy_1_1Util.html</filename>
    <class kind="class">Prophecy::Util::ExportUtil</class>
    <class kind="class">Prophecy::Util::StringUtil</class>
  </compound>
  <compound kind="namespace">
    <name>SebastianBergmann</name>
    <filename>namespaceSebastianBergmann.html</filename>
    <namespace>SebastianBergmann::CodeCoverage</namespace>
    <namespace>SebastianBergmann::CodeUnitReverseLookup</namespace>
    <namespace>SebastianBergmann::Comparator</namespace>
    <namespace>SebastianBergmann::Diff</namespace>
    <namespace>SebastianBergmann::Environment</namespace>
    <namespace>SebastianBergmann::Exporter</namespace>
    <namespace>SebastianBergmann::FileIterator</namespace>
    <namespace>SebastianBergmann::GlobalState</namespace>
    <namespace>SebastianBergmann::ObjectEnumerator</namespace>
    <namespace>SebastianBergmann::ObjectReflector</namespace>
    <namespace>SebastianBergmann::RecursionContext</namespace>
    <namespace>SebastianBergmann::ResourceOperations</namespace>
    <namespace>SebastianBergmann::Timer</namespace>
    <namespace>SebastianBergmann::Type</namespace>
    <class kind="class">SebastianBergmann::Version</class>
  </compound>
  <compound kind="namespace">
    <name>SebastianBergmann::CodeCoverage</name>
    <filename>namespaceSebastianBergmann_1_1CodeCoverage.html</filename>
    <namespace>SebastianBergmann::CodeCoverage::Driver</namespace>
    <namespace>SebastianBergmann::CodeCoverage::Node</namespace>
    <namespace>SebastianBergmann::CodeCoverage::Report</namespace>
    <namespace>SebastianBergmann::CodeCoverage::TestFixture</namespace>
    <namespace>SebastianBergmann::CodeCoverage::tests</namespace>
    <class kind="class">SebastianBergmann::CodeCoverage::CodeCoverage</class>
    <class kind="class">SebastianBergmann::CodeCoverage::CodeCoverageTest</class>
    <class kind="class">SebastianBergmann::CodeCoverage::CoveredCodeNotExecutedException</class>
    <class kind="interface">SebastianBergmann::CodeCoverage::Exception</class>
    <class kind="class">SebastianBergmann::CodeCoverage::Filter</class>
    <class kind="class">SebastianBergmann::CodeCoverage::FilterTest</class>
    <class kind="class">SebastianBergmann::CodeCoverage::InvalidArgumentException</class>
    <class kind="class">SebastianBergmann::CodeCoverage::MissingCoversAnnotationException</class>
    <class kind="class">SebastianBergmann::CodeCoverage::RuntimeException</class>
    <class kind="class">SebastianBergmann::CodeCoverage::TestCase</class>
    <class kind="class">SebastianBergmann::CodeCoverage::UnintentionallyCoveredCodeException</class>
    <class kind="class">SebastianBergmann::CodeCoverage::Util</class>
    <class kind="class">SebastianBergmann::CodeCoverage::UtilTest</class>
    <class kind="class">SebastianBergmann::CodeCoverage::Version</class>
  </compound>
  <compound kind="namespace">
    <name>SebastianBergmann::CodeCoverage::Driver</name>
    <filename>namespaceSebastianBergmann_1_1CodeCoverage_1_1Driver.html</filename>
    <class kind="interface">SebastianBergmann::CodeCoverage::Driver::Driver</class>
    <class kind="class">SebastianBergmann::CodeCoverage::Driver::PCOV</class>
    <class kind="class">SebastianBergmann::CodeCoverage::Driver::PHPDBG</class>
    <class kind="class">SebastianBergmann::CodeCoverage::Driver::Xdebug</class>
  </compound>
  <compound kind="namespace">
    <name>SebastianBergmann::CodeCoverage::Node</name>
    <filename>namespaceSebastianBergmann_1_1CodeCoverage_1_1Node.html</filename>
    <class kind="class">SebastianBergmann::CodeCoverage::Node::AbstractNode</class>
    <class kind="class">SebastianBergmann::CodeCoverage::Node::Builder</class>
    <class kind="class">SebastianBergmann::CodeCoverage::Node::Directory</class>
    <class kind="class">SebastianBergmann::CodeCoverage::Node::File</class>
    <class kind="class">SebastianBergmann::CodeCoverage::Node::Iterator</class>
  </compound>
  <compound kind="namespace">
    <name>SebastianBergmann::CodeCoverage::Report</name>
    <filename>namespaceSebastianBergmann_1_1CodeCoverage_1_1Report.html</filename>
    <namespace>SebastianBergmann::CodeCoverage::Report::Html</namespace>
    <namespace>SebastianBergmann::CodeCoverage::Report::Xml</namespace>
    <class kind="class">SebastianBergmann::CodeCoverage::Report::BuilderTest</class>
    <class kind="class">SebastianBergmann::CodeCoverage::Report::Clover</class>
    <class kind="class">SebastianBergmann::CodeCoverage::Report::CloverTest</class>
    <class kind="class">SebastianBergmann::CodeCoverage::Report::Crap4j</class>
    <class kind="class">SebastianBergmann::CodeCoverage::Report::Crap4jTest</class>
    <class kind="class">SebastianBergmann::CodeCoverage::Report::Text</class>
    <class kind="class">SebastianBergmann::CodeCoverage::Report::TextTest</class>
  </compound>
  <compound kind="namespace">
    <name>SebastianBergmann::CodeCoverage::Report::Html</name>
    <filename>namespaceSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Html.html</filename>
    <class kind="class">SebastianBergmann::CodeCoverage::Report::Html::Dashboard</class>
    <class kind="class">SebastianBergmann::CodeCoverage::Report::Html::Directory</class>
    <class kind="class">SebastianBergmann::CodeCoverage::Report::Html::Facade</class>
    <class kind="class">SebastianBergmann::CodeCoverage::Report::Html::File</class>
    <class kind="class">SebastianBergmann::CodeCoverage::Report::Html::HTMLTest</class>
    <class kind="class">SebastianBergmann::CodeCoverage::Report::Html::Renderer</class>
  </compound>
  <compound kind="namespace">
    <name>SebastianBergmann::CodeCoverage::Report::Xml</name>
    <filename>namespaceSebastianBergmann_1_1CodeCoverage_1_1Report_1_1Xml.html</filename>
    <class kind="class">SebastianBergmann::CodeCoverage::Report::Xml::BuildInformation</class>
    <class kind="class">SebastianBergmann::CodeCoverage::Report::Xml::Coverage</class>
    <class kind="class">SebastianBergmann::CodeCoverage::Report::Xml::Directory</class>
    <class kind="class">SebastianBergmann::CodeCoverage::Report::Xml::Facade</class>
    <class kind="class">SebastianBergmann::CodeCoverage::Report::Xml::File</class>
    <class kind="class">SebastianBergmann::CodeCoverage::Report::Xml::Method</class>
    <class kind="class">SebastianBergmann::CodeCoverage::Report::Xml::Node</class>
    <class kind="class">SebastianBergmann::CodeCoverage::Report::Xml::Project</class>
    <class kind="class">SebastianBergmann::CodeCoverage::Report::Xml::Report</class>
    <class kind="class">SebastianBergmann::CodeCoverage::Report::Xml::Source</class>
    <class kind="class">SebastianBergmann::CodeCoverage::Report::Xml::Tests</class>
    <class kind="class">SebastianBergmann::CodeCoverage::Report::Xml::Totals</class>
    <class kind="class">SebastianBergmann::CodeCoverage::Report::Xml::Unit</class>
    <class kind="class">SebastianBergmann::CodeCoverage::Report::Xml::XmlTest</class>
  </compound>
  <compound kind="namespace">
    <name>SebastianBergmann::CodeCoverage::TestFixture</name>
    <filename>namespaceSebastianBergmann_1_1CodeCoverage_1_1TestFixture.html</filename>
    <class kind="class">SebastianBergmann::CodeCoverage::TestFixture::C</class>
  </compound>
  <compound kind="namespace">
    <name>SebastianBergmann::CodeCoverage::tests</name>
    <filename>namespaceSebastianBergmann_1_1CodeCoverage_1_1tests.html</filename>
    <namespace>SebastianBergmann::CodeCoverage::tests::Exception</namespace>
  </compound>
  <compound kind="namespace">
    <name>SebastianBergmann::CodeCoverage::tests::Exception</name>
    <filename>namespaceSebastianBergmann_1_1CodeCoverage_1_1tests_1_1Exception.html</filename>
    <class kind="class">SebastianBergmann::CodeCoverage::tests::Exception::UnintentionallyCoveredCodeExceptionTest</class>
  </compound>
  <compound kind="namespace">
    <name>SebastianBergmann::CodeUnitReverseLookup</name>
    <filename>namespaceSebastianBergmann_1_1CodeUnitReverseLookup.html</filename>
    <class kind="class">SebastianBergmann::CodeUnitReverseLookup::Wizard</class>
    <class kind="class">SebastianBergmann::CodeUnitReverseLookup::WizardTest</class>
  </compound>
  <compound kind="namespace">
    <name>SebastianBergmann::Comparator</name>
    <filename>namespaceSebastianBergmann_1_1Comparator.html</filename>
    <class kind="class">SebastianBergmann::Comparator::ArrayComparator</class>
    <class kind="class">SebastianBergmann::Comparator::ArrayComparatorTest</class>
    <class kind="class">SebastianBergmann::Comparator::Author</class>
    <class kind="class">SebastianBergmann::Comparator::Book</class>
    <class kind="class">SebastianBergmann::Comparator::ClassWithToString</class>
    <class kind="class">SebastianBergmann::Comparator::Comparator</class>
    <class kind="class">SebastianBergmann::Comparator::ComparisonFailure</class>
    <class kind="class">SebastianBergmann::Comparator::ComparisonFailureTest</class>
    <class kind="class">SebastianBergmann::Comparator::DateTimeComparator</class>
    <class kind="class">SebastianBergmann::Comparator::DateTimeComparatorTest</class>
    <class kind="class">SebastianBergmann::Comparator::DOMNodeComparator</class>
    <class kind="class">SebastianBergmann::Comparator::DOMNodeComparatorTest</class>
    <class kind="class">SebastianBergmann::Comparator::DoubleComparator</class>
    <class kind="class">SebastianBergmann::Comparator::DoubleComparatorTest</class>
    <class kind="class">SebastianBergmann::Comparator::ExceptionComparator</class>
    <class kind="class">SebastianBergmann::Comparator::ExceptionComparatorTest</class>
    <class kind="class">SebastianBergmann::Comparator::Factory</class>
    <class kind="class">SebastianBergmann::Comparator::FactoryTest</class>
    <class kind="class">SebastianBergmann::Comparator::MockObjectComparator</class>
    <class kind="class">SebastianBergmann::Comparator::MockObjectComparatorTest</class>
    <class kind="class">SebastianBergmann::Comparator::NumericComparator</class>
    <class kind="class">SebastianBergmann::Comparator::NumericComparatorTest</class>
    <class kind="class">SebastianBergmann::Comparator::ObjectComparator</class>
    <class kind="class">SebastianBergmann::Comparator::ObjectComparatorTest</class>
    <class kind="class">SebastianBergmann::Comparator::ResourceComparator</class>
    <class kind="class">SebastianBergmann::Comparator::ResourceComparatorTest</class>
    <class kind="class">SebastianBergmann::Comparator::SampleClass</class>
    <class kind="class">SebastianBergmann::Comparator::ScalarComparator</class>
    <class kind="class">SebastianBergmann::Comparator::ScalarComparatorTest</class>
    <class kind="class">SebastianBergmann::Comparator::SplObjectStorageComparator</class>
    <class kind="class">SebastianBergmann::Comparator::SplObjectStorageComparatorTest</class>
    <class kind="class">SebastianBergmann::Comparator::Struct</class>
    <class kind="class">SebastianBergmann::Comparator::TestClass</class>
    <class kind="class">SebastianBergmann::Comparator::TestClassComparator</class>
    <class kind="class">SebastianBergmann::Comparator::TypeComparator</class>
    <class kind="class">SebastianBergmann::Comparator::TypeComparatorTest</class>
  </compound>
  <compound kind="namespace">
    <name>SebastianBergmann::Diff</name>
    <filename>namespaceSebastianBergmann_1_1Diff.html</filename>
    <namespace>SebastianBergmann::Diff::Output</namespace>
    <namespace>SebastianBergmann::Diff::Utils</namespace>
    <class kind="class">SebastianBergmann::Diff::Chunk</class>
    <class kind="class">SebastianBergmann::Diff::ChunkTest</class>
    <class kind="class">SebastianBergmann::Diff::ConfigurationException</class>
    <class kind="class">SebastianBergmann::Diff::ConfigurationExceptionTest</class>
    <class kind="class">SebastianBergmann::Diff::Diff</class>
    <class kind="class">SebastianBergmann::Diff::Differ</class>
    <class kind="class">SebastianBergmann::Diff::DifferTest</class>
    <class kind="class">SebastianBergmann::Diff::DiffTest</class>
    <class kind="interface">SebastianBergmann::Diff::Exception</class>
    <class kind="class">SebastianBergmann::Diff::InvalidArgumentException</class>
    <class kind="class">SebastianBergmann::Diff::InvalidArgumentExceptionTest</class>
    <class kind="class">SebastianBergmann::Diff::Line</class>
    <class kind="class">SebastianBergmann::Diff::LineTest</class>
    <class kind="interface">SebastianBergmann::Diff::LongestCommonSubsequenceCalculator</class>
    <class kind="class">SebastianBergmann::Diff::LongestCommonSubsequenceTest</class>
    <class kind="class">SebastianBergmann::Diff::MemoryEfficientImplementationTest</class>
    <class kind="class">SebastianBergmann::Diff::MemoryEfficientLongestCommonSubsequenceCalculator</class>
    <class kind="class">SebastianBergmann::Diff::Parser</class>
    <class kind="class">SebastianBergmann::Diff::ParserTest</class>
    <class kind="class">SebastianBergmann::Diff::TimeEfficientImplementationTest</class>
    <class kind="class">SebastianBergmann::Diff::TimeEfficientLongestCommonSubsequenceCalculator</class>
  </compound>
  <compound kind="namespace">
    <name>SebastianBergmann::Diff::Output</name>
    <filename>namespaceSebastianBergmann_1_1Diff_1_1Output.html</filename>
    <class kind="class">SebastianBergmann::Diff::Output::AbstractChunkOutputBuilder</class>
    <class kind="class">SebastianBergmann::Diff::Output::AbstractChunkOutputBuilderTest</class>
    <class kind="class">SebastianBergmann::Diff::Output::DiffOnlyOutputBuilder</class>
    <class kind="class">SebastianBergmann::Diff::Output::DiffOnlyOutputBuilderTest</class>
    <class kind="interface">SebastianBergmann::Diff::Output::DiffOutputBuilderInterface</class>
    <class kind="class">SebastianBergmann::Diff::Output::StrictUnifiedDiffOutputBuilder</class>
    <class kind="class">SebastianBergmann::Diff::Output::StrictUnifiedDiffOutputBuilderDataProvider</class>
    <class kind="class">SebastianBergmann::Diff::Output::StrictUnifiedDiffOutputBuilderIntegrationTest</class>
    <class kind="class">SebastianBergmann::Diff::Output::StrictUnifiedDiffOutputBuilderTest</class>
    <class kind="class">SebastianBergmann::Diff::Output::UnifiedDiffOutputBuilder</class>
    <class kind="class">SebastianBergmann::Diff::Output::UnifiedDiffOutputBuilderIntegrationTest</class>
    <class kind="class">SebastianBergmann::Diff::Output::UnifiedDiffOutputBuilderTest</class>
  </compound>
  <compound kind="namespace">
    <name>SebastianBergmann::Diff::Utils</name>
    <filename>namespaceSebastianBergmann_1_1Diff_1_1Utils.html</filename>
    <class kind="class">SebastianBergmann::Diff::Utils::FileUtils</class>
    <class kind="class">SebastianBergmann::Diff::Utils::UnifiedDiffAssertTraitIntegrationTest</class>
    <class kind="class">SebastianBergmann::Diff::Utils::UnifiedDiffAssertTraitTest</class>
  </compound>
  <compound kind="namespace">
    <name>SebastianBergmann::Environment</name>
    <filename>namespaceSebastianBergmann_1_1Environment.html</filename>
    <class kind="class">SebastianBergmann::Environment::Console</class>
    <class kind="class">SebastianBergmann::Environment::ConsoleTest</class>
    <class kind="class">SebastianBergmann::Environment::OperatingSystem</class>
    <class kind="class">SebastianBergmann::Environment::OperatingSystemTest</class>
    <class kind="class">SebastianBergmann::Environment::Runtime</class>
    <class kind="class">SebastianBergmann::Environment::RuntimeTest</class>
  </compound>
  <compound kind="namespace">
    <name>SebastianBergmann::Exporter</name>
    <filename>namespaceSebastianBergmann_1_1Exporter.html</filename>
    <class kind="class">SebastianBergmann::Exporter::Exporter</class>
    <class kind="class">SebastianBergmann::Exporter::ExporterTest</class>
  </compound>
  <compound kind="namespace">
    <name>SebastianBergmann::FileIterator</name>
    <filename>namespaceSebastianBergmann_1_1FileIterator.html</filename>
    <class kind="class">SebastianBergmann::FileIterator::Facade</class>
    <class kind="class">SebastianBergmann::FileIterator::Factory</class>
    <class kind="class">SebastianBergmann::FileIterator::FactoryTest</class>
    <class kind="class">SebastianBergmann::FileIterator::Iterator</class>
  </compound>
  <compound kind="namespace">
    <name>SebastianBergmann::GlobalState</name>
    <filename>namespaceSebastianBergmann_1_1GlobalState.html</filename>
    <namespace>SebastianBergmann::GlobalState::TestFixture</namespace>
    <class kind="class">SebastianBergmann::GlobalState::Blacklist</class>
    <class kind="class">SebastianBergmann::GlobalState::BlacklistTest</class>
    <class kind="class">SebastianBergmann::GlobalState::CodeExporter</class>
    <class kind="class">SebastianBergmann::GlobalState::CodeExporterTest</class>
    <class kind="interface">SebastianBergmann::GlobalState::Exception</class>
    <class kind="class">SebastianBergmann::GlobalState::Restorer</class>
    <class kind="class">SebastianBergmann::GlobalState::RestorerTest</class>
    <class kind="class">SebastianBergmann::GlobalState::RuntimeException</class>
    <class kind="class">SebastianBergmann::GlobalState::Snapshot</class>
    <class kind="class">SebastianBergmann::GlobalState::SnapshotTest</class>
  </compound>
  <compound kind="namespace">
    <name>SebastianBergmann::GlobalState::TestFixture</name>
    <filename>namespaceSebastianBergmann_1_1GlobalState_1_1TestFixture.html</filename>
    <class kind="class">SebastianBergmann::GlobalState::TestFixture::BlacklistedChildClass</class>
    <class kind="class">SebastianBergmann::GlobalState::TestFixture::BlacklistedClass</class>
    <class kind="class">SebastianBergmann::GlobalState::TestFixture::BlacklistedImplementor</class>
    <class kind="interface">SebastianBergmann::GlobalState::TestFixture::BlacklistedInterface</class>
    <class kind="class">SebastianBergmann::GlobalState::TestFixture::SnapshotClass</class>
    <class kind="class">SebastianBergmann::GlobalState::TestFixture::SnapshotDomDocument</class>
    <member kind="function">
      <type></type>
      <name>snapshotFunction</name>
      <anchorfile>namespaceSebastianBergmann_1_1GlobalState_1_1TestFixture.html</anchorfile>
      <anchor>aa9a1e3ca77bd927a1daf63ba6ab56fdf</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>SebastianBergmann::ObjectEnumerator</name>
    <filename>namespaceSebastianBergmann_1_1ObjectEnumerator.html</filename>
    <namespace>SebastianBergmann::ObjectEnumerator::Fixtures</namespace>
    <class kind="class">SebastianBergmann::ObjectEnumerator::Enumerator</class>
    <class kind="class">SebastianBergmann::ObjectEnumerator::EnumeratorTest</class>
    <class kind="interface">SebastianBergmann::ObjectEnumerator::Exception</class>
    <class kind="class">SebastianBergmann::ObjectEnumerator::InvalidArgumentException</class>
  </compound>
  <compound kind="namespace">
    <name>SebastianBergmann::ObjectEnumerator::Fixtures</name>
    <filename>namespaceSebastianBergmann_1_1ObjectEnumerator_1_1Fixtures.html</filename>
    <class kind="class">SebastianBergmann::ObjectEnumerator::Fixtures::ExceptionThrower</class>
  </compound>
  <compound kind="namespace">
    <name>SebastianBergmann::ObjectReflector</name>
    <filename>namespaceSebastianBergmann_1_1ObjectReflector.html</filename>
    <namespace>SebastianBergmann::ObjectReflector::TestFixture</namespace>
    <class kind="interface">SebastianBergmann::ObjectReflector::Exception</class>
    <class kind="class">SebastianBergmann::ObjectReflector::InvalidArgumentException</class>
    <class kind="class">SebastianBergmann::ObjectReflector::ObjectReflector</class>
    <class kind="class">SebastianBergmann::ObjectReflector::ObjectReflectorTest</class>
  </compound>
  <compound kind="namespace">
    <name>SebastianBergmann::ObjectReflector::TestFixture</name>
    <filename>namespaceSebastianBergmann_1_1ObjectReflector_1_1TestFixture.html</filename>
    <class kind="class">SebastianBergmann::ObjectReflector::TestFixture::ChildClass</class>
    <class kind="class">SebastianBergmann::ObjectReflector::TestFixture::ClassWithIntegerAttributeName</class>
    <class kind="class">SebastianBergmann::ObjectReflector::TestFixture::ParentClass</class>
  </compound>
  <compound kind="namespace">
    <name>SebastianBergmann::RecursionContext</name>
    <filename>namespaceSebastianBergmann_1_1RecursionContext.html</filename>
    <class kind="class">SebastianBergmann::RecursionContext::Context</class>
    <class kind="class">SebastianBergmann::RecursionContext::ContextTest</class>
    <class kind="interface">SebastianBergmann::RecursionContext::Exception</class>
    <class kind="class">SebastianBergmann::RecursionContext::InvalidArgumentException</class>
  </compound>
  <compound kind="namespace">
    <name>SebastianBergmann::ResourceOperations</name>
    <filename>namespaceSebastianBergmann_1_1ResourceOperations.html</filename>
    <class kind="class">SebastianBergmann::ResourceOperations::ResourceOperations</class>
    <class kind="class">SebastianBergmann::ResourceOperations::ResourceOperationsTest</class>
  </compound>
  <compound kind="namespace">
    <name>SebastianBergmann::Timer</name>
    <filename>namespaceSebastianBergmann_1_1Timer.html</filename>
    <class kind="interface">SebastianBergmann::Timer::Exception</class>
    <class kind="class">SebastianBergmann::Timer::RuntimeException</class>
    <class kind="class">SebastianBergmann::Timer::Timer</class>
    <class kind="class">SebastianBergmann::Timer::TimerTest</class>
  </compound>
  <compound kind="namespace">
    <name>SebastianBergmann::Type</name>
    <filename>namespaceSebastianBergmann_1_1Type.html</filename>
    <namespace>SebastianBergmann::Type::TestFixture</namespace>
    <class kind="class">SebastianBergmann::Type::CallableType</class>
    <class kind="class">SebastianBergmann::Type::CallableTypeTest</class>
    <class kind="interface">SebastianBergmann::Type::Exception</class>
    <class kind="class">SebastianBergmann::Type::GenericObjectType</class>
    <class kind="class">SebastianBergmann::Type::GenericObjectTypeTest</class>
    <class kind="class">SebastianBergmann::Type::IterableType</class>
    <class kind="class">SebastianBergmann::Type::IterableTypeTest</class>
    <class kind="class">SebastianBergmann::Type::NullType</class>
    <class kind="class">SebastianBergmann::Type::NullTypeTest</class>
    <class kind="class">SebastianBergmann::Type::ObjectType</class>
    <class kind="class">SebastianBergmann::Type::ObjectTypeTest</class>
    <class kind="class">SebastianBergmann::Type::RuntimeException</class>
    <class kind="class">SebastianBergmann::Type::SimpleType</class>
    <class kind="class">SebastianBergmann::Type::SimpleTypeTest</class>
    <class kind="class">SebastianBergmann::Type::Type</class>
    <class kind="class">SebastianBergmann::Type::TypeName</class>
    <class kind="class">SebastianBergmann::Type::TypeNameTest</class>
    <class kind="class">SebastianBergmann::Type::TypeTest</class>
    <class kind="class">SebastianBergmann::Type::UnknownType</class>
    <class kind="class">SebastianBergmann::Type::UnknownTypeTest</class>
    <class kind="class">SebastianBergmann::Type::VoidType</class>
    <class kind="class">SebastianBergmann::Type::VoidTypeTest</class>
  </compound>
  <compound kind="namespace">
    <name>SebastianBergmann::Type::TestFixture</name>
    <filename>namespaceSebastianBergmann_1_1Type_1_1TestFixture.html</filename>
    <class kind="class">SebastianBergmann::Type::TestFixture::ChildClass</class>
    <class kind="class">SebastianBergmann::Type::TestFixture::ClassWithCallbackMethods</class>
    <class kind="class">SebastianBergmann::Type::TestFixture::ClassWithInvokeMethod</class>
    <class kind="class">SebastianBergmann::Type::TestFixture::Iterator</class>
    <class kind="class">SebastianBergmann::Type::TestFixture::ParentClass</class>
    <member kind="function">
      <type></type>
      <name>callback_function</name>
      <anchorfile>namespaceSebastianBergmann_1_1Type_1_1TestFixture.html</anchorfile>
      <anchor>ac23482e44011162845795c3186819cda</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>someNamespaceA</name>
    <filename>namespacesomeNamespaceA.html</filename>
    <class kind="class">someNamespaceA::NamespacedClass</class>
  </compound>
  <compound kind="namespace">
    <name>someNamespaceB</name>
    <filename>namespacesomeNamespaceB.html</filename>
    <class kind="class">someNamespaceB::NamespacedClass</class>
  </compound>
  <compound kind="namespace">
    <name>Symfony</name>
    <filename>namespaceSymfony.html</filename>
    <namespace>Symfony::Polyfill</namespace>
  </compound>
  <compound kind="namespace">
    <name>Symfony::Polyfill</name>
    <filename>namespaceSymfony_1_1Polyfill.html</filename>
    <namespace>Symfony::Polyfill::Ctype</namespace>
  </compound>
  <compound kind="namespace">
    <name>Symfony::Polyfill::Ctype</name>
    <filename>namespaceSymfony_1_1Polyfill_1_1Ctype.html</filename>
    <class kind="class">Symfony::Polyfill::Ctype::Ctype</class>
  </compound>
  <compound kind="namespace">
    <name>Test</name>
    <filename>namespaceTest.html</filename>
  </compound>
  <compound kind="namespace">
    <name>TheSeer</name>
    <filename>namespaceTheSeer.html</filename>
    <namespace>TheSeer::Tokenizer</namespace>
  </compound>
  <compound kind="namespace">
    <name>TheSeer::Tokenizer</name>
    <filename>namespaceTheSeer_1_1Tokenizer.html</filename>
    <class kind="class">TheSeer::Tokenizer::Exception</class>
    <class kind="class">TheSeer::Tokenizer::NamespaceUri</class>
    <class kind="class">TheSeer::Tokenizer::NamespaceUriException</class>
    <class kind="class">TheSeer::Tokenizer::Token</class>
    <class kind="class">TheSeer::Tokenizer::TokenCollection</class>
    <class kind="class">TheSeer::Tokenizer::TokenCollectionException</class>
    <class kind="class">TheSeer::Tokenizer::Tokenizer</class>
    <class kind="class">TheSeer::Tokenizer::XMLSerializer</class>
  </compound>
  <compound kind="namespace">
    <name>Webmozart</name>
    <filename>namespaceWebmozart.html</filename>
    <namespace>Webmozart::Assert</namespace>
  </compound>
  <compound kind="namespace">
    <name>Webmozart::Assert</name>
    <filename>namespaceWebmozart_1_1Assert.html</filename>
    <class kind="class">Webmozart::Assert::Assert</class>
    <class kind="interface">Webmozart::Assert::Mixin</class>
  </compound>
  <compound kind="page">
    <name>md_vendor_doctrine_instantiator_CONTRIBUTING</name>
    <title>Contributing</title>
    <filename>md_vendor_doctrine_instantiator_CONTRIBUTING</filename>
    <docanchor file="md_vendor_doctrine_instantiator_CONTRIBUTING" title="Installation">autotoc_md3</docanchor>
    <docanchor file="md_vendor_doctrine_instantiator_CONTRIBUTING" title="Testing">autotoc_md4</docanchor>
  </compound>
  <compound kind="page">
    <name>md_vendor_phar-io_version_CHANGELOG</name>
    <title>Changelog</title>
    <filename>md_vendor_phar-io_version_CHANGELOG</filename>
    <docanchor file="md_vendor_phar-io_version_CHANGELOG" title="&lt;a href=&quot;https://github.com/phar-io/version/compare/2.0.0...2.0.1&quot;&gt;2.0.1&lt;/a&gt; - 08.07.2018">autotoc_md41</docanchor>
    <docanchor file="md_vendor_phar-io_version_CHANGELOG" title="Fixed">autotoc_md42</docanchor>
    <docanchor file="md_vendor_phar-io_version_CHANGELOG" title="&lt;a href=&quot;https://github.com/phar-io/version/compare/1.0.1...2.0.0&quot;&gt;2.0.0&lt;/a&gt; - 23.06.2018">autotoc_md43</docanchor>
    <docanchor file="md_vendor_phar-io_version_CHANGELOG" title="Added">autotoc_md44</docanchor>
    <docanchor file="md_vendor_phar-io_version_CHANGELOG" title="Changed">autotoc_md45</docanchor>
    <docanchor file="md_vendor_phar-io_version_CHANGELOG" title="Fixed">autotoc_md46</docanchor>
  </compound>
  <compound kind="page">
    <name>md_vendor_phpspec_prophecy_CHANGES</name>
    <title>1.12.1 / 2020/10/29</title>
    <filename>md_vendor_phpspec_prophecy_CHANGES</filename>
    <docanchor file="md_vendor_phpspec_prophecy_CHANGES" title="1.12.0 / 2020/10/28">autotoc_md66</docanchor>
    <docanchor file="md_vendor_phpspec_prophecy_CHANGES" title="1.11.1 / 2020/07/08">autotoc_md67</docanchor>
    <docanchor file="md_vendor_phpspec_prophecy_CHANGES" title="1.11.0 / 2020/07/07">autotoc_md68</docanchor>
    <docanchor file="md_vendor_phpspec_prophecy_CHANGES" title="1.10.3 / 2020/03/05">autotoc_md69</docanchor>
    <docanchor file="md_vendor_phpspec_prophecy_CHANGES" title="1.10.2 / 2020/01/20">autotoc_md70</docanchor>
    <docanchor file="md_vendor_phpspec_prophecy_CHANGES" title="1.10.1 / 2019/12/22">autotoc_md71</docanchor>
    <docanchor file="md_vendor_phpspec_prophecy_CHANGES" title="1.10.0 / 2019/12/17">autotoc_md72</docanchor>
    <docanchor file="md_vendor_phpspec_prophecy_CHANGES" title="1.9.0 / 2019/10/03">autotoc_md73</docanchor>
    <docanchor file="md_vendor_phpspec_prophecy_CHANGES" title="1.8.1 / 2019/06/13">autotoc_md74</docanchor>
    <docanchor file="md_vendor_phpspec_prophecy_CHANGES" title="1.8.0 / 2018/08/05">autotoc_md75</docanchor>
    <docanchor file="md_vendor_phpspec_prophecy_CHANGES" title="1.7.6 / 2018/04/18">autotoc_md76</docanchor>
    <docanchor file="md_vendor_phpspec_prophecy_CHANGES" title="1.7.5 / 2018/02/11">autotoc_md77</docanchor>
    <docanchor file="md_vendor_phpspec_prophecy_CHANGES" title="1.7.4 / 2018/02/11">autotoc_md78</docanchor>
    <docanchor file="md_vendor_phpspec_prophecy_CHANGES" title="1.7.3 / 2017/11/24">autotoc_md79</docanchor>
    <docanchor file="md_vendor_phpspec_prophecy_CHANGES" title="1.7.2 / 2017-10-04">autotoc_md80</docanchor>
    <docanchor file="md_vendor_phpspec_prophecy_CHANGES" title="1.7.1 / 2017-10-03">autotoc_md81</docanchor>
    <docanchor file="md_vendor_phpspec_prophecy_CHANGES" title="1.7.0 / 2017-03-02">autotoc_md82</docanchor>
    <docanchor file="md_vendor_phpspec_prophecy_CHANGES" title="1.6.2 / 2016-11-21">autotoc_md83</docanchor>
    <docanchor file="md_vendor_phpspec_prophecy_CHANGES" title="1.6.1 / 2016-06-07">autotoc_md84</docanchor>
    <docanchor file="md_vendor_phpspec_prophecy_CHANGES" title="1.6.0 / 2016-02-15">autotoc_md85</docanchor>
    <docanchor file="md_vendor_phpspec_prophecy_CHANGES" title="1.5.0 / 2015-04-27">autotoc_md86</docanchor>
    <docanchor file="md_vendor_phpspec_prophecy_CHANGES" title="1.4.1 / 2015-04-27">autotoc_md87</docanchor>
    <docanchor file="md_vendor_phpspec_prophecy_CHANGES" title="1.4.0 / 2015-03-27">autotoc_md88</docanchor>
    <docanchor file="md_vendor_phpspec_prophecy_CHANGES" title="1.3.1 / 2014-11-17">autotoc_md89</docanchor>
    <docanchor file="md_vendor_phpspec_prophecy_CHANGES" title="1.3.0 / 2014-11-14">autotoc_md90</docanchor>
    <docanchor file="md_vendor_phpspec_prophecy_CHANGES" title="1.2.0 / 2014-07-18">autotoc_md91</docanchor>
    <docanchor file="md_vendor_phpspec_prophecy_CHANGES" title="1.1.2 / 2014-01-24">autotoc_md92</docanchor>
    <docanchor file="md_vendor_phpspec_prophecy_CHANGES" title="1.1.1 / 2014-01-15">autotoc_md93</docanchor>
    <docanchor file="md_vendor_phpspec_prophecy_CHANGES" title="1.1.0 / 2014-01-01">autotoc_md94</docanchor>
    <docanchor file="md_vendor_phpspec_prophecy_CHANGES" title="1.0.4 / 2013-08-10">autotoc_md95</docanchor>
    <docanchor file="md_vendor_phpspec_prophecy_CHANGES" title="1.0.3 / 2013-07-04">autotoc_md96</docanchor>
    <docanchor file="md_vendor_phpspec_prophecy_CHANGES" title="1.0.2 / 2013-05-19">autotoc_md97</docanchor>
    <docanchor file="md_vendor_phpspec_prophecy_CHANGES" title="1.0.1 / 2013-04-30">autotoc_md98</docanchor>
    <docanchor file="md_vendor_phpspec_prophecy_CHANGES" title="1.0.0 / 2013-04-29">autotoc_md99</docanchor>
    <docanchor file="md_vendor_phpspec_prophecy_CHANGES" title="1.0.0-BETA2 / 2013-04-03">autotoc_md100</docanchor>
    <docanchor file="md_vendor_phpspec_prophecy_CHANGES" title="1.0.0-BETA1 / 2013-03-25">autotoc_md101</docanchor>
  </compound>
  <compound kind="page">
    <name>md_vendor_phpunit_php-code-coverage_ChangeLog</name>
    <title>ChangeLog</title>
    <filename>md_vendor_phpunit_php-code-coverage_ChangeLog</filename>
    <docanchor file="md_vendor_phpunit_php-code-coverage_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/php-code-coverage/compare/7.0.9...7.0.10&quot;&gt;7.0.10&lt;/a&gt; - 2019-11-20">autotoc_md118</docanchor>
    <docanchor file="md_vendor_phpunit_php-code-coverage_ChangeLog" title="Fixed">autotoc_md119</docanchor>
    <docanchor file="md_vendor_phpunit_php-code-coverage_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/php-code-coverage/compare/7.0.8...7.0.9&quot;&gt;7.0.9&lt;/a&gt; - 2019-11-20">autotoc_md120</docanchor>
    <docanchor file="md_vendor_phpunit_php-code-coverage_ChangeLog" title="Changed">autotoc_md121</docanchor>
    <docanchor file="md_vendor_phpunit_php-code-coverage_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/php-code-coverage/compare/7.0.7...7.0.8&quot;&gt;7.0.8&lt;/a&gt; - 2019-09-17">autotoc_md122</docanchor>
    <docanchor file="md_vendor_phpunit_php-code-coverage_ChangeLog" title="Changed">autotoc_md123</docanchor>
    <docanchor file="md_vendor_phpunit_php-code-coverage_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/php-code-coverage/compare/7.0.6...7.0.7&quot;&gt;7.0.7&lt;/a&gt; - 2019-07-25">autotoc_md124</docanchor>
    <docanchor file="md_vendor_phpunit_php-code-coverage_ChangeLog" title="Changed">autotoc_md125</docanchor>
    <docanchor file="md_vendor_phpunit_php-code-coverage_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/php-code-coverage/compare/7.0.5...7.0.6&quot;&gt;7.0.6&lt;/a&gt; - 2019-07-08">autotoc_md126</docanchor>
    <docanchor file="md_vendor_phpunit_php-code-coverage_ChangeLog" title="Changed">autotoc_md127</docanchor>
    <docanchor file="md_vendor_phpunit_php-code-coverage_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/php-code-coverage/compare/7.0.4...7.0.5&quot;&gt;7.0.5&lt;/a&gt; - 2019-06-06">autotoc_md128</docanchor>
    <docanchor file="md_vendor_phpunit_php-code-coverage_ChangeLog" title="Fixed">autotoc_md129</docanchor>
    <docanchor file="md_vendor_phpunit_php-code-coverage_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/php-code-coverage/compare/7.0.3...7.0.4&quot;&gt;7.0.4&lt;/a&gt; - 2019-05-29">autotoc_md130</docanchor>
    <docanchor file="md_vendor_phpunit_php-code-coverage_ChangeLog" title="Fixed">autotoc_md131</docanchor>
    <docanchor file="md_vendor_phpunit_php-code-coverage_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/php-code-coverage/compare/7.0.2...7.0.3&quot;&gt;7.0.3&lt;/a&gt; - 2019-02-26">autotoc_md132</docanchor>
    <docanchor file="md_vendor_phpunit_php-code-coverage_ChangeLog" title="Fixed">autotoc_md133</docanchor>
    <docanchor file="md_vendor_phpunit_php-code-coverage_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/php-code-coverage/compare/7.0.1...7.0.2&quot;&gt;7.0.2&lt;/a&gt; - 2019-02-15">autotoc_md134</docanchor>
    <docanchor file="md_vendor_phpunit_php-code-coverage_ChangeLog" title="Changed">autotoc_md135</docanchor>
    <docanchor file="md_vendor_phpunit_php-code-coverage_ChangeLog" title="Fixed">autotoc_md136</docanchor>
    <docanchor file="md_vendor_phpunit_php-code-coverage_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/php-code-coverage/compare/7.0.0...7.0.1&quot;&gt;7.0.1&lt;/a&gt; - 2019-02-01">autotoc_md137</docanchor>
    <docanchor file="md_vendor_phpunit_php-code-coverage_ChangeLog" title="Fixed">autotoc_md138</docanchor>
    <docanchor file="md_vendor_phpunit_php-code-coverage_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/php-code-coverage/compare/6.1.4...7.0.0&quot;&gt;7.0.0&lt;/a&gt; - 2019-02-01">autotoc_md139</docanchor>
    <docanchor file="md_vendor_phpunit_php-code-coverage_ChangeLog" title="Added">autotoc_md140</docanchor>
    <docanchor file="md_vendor_phpunit_php-code-coverage_ChangeLog" title="Fixed">autotoc_md141</docanchor>
    <docanchor file="md_vendor_phpunit_php-code-coverage_ChangeLog" title="Removed">autotoc_md142</docanchor>
    <docanchor file="md_vendor_phpunit_php-code-coverage_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/php-code-coverage/compare/6.1.3...6.1.4&quot;&gt;6.1.4&lt;/a&gt; - 2018-10-31">autotoc_md143</docanchor>
    <docanchor file="md_vendor_phpunit_php-code-coverage_ChangeLog" title="Fixed">autotoc_md144</docanchor>
    <docanchor file="md_vendor_phpunit_php-code-coverage_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/php-code-coverage/compare/6.1.2...6.1.3&quot;&gt;6.1.3&lt;/a&gt; - 2018-10-23">autotoc_md145</docanchor>
    <docanchor file="md_vendor_phpunit_php-code-coverage_ChangeLog" title="Changed">autotoc_md146</docanchor>
    <docanchor file="md_vendor_phpunit_php-code-coverage_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/php-code-coverage/compare/6.1.1...6.1.2&quot;&gt;6.1.2&lt;/a&gt; - 2018-10-23">autotoc_md147</docanchor>
    <docanchor file="md_vendor_phpunit_php-code-coverage_ChangeLog" title="Fixed">autotoc_md148</docanchor>
    <docanchor file="md_vendor_phpunit_php-code-coverage_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/php-code-coverage/compare/6.1.0...6.1.1&quot;&gt;6.1.1&lt;/a&gt; - 2018-10-18">autotoc_md149</docanchor>
    <docanchor file="md_vendor_phpunit_php-code-coverage_ChangeLog" title="Changed">autotoc_md150</docanchor>
    <docanchor file="md_vendor_phpunit_php-code-coverage_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/php-code-coverage/compare/6.0...6.1.0&quot;&gt;6.1.0&lt;/a&gt; - 2018-10-16">autotoc_md151</docanchor>
    <docanchor file="md_vendor_phpunit_php-code-coverage_ChangeLog" title="Changed">autotoc_md152</docanchor>
  </compound>
  <compound kind="page">
    <name>md_vendor_phpunit_php-file-iterator_ChangeLog</name>
    <title>Change Log</title>
    <filename>md_vendor_phpunit_php-file-iterator_ChangeLog</filename>
    <docanchor file="md_vendor_phpunit_php-file-iterator_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/php-file-iterator/compare/2.0.1...2.0.2&quot;&gt;2.0.2&lt;/a&gt; - 2018-09-13">autotoc_md157</docanchor>
    <docanchor file="md_vendor_phpunit_php-file-iterator_ChangeLog" title="Fixed">autotoc_md158</docanchor>
    <docanchor file="md_vendor_phpunit_php-file-iterator_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/php-file-iterator/compare/2.0.0...2.0.1&quot;&gt;2.0.1&lt;/a&gt; - 2018-06-11">autotoc_md159</docanchor>
    <docanchor file="md_vendor_phpunit_php-file-iterator_ChangeLog" title="Fixed">autotoc_md160</docanchor>
    <docanchor file="md_vendor_phpunit_php-file-iterator_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/php-file-iterator/compare/1.4...master&quot;&gt;2.0.0&lt;/a&gt; - 2018-05-28">autotoc_md161</docanchor>
    <docanchor file="md_vendor_phpunit_php-file-iterator_ChangeLog" title="Fixed">autotoc_md162</docanchor>
    <docanchor file="md_vendor_phpunit_php-file-iterator_ChangeLog" title="Changed">autotoc_md163</docanchor>
    <docanchor file="md_vendor_phpunit_php-file-iterator_ChangeLog" title="Removed">autotoc_md164</docanchor>
    <docanchor file="md_vendor_phpunit_php-file-iterator_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/php-file-iterator/compare/1.4.4...1.4.5&quot;&gt;1.4.5&lt;/a&gt; - 2017-11-27">autotoc_md165</docanchor>
    <docanchor file="md_vendor_phpunit_php-file-iterator_ChangeLog" title="Fixed">autotoc_md166</docanchor>
    <docanchor file="md_vendor_phpunit_php-file-iterator_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/php-file-iterator/compare/1.4.3...1.4.4&quot;&gt;1.4.4&lt;/a&gt; - 2017-11-27">autotoc_md167</docanchor>
    <docanchor file="md_vendor_phpunit_php-file-iterator_ChangeLog" title="Fixed">autotoc_md168</docanchor>
    <docanchor file="md_vendor_phpunit_php-file-iterator_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/php-file-iterator/compare/1.4.2...1.4.3&quot;&gt;1.4.3&lt;/a&gt; - 2017-11-25">autotoc_md169</docanchor>
    <docanchor file="md_vendor_phpunit_php-file-iterator_ChangeLog" title="Fixed">autotoc_md170</docanchor>
    <docanchor file="md_vendor_phpunit_php-file-iterator_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/php-file-iterator/compare/1.4.1...1.4.2&quot;&gt;1.4.2&lt;/a&gt; - 2016-11-26">autotoc_md171</docanchor>
    <docanchor file="md_vendor_phpunit_php-file-iterator_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/php-file-iterator/compare/1.4.0...1.4.1&quot;&gt;1.4.1&lt;/a&gt; - 2015-07-26">autotoc_md172</docanchor>
    <docanchor file="md_vendor_phpunit_php-file-iterator_ChangeLog" title="1.4.0 - 2015-04-02">autotoc_md173</docanchor>
    <docanchor file="md_vendor_phpunit_php-file-iterator_ChangeLog" title="Added">autotoc_md174</docanchor>
  </compound>
  <compound kind="page">
    <name>md_vendor_phpunit_php-timer_ChangeLog</name>
    <title>ChangeLog</title>
    <filename>md_vendor_phpunit_php-timer_ChangeLog</filename>
    <docanchor file="md_vendor_phpunit_php-timer_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/diff/compare/2.1.1...2.1.2&quot;&gt;2.1.2&lt;/a&gt; - 2019-06-07">autotoc_md181</docanchor>
    <docanchor file="md_vendor_phpunit_php-timer_ChangeLog" title="Fixed">autotoc_md182</docanchor>
    <docanchor file="md_vendor_phpunit_php-timer_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/diff/compare/2.1.0...2.1.1&quot;&gt;2.1.1&lt;/a&gt; - 2019-02-20">autotoc_md183</docanchor>
    <docanchor file="md_vendor_phpunit_php-timer_ChangeLog" title="Changed">autotoc_md184</docanchor>
    <docanchor file="md_vendor_phpunit_php-timer_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/diff/compare/2.0.0...2.1.0&quot;&gt;2.1.0&lt;/a&gt; - 2019-02-20">autotoc_md185</docanchor>
    <docanchor file="md_vendor_phpunit_php-timer_ChangeLog" title="Changed">autotoc_md186</docanchor>
    <docanchor file="md_vendor_phpunit_php-timer_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/diff/compare/1.0.9...2.0.0&quot;&gt;2.0.0&lt;/a&gt; - 2018-02-01">autotoc_md187</docanchor>
    <docanchor file="md_vendor_phpunit_php-timer_ChangeLog" title="Changed">autotoc_md188</docanchor>
    <docanchor file="md_vendor_phpunit_php-timer_ChangeLog" title="Removed">autotoc_md189</docanchor>
  </compound>
  <compound kind="page">
    <name>md_vendor_phpunit_php-token-stream_ChangeLog</name>
    <title>Change Log</title>
    <filename>md_vendor_phpunit_php-token-stream_ChangeLog</filename>
    <docanchor file="md_vendor_phpunit_php-token-stream_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/php-token-stream/compare/3.1.0...3.1.1&quot;&gt;3.1.1&lt;/a&gt; - 2019-09-17">autotoc_md196</docanchor>
    <docanchor file="md_vendor_phpunit_php-token-stream_ChangeLog" title="Fixed">autotoc_md197</docanchor>
    <docanchor file="md_vendor_phpunit_php-token-stream_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/php-token-stream/compare/3.0.2...3.1.0&quot;&gt;3.1.0&lt;/a&gt; - 2019-07-25">autotoc_md198</docanchor>
    <docanchor file="md_vendor_phpunit_php-token-stream_ChangeLog" title="Added">autotoc_md199</docanchor>
    <docanchor file="md_vendor_phpunit_php-token-stream_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/php-token-stream/compare/3.0.1...3.0.2&quot;&gt;3.0.2&lt;/a&gt; - 2019-07-08">autotoc_md200</docanchor>
    <docanchor file="md_vendor_phpunit_php-token-stream_ChangeLog" title="Changed">autotoc_md201</docanchor>
    <docanchor file="md_vendor_phpunit_php-token-stream_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/php-token-stream/compare/3.0.0...3.0.1&quot;&gt;3.0.1&lt;/a&gt; - 2018-10-30">autotoc_md202</docanchor>
    <docanchor file="md_vendor_phpunit_php-token-stream_ChangeLog" title="Fixed">autotoc_md203</docanchor>
    <docanchor file="md_vendor_phpunit_php-token-stream_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/php-token-stream/compare/2.0...3.0.0&quot;&gt;3.0.0&lt;/a&gt; - 2018-02-01">autotoc_md204</docanchor>
    <docanchor file="md_vendor_phpunit_php-token-stream_ChangeLog" title="Removed">autotoc_md205</docanchor>
    <docanchor file="md_vendor_phpunit_php-token-stream_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/php-token-stream/compare/2.0.1...2.0.2&quot;&gt;2.0.2&lt;/a&gt; - 2017-11-27">autotoc_md206</docanchor>
    <docanchor file="md_vendor_phpunit_php-token-stream_ChangeLog" title="Fixed">autotoc_md207</docanchor>
    <docanchor file="md_vendor_phpunit_php-token-stream_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/php-token-stream/compare/2.0.0...2.0.1&quot;&gt;2.0.1&lt;/a&gt; - 2017-08-20">autotoc_md208</docanchor>
    <docanchor file="md_vendor_phpunit_php-token-stream_ChangeLog" title="Fixed">autotoc_md209</docanchor>
    <docanchor file="md_vendor_phpunit_php-token-stream_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/php-token-stream/compare/1.4.11...2.0.0&quot;&gt;2.0.0&lt;/a&gt; - 2017-08-03">autotoc_md210</docanchor>
  </compound>
  <compound kind="page">
    <name>md_vendor_phpunit_phpunit_ChangeLog-8.5</name>
    <title>Changes in PHPUnit 8.5</title>
    <filename>md_vendor_phpunit_phpunit_ChangeLog-8_85</filename>
    <docanchor file="md_vendor_phpunit_phpunit_ChangeLog-8_85" title="&lt;a href=&quot;https://github.com/sebastianbergmann/phpunit/compare/8.5.8...8.5&quot;&gt;8.5.9&lt;/a&gt; - 2020-MM-DD">autotoc_md214</docanchor>
    <docanchor file="md_vendor_phpunit_phpunit_ChangeLog-8_85" title="Fixed">autotoc_md215</docanchor>
    <docanchor file="md_vendor_phpunit_phpunit_ChangeLog-8_85" title="&lt;a href=&quot;https://github.com/sebastianbergmann/phpunit/compare/8.5.7...8.5.8&quot;&gt;8.5.8&lt;/a&gt; - 2020-06-22">autotoc_md216</docanchor>
    <docanchor file="md_vendor_phpunit_phpunit_ChangeLog-8_85" title="Fixed">autotoc_md217</docanchor>
    <docanchor file="md_vendor_phpunit_phpunit_ChangeLog-8_85" title="&lt;a href=&quot;https://github.com/sebastianbergmann/phpunit/compare/8.5.6...8.5.7&quot;&gt;8.5.7&lt;/a&gt; - 2020-06-21">autotoc_md218</docanchor>
    <docanchor file="md_vendor_phpunit_phpunit_ChangeLog-8_85" title="Fixed">autotoc_md219</docanchor>
    <docanchor file="md_vendor_phpunit_phpunit_ChangeLog-8_85" title="&lt;a href=&quot;https://github.com/sebastianbergmann/phpunit/compare/8.5.5...8.5.6&quot;&gt;8.5.6&lt;/a&gt; - 2020-06-15">autotoc_md220</docanchor>
    <docanchor file="md_vendor_phpunit_phpunit_ChangeLog-8_85" title="Fixed">autotoc_md221</docanchor>
    <docanchor file="md_vendor_phpunit_phpunit_ChangeLog-8_85" title="&lt;a href=&quot;https://github.com/sebastianbergmann/phpunit/compare/8.5.4...8.5.5&quot;&gt;8.5.5&lt;/a&gt; - 2020-05-22">autotoc_md222</docanchor>
    <docanchor file="md_vendor_phpunit_phpunit_ChangeLog-8_85" title="Fixed">autotoc_md223</docanchor>
    <docanchor file="md_vendor_phpunit_phpunit_ChangeLog-8_85" title="&lt;a href=&quot;https://github.com/sebastianbergmann/phpunit/compare/8.5.3...8.5.4&quot;&gt;8.5.4&lt;/a&gt; - 2020-04-23">autotoc_md224</docanchor>
    <docanchor file="md_vendor_phpunit_phpunit_ChangeLog-8_85" title="Changed">autotoc_md225</docanchor>
    <docanchor file="md_vendor_phpunit_phpunit_ChangeLog-8_85" title="&lt;a href=&quot;https://github.com/sebastianbergmann/phpunit/compare/8.5.2...8.5.3&quot;&gt;8.5.3&lt;/a&gt; - 2020-03-31">autotoc_md226</docanchor>
    <docanchor file="md_vendor_phpunit_phpunit_ChangeLog-8_85" title="Fixed">autotoc_md227</docanchor>
    <docanchor file="md_vendor_phpunit_phpunit_ChangeLog-8_85" title="&lt;a href=&quot;https://github.com/sebastianbergmann/phpunit/compare/8.5.1...8.5.2&quot;&gt;8.5.2&lt;/a&gt; - 2020-01-08">autotoc_md228</docanchor>
    <docanchor file="md_vendor_phpunit_phpunit_ChangeLog-8_85" title="Removed">autotoc_md229</docanchor>
    <docanchor file="md_vendor_phpunit_phpunit_ChangeLog-8_85" title="&lt;a href=&quot;https://github.com/sebastianbergmann/phpunit/compare/8.5.0...8.5.1&quot;&gt;8.5.1&lt;/a&gt; - 2019-12-25">autotoc_md230</docanchor>
    <docanchor file="md_vendor_phpunit_phpunit_ChangeLog-8_85" title="Changed">autotoc_md231</docanchor>
    <docanchor file="md_vendor_phpunit_phpunit_ChangeLog-8_85" title="Fixed">autotoc_md232</docanchor>
    <docanchor file="md_vendor_phpunit_phpunit_ChangeLog-8_85" title="&lt;a href=&quot;https://github.com/sebastianbergmann/phpunit/compare/8.4.3...8.5.0&quot;&gt;8.5.0&lt;/a&gt; - 2019-12-06">autotoc_md233</docanchor>
    <docanchor file="md_vendor_phpunit_phpunit_ChangeLog-8_85" title="Added">autotoc_md234</docanchor>
    <docanchor file="md_vendor_phpunit_phpunit_ChangeLog-8_85" title="Changed">autotoc_md235</docanchor>
    <docanchor file="md_vendor_phpunit_phpunit_ChangeLog-8_85" title="Fixed">autotoc_md236</docanchor>
  </compound>
  <compound kind="page">
    <name>md_vendor_sebastian_code-unit-reverse-lookup_ChangeLog</name>
    <title>Change Log</title>
    <filename>md_vendor_sebastian_code-unit-reverse-lookup_ChangeLog</filename>
    <docanchor file="md_vendor_sebastian_code-unit-reverse-lookup_ChangeLog" title="1.0.0 - 2016-02-13">autotoc_md248</docanchor>
    <docanchor file="md_vendor_sebastian_code-unit-reverse-lookup_ChangeLog" title="Added">autotoc_md249</docanchor>
  </compound>
  <compound kind="page">
    <name>md_vendor_sebastian_comparator_ChangeLog</name>
    <title>ChangeLog</title>
    <filename>md_vendor_sebastian_comparator_ChangeLog</filename>
    <docanchor file="md_vendor_sebastian_comparator_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/comparator/compare/3.0.1...3.0.2&quot;&gt;3.0.2&lt;/a&gt; - 2018-07-12">autotoc_md253</docanchor>
    <docanchor file="md_vendor_sebastian_comparator_ChangeLog" title="Changed">autotoc_md254</docanchor>
    <docanchor file="md_vendor_sebastian_comparator_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/comparator/compare/3.0.0...3.0.1&quot;&gt;3.0.1&lt;/a&gt; - 2018-06-14">autotoc_md255</docanchor>
    <docanchor file="md_vendor_sebastian_comparator_ChangeLog" title="Fixed">autotoc_md256</docanchor>
    <docanchor file="md_vendor_sebastian_comparator_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/comparator/compare/2.1.3...3.0.0&quot;&gt;3.0.0&lt;/a&gt; - 2018-04-18">autotoc_md257</docanchor>
    <docanchor file="md_vendor_sebastian_comparator_ChangeLog" title="Fixed">autotoc_md258</docanchor>
    <docanchor file="md_vendor_sebastian_comparator_ChangeLog" title="Removed">autotoc_md259</docanchor>
    <docanchor file="md_vendor_sebastian_comparator_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/comparator/compare/2.1.2...2.1.3&quot;&gt;2.1.3&lt;/a&gt; - 2018-02-01">autotoc_md260</docanchor>
    <docanchor file="md_vendor_sebastian_comparator_ChangeLog" title="Changed">autotoc_md261</docanchor>
    <docanchor file="md_vendor_sebastian_comparator_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/comparator/compare/2.1.1...2.1.2&quot;&gt;2.1.2&lt;/a&gt; - 2018-01-12">autotoc_md262</docanchor>
    <docanchor file="md_vendor_sebastian_comparator_ChangeLog" title="Fixed">autotoc_md263</docanchor>
    <docanchor file="md_vendor_sebastian_comparator_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/comparator/compare/2.1.0...2.1.1&quot;&gt;2.1.1&lt;/a&gt; - 2017-12-22">autotoc_md264</docanchor>
    <docanchor file="md_vendor_sebastian_comparator_ChangeLog" title="Fixed">autotoc_md265</docanchor>
    <docanchor file="md_vendor_sebastian_comparator_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/comparator/compare/2.0.2...2.1.0&quot;&gt;2.1.0&lt;/a&gt; - 2017-11-03">autotoc_md266</docanchor>
    <docanchor file="md_vendor_sebastian_comparator_ChangeLog" title="Added">autotoc_md267</docanchor>
  </compound>
  <compound kind="page">
    <name>md_vendor_sebastian_diff_ChangeLog</name>
    <title>ChangeLog</title>
    <filename>md_vendor_sebastian_diff_ChangeLog</filename>
    <docanchor file="md_vendor_sebastian_diff_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/diff/compare/3.0.1...3.0.2&quot;&gt;3.0.2&lt;/a&gt; - 2019-02-04">autotoc_md272</docanchor>
    <docanchor file="md_vendor_sebastian_diff_ChangeLog" title="Changed">autotoc_md273</docanchor>
    <docanchor file="md_vendor_sebastian_diff_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/diff/compare/3.0.0...3.0.1&quot;&gt;3.0.1&lt;/a&gt; - 2018-06-10">autotoc_md274</docanchor>
    <docanchor file="md_vendor_sebastian_diff_ChangeLog" title="Fixed">autotoc_md275</docanchor>
    <docanchor file="md_vendor_sebastian_diff_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/diff/compare/2.0...3.0.0&quot;&gt;3.0.0&lt;/a&gt; - 2018-02-01">autotoc_md276</docanchor>
    <docanchor file="md_vendor_sebastian_diff_ChangeLog" title="Changed">autotoc_md277</docanchor>
    <docanchor file="md_vendor_sebastian_diff_ChangeLog" title="Removed">autotoc_md278</docanchor>
    <docanchor file="md_vendor_sebastian_diff_ChangeLog" title="Fixed">autotoc_md279</docanchor>
    <docanchor file="md_vendor_sebastian_diff_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/diff/compare/c341c98ce083db77f896a0aa64f5ee7652915970...2.0.1&quot;&gt;2.0.1&lt;/a&gt; - 2017-08-03">autotoc_md280</docanchor>
    <docanchor file="md_vendor_sebastian_diff_ChangeLog" title="Fixed">autotoc_md281</docanchor>
    <docanchor file="md_vendor_sebastian_diff_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/diff/compare/1.4...c341c98ce083db77f896a0aa64f5ee7652915970&quot;&gt;2.0.0&lt;/a&gt; - 2017-07-11 [YANKED]">autotoc_md282</docanchor>
    <docanchor file="md_vendor_sebastian_diff_ChangeLog" title="Added">autotoc_md283</docanchor>
    <docanchor file="md_vendor_sebastian_diff_ChangeLog" title="Removed">autotoc_md284</docanchor>
  </compound>
  <compound kind="page">
    <name>md_vendor_sebastian_environment_ChangeLog</name>
    <title>Changes in sebastianbergmann/environment</title>
    <filename>md_vendor_sebastian_environment_ChangeLog</filename>
    <docanchor file="md_vendor_sebastian_environment_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/phpunit/compare/4.2.2...4.2.3&quot;&gt;4.2.3&lt;/a&gt; - 2019-11-20">autotoc_md294</docanchor>
    <docanchor file="md_vendor_sebastian_environment_ChangeLog" title="Changed">autotoc_md295</docanchor>
    <docanchor file="md_vendor_sebastian_environment_ChangeLog" title="Fixed">autotoc_md296</docanchor>
    <docanchor file="md_vendor_sebastian_environment_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/phpunit/compare/4.2.1...4.2.2&quot;&gt;4.2.2&lt;/a&gt; - 2019-05-05">autotoc_md297</docanchor>
    <docanchor file="md_vendor_sebastian_environment_ChangeLog" title="Fixed">autotoc_md298</docanchor>
    <docanchor file="md_vendor_sebastian_environment_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/phpunit/compare/4.2.0...4.2.1&quot;&gt;4.2.1&lt;/a&gt; - 2019-04-25">autotoc_md299</docanchor>
    <docanchor file="md_vendor_sebastian_environment_ChangeLog" title="Fixed">autotoc_md300</docanchor>
    <docanchor file="md_vendor_sebastian_environment_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/phpunit/compare/4.1.0...4.2.0&quot;&gt;4.2.0&lt;/a&gt; - 2019-04-25">autotoc_md301</docanchor>
    <docanchor file="md_vendor_sebastian_environment_ChangeLog" title="Added">autotoc_md302</docanchor>
    <docanchor file="md_vendor_sebastian_environment_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/phpunit/compare/4.0.2...4.1.0&quot;&gt;4.1.0&lt;/a&gt; - 2019-02-01">autotoc_md303</docanchor>
    <docanchor file="md_vendor_sebastian_environment_ChangeLog" title="Added">autotoc_md304</docanchor>
    <docanchor file="md_vendor_sebastian_environment_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/phpunit/compare/4.0.1...4.0.2&quot;&gt;4.0.2&lt;/a&gt; - 2019-01-28">autotoc_md305</docanchor>
    <docanchor file="md_vendor_sebastian_environment_ChangeLog" title="Fixed">autotoc_md306</docanchor>
    <docanchor file="md_vendor_sebastian_environment_ChangeLog" title="Removed">autotoc_md307</docanchor>
    <docanchor file="md_vendor_sebastian_environment_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/phpunit/compare/66691f8e2dc4641909166b275a9a4f45c0e89092...4.0.1&quot;&gt;4.0.1&lt;/a&gt; - 2018-11-25">autotoc_md308</docanchor>
    <docanchor file="md_vendor_sebastian_environment_ChangeLog" title="Fixed">autotoc_md309</docanchor>
    <docanchor file="md_vendor_sebastian_environment_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/phpunit/compare/3.1.0...66691f8e2dc4641909166b275a9a4f45c0e89092&quot;&gt;4.0.0&lt;/a&gt; - 2018-10-23 [YANKED]">autotoc_md310</docanchor>
    <docanchor file="md_vendor_sebastian_environment_ChangeLog" title="Fixed">autotoc_md311</docanchor>
    <docanchor file="md_vendor_sebastian_environment_ChangeLog" title="Removed">autotoc_md312</docanchor>
    <docanchor file="md_vendor_sebastian_environment_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/phpunit/compare/3.0...3.1.0&quot;&gt;3.1.0&lt;/a&gt; - 2017-07-01">autotoc_md313</docanchor>
    <docanchor file="md_vendor_sebastian_environment_ChangeLog" title="Added">autotoc_md314</docanchor>
    <docanchor file="md_vendor_sebastian_environment_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/phpunit/compare/3.0.3...3.0.4&quot;&gt;3.0.4&lt;/a&gt; - 2017-06-20">autotoc_md315</docanchor>
    <docanchor file="md_vendor_sebastian_environment_ChangeLog" title="Fixed">autotoc_md316</docanchor>
    <docanchor file="md_vendor_sebastian_environment_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/phpunit/compare/3.0.2...3.0.3&quot;&gt;3.0.3&lt;/a&gt; - 2017-05-18">autotoc_md317</docanchor>
    <docanchor file="md_vendor_sebastian_environment_ChangeLog" title="Fixed">autotoc_md318</docanchor>
    <docanchor file="md_vendor_sebastian_environment_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/phpunit/compare/3.0.1...3.0.2&quot;&gt;3.0.2&lt;/a&gt; - 2017-04-21">autotoc_md319</docanchor>
    <docanchor file="md_vendor_sebastian_environment_ChangeLog" title="Fixed">autotoc_md320</docanchor>
    <docanchor file="md_vendor_sebastian_environment_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/phpunit/compare/3.0.0...3.0.1&quot;&gt;3.0.1&lt;/a&gt; - 2017-04-21">autotoc_md321</docanchor>
    <docanchor file="md_vendor_sebastian_environment_ChangeLog" title="Fixed">autotoc_md322</docanchor>
    <docanchor file="md_vendor_sebastian_environment_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/phpunit/compare/2.0...3.0.0&quot;&gt;3.0.0&lt;/a&gt; - 2017-04-21">autotoc_md323</docanchor>
    <docanchor file="md_vendor_sebastian_environment_ChangeLog" title="Added">autotoc_md324</docanchor>
    <docanchor file="md_vendor_sebastian_environment_ChangeLog" title="Removed">autotoc_md325</docanchor>
  </compound>
  <compound kind="page">
    <name>md_vendor_sebastian_exporter_ChangeLog</name>
    <title>ChangeLog</title>
    <filename>md_vendor_sebastian_exporter_ChangeLog</filename>
    <docanchor file="md_vendor_sebastian_exporter_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/exporter/compare/3.1.1...3.1.2&quot;&gt;3.1.2&lt;/a&gt; - 2019-09-14">autotoc_md329</docanchor>
    <docanchor file="md_vendor_sebastian_exporter_ChangeLog" title="Fixed">autotoc_md330</docanchor>
    <docanchor file="md_vendor_sebastian_exporter_ChangeLog" title="Removed">autotoc_md331</docanchor>
  </compound>
  <compound kind="page">
    <name>md_vendor_sebastian_global-state_ChangeLog</name>
    <title>Changes in sebastian/global-state</title>
    <filename>md_vendor_sebastian_global-state_ChangeLog</filename>
    <docanchor file="md_vendor_sebastian_global-state_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/phpunit/compare/2.0.0...3.0.0&quot;&gt;3.0.0&lt;/a&gt; - 2019-02-01">autotoc_md336</docanchor>
    <docanchor file="md_vendor_sebastian_global-state_ChangeLog" title="Changed">autotoc_md337</docanchor>
    <docanchor file="md_vendor_sebastian_global-state_ChangeLog" title="Removed">autotoc_md338</docanchor>
  </compound>
  <compound kind="page">
    <name>md_vendor_sebastian_object-enumerator_ChangeLog</name>
    <title>Change Log</title>
    <filename>md_vendor_sebastian_object-enumerator_ChangeLog</filename>
    <docanchor file="md_vendor_sebastian_object-enumerator_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/object-enumerator/compare/3.0.2...3.0.3&quot;&gt;3.0.3&lt;/a&gt; - 2017-08-03">autotoc_md342</docanchor>
    <docanchor file="md_vendor_sebastian_object-enumerator_ChangeLog" title="Changed">autotoc_md343</docanchor>
    <docanchor file="md_vendor_sebastian_object-enumerator_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/object-enumerator/compare/3.0.1...3.0.2&quot;&gt;3.0.2&lt;/a&gt; - 2017-03-12">autotoc_md344</docanchor>
    <docanchor file="md_vendor_sebastian_object-enumerator_ChangeLog" title="Changed">autotoc_md345</docanchor>
    <docanchor file="md_vendor_sebastian_object-enumerator_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/object-enumerator/compare/3.0.0...3.0.1&quot;&gt;3.0.1&lt;/a&gt; - 2017-03-12">autotoc_md346</docanchor>
    <docanchor file="md_vendor_sebastian_object-enumerator_ChangeLog" title="Fixed">autotoc_md347</docanchor>
    <docanchor file="md_vendor_sebastian_object-enumerator_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/object-enumerator/compare/2.0...3.0.0&quot;&gt;3.0.0&lt;/a&gt; - 2017-03-03">autotoc_md348</docanchor>
    <docanchor file="md_vendor_sebastian_object-enumerator_ChangeLog" title="Removed">autotoc_md349</docanchor>
    <docanchor file="md_vendor_sebastian_object-enumerator_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/object-enumerator/compare/2.0.0...2.0.1&quot;&gt;2.0.1&lt;/a&gt; - 2017-02-18">autotoc_md350</docanchor>
    <docanchor file="md_vendor_sebastian_object-enumerator_ChangeLog" title="Fixed">autotoc_md351</docanchor>
    <docanchor file="md_vendor_sebastian_object-enumerator_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/object-enumerator/compare/1.0...2.0.0&quot;&gt;2.0.0&lt;/a&gt; - 2016-11-19">autotoc_md352</docanchor>
    <docanchor file="md_vendor_sebastian_object-enumerator_ChangeLog" title="Changed">autotoc_md353</docanchor>
    <docanchor file="md_vendor_sebastian_object-enumerator_ChangeLog" title="1.0.0 - 2016-02-04">autotoc_md354</docanchor>
    <docanchor file="md_vendor_sebastian_object-enumerator_ChangeLog" title="Added">autotoc_md355</docanchor>
  </compound>
  <compound kind="page">
    <name>md_vendor_sebastian_object-reflector_ChangeLog</name>
    <title>Change Log</title>
    <filename>md_vendor_sebastian_object-reflector_ChangeLog</filename>
    <docanchor file="md_vendor_sebastian_object-reflector_ChangeLog" title="1.1.1 - 2017-03-29">autotoc_md359</docanchor>
    <docanchor file="md_vendor_sebastian_object-reflector_ChangeLog" title="1.1.0 - 2017-03-16">autotoc_md360</docanchor>
    <docanchor file="md_vendor_sebastian_object-reflector_ChangeLog" title="Changed">autotoc_md361</docanchor>
    <docanchor file="md_vendor_sebastian_object-reflector_ChangeLog" title="1.0.0 - 2017-03-12">autotoc_md362</docanchor>
  </compound>
  <compound kind="page">
    <name>md_vendor_sebastian_resource-operations_ChangeLog</name>
    <title>ChangeLog</title>
    <filename>md_vendor_sebastian_resource-operations_ChangeLog</filename>
    <docanchor file="md_vendor_sebastian_resource-operations_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/comparator/compare/2.0.0...2.0.1&quot;&gt;2.0.1&lt;/a&gt; - 2018-10-04">autotoc_md368</docanchor>
    <docanchor file="md_vendor_sebastian_resource-operations_ChangeLog" title="Fixed">autotoc_md369</docanchor>
    <docanchor file="md_vendor_sebastian_resource-operations_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/comparator/compare/1.0.0...2.0.0&quot;&gt;2.0.0&lt;/a&gt; - 2018-09-27">autotoc_md370</docanchor>
    <docanchor file="md_vendor_sebastian_resource-operations_ChangeLog" title="Changed">autotoc_md371</docanchor>
    <docanchor file="md_vendor_sebastian_resource-operations_ChangeLog" title="Removed">autotoc_md372</docanchor>
    <docanchor file="md_vendor_sebastian_resource-operations_ChangeLog" title="1.0.0 - 2015-07-28">autotoc_md373</docanchor>
  </compound>
  <compound kind="page">
    <name>md_vendor_sebastian_type_ChangeLog</name>
    <title>ChangeLog</title>
    <filename>md_vendor_sebastian_type_ChangeLog</filename>
    <docanchor file="md_vendor_sebastian_type_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/type/compare/1.1.2...1.1.3&quot;&gt;1.1.3&lt;/a&gt; - 2019-07-02">autotoc_md377</docanchor>
    <docanchor file="md_vendor_sebastian_type_ChangeLog" title="Fixed">autotoc_md378</docanchor>
    <docanchor file="md_vendor_sebastian_type_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/type/compare/1.1.1...1.1.2&quot;&gt;1.1.2&lt;/a&gt; - 2019-06-19">autotoc_md379</docanchor>
    <docanchor file="md_vendor_sebastian_type_ChangeLog" title="Fixed">autotoc_md380</docanchor>
    <docanchor file="md_vendor_sebastian_type_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/type/compare/1.1.0...1.1.1&quot;&gt;1.1.1&lt;/a&gt; - 2019-06-08">autotoc_md381</docanchor>
    <docanchor file="md_vendor_sebastian_type_ChangeLog" title="Fixed">autotoc_md382</docanchor>
    <docanchor file="md_vendor_sebastian_type_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/type/compare/1.0.0...1.1.0&quot;&gt;1.1.0&lt;/a&gt; - 2019-06-07">autotoc_md383</docanchor>
    <docanchor file="md_vendor_sebastian_type_ChangeLog" title="Added">autotoc_md384</docanchor>
    <docanchor file="md_vendor_sebastian_type_ChangeLog" title="&lt;a href=&quot;https://github.com/sebastianbergmann/type/compare/ff74aa41746bd8d10e931843ebf37d42da513ede...1.0.0&quot;&gt;1.0.0&lt;/a&gt; - 2019-06-06">autotoc_md385</docanchor>
  </compound>
  <compound kind="page">
    <name>md_vendor_theseer_tokenizer_CHANGELOG</name>
    <title>Changelog</title>
    <filename>md_vendor_theseer_tokenizer_CHANGELOG</filename>
    <docanchor file="md_vendor_theseer_tokenizer_CHANGELOG" title="[1.2.0] - 2020-07-13">autotoc_md394</docanchor>
    <docanchor file="md_vendor_theseer_tokenizer_CHANGELOG" title="Fixed">autotoc_md395</docanchor>
    <docanchor file="md_vendor_theseer_tokenizer_CHANGELOG" title="Changed">autotoc_md396</docanchor>
    <docanchor file="md_vendor_theseer_tokenizer_CHANGELOG" title="&lt;a href=&quot;https://github.com/theseer/tokenizer/compare/1.1.2...1.1.3&quot;&gt;1.1.3&lt;/a&gt; - 2019-06-14">autotoc_md397</docanchor>
    <docanchor file="md_vendor_theseer_tokenizer_CHANGELOG" title="Changed">autotoc_md398</docanchor>
    <docanchor file="md_vendor_theseer_tokenizer_CHANGELOG" title="Fixed">autotoc_md399</docanchor>
    <docanchor file="md_vendor_theseer_tokenizer_CHANGELOG" title="&lt;a href=&quot;https://github.com/theseer/tokenizer/compare/1.1.1...1.1.2&quot;&gt;1.1.2&lt;/a&gt; - 2019-04-04">autotoc_md400</docanchor>
    <docanchor file="md_vendor_theseer_tokenizer_CHANGELOG" title="Changed">autotoc_md401</docanchor>
    <docanchor file="md_vendor_theseer_tokenizer_CHANGELOG" title="&lt;a href=&quot;https://github.com/theseer/tokenizer/compare/1.1.0...1.1.1&quot;&gt;1.1.1&lt;/a&gt; - 2019-04-03">autotoc_md402</docanchor>
    <docanchor file="md_vendor_theseer_tokenizer_CHANGELOG" title="Fixed">autotoc_md403</docanchor>
    <docanchor file="md_vendor_theseer_tokenizer_CHANGELOG" title="Changed">autotoc_md404</docanchor>
    <docanchor file="md_vendor_theseer_tokenizer_CHANGELOG" title="&lt;a href=&quot;https://github.com/theseer/tokenizer/compare/1.0.0...1.1.0&quot;&gt;1.1.0&lt;/a&gt; - 2017-04-07">autotoc_md405</docanchor>
    <docanchor file="md_vendor_theseer_tokenizer_CHANGELOG" title="Added">autotoc_md406</docanchor>
    <docanchor file="md_vendor_theseer_tokenizer_CHANGELOG" title="&lt;a href=&quot;https://github.com/theseer/tokenizer/compare/b2493e57de80c1b7414219b28503fa5c6b4d0a98...1.0.0&quot;&gt;1.0.0&lt;/a&gt; - 2017-04-05">autotoc_md407</docanchor>
  </compound>
  <compound kind="page">
    <name>md_vendor_webmozart_assert_CHANGELOG</name>
    <title>Changelog</title>
    <filename>md_vendor_webmozart_assert_CHANGELOG</filename>
    <docanchor file="md_vendor_webmozart_assert_CHANGELOG" title="UNRELEASED">autotoc_md411</docanchor>
    <docanchor file="md_vendor_webmozart_assert_CHANGELOG" title="1.9.1">autotoc_md412</docanchor>
    <docanchor file="md_vendor_webmozart_assert_CHANGELOG" title="Fixed">autotoc_md413</docanchor>
    <docanchor file="md_vendor_webmozart_assert_CHANGELOG" title="1.9.0">autotoc_md414</docanchor>
    <docanchor file="md_vendor_webmozart_assert_CHANGELOG" title="Changed">autotoc_md415</docanchor>
    <docanchor file="md_vendor_webmozart_assert_CHANGELOG" title="1.8.0">autotoc_md416</docanchor>
    <docanchor file="md_vendor_webmozart_assert_CHANGELOG" title="Added">autotoc_md417</docanchor>
    <docanchor file="md_vendor_webmozart_assert_CHANGELOG" title="Fixed">autotoc_md418</docanchor>
    <docanchor file="md_vendor_webmozart_assert_CHANGELOG" title="1.7.0 (2020-02-14)">autotoc_md419</docanchor>
    <docanchor file="md_vendor_webmozart_assert_CHANGELOG" title="Added">autotoc_md420</docanchor>
    <docanchor file="md_vendor_webmozart_assert_CHANGELOG" title="1.6.0 (2019-11-24)">autotoc_md421</docanchor>
    <docanchor file="md_vendor_webmozart_assert_CHANGELOG" title="Added">autotoc_md422</docanchor>
    <docanchor file="md_vendor_webmozart_assert_CHANGELOG" title="Fixed">autotoc_md423</docanchor>
    <docanchor file="md_vendor_webmozart_assert_CHANGELOG" title="Changed">autotoc_md424</docanchor>
    <docanchor file="md_vendor_webmozart_assert_CHANGELOG" title="1.5.0 (2019-08-24)">autotoc_md425</docanchor>
    <docanchor file="md_vendor_webmozart_assert_CHANGELOG" title="Added">autotoc_md426</docanchor>
    <docanchor file="md_vendor_webmozart_assert_CHANGELOG" title="Fixed">autotoc_md427</docanchor>
    <docanchor file="md_vendor_webmozart_assert_CHANGELOG" title="Changed">autotoc_md428</docanchor>
    <docanchor file="md_vendor_webmozart_assert_CHANGELOG" title="Deprecation">autotoc_md429</docanchor>
    <docanchor file="md_vendor_webmozart_assert_CHANGELOG" title="1.4.0 (2018-12-25)">autotoc_md430</docanchor>
    <docanchor file="md_vendor_webmozart_assert_CHANGELOG" title="Added">autotoc_md431</docanchor>
    <docanchor file="md_vendor_webmozart_assert_CHANGELOG" title="Fixed">autotoc_md432</docanchor>
    <docanchor file="md_vendor_webmozart_assert_CHANGELOG" title="1.3.0 (2018-01-29)">autotoc_md433</docanchor>
    <docanchor file="md_vendor_webmozart_assert_CHANGELOG" title="Added">autotoc_md434</docanchor>
    <docanchor file="md_vendor_webmozart_assert_CHANGELOG" title="Fixed">autotoc_md435</docanchor>
    <docanchor file="md_vendor_webmozart_assert_CHANGELOG" title="Deprecation">autotoc_md436</docanchor>
    <docanchor file="md_vendor_webmozart_assert_CHANGELOG" title="1.2.0 (2016-11-23)">autotoc_md437</docanchor>
    <docanchor file="md_vendor_webmozart_assert_CHANGELOG" title="1.1.0 (2016-08-09)">autotoc_md438</docanchor>
    <docanchor file="md_vendor_webmozart_assert_CHANGELOG" title="1.0.2 (2015-08-24)">autotoc_md439</docanchor>
    <docanchor file="md_vendor_webmozart_assert_CHANGELOG" title="1.0.1 (2015-05-12)">autotoc_md440</docanchor>
    <docanchor file="md_vendor_webmozart_assert_CHANGELOG" title="1.0.0 (2015-05-12)">autotoc_md441</docanchor>
    <docanchor file="md_vendor_webmozart_assert_CHANGELOG" title="1.0.0-beta (2015-03-19)">autotoc_md442</docanchor>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>&lt;a href=&quot;https://getdkan.github.io/file-fetcher/&quot;&gt;file-fetcher&lt;/a&gt;</title>
    <filename>index</filename>
  </compound>
</tagfile>
